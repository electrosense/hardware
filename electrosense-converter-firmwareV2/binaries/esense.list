
build/esense.elf:     file format elf32-littlearm


Disassembly of section .text:

08002160 <Reset_Handler>:
 8002160:	b672      	cpsid	i
 8002162:	4826      	ldr	r0, [pc, #152]	; (80021fc <endfiniloop+0x6>)
 8002164:	f380 8809 	msr	PSP, r0
 8002168:	4825      	ldr	r0, [pc, #148]	; (8002200 <endfiniloop+0xa>)
 800216a:	f64e 5108 	movw	r1, #60680	; 0xed08
 800216e:	f2ce 0100 	movt	r1, #57344	; 0xe000
 8002172:	6008      	str	r0, [r1, #0]
 8002174:	2002      	movs	r0, #2
 8002176:	f380 8814 	msr	CONTROL, r0
 800217a:	f3bf 8f6f 	isb	sy
 800217e:	f009 f82d 	bl	800b1dc <__core_init>
 8002182:	f009 f85b 	bl	800b23c <__early_init>
 8002186:	f04f 3055 	mov.w	r0, #1431655765	; 0x55555555
 800218a:	491e      	ldr	r1, [pc, #120]	; (8002204 <endfiniloop+0xe>)
 800218c:	4a1e      	ldr	r2, [pc, #120]	; (8002208 <endfiniloop+0x12>)

0800218e <msloop>:
 800218e:	4291      	cmp	r1, r2
 8002190:	bf3c      	itt	cc
 8002192:	f841 0b04 	strcc.w	r0, [r1], #4
 8002196:	e7fa      	bcc.n	800218e <msloop>
 8002198:	491c      	ldr	r1, [pc, #112]	; (800220c <endfiniloop+0x16>)
 800219a:	4a18      	ldr	r2, [pc, #96]	; (80021fc <endfiniloop+0x6>)

0800219c <psloop>:
 800219c:	4291      	cmp	r1, r2
 800219e:	bf3c      	itt	cc
 80021a0:	f841 0b04 	strcc.w	r0, [r1], #4
 80021a4:	e7fa      	bcc.n	800219c <psloop>
 80021a6:	491a      	ldr	r1, [pc, #104]	; (8002210 <endfiniloop+0x1a>)
 80021a8:	4a1a      	ldr	r2, [pc, #104]	; (8002214 <endfiniloop+0x1e>)
 80021aa:	4b1b      	ldr	r3, [pc, #108]	; (8002218 <endfiniloop+0x22>)

080021ac <dloop>:
 80021ac:	429a      	cmp	r2, r3
 80021ae:	bf3e      	ittt	cc
 80021b0:	f851 0b04 	ldrcc.w	r0, [r1], #4
 80021b4:	f842 0b04 	strcc.w	r0, [r2], #4
 80021b8:	e7f8      	bcc.n	80021ac <dloop>
 80021ba:	2000      	movs	r0, #0
 80021bc:	4917      	ldr	r1, [pc, #92]	; (800221c <endfiniloop+0x26>)
 80021be:	4a18      	ldr	r2, [pc, #96]	; (8002220 <endfiniloop+0x2a>)

080021c0 <bloop>:
 80021c0:	4291      	cmp	r1, r2
 80021c2:	bf3c      	itt	cc
 80021c4:	f841 0b04 	strcc.w	r0, [r1], #4
 80021c8:	e7fa      	bcc.n	80021c0 <bloop>
 80021ca:	f009 f80b 	bl	800b1e4 <__init_ram_areas>
 80021ce:	f009 f806 	bl	800b1de <__late_init>
 80021d2:	4c14      	ldr	r4, [pc, #80]	; (8002224 <endfiniloop+0x2e>)
 80021d4:	4d14      	ldr	r5, [pc, #80]	; (8002228 <endfiniloop+0x32>)

080021d6 <initloop>:
 80021d6:	42ac      	cmp	r4, r5
 80021d8:	da03      	bge.n	80021e2 <endinitloop>
 80021da:	f854 1b04 	ldr.w	r1, [r4], #4
 80021de:	4788      	blx	r1
 80021e0:	e7f9      	b.n	80021d6 <initloop>

080021e2 <endinitloop>:
 80021e2:	f009 f86b 	bl	800b2bc <main>
 80021e6:	4c11      	ldr	r4, [pc, #68]	; (800222c <endfiniloop+0x36>)
 80021e8:	4d11      	ldr	r5, [pc, #68]	; (8002230 <endfiniloop+0x3a>)

080021ea <finiloop>:
 80021ea:	42ac      	cmp	r4, r5
 80021ec:	da03      	bge.n	80021f6 <endfiniloop>
 80021ee:	f854 1b04 	ldr.w	r1, [r4], #4
 80021f2:	4788      	blx	r1
 80021f4:	e7f9      	b.n	80021ea <finiloop>

080021f6 <endfiniloop>:
 80021f6:	f008 bff3 	b.w	800b1e0 <__default_exit>
 80021fa:	0000      	.short	0x0000
 80021fc:	20000800 	.word	0x20000800
 8002200:	08002000 	.word	0x08002000
 8002204:	20000000 	.word	0x20000000
 8002208:	20000400 	.word	0x20000400
 800220c:	20000400 	.word	0x20000400
 8002210:	0800cd90 	.word	0x0800cd90
 8002214:	20000800 	.word	0x20000800
 8002218:	20000928 	.word	0x20000928
 800221c:	20000928 	.word	0x20000928
 8002220:	20001650 	.word	0x20001650
 8002224:	08002160 	.word	0x08002160
 8002228:	08002160 	.word	0x08002160
 800222c:	08002160 	.word	0x08002160
 8002230:	08002160 	.word	0x08002160

08002234 <_binary_data_license_bin_start>:
 8002234:	2a2a2a2a 	.word	0x2a2a2a2a
 8002238:	2a2a2a2a 	.word	0x2a2a2a2a
 800223c:	2a2a2a2a 	.word	0x2a2a2a2a
 8002240:	2a2a2a2a 	.word	0x2a2a2a2a
 8002244:	2a2a2a2a 	.word	0x2a2a2a2a
 8002248:	2a2a2a2a 	.word	0x2a2a2a2a
 800224c:	2a2a2a2a 	.word	0x2a2a2a2a
 8002250:	2a2a2a2a 	.word	0x2a2a2a2a
 8002254:	2a2a2a2a 	.word	0x2a2a2a2a
 8002258:	2a2a2a2a 	.word	0x2a2a2a2a
 800225c:	2a2a2a2a 	.word	0x2a2a2a2a
 8002260:	2a2a2a2a 	.word	0x2a2a2a2a
 8002264:	2a2a2a2a 	.word	0x2a2a2a2a
 8002268:	2a2a2a2a 	.word	0x2a2a2a2a
 800226c:	2a2a2a2a 	.word	0x2a2a2a2a
 8002270:	2a2a2a2a 	.word	0x2a2a2a2a
 8002274:	2a2a2a2a 	.word	0x2a2a2a2a
 8002278:	2a2a2a2a 	.word	0x2a2a2a2a
 800227c:	2a2a2a2a 	.word	0x2a2a2a2a
 8002280:	2a2a2a2a 	.word	0x2a2a2a2a
 8002284:	0a0d2a2a 	.word	0x0a0d2a2a
 8002288:	65657246 	.word	0x65657246
 800228c:	534f5452 	.word	0x534f5452
 8002290:	72654b20 	.word	0x72654b20
 8002294:	206c656e 	.word	0x206c656e
 8002298:	2e303156 	.word	0x2e303156
 800229c:	0d302e30 	.word	0x0d302e30
 80022a0:	706f430a 	.word	0x706f430a
 80022a4:	67697279 	.word	0x67697279
 80022a8:	28207468 	.word	0x28207468
 80022ac:	32202943 	.word	0x32202943
 80022b0:	20373130 	.word	0x20373130
 80022b4:	7a616d41 	.word	0x7a616d41
 80022b8:	632e6e6f 	.word	0x632e6e6f
 80022bc:	202c6d6f 	.word	0x202c6d6f
 80022c0:	2e636e49 	.word	0x2e636e49
 80022c4:	20726f20 	.word	0x20726f20
 80022c8:	20737469 	.word	0x20737469
 80022cc:	69666661 	.word	0x69666661
 80022d0:	7461696c 	.word	0x7461696c
 80022d4:	202e7365 	.word	0x202e7365
 80022d8:	6c6c4120 	.word	0x6c6c4120
 80022dc:	67695220 	.word	0x67695220
 80022e0:	20737468 	.word	0x20737468
 80022e4:	65736552 	.word	0x65736552
 80022e8:	64657672 	.word	0x64657672
 80022ec:	0d0a0d2e 	.word	0x0d0a0d2e
 80022f0:	7265500a 	.word	0x7265500a
 80022f4:	7373696d 	.word	0x7373696d
 80022f8:	206e6f69 	.word	0x206e6f69
 80022fc:	68207369 	.word	0x68207369
 8002300:	62657265 	.word	0x62657265
 8002304:	72672079 	.word	0x72672079
 8002308:	65746e61 	.word	0x65746e61
 800230c:	66202c64 	.word	0x66202c64
 8002310:	20656572 	.word	0x20656572
 8002314:	6320666f 	.word	0x6320666f
 8002318:	67726168 	.word	0x67726168
 800231c:	74202c65 	.word	0x74202c65
 8002320:	6e61206f 	.word	0x6e61206f
 8002324:	65702079 	.word	0x65702079
 8002328:	6e6f7372 	.word	0x6e6f7372
 800232c:	74626f20 	.word	0x74626f20
 8002330:	696e6961 	.word	0x696e6961
 8002334:	6120676e 	.word	0x6120676e
 8002338:	706f6320 	.word	0x706f6320
 800233c:	666f2079 	.word	0x666f2079
 8002340:	68740a0d 	.word	0x68740a0d
 8002344:	73207369 	.word	0x73207369
 8002348:	7774666f 	.word	0x7774666f
 800234c:	20657261 	.word	0x20657261
 8002350:	20646e61 	.word	0x20646e61
 8002354:	6f737361 	.word	0x6f737361
 8002358:	74616963 	.word	0x74616963
 800235c:	64206465 	.word	0x64206465
 8002360:	6d75636f 	.word	0x6d75636f
 8002364:	61746e65 	.word	0x61746e65
 8002368:	6e6f6974 	.word	0x6e6f6974
 800236c:	6c696620 	.word	0x6c696620
 8002370:	28207365 	.word	0x28207365
 8002374:	20656874 	.word	0x20656874
 8002378:	666f5322 	.word	0x666f5322
 800237c:	72617774 	.word	0x72617774
 8002380:	2c292265 	.word	0x2c292265
 8002384:	206f7420 	.word	0x206f7420
 8002388:	6c616564 	.word	0x6c616564
 800238c:	0d6e6920 	.word	0x0d6e6920
 8002390:	6568740a 	.word	0x6568740a
 8002394:	666f5320 	.word	0x666f5320
 8002398:	72617774 	.word	0x72617774
 800239c:	69772065 	.word	0x69772065
 80023a0:	756f6874 	.word	0x756f6874
 80023a4:	65722074 	.word	0x65722074
 80023a8:	69727473 	.word	0x69727473
 80023ac:	6f697463 	.word	0x6f697463
 80023b0:	69202c6e 	.word	0x69202c6e
 80023b4:	756c636e 	.word	0x756c636e
 80023b8:	676e6964 	.word	0x676e6964
 80023bc:	74697720 	.word	0x74697720
 80023c0:	74756f68 	.word	0x74756f68
 80023c4:	6d696c20 	.word	0x6d696c20
 80023c8:	74617469 	.word	0x74617469
 80023cc:	206e6f69 	.word	0x206e6f69
 80023d0:	20656874 	.word	0x20656874
 80023d4:	68676972 	.word	0x68676972
 80023d8:	74207374 	.word	0x74207374
 80023dc:	750a0d6f 	.word	0x750a0d6f
 80023e0:	202c6573 	.word	0x202c6573
 80023e4:	79706f63 	.word	0x79706f63
 80023e8:	6f6d202c 	.word	0x6f6d202c
 80023ec:	79666964 	.word	0x79666964
 80023f0:	656d202c 	.word	0x656d202c
 80023f4:	2c656772 	.word	0x2c656772
 80023f8:	62757020 	.word	0x62757020
 80023fc:	6873696c 	.word	0x6873696c
 8002400:	6964202c 	.word	0x6964202c
 8002404:	69727473 	.word	0x69727473
 8002408:	65747562 	.word	0x65747562
 800240c:	7573202c 	.word	0x7573202c
 8002410:	63696c62 	.word	0x63696c62
 8002414:	65736e65 	.word	0x65736e65
 8002418:	6e61202c 	.word	0x6e61202c
 800241c:	726f2f64 	.word	0x726f2f64
 8002420:	6c657320 	.word	0x6c657320
 8002424:	6f63206c 	.word	0x6f63206c
 8002428:	73656970 	.word	0x73656970
 800242c:	0d666f20 	.word	0x0d666f20
 8002430:	6568740a 	.word	0x6568740a
 8002434:	666f5320 	.word	0x666f5320
 8002438:	72617774 	.word	0x72617774
 800243c:	61202c65 	.word	0x61202c65
 8002440:	7420646e 	.word	0x7420646e
 8002444:	6570206f 	.word	0x6570206f
 8002448:	74696d72 	.word	0x74696d72
 800244c:	72657020 	.word	0x72657020
 8002450:	736e6f73 	.word	0x736e6f73
 8002454:	206f7420 	.word	0x206f7420
 8002458:	6d6f6877 	.word	0x6d6f6877
 800245c:	65687420 	.word	0x65687420
 8002460:	666f5320 	.word	0x666f5320
 8002464:	72617774 	.word	0x72617774
 8002468:	73692065 	.word	0x73692065
 800246c:	72756620 	.word	0x72756620
 8002470:	6873696e 	.word	0x6873696e
 8002474:	74206465 	.word	0x74206465
 8002478:	6f64206f 	.word	0x6f64206f
 800247c:	2c6f7320 	.word	0x2c6f7320
 8002480:	75730a0d 	.word	0x75730a0d
 8002484:	63656a62 	.word	0x63656a62
 8002488:	6f742074 	.word	0x6f742074
 800248c:	65687420 	.word	0x65687420
 8002490:	6c6f6620 	.word	0x6c6f6620
 8002494:	69776f6c 	.word	0x69776f6c
 8002498:	6320676e 	.word	0x6320676e
 800249c:	69646e6f 	.word	0x69646e6f
 80024a0:	6e6f6974 	.word	0x6e6f6974
 80024a4:	0a0d3a73 	.word	0x0a0d3a73
 80024a8:	68540a0d 	.word	0x68540a0d
 80024ac:	62612065 	.word	0x62612065
 80024b0:	2065766f 	.word	0x2065766f
 80024b4:	79706f63 	.word	0x79706f63
 80024b8:	68676972 	.word	0x68676972
 80024bc:	6f6e2074 	.word	0x6f6e2074
 80024c0:	65636974 	.word	0x65636974
 80024c4:	646e6120 	.word	0x646e6120
 80024c8:	69687420 	.word	0x69687420
 80024cc:	65702073 	.word	0x65702073
 80024d0:	73696d72 	.word	0x73696d72
 80024d4:	6e6f6973 	.word	0x6e6f6973
 80024d8:	746f6e20 	.word	0x746f6e20
 80024dc:	20656369 	.word	0x20656369
 80024e0:	6c616873 	.word	0x6c616873
 80024e4:	6562206c 	.word	0x6562206c
 80024e8:	636e6920 	.word	0x636e6920
 80024ec:	6564756c 	.word	0x6564756c
 80024f0:	6e692064 	.word	0x6e692064
 80024f4:	6c6c6120 	.word	0x6c6c6120
 80024f8:	6f630a0d 	.word	0x6f630a0d
 80024fc:	73656970 	.word	0x73656970
 8002500:	20726f20 	.word	0x20726f20
 8002504:	73627573 	.word	0x73627573
 8002508:	746e6174 	.word	0x746e6174
 800250c:	206c6169 	.word	0x206c6169
 8002510:	74726f70 	.word	0x74726f70
 8002514:	736e6f69 	.word	0x736e6f69
 8002518:	20666f20 	.word	0x20666f20
 800251c:	20656874 	.word	0x20656874
 8002520:	74666f53 	.word	0x74666f53
 8002524:	65726177 	.word	0x65726177
 8002528:	6649202e 	.word	0x6649202e
 800252c:	756f7920 	.word	0x756f7920
 8002530:	73697720 	.word	0x73697720
 8002534:	6f742068 	.word	0x6f742068
 8002538:	65737520 	.word	0x65737520
 800253c:	72756f20 	.word	0x72756f20
 8002540:	616d4120 	.word	0x616d4120
 8002544:	0d6e6f7a 	.word	0x0d6e6f7a
 8002548:	6572460a 	.word	0x6572460a
 800254c:	4f545265 	.word	0x4f545265
 8002550:	616e2053 	.word	0x616e2053
 8002554:	202c656d 	.word	0x202c656d
 8002558:	61656c70 	.word	0x61656c70
 800255c:	64206573 	.word	0x64206573
 8002560:	6f73206f 	.word	0x6f73206f
 8002564:	206e6920 	.word	0x206e6920
 8002568:	61662061 	.word	0x61662061
 800256c:	75207269 	.word	0x75207269
 8002570:	77206573 	.word	0x77206573
 8002574:	74207961 	.word	0x74207961
 8002578:	20746168 	.word	0x20746168
 800257c:	73656f64 	.word	0x73656f64
 8002580:	746f6e20 	.word	0x746f6e20
 8002584:	75616320 	.word	0x75616320
 8002588:	63206573 	.word	0x63206573
 800258c:	75666e6f 	.word	0x75666e6f
 8002590:	6e6f6973 	.word	0x6e6f6973
 8002594:	0d0a0d2e 	.word	0x0d0a0d2e
 8002598:	4548540a 	.word	0x4548540a
 800259c:	464f5320 	.word	0x464f5320
 80025a0:	52415754 	.word	0x52415754
 80025a4:	53492045 	.word	0x53492045
 80025a8:	4f525020 	.word	0x4f525020
 80025ac:	45444956 	.word	0x45444956
 80025b0:	41222044 	.word	0x41222044
 80025b4:	53492053 	.word	0x53492053
 80025b8:	57202c22 	.word	0x57202c22
 80025bc:	4f485449 	.word	0x4f485449
 80025c0:	57205455 	.word	0x57205455
 80025c4:	41525241 	.word	0x41525241
 80025c8:	2059544e 	.word	0x2059544e
 80025cc:	4120464f 	.word	0x4120464f
 80025d0:	4b20594e 	.word	0x4b20594e
 80025d4:	2c444e49 	.word	0x2c444e49
 80025d8:	50584520 	.word	0x50584520
 80025dc:	53534552 	.word	0x53534552
 80025e0:	0d524f20 	.word	0x0d524f20
 80025e4:	504d490a 	.word	0x504d490a
 80025e8:	4445494c 	.word	0x4445494c
 80025ec:	4e49202c 	.word	0x4e49202c
 80025f0:	44554c43 	.word	0x44554c43
 80025f4:	20474e49 	.word	0x20474e49
 80025f8:	20545542 	.word	0x20545542
 80025fc:	20544f4e 	.word	0x20544f4e
 8002600:	494d494c 	.word	0x494d494c
 8002604:	20444554 	.word	0x20444554
 8002608:	54204f54 	.word	0x54204f54
 800260c:	57204548 	.word	0x57204548
 8002610:	41525241 	.word	0x41525241
 8002614:	4549544e 	.word	0x4549544e
 8002618:	464f2053 	.word	0x464f2053
 800261c:	52454d20 	.word	0x52454d20
 8002620:	4e414843 	.word	0x4e414843
 8002624:	49424154 	.word	0x49424154
 8002628:	5954494c 	.word	0x5954494c
 800262c:	4946202c 	.word	0x4946202c
 8002630:	53454e54 	.word	0x53454e54
 8002634:	460a0d53 	.word	0x460a0d53
 8002638:	4120524f 	.word	0x4120524f
 800263c:	52415020 	.word	0x52415020
 8002640:	55434954 	.word	0x55434954
 8002644:	2052414c 	.word	0x2052414c
 8002648:	50525550 	.word	0x50525550
 800264c:	2045534f 	.word	0x2045534f
 8002650:	20444e41 	.word	0x20444e41
 8002654:	494e4f4e 	.word	0x494e4f4e
 8002658:	4952464e 	.word	0x4952464e
 800265c:	4d45474e 	.word	0x4d45474e
 8002660:	2e544e45 	.word	0x2e544e45
 8002664:	204e4920 	.word	0x204e4920
 8002668:	45204f4e 	.word	0x45204f4e
 800266c:	544e4556 	.word	0x544e4556
 8002670:	41485320 	.word	0x41485320
 8002674:	54204c4c 	.word	0x54204c4c
 8002678:	41204548 	.word	0x41204548
 800267c:	4f485455 	.word	0x4f485455
 8002680:	4f205352 	.word	0x4f205352
 8002684:	430a0d52 	.word	0x430a0d52
 8002688:	5259504f 	.word	0x5259504f
 800268c:	54484749 	.word	0x54484749
 8002690:	4c4f4820 	.word	0x4c4f4820
 8002694:	53524544 	.word	0x53524544
 8002698:	20454220 	.word	0x20454220
 800269c:	4241494c 	.word	0x4241494c
 80026a0:	4620454c 	.word	0x4620454c
 80026a4:	4120524f 	.word	0x4120524f
 80026a8:	4320594e 	.word	0x4320594e
 80026ac:	4d49414c 	.word	0x4d49414c
 80026b0:	4144202c 	.word	0x4144202c
 80026b4:	4547414d 	.word	0x4547414d
 80026b8:	524f2053 	.word	0x524f2053
 80026bc:	48544f20 	.word	0x48544f20
 80026c0:	4c205245 	.word	0x4c205245
 80026c4:	49424149 	.word	0x49424149
 80026c8:	5954494c 	.word	0x5954494c
 80026cc:	4857202c 	.word	0x4857202c
 80026d0:	45485445 	.word	0x45485445
 80026d4:	490a0d52 	.word	0x490a0d52
 80026d8:	4e41204e 	.word	0x4e41204e
 80026dc:	54434120 	.word	0x54434120
 80026e0:	204e4f49 	.word	0x204e4f49
 80026e4:	4320464f 	.word	0x4320464f
 80026e8:	52544e4f 	.word	0x52544e4f
 80026ec:	2c544341 	.word	0x2c544341
 80026f0:	524f5420 	.word	0x524f5420
 80026f4:	524f2054 	.word	0x524f2054
 80026f8:	48544f20 	.word	0x48544f20
 80026fc:	49575245 	.word	0x49575245
 8002700:	202c4553 	.word	0x202c4553
 8002704:	53495241 	.word	0x53495241
 8002708:	20474e49 	.word	0x20474e49
 800270c:	4d4f5246 	.word	0x4d4f5246
 8002710:	554f202c 	.word	0x554f202c
 8002714:	464f2054 	.word	0x464f2054
 8002718:	20524f20 	.word	0x20524f20
 800271c:	0a0d4e49 	.word	0x0a0d4e49
 8002720:	4e4e4f43 	.word	0x4e4e4f43
 8002724:	49544345 	.word	0x49544345
 8002728:	57204e4f 	.word	0x57204e4f
 800272c:	20485449 	.word	0x20485449
 8002730:	20454854 	.word	0x20454854
 8002734:	54464f53 	.word	0x54464f53
 8002738:	45524157 	.word	0x45524157
 800273c:	20524f20 	.word	0x20524f20
 8002740:	20454854 	.word	0x20454854
 8002744:	20455355 	.word	0x20455355
 8002748:	4f20524f 	.word	0x4f20524f
 800274c:	52454854 	.word	0x52454854
 8002750:	41454420 	.word	0x41454420
 8002754:	474e494c 	.word	0x474e494c
 8002758:	4e492053 	.word	0x4e492053
 800275c:	45485420 	.word	0x45485420
 8002760:	464f5320 	.word	0x464f5320
 8002764:	52415754 	.word	0x52415754
 8002768:	0a0d2e45 	.word	0x0a0d2e45
 800276c:	74680a0d 	.word	0x74680a0d
 8002770:	2f3a7074 	.word	0x2f3a7074
 8002774:	7777772f 	.word	0x7777772f
 8002778:	6572462e 	.word	0x6572462e
 800277c:	4f545265 	.word	0x4f545265
 8002780:	726f2e53 	.word	0x726f2e53
 8002784:	680a0d67 	.word	0x680a0d67
 8002788:	3a707474 	.word	0x3a707474
 800278c:	77612f2f 	.word	0x77612f2f
 8002790:	6d612e73 	.word	0x6d612e73
 8002794:	6e6f7a61 	.word	0x6e6f7a61
 8002798:	6d6f632e 	.word	0x6d6f632e
 800279c:	6572662f 	.word	0x6572662f
 80027a0:	6f747265 	.word	0x6f747265
 80027a4:	2a0a0d73 	.word	0x2a0a0d73
 80027a8:	2a2a2a2a 	.word	0x2a2a2a2a
 80027ac:	2a2a2a2a 	.word	0x2a2a2a2a
 80027b0:	2a2a2a2a 	.word	0x2a2a2a2a
 80027b4:	2a2a2a2a 	.word	0x2a2a2a2a
 80027b8:	2a2a2a2a 	.word	0x2a2a2a2a
 80027bc:	2a2a2a2a 	.word	0x2a2a2a2a
 80027c0:	2a2a2a2a 	.word	0x2a2a2a2a
 80027c4:	2a2a2a2a 	.word	0x2a2a2a2a
 80027c8:	2a2a2a2a 	.word	0x2a2a2a2a
 80027cc:	2a2a2a2a 	.word	0x2a2a2a2a
 80027d0:	2a2a2a2a 	.word	0x2a2a2a2a
 80027d4:	2a2a2a2a 	.word	0x2a2a2a2a
 80027d8:	2a2a2a2a 	.word	0x2a2a2a2a
 80027dc:	2a2a2a2a 	.word	0x2a2a2a2a
 80027e0:	2a2a2a2a 	.word	0x2a2a2a2a
 80027e4:	2a2a2a2a 	.word	0x2a2a2a2a
 80027e8:	2a2a2a2a 	.word	0x2a2a2a2a
 80027ec:	2a2a2a2a 	.word	0x2a2a2a2a
 80027f0:	2a2a2a2a 	.word	0x2a2a2a2a
 80027f4:	2a2a2a2a 	.word	0x2a2a2a2a
 80027f8:	430a0d2a 	.word	0x430a0d2a
 80027fc:	5259504f 	.word	0x5259504f
 8002800:	54484749 	.word	0x54484749
 8002804:	20296328 	.word	0x20296328
 8002808:	36313032 	.word	0x36313032
 800280c:	4d545320 	.word	0x4d545320
 8002810:	6f726369 	.word	0x6f726369
 8002814:	63656c65 	.word	0x63656c65
 8002818:	6e6f7274 	.word	0x6e6f7274
 800281c:	0d736369 	.word	0x0d736369
 8002820:	520a0d0a 	.word	0x520a0d0a
 8002824:	73696465 	.word	0x73696465
 8002828:	62697274 	.word	0x62697274
 800282c:	6f697475 	.word	0x6f697475
 8002830:	6e61206e 	.word	0x6e61206e
 8002834:	73752064 	.word	0x73752064
 8002838:	6e692065 	.word	0x6e692065
 800283c:	756f7320 	.word	0x756f7320
 8002840:	20656372 	.word	0x20656372
 8002844:	20646e61 	.word	0x20646e61
 8002848:	616e6962 	.word	0x616e6962
 800284c:	66207972 	.word	0x66207972
 8002850:	736d726f 	.word	0x736d726f
 8002854:	6977202c 	.word	0x6977202c
 8002858:	6f206874 	.word	0x6f206874
 800285c:	69772072 	.word	0x69772072
 8002860:	756f6874 	.word	0x756f6874
 8002864:	6f6d2074 	.word	0x6f6d2074
 8002868:	69666964 	.word	0x69666964
 800286c:	69746163 	.word	0x69746163
 8002870:	0d2c6e6f 	.word	0x0d2c6e6f
 8002874:	6572610a 	.word	0x6572610a
 8002878:	72657020 	.word	0x72657020
 800287c:	7474696d 	.word	0x7474696d
 8002880:	70206465 	.word	0x70206465
 8002884:	69766f72 	.word	0x69766f72
 8002888:	20646564 	.word	0x20646564
 800288c:	74616874 	.word	0x74616874
 8002890:	65687420 	.word	0x65687420
 8002894:	6c6f6620 	.word	0x6c6f6620
 8002898:	69776f6c 	.word	0x69776f6c
 800289c:	6320676e 	.word	0x6320676e
 80028a0:	69646e6f 	.word	0x69646e6f
 80028a4:	6e6f6974 	.word	0x6e6f6974
 80028a8:	72612073 	.word	0x72612073
 80028ac:	656d2065 	.word	0x656d2065
 80028b0:	0a0d3a74 	.word	0x0a0d3a74
 80028b4:	2e312020 	.word	0x2e312020
 80028b8:	64655220 	.word	0x64655220
 80028bc:	72747369 	.word	0x72747369
 80028c0:	74756269 	.word	0x74756269
 80028c4:	736e6f69 	.word	0x736e6f69
 80028c8:	20666f20 	.word	0x20666f20
 80028cc:	72756f73 	.word	0x72756f73
 80028d0:	63206563 	.word	0x63206563
 80028d4:	2065646f 	.word	0x2065646f
 80028d8:	7473756d 	.word	0x7473756d
 80028dc:	74657220 	.word	0x74657220
 80028e0:	206e6961 	.word	0x206e6961
 80028e4:	20656874 	.word	0x20656874
 80028e8:	766f6261 	.word	0x766f6261
 80028ec:	6f632065 	.word	0x6f632065
 80028f0:	69727970 	.word	0x69727970
 80028f4:	20746867 	.word	0x20746867
 80028f8:	69746f6e 	.word	0x69746f6e
 80028fc:	0d2c6563 	.word	0x0d2c6563
 8002900:	2020200a 	.word	0x2020200a
 8002904:	68742020 	.word	0x68742020
 8002908:	6c207369 	.word	0x6c207369
 800290c:	20747369 	.word	0x20747369
 8002910:	6320666f 	.word	0x6320666f
 8002914:	69646e6f 	.word	0x69646e6f
 8002918:	6e6f6974 	.word	0x6e6f6974
 800291c:	6e612073 	.word	0x6e612073
 8002920:	68742064 	.word	0x68742064
 8002924:	6f662065 	.word	0x6f662065
 8002928:	776f6c6c 	.word	0x776f6c6c
 800292c:	20676e69 	.word	0x20676e69
 8002930:	63736964 	.word	0x63736964
 8002934:	6d69616c 	.word	0x6d69616c
 8002938:	0d2e7265 	.word	0x0d2e7265
 800293c:	3220200a 	.word	0x3220200a
 8002940:	6552202e 	.word	0x6552202e
 8002944:	74736964 	.word	0x74736964
 8002948:	75626972 	.word	0x75626972
 800294c:	6e6f6974 	.word	0x6e6f6974
 8002950:	6e692073 	.word	0x6e692073
 8002954:	6e696220 	.word	0x6e696220
 8002958:	20797261 	.word	0x20797261
 800295c:	6d726f66 	.word	0x6d726f66
 8002960:	73756d20 	.word	0x73756d20
 8002964:	65722074 	.word	0x65722074
 8002968:	646f7270 	.word	0x646f7270
 800296c:	20656375 	.word	0x20656375
 8002970:	20656874 	.word	0x20656874
 8002974:	766f6261 	.word	0x766f6261
 8002978:	6f632065 	.word	0x6f632065
 800297c:	69727970 	.word	0x69727970
 8002980:	20746867 	.word	0x20746867
 8002984:	69746f6e 	.word	0x69746f6e
 8002988:	0d2c6563 	.word	0x0d2c6563
 800298c:	2020200a 	.word	0x2020200a
 8002990:	68742020 	.word	0x68742020
 8002994:	6c207369 	.word	0x6c207369
 8002998:	20747369 	.word	0x20747369
 800299c:	6320666f 	.word	0x6320666f
 80029a0:	69646e6f 	.word	0x69646e6f
 80029a4:	6e6f6974 	.word	0x6e6f6974
 80029a8:	6e612073 	.word	0x6e612073
 80029ac:	68742064 	.word	0x68742064
 80029b0:	6f662065 	.word	0x6f662065
 80029b4:	776f6c6c 	.word	0x776f6c6c
 80029b8:	20676e69 	.word	0x20676e69
 80029bc:	63736964 	.word	0x63736964
 80029c0:	6d69616c 	.word	0x6d69616c
 80029c4:	69207265 	.word	0x69207265
 80029c8:	6874206e 	.word	0x6874206e
 80029cc:	6f642065 	.word	0x6f642065
 80029d0:	656d7563 	.word	0x656d7563
 80029d4:	7461746e 	.word	0x7461746e
 80029d8:	0d6e6f69 	.word	0x0d6e6f69
 80029dc:	2020200a 	.word	0x2020200a
 80029e0:	6e612020 	.word	0x6e612020
 80029e4:	726f2f64 	.word	0x726f2f64
 80029e8:	68746f20 	.word	0x68746f20
 80029ec:	6d207265 	.word	0x6d207265
 80029f0:	72657461 	.word	0x72657461
 80029f4:	736c6169 	.word	0x736c6169
 80029f8:	6f727020 	.word	0x6f727020
 80029fc:	65646976 	.word	0x65646976
 8002a00:	69772064 	.word	0x69772064
 8002a04:	74206874 	.word	0x74206874
 8002a08:	64206568 	.word	0x64206568
 8002a0c:	72747369 	.word	0x72747369
 8002a10:	74756269 	.word	0x74756269
 8002a14:	2e6e6f69 	.word	0x2e6e6f69
 8002a18:	20200a0d 	.word	0x20200a0d
 8002a1c:	4e202e33 	.word	0x4e202e33
 8002a20:	68746965 	.word	0x68746965
 8002a24:	74207265 	.word	0x74207265
 8002a28:	6e206568 	.word	0x6e206568
 8002a2c:	20656d61 	.word	0x20656d61
 8002a30:	5320666f 	.word	0x5320666f
 8002a34:	63694d54 	.word	0x63694d54
 8002a38:	6c656f72 	.word	0x6c656f72
 8002a3c:	72746365 	.word	0x72746365
 8002a40:	63696e6f 	.word	0x63696e6f
 8002a44:	6f6e2073 	.word	0x6f6e2073
 8002a48:	68742072 	.word	0x68742072
 8002a4c:	616e2065 	.word	0x616e2065
 8002a50:	2073656d 	.word	0x2073656d
 8002a54:	6920666f 	.word	0x6920666f
 8002a58:	63207374 	.word	0x63207374
 8002a5c:	72746e6f 	.word	0x72746e6f
 8002a60:	74756269 	.word	0x74756269
 8002a64:	0d73726f 	.word	0x0d73726f
 8002a68:	2020200a 	.word	0x2020200a
 8002a6c:	616d2020 	.word	0x616d2020
 8002a70:	65622079 	.word	0x65622079
 8002a74:	65737520 	.word	0x65737520
 8002a78:	6f742064 	.word	0x6f742064
 8002a7c:	646e6520 	.word	0x646e6520
 8002a80:	6573726f 	.word	0x6573726f
 8002a84:	20726f20 	.word	0x20726f20
 8002a88:	6d6f7270 	.word	0x6d6f7270
 8002a8c:	2065746f 	.word	0x2065746f
 8002a90:	646f7270 	.word	0x646f7270
 8002a94:	73746375 	.word	0x73746375
 8002a98:	72656420 	.word	0x72656420
 8002a9c:	64657669 	.word	0x64657669
 8002aa0:	6f726620 	.word	0x6f726620
 8002aa4:	6874206d 	.word	0x6874206d
 8002aa8:	73207369 	.word	0x73207369
 8002aac:	7774666f 	.word	0x7774666f
 8002ab0:	0d657261 	.word	0x0d657261
 8002ab4:	2020200a 	.word	0x2020200a
 8002ab8:	69772020 	.word	0x69772020
 8002abc:	756f6874 	.word	0x756f6874
 8002ac0:	70732074 	.word	0x70732074
 8002ac4:	66696365 	.word	0x66696365
 8002ac8:	70206369 	.word	0x70206369
 8002acc:	726f6972 	.word	0x726f6972
 8002ad0:	69727720 	.word	0x69727720
 8002ad4:	6e657474 	.word	0x6e657474
 8002ad8:	72657020 	.word	0x72657020
 8002adc:	7373696d 	.word	0x7373696d
 8002ae0:	2e6e6f69 	.word	0x2e6e6f69
 8002ae4:	20200a0d 	.word	0x20200a0d
 8002ae8:	48540a0d 	.word	0x48540a0d
 8002aec:	53205349 	.word	0x53205349
 8002af0:	5754464f 	.word	0x5754464f
 8002af4:	20455241 	.word	0x20455241
 8002af8:	50205349 	.word	0x50205349
 8002afc:	49564f52 	.word	0x49564f52
 8002b00:	20444544 	.word	0x20444544
 8002b04:	54205942 	.word	0x54205942
 8002b08:	43204548 	.word	0x43204548
 8002b0c:	5259504f 	.word	0x5259504f
 8002b10:	54484749 	.word	0x54484749
 8002b14:	4c4f4820 	.word	0x4c4f4820
 8002b18:	53524544 	.word	0x53524544
 8002b1c:	444e4120 	.word	0x444e4120
 8002b20:	4e4f4320 	.word	0x4e4f4320
 8002b24:	42495254 	.word	0x42495254
 8002b28:	524f5455 	.word	0x524f5455
 8002b2c:	41222053 	.word	0x41222053
 8002b30:	53492053 	.word	0x53492053
 8002b34:	410a0d22 	.word	0x410a0d22
 8002b38:	4120444e 	.word	0x4120444e
 8002b3c:	4520594e 	.word	0x4520594e
 8002b40:	45525058 	.word	0x45525058
 8002b44:	4f205353 	.word	0x4f205353
 8002b48:	4d492052 	.word	0x4d492052
 8002b4c:	45494c50 	.word	0x45494c50
 8002b50:	41572044 	.word	0x41572044
 8002b54:	4e415252 	.word	0x4e415252
 8002b58:	53454954 	.word	0x53454954
 8002b5c:	4e49202c 	.word	0x4e49202c
 8002b60:	44554c43 	.word	0x44554c43
 8002b64:	2c474e49 	.word	0x2c474e49
 8002b68:	54554220 	.word	0x54554220
 8002b6c:	544f4e20 	.word	0x544f4e20
 8002b70:	4d494c20 	.word	0x4d494c20
 8002b74:	44455449 	.word	0x44455449
 8002b78:	2c4f5420 	.word	0x2c4f5420
 8002b7c:	45485420 	.word	0x45485420
 8002b80:	4d490a0d 	.word	0x4d490a0d
 8002b84:	45494c50 	.word	0x45494c50
 8002b88:	41572044 	.word	0x41572044
 8002b8c:	4e415252 	.word	0x4e415252
 8002b90:	53454954 	.word	0x53454954
 8002b94:	20464f20 	.word	0x20464f20
 8002b98:	4352454d 	.word	0x4352454d
 8002b9c:	544e4148 	.word	0x544e4148
 8002ba0:	4c494241 	.word	0x4c494241
 8002ba4:	20595449 	.word	0x20595449
 8002ba8:	20444e41 	.word	0x20444e41
 8002bac:	4e544946 	.word	0x4e544946
 8002bb0:	20535345 	.word	0x20535345
 8002bb4:	20524f46 	.word	0x20524f46
 8002bb8:	41502041 	.word	0x41502041
 8002bbc:	43495452 	.word	0x43495452
 8002bc0:	52414c55 	.word	0x52414c55
 8002bc4:	52555020 	.word	0x52555020
 8002bc8:	45534f50 	.word	0x45534f50
 8002bcc:	45524120 	.word	0x45524120
 8002bd0:	49440a0d 	.word	0x49440a0d
 8002bd4:	414c4353 	.word	0x414c4353
 8002bd8:	44454d49 	.word	0x44454d49
 8002bdc:	4e49202e 	.word	0x4e49202e
 8002be0:	204f4e20 	.word	0x204f4e20
 8002be4:	4e455645 	.word	0x4e455645
 8002be8:	48532054 	.word	0x48532054
 8002bec:	204c4c41 	.word	0x204c4c41
 8002bf0:	20454854 	.word	0x20454854
 8002bf4:	59504f43 	.word	0x59504f43
 8002bf8:	48474952 	.word	0x48474952
 8002bfc:	4f482054 	.word	0x4f482054
 8002c00:	5245444c 	.word	0x5245444c
 8002c04:	20524f20 	.word	0x20524f20
 8002c08:	544e4f43 	.word	0x544e4f43
 8002c0c:	55424952 	.word	0x55424952
 8002c10:	53524f54 	.word	0x53524f54
 8002c14:	20454220 	.word	0x20454220
 8002c18:	4241494c 	.word	0x4241494c
 8002c1c:	0a0d454c 	.word	0x0a0d454c
 8002c20:	20524f46 	.word	0x20524f46
 8002c24:	20594e41 	.word	0x20594e41
 8002c28:	45524944 	.word	0x45524944
 8002c2c:	202c5443 	.word	0x202c5443
 8002c30:	49444e49 	.word	0x49444e49
 8002c34:	54434552 	.word	0x54434552
 8002c38:	4e49202c 	.word	0x4e49202c
 8002c3c:	45444943 	.word	0x45444943
 8002c40:	4c41544e 	.word	0x4c41544e
 8002c44:	5053202c 	.word	0x5053202c
 8002c48:	41494345 	.word	0x41494345
 8002c4c:	45202c4c 	.word	0x45202c4c
 8002c50:	504d4558 	.word	0x504d4558
 8002c54:	5952414c 	.word	0x5952414c
 8002c58:	524f202c 	.word	0x524f202c
 8002c5c:	4e4f4320 	.word	0x4e4f4320
 8002c60:	55514553 	.word	0x55514553
 8002c64:	49544e45 	.word	0x49544e45
 8002c68:	0a0d4c41 	.word	0x0a0d4c41
 8002c6c:	414d4144 	.word	0x414d4144
 8002c70:	20534547 	.word	0x20534547
 8002c74:	434e4928 	.word	0x434e4928
 8002c78:	4944554c 	.word	0x4944554c
 8002c7c:	202c474e 	.word	0x202c474e
 8002c80:	20545542 	.word	0x20545542
 8002c84:	20544f4e 	.word	0x20544f4e
 8002c88:	494d494c 	.word	0x494d494c
 8002c8c:	20444554 	.word	0x20444554
 8002c90:	202c4f54 	.word	0x202c4f54
 8002c94:	434f5250 	.word	0x434f5250
 8002c98:	4d455255 	.word	0x4d455255
 8002c9c:	20544e45 	.word	0x20544e45
 8002ca0:	5320464f 	.word	0x5320464f
 8002ca4:	54534255 	.word	0x54534255
 8002ca8:	54555449 	.word	0x54555449
 8002cac:	4f472045 	.word	0x4f472045
 8002cb0:	2053444f 	.word	0x2053444f
 8002cb4:	0a0d524f 	.word	0x0a0d524f
 8002cb8:	56524553 	.word	0x56524553
 8002cbc:	53454349 	.word	0x53454349
 8002cc0:	4f4c203b 	.word	0x4f4c203b
 8002cc4:	4f205353 	.word	0x4f205353
 8002cc8:	53552046 	.word	0x53552046
 8002ccc:	44202c45 	.word	0x44202c45
 8002cd0:	2c415441 	.word	0x2c415441
 8002cd4:	20524f20 	.word	0x20524f20
 8002cd8:	464f5250 	.word	0x464f5250
 8002cdc:	3b535449 	.word	0x3b535449
 8002ce0:	20524f20 	.word	0x20524f20
 8002ce4:	49535542 	.word	0x49535542
 8002ce8:	5353454e 	.word	0x5353454e
 8002cec:	544e4920 	.word	0x544e4920
 8002cf0:	55525245 	.word	0x55525245
 8002cf4:	4f495450 	.word	0x4f495450
 8002cf8:	4820294e 	.word	0x4820294e
 8002cfc:	5645574f 	.word	0x5645574f
 8002d00:	0a0d5245 	.word	0x0a0d5245
 8002d04:	53554143 	.word	0x53554143
 8002d08:	41204445 	.word	0x41204445
 8002d0c:	4f20444e 	.word	0x4f20444e
 8002d10:	4e41204e 	.word	0x4e41204e
 8002d14:	48542059 	.word	0x48542059
 8002d18:	59524f45 	.word	0x59524f45
 8002d1c:	20464f20 	.word	0x20464f20
 8002d20:	4241494c 	.word	0x4241494c
 8002d24:	54494c49 	.word	0x54494c49
 8002d28:	57202c59 	.word	0x57202c59
 8002d2c:	48544548 	.word	0x48544548
 8002d30:	49205245 	.word	0x49205245
 8002d34:	4f43204e 	.word	0x4f43204e
 8002d38:	4152544e 	.word	0x4152544e
 8002d3c:	202c5443 	.word	0x202c5443
 8002d40:	49525453 	.word	0x49525453
 8002d44:	4c205443 	.word	0x4c205443
 8002d48:	49424149 	.word	0x49424149
 8002d4c:	5954494c 	.word	0x5954494c
 8002d50:	4f0a0d2c 	.word	0x4f0a0d2c
 8002d54:	4f542052 	.word	0x4f542052
 8002d58:	28205452 	.word	0x28205452
 8002d5c:	4c434e49 	.word	0x4c434e49
 8002d60:	4e494455 	.word	0x4e494455
 8002d64:	454e2047 	.word	0x454e2047
 8002d68:	47494c47 	.word	0x47494c47
 8002d6c:	45434e45 	.word	0x45434e45
 8002d70:	20524f20 	.word	0x20524f20
 8002d74:	4548544f 	.word	0x4548544f
 8002d78:	53495752 	.word	0x53495752
 8002d7c:	41202945 	.word	0x41202945
 8002d80:	49534952 	.word	0x49534952
 8002d84:	4920474e 	.word	0x4920474e
 8002d88:	4e41204e 	.word	0x4e41204e
 8002d8c:	41572059 	.word	0x41572059
 8002d90:	554f2059 	.word	0x554f2059
 8002d94:	464f2054 	.word	0x464f2054
 8002d98:	45485420 	.word	0x45485420
 8002d9c:	45535520 	.word	0x45535520
 8002da0:	464f0a0d 	.word	0x464f0a0d
 8002da4:	49485420 	.word	0x49485420
 8002da8:	4f532053 	.word	0x4f532053
 8002dac:	41575446 	.word	0x41575446
 8002db0:	202c4552 	.word	0x202c4552
 8002db4:	4e455645 	.word	0x4e455645
 8002db8:	20464920 	.word	0x20464920
 8002dbc:	49564441 	.word	0x49564441
 8002dc0:	20444553 	.word	0x20444553
 8002dc4:	5420464f 	.word	0x5420464f
 8002dc8:	50204548 	.word	0x50204548
 8002dcc:	4953534f 	.word	0x4953534f
 8002dd0:	494c4942 	.word	0x494c4942
 8002dd4:	4f205954 	.word	0x4f205954
 8002dd8:	55532046 	.word	0x55532046
 8002ddc:	44204843 	.word	0x44204843
 8002de0:	47414d41 	.word	0x47414d41
 8002de4:	0a0d2e45 	.word	0x0a0d2e45
 8002de8:	2a2a2a2a 	.word	0x2a2a2a2a
 8002dec:	2a2a2a2a 	.word	0x2a2a2a2a
 8002df0:	2a2a2a2a 	.word	0x2a2a2a2a
 8002df4:	2a2a2a2a 	.word	0x2a2a2a2a
 8002df8:	2a2a2a2a 	.word	0x2a2a2a2a
 8002dfc:	2a2a2a2a 	.word	0x2a2a2a2a
 8002e00:	2a2a2a2a 	.word	0x2a2a2a2a
 8002e04:	2a2a2a2a 	.word	0x2a2a2a2a
 8002e08:	2a2a2a2a 	.word	0x2a2a2a2a
 8002e0c:	2a2a2a2a 	.word	0x2a2a2a2a
 8002e10:	2a2a2a2a 	.word	0x2a2a2a2a
 8002e14:	2a2a2a2a 	.word	0x2a2a2a2a
 8002e18:	2a2a2a2a 	.word	0x2a2a2a2a
 8002e1c:	2a2a2a2a 	.word	0x2a2a2a2a
 8002e20:	2a2a2a2a 	.word	0x2a2a2a2a
 8002e24:	2a2a2a2a 	.word	0x2a2a2a2a
 8002e28:	2a2a2a2a 	.word	0x2a2a2a2a
 8002e2c:	2a2a2a2a 	.word	0x2a2a2a2a
 8002e30:	2a2a2a2a 	.word	0x2a2a2a2a
 8002e34:	2a2a2a2a 	.word	0x2a2a2a2a
 8002e38:	0a0d2a2a 	.word	0x0a0d2a2a
 8002e3c:	62696843 	.word	0x62696843
 8002e40:	20534f69 	.word	0x20534f69
 8002e44:	6f43202d 	.word	0x6f43202d
 8002e48:	69727970 	.word	0x69727970
 8002e4c:	20746867 	.word	0x20746867
 8002e50:	20294328 	.word	0x20294328
 8002e54:	36303032 	.word	0x36303032
 8002e58:	30322e2e 	.word	0x30322e2e
 8002e5c:	47203631 	.word	0x47203631
 8002e60:	61766f69 	.word	0x61766f69
 8002e64:	20696e6e 	.word	0x20696e6e
 8002e68:	53206944 	.word	0x53206944
 8002e6c:	6f697269 	.word	0x6f697269
 8002e70:	0a0d0a0d 	.word	0x0a0d0a0d
 8002e74:	6563694c 	.word	0x6563694c
 8002e78:	6465736e 	.word	0x6465736e
 8002e7c:	646e7520 	.word	0x646e7520
 8002e80:	74207265 	.word	0x74207265
 8002e84:	41206568 	.word	0x41206568
 8002e88:	68636170 	.word	0x68636170
 8002e8c:	694c2065 	.word	0x694c2065
 8002e90:	736e6563 	.word	0x736e6563
 8002e94:	56202c65 	.word	0x56202c65
 8002e98:	69737265 	.word	0x69737265
 8002e9c:	32206e6f 	.word	0x32206e6f
 8002ea0:	2820302e 	.word	0x2820302e
 8002ea4:	20656874 	.word	0x20656874
 8002ea8:	63694c22 	.word	0x63694c22
 8002eac:	65736e65 	.word	0x65736e65
 8002eb0:	0d3b2922 	.word	0x0d3b2922
 8002eb4:	756f790a 	.word	0x756f790a
 8002eb8:	79616d20 	.word	0x79616d20
 8002ebc:	746f6e20 	.word	0x746f6e20
 8002ec0:	65737520 	.word	0x65737520
 8002ec4:	69687420 	.word	0x69687420
 8002ec8:	69662073 	.word	0x69662073
 8002ecc:	6520656c 	.word	0x6520656c
 8002ed0:	70656378 	.word	0x70656378
 8002ed4:	6e692074 	.word	0x6e692074
 8002ed8:	6d6f6320 	.word	0x6d6f6320
 8002edc:	61696c70 	.word	0x61696c70
 8002ee0:	2065636e 	.word	0x2065636e
 8002ee4:	68746977 	.word	0x68746977
 8002ee8:	65687420 	.word	0x65687420
 8002eec:	63694c20 	.word	0x63694c20
 8002ef0:	65736e65 	.word	0x65736e65
 8002ef4:	590a0d2e 	.word	0x590a0d2e
 8002ef8:	6d20756f 	.word	0x6d20756f
 8002efc:	6f207961 	.word	0x6f207961
 8002f00:	69617462 	.word	0x69617462
 8002f04:	2061206e 	.word	0x2061206e
 8002f08:	79706f63 	.word	0x79706f63
 8002f0c:	20666f20 	.word	0x20666f20
 8002f10:	20656874 	.word	0x20656874
 8002f14:	6563694c 	.word	0x6563694c
 8002f18:	2065736e 	.word	0x2065736e
 8002f1c:	0a0d7461 	.word	0x0a0d7461
 8002f20:	20200a0d 	.word	0x20200a0d
 8002f24:	74682020 	.word	0x74682020
 8002f28:	2f3a7074 	.word	0x2f3a7074
 8002f2c:	7777772f 	.word	0x7777772f
 8002f30:	6170612e 	.word	0x6170612e
 8002f34:	2e656863 	.word	0x2e656863
 8002f38:	2f67726f 	.word	0x2f67726f
 8002f3c:	6563696c 	.word	0x6563696c
 8002f40:	7365736e 	.word	0x7365736e
 8002f44:	43494c2f 	.word	0x43494c2f
 8002f48:	45534e45 	.word	0x45534e45
 8002f4c:	302e322d 	.word	0x302e322d
 8002f50:	0a0d0a0d 	.word	0x0a0d0a0d
 8002f54:	656c6e55 	.word	0x656c6e55
 8002f58:	72207373 	.word	0x72207373
 8002f5c:	69757165 	.word	0x69757165
 8002f60:	20646572 	.word	0x20646572
 8002f64:	61207962 	.word	0x61207962
 8002f68:	696c7070 	.word	0x696c7070
 8002f6c:	6c626163 	.word	0x6c626163
 8002f70:	616c2065 	.word	0x616c2065
 8002f74:	726f2077 	.word	0x726f2077
 8002f78:	72676120 	.word	0x72676120
 8002f7c:	20646565 	.word	0x20646565
 8002f80:	69206f74 	.word	0x69206f74
 8002f84:	7277206e 	.word	0x7277206e
 8002f88:	6e697469 	.word	0x6e697469
 8002f8c:	73202c67 	.word	0x73202c67
 8002f90:	7774666f 	.word	0x7774666f
 8002f94:	0d657261 	.word	0x0d657261
 8002f98:	7369640a 	.word	0x7369640a
 8002f9c:	62697274 	.word	0x62697274
 8002fa0:	64657475 	.word	0x64657475
 8002fa4:	646e7520 	.word	0x646e7520
 8002fa8:	74207265 	.word	0x74207265
 8002fac:	4c206568 	.word	0x4c206568
 8002fb0:	6e656369 	.word	0x6e656369
 8002fb4:	69206573 	.word	0x69206573
 8002fb8:	69642073 	.word	0x69642073
 8002fbc:	69727473 	.word	0x69727473
 8002fc0:	65747562 	.word	0x65747562
 8002fc4:	6e6f2064 	.word	0x6e6f2064
 8002fc8:	206e6120 	.word	0x206e6120
 8002fcc:	20534122 	.word	0x20534122
 8002fd0:	20225349 	.word	0x20225349
 8002fd4:	49534142 	.word	0x49534142
 8002fd8:	0a0d2c53 	.word	0x0a0d2c53
 8002fdc:	48544957 	.word	0x48544957
 8002fe0:	2054554f 	.word	0x2054554f
 8002fe4:	52524157 	.word	0x52524157
 8002fe8:	49544e41 	.word	0x49544e41
 8002fec:	4f205345 	.word	0x4f205345
 8002ff0:	4f432052 	.word	0x4f432052
 8002ff4:	5449444e 	.word	0x5449444e
 8002ff8:	534e4f49 	.word	0x534e4f49
 8002ffc:	20464f20 	.word	0x20464f20
 8003000:	20594e41 	.word	0x20594e41
 8003004:	444e494b 	.word	0x444e494b
 8003008:	6965202c 	.word	0x6965202c
 800300c:	72656874 	.word	0x72656874
 8003010:	70786520 	.word	0x70786520
 8003014:	73736572 	.word	0x73736572
 8003018:	20726f20 	.word	0x20726f20
 800301c:	6c706d69 	.word	0x6c706d69
 8003020:	2e646569 	.word	0x2e646569
 8003024:	65530a0d 	.word	0x65530a0d
 8003028:	68742065 	.word	0x68742065
 800302c:	694c2065 	.word	0x694c2065
 8003030:	736e6563 	.word	0x736e6563
 8003034:	6f662065 	.word	0x6f662065
 8003038:	68742072 	.word	0x68742072
 800303c:	70732065 	.word	0x70732065
 8003040:	66696365 	.word	0x66696365
 8003044:	6c206369 	.word	0x6c206369
 8003048:	75676e61 	.word	0x75676e61
 800304c:	20656761 	.word	0x20656761
 8003050:	65766f67 	.word	0x65766f67
 8003054:	6e696e72 	.word	0x6e696e72
 8003058:	65702067 	.word	0x65702067
 800305c:	73696d72 	.word	0x73696d72
 8003060:	6e6f6973 	.word	0x6e6f6973
 8003064:	6e612073 	.word	0x6e612073
 8003068:	6c0a0d64 	.word	0x6c0a0d64
 800306c:	74696d69 	.word	0x74696d69
 8003070:	6f697461 	.word	0x6f697461
 8003074:	7520736e 	.word	0x7520736e
 8003078:	7265646e 	.word	0x7265646e
 800307c:	65687420 	.word	0x65687420
 8003080:	63694c20 	.word	0x63694c20
 8003084:	65736e65 	.word	0x65736e65
 8003088:	2a0a0d2e 	.word	0x2a0a0d2e
 800308c:	2a2a2a2a 	.word	0x2a2a2a2a
 8003090:	2a2a2a2a 	.word	0x2a2a2a2a
 8003094:	2a2a2a2a 	.word	0x2a2a2a2a
 8003098:	2a2a2a2a 	.word	0x2a2a2a2a
 800309c:	2a2a2a2a 	.word	0x2a2a2a2a
 80030a0:	2a2a2a2a 	.word	0x2a2a2a2a
 80030a4:	2a2a2a2a 	.word	0x2a2a2a2a
 80030a8:	2a2a2a2a 	.word	0x2a2a2a2a
 80030ac:	2a2a2a2a 	.word	0x2a2a2a2a
 80030b0:	2a2a2a2a 	.word	0x2a2a2a2a
 80030b4:	2a2a2a2a 	.word	0x2a2a2a2a
 80030b8:	2a2a2a2a 	.word	0x2a2a2a2a
 80030bc:	2a2a2a2a 	.word	0x2a2a2a2a
 80030c0:	2a2a2a2a 	.word	0x2a2a2a2a
 80030c4:	2a2a2a2a 	.word	0x2a2a2a2a
 80030c8:	2a2a2a2a 	.word	0x2a2a2a2a
 80030cc:	2a2a2a2a 	.word	0x2a2a2a2a
 80030d0:	2a2a2a2a 	.word	0x2a2a2a2a
 80030d4:	2a2a2a2a 	.word	0x2a2a2a2a
 80030d8:	2a2a2a2a 	.word	0x2a2a2a2a
 80030dc:	430a0d2a 	.word	0x430a0d2a
 80030e0:	7279706f 	.word	0x7279706f
 80030e4:	74686769 	.word	0x74686769
 80030e8:	29632820 	.word	0x29632820
 80030ec:	31303220 	.word	0x31303220
 80030f0:	30322d37 	.word	0x30322d37
 80030f4:	202c3831 	.word	0x202c3831
 80030f8:	74726542 	.word	0x74726542
 80030fc:	20646c6f 	.word	0x20646c6f
 8003100:	206e6156 	.word	0x206e6156
 8003104:	206e6564 	.word	0x206e6564
 8003108:	67726542 	.word	0x67726542
 800310c:	76282068 	.word	0x76282068
 8003110:	65646e61 	.word	0x65646e61
 8003114:	7265626e 	.word	0x7265626e
 8003118:	62406867 	.word	0x62406867
 800311c:	6f747265 	.word	0x6f747265
 8003120:	6f2e646c 	.word	0x6f2e646c
 8003124:	0d296772 	.word	0x0d296772
 8003128:	6c6c410a 	.word	0x6c6c410a
 800312c:	67697220 	.word	0x67697220
 8003130:	20737468 	.word	0x20737468
 8003134:	65736572 	.word	0x65736572
 8003138:	64657672 	.word	0x64657672
 800313c:	540a0d2e 	.word	0x540a0d2e
 8003140:	20736968 	.word	0x20736968
 8003144:	6b726f77 	.word	0x6b726f77
 8003148:	73616820 	.word	0x73616820
 800314c:	65656220 	.word	0x65656220
 8003150:	6564206e 	.word	0x6564206e
 8003154:	6f6c6576 	.word	0x6f6c6576
 8003158:	20646570 	.word	0x20646570
 800315c:	73206f74 	.word	0x73206f74
 8003160:	6f707075 	.word	0x6f707075
 8003164:	72207472 	.word	0x72207472
 8003168:	61657365 	.word	0x61657365
 800316c:	20686372 	.word	0x20686372
 8003170:	646e7566 	.word	0x646e7566
 8003174:	62206465 	.word	0x62206465
 8003178:	220a0d79 	.word	0x220a0d79
 800317c:	646e7546 	.word	0x646e7546
 8003180:	726f6620 	.word	0x726f6620
 8003184:	69635320 	.word	0x69635320
 8003188:	69746e65 	.word	0x69746e65
 800318c:	20636966 	.word	0x20636966
 8003190:	65736552 	.word	0x65736552
 8003194:	68637261 	.word	0x68637261
 8003198:	6c46202c 	.word	0x6c46202c
 800319c:	65646e61 	.word	0x65646e61
 80031a0:	20227372 	.word	0x20227372
 80031a4:	572e4628 	.word	0x572e4628
 80031a8:	2d2e4f2e 	.word	0x2d2e4f2e
 80031ac:	61616c56 	.word	0x61616c56
 80031b0:	7265646e 	.word	0x7265646e
 80031b4:	2e296e65 	.word	0x2e296e65
 80031b8:	0a0d0a0d 	.word	0x0a0d0a0d
 80031bc:	69646552 	.word	0x69646552
 80031c0:	69727473 	.word	0x69727473
 80031c4:	69747562 	.word	0x69747562
 80031c8:	61206e6f 	.word	0x61206e6f
 80031cc:	7520646e 	.word	0x7520646e
 80031d0:	69206573 	.word	0x69206573
 80031d4:	6f73206e 	.word	0x6f73206e
 80031d8:	65637275 	.word	0x65637275
 80031dc:	646e6120 	.word	0x646e6120
 80031e0:	6e696220 	.word	0x6e696220
 80031e4:	20797261 	.word	0x20797261
 80031e8:	6d726f66 	.word	0x6d726f66
 80031ec:	77202c73 	.word	0x77202c73
 80031f0:	20687469 	.word	0x20687469
 80031f4:	7720726f 	.word	0x7720726f
 80031f8:	6f687469 	.word	0x6f687469
 80031fc:	0a0d7475 	.word	0x0a0d7475
 8003200:	69646f6d 	.word	0x69646f6d
 8003204:	61636966 	.word	0x61636966
 8003208:	6e6f6974 	.word	0x6e6f6974
 800320c:	7261202c 	.word	0x7261202c
 8003210:	65702065 	.word	0x65702065
 8003214:	74696d72 	.word	0x74696d72
 8003218:	20646574 	.word	0x20646574
 800321c:	766f7270 	.word	0x766f7270
 8003220:	64656469 	.word	0x64656469
 8003224:	61687420 	.word	0x61687420
 8003228:	68742074 	.word	0x68742074
 800322c:	6f662065 	.word	0x6f662065
 8003230:	776f6c6c 	.word	0x776f6c6c
 8003234:	20676e69 	.word	0x20676e69
 8003238:	646e6f63 	.word	0x646e6f63
 800323c:	6f697469 	.word	0x6f697469
 8003240:	6120736e 	.word	0x6120736e
 8003244:	6d206572 	.word	0x6d206572
 8003248:	0d3a7465 	.word	0x0d3a7465
 800324c:	2020200a 	.word	0x2020200a
 8003250:	52202a20 	.word	0x52202a20
 8003254:	73696465 	.word	0x73696465
 8003258:	62697274 	.word	0x62697274
 800325c:	6f697475 	.word	0x6f697475
 8003260:	6f20736e 	.word	0x6f20736e
 8003264:	6f732066 	.word	0x6f732066
 8003268:	65637275 	.word	0x65637275
 800326c:	646f6320 	.word	0x646f6320
 8003270:	756d2065 	.word	0x756d2065
 8003274:	72207473 	.word	0x72207473
 8003278:	69617465 	.word	0x69617465
 800327c:	6874206e 	.word	0x6874206e
 8003280:	62612065 	.word	0x62612065
 8003284:	2065766f 	.word	0x2065766f
 8003288:	79706f63 	.word	0x79706f63
 800328c:	68676972 	.word	0x68676972
 8003290:	200a0d74 	.word	0x200a0d74
 8003294:	20202020 	.word	0x20202020
 8003298:	746f6e20 	.word	0x746f6e20
 800329c:	2c656369 	.word	0x2c656369
 80032a0:	69687420 	.word	0x69687420
 80032a4:	696c2073 	.word	0x696c2073
 80032a8:	6f207473 	.word	0x6f207473
 80032ac:	6f632066 	.word	0x6f632066
 80032b0:	7469646e 	.word	0x7469646e
 80032b4:	736e6f69 	.word	0x736e6f69
 80032b8:	646e6120 	.word	0x646e6120
 80032bc:	65687420 	.word	0x65687420
 80032c0:	6c6f6620 	.word	0x6c6f6620
 80032c4:	69776f6c 	.word	0x69776f6c
 80032c8:	6420676e 	.word	0x6420676e
 80032cc:	6c637369 	.word	0x6c637369
 80032d0:	656d6961 	.word	0x656d6961
 80032d4:	0a0d2e72 	.word	0x0a0d2e72
 80032d8:	20202020 	.word	0x20202020
 80032dc:	6552202a 	.word	0x6552202a
 80032e0:	74736964 	.word	0x74736964
 80032e4:	75626972 	.word	0x75626972
 80032e8:	6e6f6974 	.word	0x6e6f6974
 80032ec:	6e692073 	.word	0x6e692073
 80032f0:	6e696220 	.word	0x6e696220
 80032f4:	20797261 	.word	0x20797261
 80032f8:	6d726f66 	.word	0x6d726f66
 80032fc:	73756d20 	.word	0x73756d20
 8003300:	65722074 	.word	0x65722074
 8003304:	646f7270 	.word	0x646f7270
 8003308:	20656375 	.word	0x20656375
 800330c:	20656874 	.word	0x20656874
 8003310:	766f6261 	.word	0x766f6261
 8003314:	6f632065 	.word	0x6f632065
 8003318:	69727970 	.word	0x69727970
 800331c:	0d746867 	.word	0x0d746867
 8003320:	2020200a 	.word	0x2020200a
 8003324:	6e202020 	.word	0x6e202020
 8003328:	6369746f 	.word	0x6369746f
 800332c:	74202c65 	.word	0x74202c65
 8003330:	20736968 	.word	0x20736968
 8003334:	7473696c 	.word	0x7473696c
 8003338:	20666f20 	.word	0x20666f20
 800333c:	646e6f63 	.word	0x646e6f63
 8003340:	6f697469 	.word	0x6f697469
 8003344:	6120736e 	.word	0x6120736e
 8003348:	7420646e 	.word	0x7420646e
 800334c:	66206568 	.word	0x66206568
 8003350:	6f6c6c6f 	.word	0x6f6c6c6f
 8003354:	676e6977 	.word	0x676e6977
 8003358:	73696420 	.word	0x73696420
 800335c:	69616c63 	.word	0x69616c63
 8003360:	2072656d 	.word	0x2072656d
 8003364:	74206e69 	.word	0x74206e69
 8003368:	0a0d6568 	.word	0x0a0d6568
 800336c:	20202020 	.word	0x20202020
 8003370:	6f642020 	.word	0x6f642020
 8003374:	656d7563 	.word	0x656d7563
 8003378:	7461746e 	.word	0x7461746e
 800337c:	206e6f69 	.word	0x206e6f69
 8003380:	2f646e61 	.word	0x2f646e61
 8003384:	6f20726f 	.word	0x6f20726f
 8003388:	72656874 	.word	0x72656874
 800338c:	74616d20 	.word	0x74616d20
 8003390:	61697265 	.word	0x61697265
 8003394:	7020736c 	.word	0x7020736c
 8003398:	69766f72 	.word	0x69766f72
 800339c:	20646564 	.word	0x20646564
 80033a0:	68746977 	.word	0x68746977
 80033a4:	65687420 	.word	0x65687420
 80033a8:	73696420 	.word	0x73696420
 80033ac:	62697274 	.word	0x62697274
 80033b0:	6f697475 	.word	0x6f697475
 80033b4:	0a0d2e6e 	.word	0x0a0d2e6e
 80033b8:	20202020 	.word	0x20202020
 80033bc:	654e202a 	.word	0x654e202a
 80033c0:	65687469 	.word	0x65687469
 80033c4:	68742072 	.word	0x68742072
 80033c8:	616e2065 	.word	0x616e2065
 80033cc:	6f20656d 	.word	0x6f20656d
 80033d0:	68742066 	.word	0x68742066
 80033d4:	75612065 	.word	0x75612065
 80033d8:	726f6874 	.word	0x726f6874
 80033dc:	726f6e20 	.word	0x726f6e20
 80033e0:	65687420 	.word	0x65687420
 80033e4:	20200a0d 	.word	0x20200a0d
 80033e8:	20202020 	.word	0x20202020
 80033ec:	656d616e 	.word	0x656d616e
 80033f0:	666f2073 	.word	0x666f2073
 80033f4:	73746920 	.word	0x73746920
 80033f8:	6e6f6320 	.word	0x6e6f6320
 80033fc:	62697274 	.word	0x62697274
 8003400:	726f7475 	.word	0x726f7475
 8003404:	616d2073 	.word	0x616d2073
 8003408:	65622079 	.word	0x65622079
 800340c:	65737520 	.word	0x65737520
 8003410:	6f742064 	.word	0x6f742064
 8003414:	646e6520 	.word	0x646e6520
 8003418:	6573726f 	.word	0x6573726f
 800341c:	20726f20 	.word	0x20726f20
 8003420:	6d6f7270 	.word	0x6d6f7270
 8003424:	2065746f 	.word	0x2065746f
 8003428:	646f7270 	.word	0x646f7270
 800342c:	73746375 	.word	0x73746375
 8003430:	20200a0d 	.word	0x20200a0d
 8003434:	20202020 	.word	0x20202020
 8003438:	69726564 	.word	0x69726564
 800343c:	20646576 	.word	0x20646576
 8003440:	6d6f7266 	.word	0x6d6f7266
 8003444:	69687420 	.word	0x69687420
 8003448:	6f732073 	.word	0x6f732073
 800344c:	61777466 	.word	0x61777466
 8003450:	77206572 	.word	0x77206572
 8003454:	6f687469 	.word	0x6f687469
 8003458:	73207475 	.word	0x73207475
 800345c:	69636570 	.word	0x69636570
 8003460:	20636966 	.word	0x20636966
 8003464:	6f697270 	.word	0x6f697270
 8003468:	72772072 	.word	0x72772072
 800346c:	65747469 	.word	0x65747469
 8003470:	6570206e 	.word	0x6570206e
 8003474:	73696d72 	.word	0x73696d72
 8003478:	6e6f6973 	.word	0x6e6f6973
 800347c:	0d0a0d2e 	.word	0x0d0a0d2e
 8003480:	4948540a 	.word	0x4948540a
 8003484:	4f532053 	.word	0x4f532053
 8003488:	41575446 	.word	0x41575446
 800348c:	49204552 	.word	0x49204552
 8003490:	52502053 	.word	0x52502053
 8003494:	4449564f 	.word	0x4449564f
 8003498:	42204445 	.word	0x42204445
 800349c:	48542059 	.word	0x48542059
 80034a0:	4f432045 	.word	0x4f432045
 80034a4:	49525950 	.word	0x49525950
 80034a8:	20544847 	.word	0x20544847
 80034ac:	444c4f48 	.word	0x444c4f48
 80034b0:	20535245 	.word	0x20535245
 80034b4:	20444e41 	.word	0x20444e41
 80034b8:	544e4f43 	.word	0x544e4f43
 80034bc:	55424952 	.word	0x55424952
 80034c0:	53524f54 	.word	0x53524f54
 80034c4:	53412220 	.word	0x53412220
 80034c8:	22534920 	.word	0x22534920
 80034cc:	444e4120 	.word	0x444e4120
 80034d0:	4e410a0d 	.word	0x4e410a0d
 80034d4:	58452059 	.word	0x58452059
 80034d8:	53455250 	.word	0x53455250
 80034dc:	524f2053 	.word	0x524f2053
 80034e0:	504d4920 	.word	0x504d4920
 80034e4:	4445494c 	.word	0x4445494c
 80034e8:	52415720 	.word	0x52415720
 80034ec:	544e4152 	.word	0x544e4152
 80034f0:	2c534549 	.word	0x2c534549
 80034f4:	434e4920 	.word	0x434e4920
 80034f8:	4944554c 	.word	0x4944554c
 80034fc:	202c474e 	.word	0x202c474e
 8003500:	20545542 	.word	0x20545542
 8003504:	20544f4e 	.word	0x20544f4e
 8003508:	494d494c 	.word	0x494d494c
 800350c:	20444554 	.word	0x20444554
 8003510:	202c4f54 	.word	0x202c4f54
 8003514:	20454854 	.word	0x20454854
 8003518:	4c504d49 	.word	0x4c504d49
 800351c:	0d444549 	.word	0x0d444549
 8003520:	5241570a 	.word	0x5241570a
 8003524:	544e4152 	.word	0x544e4152
 8003528:	20534549 	.word	0x20534549
 800352c:	4d20464f 	.word	0x4d20464f
 8003530:	48435245 	.word	0x48435245
 8003534:	41544e41 	.word	0x41544e41
 8003538:	494c4942 	.word	0x494c4942
 800353c:	41205954 	.word	0x41205954
 8003540:	4620444e 	.word	0x4620444e
 8003544:	454e5449 	.word	0x454e5449
 8003548:	46205353 	.word	0x46205353
 800354c:	4120524f 	.word	0x4120524f
 8003550:	52415020 	.word	0x52415020
 8003554:	55434954 	.word	0x55434954
 8003558:	2052414c 	.word	0x2052414c
 800355c:	50525550 	.word	0x50525550
 8003560:	2045534f 	.word	0x2045534f
 8003564:	0d455241 	.word	0x0d455241
 8003568:	5349440a 	.word	0x5349440a
 800356c:	49414c43 	.word	0x49414c43
 8003570:	2e44454d 	.word	0x2e44454d
 8003574:	204e4920 	.word	0x204e4920
 8003578:	45204f4e 	.word	0x45204f4e
 800357c:	544e4556 	.word	0x544e4556
 8003580:	41485320 	.word	0x41485320
 8003584:	54204c4c 	.word	0x54204c4c
 8003588:	41204548 	.word	0x41204548
 800358c:	4f485455 	.word	0x4f485455
 8003590:	524f2052 	.word	0x524f2052
 8003594:	53494420 	.word	0x53494420
 8003598:	42495254 	.word	0x42495254
 800359c:	524f5455 	.word	0x524f5455
 80035a0:	20454220 	.word	0x20454220
 80035a4:	4241494c 	.word	0x4241494c
 80035a8:	4620454c 	.word	0x4620454c
 80035ac:	4120524f 	.word	0x4120524f
 80035b0:	0a0d594e 	.word	0x0a0d594e
 80035b4:	45524944 	.word	0x45524944
 80035b8:	202c5443 	.word	0x202c5443
 80035bc:	49444e49 	.word	0x49444e49
 80035c0:	54434552 	.word	0x54434552
 80035c4:	4e49202c 	.word	0x4e49202c
 80035c8:	45444943 	.word	0x45444943
 80035cc:	4c41544e 	.word	0x4c41544e
 80035d0:	5053202c 	.word	0x5053202c
 80035d4:	41494345 	.word	0x41494345
 80035d8:	45202c4c 	.word	0x45202c4c
 80035dc:	504d4558 	.word	0x504d4558
 80035e0:	5952414c 	.word	0x5952414c
 80035e4:	524f202c 	.word	0x524f202c
 80035e8:	4e4f4320 	.word	0x4e4f4320
 80035ec:	55514553 	.word	0x55514553
 80035f0:	49544e45 	.word	0x49544e45
 80035f4:	44204c41 	.word	0x44204c41
 80035f8:	47414d41 	.word	0x47414d41
 80035fc:	0a0d5345 	.word	0x0a0d5345
 8003600:	434e4928 	.word	0x434e4928
 8003604:	4944554c 	.word	0x4944554c
 8003608:	202c474e 	.word	0x202c474e
 800360c:	20545542 	.word	0x20545542
 8003610:	20544f4e 	.word	0x20544f4e
 8003614:	494d494c 	.word	0x494d494c
 8003618:	20444554 	.word	0x20444554
 800361c:	202c4f54 	.word	0x202c4f54
 8003620:	434f5250 	.word	0x434f5250
 8003624:	4d455255 	.word	0x4d455255
 8003628:	20544e45 	.word	0x20544e45
 800362c:	5320464f 	.word	0x5320464f
 8003630:	54534255 	.word	0x54534255
 8003634:	54555449 	.word	0x54555449
 8003638:	4f472045 	.word	0x4f472045
 800363c:	2053444f 	.word	0x2053444f
 8003640:	5320524f 	.word	0x5320524f
 8003644:	49565245 	.word	0x49565245
 8003648:	3b534543 	.word	0x3b534543
 800364c:	4f4c0a0d 	.word	0x4f4c0a0d
 8003650:	4f205353 	.word	0x4f205353
 8003654:	53552046 	.word	0x53552046
 8003658:	44202c45 	.word	0x44202c45
 800365c:	2c415441 	.word	0x2c415441
 8003660:	20524f20 	.word	0x20524f20
 8003664:	464f5250 	.word	0x464f5250
 8003668:	3b535449 	.word	0x3b535449
 800366c:	20524f20 	.word	0x20524f20
 8003670:	49535542 	.word	0x49535542
 8003674:	5353454e 	.word	0x5353454e
 8003678:	544e4920 	.word	0x544e4920
 800367c:	55525245 	.word	0x55525245
 8003680:	4f495450 	.word	0x4f495450
 8003684:	4820294e 	.word	0x4820294e
 8003688:	5645574f 	.word	0x5645574f
 800368c:	43205245 	.word	0x43205245
 8003690:	45535541 	.word	0x45535541
 8003694:	4e412044 	.word	0x4e412044
 8003698:	4f0a0d44 	.word	0x4f0a0d44
 800369c:	4e41204e 	.word	0x4e41204e
 80036a0:	48542059 	.word	0x48542059
 80036a4:	59524f45 	.word	0x59524f45
 80036a8:	20464f20 	.word	0x20464f20
 80036ac:	4241494c 	.word	0x4241494c
 80036b0:	54494c49 	.word	0x54494c49
 80036b4:	57202c59 	.word	0x57202c59
 80036b8:	48544548 	.word	0x48544548
 80036bc:	49205245 	.word	0x49205245
 80036c0:	4f43204e 	.word	0x4f43204e
 80036c4:	4152544e 	.word	0x4152544e
 80036c8:	202c5443 	.word	0x202c5443
 80036cc:	49525453 	.word	0x49525453
 80036d0:	4c205443 	.word	0x4c205443
 80036d4:	49424149 	.word	0x49424149
 80036d8:	5954494c 	.word	0x5954494c
 80036dc:	524f202c 	.word	0x524f202c
 80036e0:	524f5420 	.word	0x524f5420
 80036e4:	280a0d54 	.word	0x280a0d54
 80036e8:	4c434e49 	.word	0x4c434e49
 80036ec:	4e494455 	.word	0x4e494455
 80036f0:	454e2047 	.word	0x454e2047
 80036f4:	47494c47 	.word	0x47494c47
 80036f8:	45434e45 	.word	0x45434e45
 80036fc:	20524f20 	.word	0x20524f20
 8003700:	4548544f 	.word	0x4548544f
 8003704:	53495752 	.word	0x53495752
 8003708:	41202945 	.word	0x41202945
 800370c:	49534952 	.word	0x49534952
 8003710:	4920474e 	.word	0x4920474e
 8003714:	4e41204e 	.word	0x4e41204e
 8003718:	41572059 	.word	0x41572059
 800371c:	554f2059 	.word	0x554f2059
 8003720:	464f2054 	.word	0x464f2054
 8003724:	45485420 	.word	0x45485420
 8003728:	45535520 	.word	0x45535520
 800372c:	20464f20 	.word	0x20464f20
 8003730:	53494854 	.word	0x53494854
 8003734:	4f530a0d 	.word	0x4f530a0d
 8003738:	41575446 	.word	0x41575446
 800373c:	202c4552 	.word	0x202c4552
 8003740:	4e455645 	.word	0x4e455645
 8003744:	20464920 	.word	0x20464920
 8003748:	49564441 	.word	0x49564441
 800374c:	20444553 	.word	0x20444553
 8003750:	5420464f 	.word	0x5420464f
 8003754:	50204548 	.word	0x50204548
 8003758:	4953534f 	.word	0x4953534f
 800375c:	494c4942 	.word	0x494c4942
 8003760:	4f205954 	.word	0x4f205954
 8003764:	55532046 	.word	0x55532046
 8003768:	44204843 	.word	0x44204843
 800376c:	47414d41 	.word	0x47414d41
 8003770:	0a0d2e45 	.word	0x0a0d2e45
 8003774:	2a2a2a2a 	.word	0x2a2a2a2a
 8003778:	2a2a2a2a 	.word	0x2a2a2a2a
 800377c:	2a2a2a2a 	.word	0x2a2a2a2a
 8003780:	2a2a2a2a 	.word	0x2a2a2a2a
 8003784:	2a2a2a2a 	.word	0x2a2a2a2a
 8003788:	2a2a2a2a 	.word	0x2a2a2a2a
 800378c:	2a2a2a2a 	.word	0x2a2a2a2a
 8003790:	2a2a2a2a 	.word	0x2a2a2a2a
 8003794:	2a2a2a2a 	.word	0x2a2a2a2a
 8003798:	2a2a2a2a 	.word	0x2a2a2a2a
 800379c:	2a2a2a2a 	.word	0x2a2a2a2a
 80037a0:	2a2a2a2a 	.word	0x2a2a2a2a
 80037a4:	2a2a2a2a 	.word	0x2a2a2a2a
 80037a8:	2a2a2a2a 	.word	0x2a2a2a2a
 80037ac:	2a2a2a2a 	.word	0x2a2a2a2a
 80037b0:	2a2a2a2a 	.word	0x2a2a2a2a
 80037b4:	2a2a2a2a 	.word	0x2a2a2a2a
 80037b8:	2a2a2a2a 	.word	0x2a2a2a2a
 80037bc:	2a2a2a2a 	.word	0x2a2a2a2a
 80037c0:	2a2a2a2a 	.word	0x2a2a2a2a
 80037c4:	0a0d2a2a 	.word	0x0a0d2a2a
 80037c8:	0d00      	.short	0x0d00
 80037ca:	0a          	.byte	0x0a

080037cb <_binary_data_license_bin_end>:
	...

080037cc <__aeabi_uldivmod>:
 80037cc:	b953      	cbnz	r3, 80037e4 <__aeabi_uldivmod+0x18>
 80037ce:	b94a      	cbnz	r2, 80037e4 <__aeabi_uldivmod+0x18>
 80037d0:	2900      	cmp	r1, #0
 80037d2:	bf08      	it	eq
 80037d4:	2800      	cmpeq	r0, #0
 80037d6:	bf1c      	itt	ne
 80037d8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80037dc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80037e0:	f000 b97a 	b.w	8003ad8 <__aeabi_idiv0>
 80037e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80037e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80037ec:	f000 f806 	bl	80037fc <__udivmoddi4>
 80037f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80037f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80037f8:	b004      	add	sp, #16
 80037fa:	4770      	bx	lr

080037fc <__udivmoddi4>:
 80037fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003800:	9d08      	ldr	r5, [sp, #32]
 8003802:	460e      	mov	r6, r1
 8003804:	4604      	mov	r4, r0
 8003806:	468e      	mov	lr, r1
 8003808:	2b00      	cmp	r3, #0
 800380a:	d14d      	bne.n	80038a8 <__udivmoddi4+0xac>
 800380c:	428a      	cmp	r2, r1
 800380e:	4694      	mov	ip, r2
 8003810:	d969      	bls.n	80038e6 <__udivmoddi4+0xea>
 8003812:	fab2 f282 	clz	r2, r2
 8003816:	b152      	cbz	r2, 800382e <__udivmoddi4+0x32>
 8003818:	fa01 f302 	lsl.w	r3, r1, r2
 800381c:	f1c2 0120 	rsb	r1, r2, #32
 8003820:	fa20 f101 	lsr.w	r1, r0, r1
 8003824:	fa0c fc02 	lsl.w	ip, ip, r2
 8003828:	ea41 0e03 	orr.w	lr, r1, r3
 800382c:	4094      	lsls	r4, r2
 800382e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8003832:	fbbe f0f7 	udiv	r0, lr, r7
 8003836:	fa1f f68c 	uxth.w	r6, ip
 800383a:	fb07 ee10 	mls	lr, r7, r0, lr
 800383e:	fb00 f106 	mul.w	r1, r0, r6
 8003842:	0c23      	lsrs	r3, r4, #16
 8003844:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8003848:	4299      	cmp	r1, r3
 800384a:	d90a      	bls.n	8003862 <__udivmoddi4+0x66>
 800384c:	eb1c 0303 	adds.w	r3, ip, r3
 8003850:	f100 3eff 	add.w	lr, r0, #4294967295	; 0xffffffff
 8003854:	f080 811f 	bcs.w	8003a96 <__udivmoddi4+0x29a>
 8003858:	4299      	cmp	r1, r3
 800385a:	f240 811c 	bls.w	8003a96 <__udivmoddi4+0x29a>
 800385e:	3802      	subs	r0, #2
 8003860:	4463      	add	r3, ip
 8003862:	1a5b      	subs	r3, r3, r1
 8003864:	fbb3 fef7 	udiv	lr, r3, r7
 8003868:	fb07 331e 	mls	r3, r7, lr, r3
 800386c:	fb0e f606 	mul.w	r6, lr, r6
 8003870:	b2a4      	uxth	r4, r4
 8003872:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8003876:	42a6      	cmp	r6, r4
 8003878:	d90b      	bls.n	8003892 <__udivmoddi4+0x96>
 800387a:	eb1c 0404 	adds.w	r4, ip, r4
 800387e:	f10e 33ff 	add.w	r3, lr, #4294967295	; 0xffffffff
 8003882:	f080 810a 	bcs.w	8003a9a <__udivmoddi4+0x29e>
 8003886:	42a6      	cmp	r6, r4
 8003888:	f240 8107 	bls.w	8003a9a <__udivmoddi4+0x29e>
 800388c:	4464      	add	r4, ip
 800388e:	f1ae 0e02 	sub.w	lr, lr, #2
 8003892:	2100      	movs	r1, #0
 8003894:	1ba4      	subs	r4, r4, r6
 8003896:	ea4e 4000 	orr.w	r0, lr, r0, lsl #16
 800389a:	b11d      	cbz	r5, 80038a4 <__udivmoddi4+0xa8>
 800389c:	2300      	movs	r3, #0
 800389e:	40d4      	lsrs	r4, r2
 80038a0:	e9c5 4300 	strd	r4, r3, [r5]
 80038a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038a8:	428b      	cmp	r3, r1
 80038aa:	4607      	mov	r7, r0
 80038ac:	d908      	bls.n	80038c0 <__udivmoddi4+0xc4>
 80038ae:	2d00      	cmp	r5, #0
 80038b0:	f000 80ee 	beq.w	8003a90 <__udivmoddi4+0x294>
 80038b4:	2100      	movs	r1, #0
 80038b6:	e9c5 0600 	strd	r0, r6, [r5]
 80038ba:	4608      	mov	r0, r1
 80038bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038c0:	fab3 f183 	clz	r1, r3
 80038c4:	2900      	cmp	r1, #0
 80038c6:	d149      	bne.n	800395c <__udivmoddi4+0x160>
 80038c8:	42b3      	cmp	r3, r6
 80038ca:	d302      	bcc.n	80038d2 <__udivmoddi4+0xd6>
 80038cc:	4282      	cmp	r2, r0
 80038ce:	f200 80fe 	bhi.w	8003ace <__udivmoddi4+0x2d2>
 80038d2:	1abc      	subs	r4, r7, r2
 80038d4:	eb66 0303 	sbc.w	r3, r6, r3
 80038d8:	2001      	movs	r0, #1
 80038da:	469e      	mov	lr, r3
 80038dc:	2d00      	cmp	r5, #0
 80038de:	d0e1      	beq.n	80038a4 <__udivmoddi4+0xa8>
 80038e0:	e9c5 4e00 	strd	r4, lr, [r5]
 80038e4:	e7de      	b.n	80038a4 <__udivmoddi4+0xa8>
 80038e6:	b902      	cbnz	r2, 80038ea <__udivmoddi4+0xee>
 80038e8:	deff      	udf	#255	; 0xff
 80038ea:	fab2 f282 	clz	r2, r2
 80038ee:	2a00      	cmp	r2, #0
 80038f0:	f040 808e 	bne.w	8003a10 <__udivmoddi4+0x214>
 80038f4:	eba1 000c 	sub.w	r0, r1, ip
 80038f8:	2101      	movs	r1, #1
 80038fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80038fe:	fa1f f68c 	uxth.w	r6, ip
 8003902:	fbb0 fef7 	udiv	lr, r0, r7
 8003906:	fb07 001e 	mls	r0, r7, lr, r0
 800390a:	0c23      	lsrs	r3, r4, #16
 800390c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8003910:	fb06 f00e 	mul.w	r0, r6, lr
 8003914:	4298      	cmp	r0, r3
 8003916:	d908      	bls.n	800392a <__udivmoddi4+0x12e>
 8003918:	eb1c 0303 	adds.w	r3, ip, r3
 800391c:	f10e 38ff 	add.w	r8, lr, #4294967295	; 0xffffffff
 8003920:	d202      	bcs.n	8003928 <__udivmoddi4+0x12c>
 8003922:	4298      	cmp	r0, r3
 8003924:	f200 80cf 	bhi.w	8003ac6 <__udivmoddi4+0x2ca>
 8003928:	46c6      	mov	lr, r8
 800392a:	1a1b      	subs	r3, r3, r0
 800392c:	fbb3 f0f7 	udiv	r0, r3, r7
 8003930:	fb07 3310 	mls	r3, r7, r0, r3
 8003934:	fb00 f606 	mul.w	r6, r0, r6
 8003938:	b2a4      	uxth	r4, r4
 800393a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800393e:	42a6      	cmp	r6, r4
 8003940:	d908      	bls.n	8003954 <__udivmoddi4+0x158>
 8003942:	eb1c 0404 	adds.w	r4, ip, r4
 8003946:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800394a:	d202      	bcs.n	8003952 <__udivmoddi4+0x156>
 800394c:	42a6      	cmp	r6, r4
 800394e:	f200 80b7 	bhi.w	8003ac0 <__udivmoddi4+0x2c4>
 8003952:	4618      	mov	r0, r3
 8003954:	1ba4      	subs	r4, r4, r6
 8003956:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 800395a:	e79e      	b.n	800389a <__udivmoddi4+0x9e>
 800395c:	f1c1 0c20 	rsb	ip, r1, #32
 8003960:	fa22 f00c 	lsr.w	r0, r2, ip
 8003964:	408b      	lsls	r3, r1
 8003966:	4303      	orrs	r3, r0
 8003968:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800396c:	fa26 f00c 	lsr.w	r0, r6, ip
 8003970:	fbb0 f8f9 	udiv	r8, r0, r9
 8003974:	fb09 0018 	mls	r0, r9, r8, r0
 8003978:	fa06 f401 	lsl.w	r4, r6, r1
 800397c:	fa27 f60c 	lsr.w	r6, r7, ip
 8003980:	4334      	orrs	r4, r6
 8003982:	fa1f fe83 	uxth.w	lr, r3
 8003986:	0c26      	lsrs	r6, r4, #16
 8003988:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 800398c:	fb08 f00e 	mul.w	r0, r8, lr
 8003990:	42b0      	cmp	r0, r6
 8003992:	fa02 f201 	lsl.w	r2, r2, r1
 8003996:	fa07 f701 	lsl.w	r7, r7, r1
 800399a:	d90a      	bls.n	80039b2 <__udivmoddi4+0x1b6>
 800399c:	199e      	adds	r6, r3, r6
 800399e:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80039a2:	f080 808b 	bcs.w	8003abc <__udivmoddi4+0x2c0>
 80039a6:	42b0      	cmp	r0, r6
 80039a8:	f240 8088 	bls.w	8003abc <__udivmoddi4+0x2c0>
 80039ac:	f1a8 0802 	sub.w	r8, r8, #2
 80039b0:	441e      	add	r6, r3
 80039b2:	1a36      	subs	r6, r6, r0
 80039b4:	fbb6 f0f9 	udiv	r0, r6, r9
 80039b8:	fb09 6610 	mls	r6, r9, r0, r6
 80039bc:	fb00 fe0e 	mul.w	lr, r0, lr
 80039c0:	b2a4      	uxth	r4, r4
 80039c2:	ea44 4606 	orr.w	r6, r4, r6, lsl #16
 80039c6:	45b6      	cmp	lr, r6
 80039c8:	d907      	bls.n	80039da <__udivmoddi4+0x1de>
 80039ca:	199e      	adds	r6, r3, r6
 80039cc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80039d0:	d270      	bcs.n	8003ab4 <__udivmoddi4+0x2b8>
 80039d2:	45b6      	cmp	lr, r6
 80039d4:	d96e      	bls.n	8003ab4 <__udivmoddi4+0x2b8>
 80039d6:	3802      	subs	r0, #2
 80039d8:	441e      	add	r6, r3
 80039da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80039de:	fba0 8402 	umull	r8, r4, r0, r2
 80039e2:	eba6 060e 	sub.w	r6, r6, lr
 80039e6:	42a6      	cmp	r6, r4
 80039e8:	46c6      	mov	lr, r8
 80039ea:	46a1      	mov	r9, r4
 80039ec:	d359      	bcc.n	8003aa2 <__udivmoddi4+0x2a6>
 80039ee:	d056      	beq.n	8003a9e <__udivmoddi4+0x2a2>
 80039f0:	2d00      	cmp	r5, #0
 80039f2:	d06e      	beq.n	8003ad2 <__udivmoddi4+0x2d6>
 80039f4:	ebb7 020e 	subs.w	r2, r7, lr
 80039f8:	eb66 0609 	sbc.w	r6, r6, r9
 80039fc:	40ca      	lsrs	r2, r1
 80039fe:	fa06 fc0c 	lsl.w	ip, r6, ip
 8003a02:	ea4c 0202 	orr.w	r2, ip, r2
 8003a06:	40ce      	lsrs	r6, r1
 8003a08:	e9c5 2600 	strd	r2, r6, [r5]
 8003a0c:	2100      	movs	r1, #0
 8003a0e:	e749      	b.n	80038a4 <__udivmoddi4+0xa8>
 8003a10:	fa0c fc02 	lsl.w	ip, ip, r2
 8003a14:	f1c2 0020 	rsb	r0, r2, #32
 8003a18:	fa21 fe00 	lsr.w	lr, r1, r0
 8003a1c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8003a20:	fa01 f302 	lsl.w	r3, r1, r2
 8003a24:	fbbe f1f7 	udiv	r1, lr, r7
 8003a28:	fb07 ee11 	mls	lr, r7, r1, lr
 8003a2c:	fa24 f000 	lsr.w	r0, r4, r0
 8003a30:	4318      	orrs	r0, r3
 8003a32:	fa1f f68c 	uxth.w	r6, ip
 8003a36:	0c03      	lsrs	r3, r0, #16
 8003a38:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8003a3c:	fb01 fe06 	mul.w	lr, r1, r6
 8003a40:	459e      	cmp	lr, r3
 8003a42:	fa04 f402 	lsl.w	r4, r4, r2
 8003a46:	d908      	bls.n	8003a5a <__udivmoddi4+0x25e>
 8003a48:	eb1c 0303 	adds.w	r3, ip, r3
 8003a4c:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
 8003a50:	d232      	bcs.n	8003ab8 <__udivmoddi4+0x2bc>
 8003a52:	459e      	cmp	lr, r3
 8003a54:	d930      	bls.n	8003ab8 <__udivmoddi4+0x2bc>
 8003a56:	3902      	subs	r1, #2
 8003a58:	4463      	add	r3, ip
 8003a5a:	eba3 030e 	sub.w	r3, r3, lr
 8003a5e:	fbb3 fef7 	udiv	lr, r3, r7
 8003a62:	fb07 331e 	mls	r3, r7, lr, r3
 8003a66:	b280      	uxth	r0, r0
 8003a68:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8003a6c:	fb0e f306 	mul.w	r3, lr, r6
 8003a70:	4283      	cmp	r3, r0
 8003a72:	d909      	bls.n	8003a88 <__udivmoddi4+0x28c>
 8003a74:	eb1c 0000 	adds.w	r0, ip, r0
 8003a78:	f10e 38ff 	add.w	r8, lr, #4294967295	; 0xffffffff
 8003a7c:	d218      	bcs.n	8003ab0 <__udivmoddi4+0x2b4>
 8003a7e:	4283      	cmp	r3, r0
 8003a80:	d916      	bls.n	8003ab0 <__udivmoddi4+0x2b4>
 8003a82:	f1ae 0e02 	sub.w	lr, lr, #2
 8003a86:	4460      	add	r0, ip
 8003a88:	1ac0      	subs	r0, r0, r3
 8003a8a:	ea4e 4101 	orr.w	r1, lr, r1, lsl #16
 8003a8e:	e738      	b.n	8003902 <__udivmoddi4+0x106>
 8003a90:	4629      	mov	r1, r5
 8003a92:	4628      	mov	r0, r5
 8003a94:	e706      	b.n	80038a4 <__udivmoddi4+0xa8>
 8003a96:	4670      	mov	r0, lr
 8003a98:	e6e3      	b.n	8003862 <__udivmoddi4+0x66>
 8003a9a:	469e      	mov	lr, r3
 8003a9c:	e6f9      	b.n	8003892 <__udivmoddi4+0x96>
 8003a9e:	4547      	cmp	r7, r8
 8003aa0:	d2a6      	bcs.n	80039f0 <__udivmoddi4+0x1f4>
 8003aa2:	ebb8 0e02 	subs.w	lr, r8, r2
 8003aa6:	eb64 0303 	sbc.w	r3, r4, r3
 8003aaa:	3801      	subs	r0, #1
 8003aac:	4699      	mov	r9, r3
 8003aae:	e79f      	b.n	80039f0 <__udivmoddi4+0x1f4>
 8003ab0:	46c6      	mov	lr, r8
 8003ab2:	e7e9      	b.n	8003a88 <__udivmoddi4+0x28c>
 8003ab4:	4620      	mov	r0, r4
 8003ab6:	e790      	b.n	80039da <__udivmoddi4+0x1de>
 8003ab8:	4641      	mov	r1, r8
 8003aba:	e7ce      	b.n	8003a5a <__udivmoddi4+0x25e>
 8003abc:	46d0      	mov	r8, sl
 8003abe:	e778      	b.n	80039b2 <__udivmoddi4+0x1b6>
 8003ac0:	4464      	add	r4, ip
 8003ac2:	3802      	subs	r0, #2
 8003ac4:	e746      	b.n	8003954 <__udivmoddi4+0x158>
 8003ac6:	f1ae 0e02 	sub.w	lr, lr, #2
 8003aca:	4463      	add	r3, ip
 8003acc:	e72d      	b.n	800392a <__udivmoddi4+0x12e>
 8003ace:	4608      	mov	r0, r1
 8003ad0:	e704      	b.n	80038dc <__udivmoddi4+0xe0>
 8003ad2:	4629      	mov	r1, r5
 8003ad4:	e6e6      	b.n	80038a4 <__udivmoddi4+0xa8>
 8003ad6:	bf00      	nop

08003ad8 <__aeabi_idiv0>:
 8003ad8:	4770      	bx	lr
 8003ada:	bf00      	nop

08003adc <memcpy>:
 8003adc:	4684      	mov	ip, r0
 8003ade:	ea41 0300 	orr.w	r3, r1, r0
 8003ae2:	f013 0303 	ands.w	r3, r3, #3
 8003ae6:	d149      	bne.n	8003b7c <memcpy+0xa0>
 8003ae8:	3a40      	subs	r2, #64	; 0x40
 8003aea:	d323      	bcc.n	8003b34 <memcpy+0x58>
 8003aec:	680b      	ldr	r3, [r1, #0]
 8003aee:	6003      	str	r3, [r0, #0]
 8003af0:	684b      	ldr	r3, [r1, #4]
 8003af2:	6043      	str	r3, [r0, #4]
 8003af4:	688b      	ldr	r3, [r1, #8]
 8003af6:	6083      	str	r3, [r0, #8]
 8003af8:	68cb      	ldr	r3, [r1, #12]
 8003afa:	60c3      	str	r3, [r0, #12]
 8003afc:	690b      	ldr	r3, [r1, #16]
 8003afe:	6103      	str	r3, [r0, #16]
 8003b00:	694b      	ldr	r3, [r1, #20]
 8003b02:	6143      	str	r3, [r0, #20]
 8003b04:	698b      	ldr	r3, [r1, #24]
 8003b06:	6183      	str	r3, [r0, #24]
 8003b08:	69cb      	ldr	r3, [r1, #28]
 8003b0a:	61c3      	str	r3, [r0, #28]
 8003b0c:	6a0b      	ldr	r3, [r1, #32]
 8003b0e:	6203      	str	r3, [r0, #32]
 8003b10:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8003b12:	6243      	str	r3, [r0, #36]	; 0x24
 8003b14:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8003b16:	6283      	str	r3, [r0, #40]	; 0x28
 8003b18:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8003b1a:	62c3      	str	r3, [r0, #44]	; 0x2c
 8003b1c:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8003b1e:	6303      	str	r3, [r0, #48]	; 0x30
 8003b20:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8003b22:	6343      	str	r3, [r0, #52]	; 0x34
 8003b24:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 8003b26:	6383      	str	r3, [r0, #56]	; 0x38
 8003b28:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8003b2a:	63c3      	str	r3, [r0, #60]	; 0x3c
 8003b2c:	3040      	adds	r0, #64	; 0x40
 8003b2e:	3140      	adds	r1, #64	; 0x40
 8003b30:	3a40      	subs	r2, #64	; 0x40
 8003b32:	d2db      	bcs.n	8003aec <memcpy+0x10>
 8003b34:	3230      	adds	r2, #48	; 0x30
 8003b36:	d30b      	bcc.n	8003b50 <memcpy+0x74>
 8003b38:	680b      	ldr	r3, [r1, #0]
 8003b3a:	6003      	str	r3, [r0, #0]
 8003b3c:	684b      	ldr	r3, [r1, #4]
 8003b3e:	6043      	str	r3, [r0, #4]
 8003b40:	688b      	ldr	r3, [r1, #8]
 8003b42:	6083      	str	r3, [r0, #8]
 8003b44:	68cb      	ldr	r3, [r1, #12]
 8003b46:	60c3      	str	r3, [r0, #12]
 8003b48:	3010      	adds	r0, #16
 8003b4a:	3110      	adds	r1, #16
 8003b4c:	3a10      	subs	r2, #16
 8003b4e:	d2f3      	bcs.n	8003b38 <memcpy+0x5c>
 8003b50:	320c      	adds	r2, #12
 8003b52:	d305      	bcc.n	8003b60 <memcpy+0x84>
 8003b54:	f851 3b04 	ldr.w	r3, [r1], #4
 8003b58:	f840 3b04 	str.w	r3, [r0], #4
 8003b5c:	3a04      	subs	r2, #4
 8003b5e:	d2f9      	bcs.n	8003b54 <memcpy+0x78>
 8003b60:	3204      	adds	r2, #4
 8003b62:	d008      	beq.n	8003b76 <memcpy+0x9a>
 8003b64:	07d2      	lsls	r2, r2, #31
 8003b66:	bf1c      	itt	ne
 8003b68:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8003b6c:	f800 3b01 	strbne.w	r3, [r0], #1
 8003b70:	d301      	bcc.n	8003b76 <memcpy+0x9a>
 8003b72:	880b      	ldrh	r3, [r1, #0]
 8003b74:	8003      	strh	r3, [r0, #0]
 8003b76:	4660      	mov	r0, ip
 8003b78:	4770      	bx	lr
 8003b7a:	bf00      	nop
 8003b7c:	2a08      	cmp	r2, #8
 8003b7e:	d313      	bcc.n	8003ba8 <memcpy+0xcc>
 8003b80:	078b      	lsls	r3, r1, #30
 8003b82:	d0b1      	beq.n	8003ae8 <memcpy+0xc>
 8003b84:	f010 0303 	ands.w	r3, r0, #3
 8003b88:	d0ae      	beq.n	8003ae8 <memcpy+0xc>
 8003b8a:	f1c3 0304 	rsb	r3, r3, #4
 8003b8e:	1ad2      	subs	r2, r2, r3
 8003b90:	07db      	lsls	r3, r3, #31
 8003b92:	bf1c      	itt	ne
 8003b94:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8003b98:	f800 3b01 	strbne.w	r3, [r0], #1
 8003b9c:	d3a4      	bcc.n	8003ae8 <memcpy+0xc>
 8003b9e:	f831 3b02 	ldrh.w	r3, [r1], #2
 8003ba2:	f820 3b02 	strh.w	r3, [r0], #2
 8003ba6:	e79f      	b.n	8003ae8 <memcpy+0xc>
 8003ba8:	3a04      	subs	r2, #4
 8003baa:	d3d9      	bcc.n	8003b60 <memcpy+0x84>
 8003bac:	3a01      	subs	r2, #1
 8003bae:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003bb2:	f800 3b01 	strb.w	r3, [r0], #1
 8003bb6:	d2f9      	bcs.n	8003bac <memcpy+0xd0>
 8003bb8:	780b      	ldrb	r3, [r1, #0]
 8003bba:	7003      	strb	r3, [r0, #0]
 8003bbc:	784b      	ldrb	r3, [r1, #1]
 8003bbe:	7043      	strb	r3, [r0, #1]
 8003bc0:	788b      	ldrb	r3, [r1, #2]
 8003bc2:	7083      	strb	r3, [r0, #2]
 8003bc4:	4660      	mov	r0, ip
 8003bc6:	4770      	bx	lr

08003bc8 <strcmp>:
 8003bc8:	ea80 0c01 	eor.w	ip, r0, r1
 8003bcc:	f01c 0f03 	tst.w	ip, #3
 8003bd0:	d137      	bne.n	8003c42 <strcmp+0x7a>
 8003bd2:	f010 0c03 	ands.w	ip, r0, #3
 8003bd6:	f020 0003 	bic.w	r0, r0, #3
 8003bda:	f021 0103 	bic.w	r1, r1, #3
 8003bde:	f850 2b04 	ldr.w	r2, [r0], #4
 8003be2:	bf08      	it	eq
 8003be4:	f851 3b04 	ldreq.w	r3, [r1], #4
 8003be8:	d00e      	beq.n	8003c08 <strcmp+0x40>
 8003bea:	f08c 0c03 	eor.w	ip, ip, #3
 8003bee:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8003bf2:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8003bf6:	fa23 fc0c 	lsr.w	ip, r3, ip
 8003bfa:	f851 3b04 	ldr.w	r3, [r1], #4
 8003bfe:	ea42 020c 	orr.w	r2, r2, ip
 8003c02:	ea43 030c 	orr.w	r3, r3, ip
 8003c06:	bf00      	nop
 8003c08:	f1a2 3c01 	sub.w	ip, r2, #16843009	; 0x1010101
 8003c0c:	429a      	cmp	r2, r3
 8003c0e:	bf01      	itttt	eq
 8003c10:	ea2c 0c02 	biceq.w	ip, ip, r2
 8003c14:	f01c 3f80 	tsteq.w	ip, #2155905152	; 0x80808080
 8003c18:	f850 2b04 	ldreq.w	r2, [r0], #4
 8003c1c:	f851 3b04 	ldreq.w	r3, [r1], #4
 8003c20:	d0f2      	beq.n	8003c08 <strcmp+0x40>
 8003c22:	ea4f 6002 	mov.w	r0, r2, lsl #24
 8003c26:	ea4f 2212 	mov.w	r2, r2, lsr #8
 8003c2a:	2801      	cmp	r0, #1
 8003c2c:	bf28      	it	cs
 8003c2e:	ebb0 6f03 	cmpcs.w	r0, r3, lsl #24
 8003c32:	bf08      	it	eq
 8003c34:	0a1b      	lsreq	r3, r3, #8
 8003c36:	d0f4      	beq.n	8003c22 <strcmp+0x5a>
 8003c38:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 8003c3c:	0e00      	lsrs	r0, r0, #24
 8003c3e:	1ac0      	subs	r0, r0, r3
 8003c40:	4770      	bx	lr
 8003c42:	f010 0f03 	tst.w	r0, #3
 8003c46:	d00a      	beq.n	8003c5e <strcmp+0x96>
 8003c48:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003c4c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003c50:	2a01      	cmp	r2, #1
 8003c52:	bf28      	it	cs
 8003c54:	429a      	cmpcs	r2, r3
 8003c56:	d0f4      	beq.n	8003c42 <strcmp+0x7a>
 8003c58:	eba2 0003 	sub.w	r0, r2, r3
 8003c5c:	4770      	bx	lr
 8003c5e:	f84d 5d04 	str.w	r5, [sp, #-4]!
 8003c62:	f850 2b04 	ldr.w	r2, [r0], #4
 8003c66:	f001 0503 	and.w	r5, r1, #3
 8003c6a:	f021 0103 	bic.w	r1, r1, #3
 8003c6e:	f851 3b04 	ldr.w	r3, [r1], #4
 8003c72:	2d02      	cmp	r5, #2
 8003c74:	d026      	beq.n	8003cc4 <strcmp+0xfc>
 8003c76:	d84d      	bhi.n	8003d14 <strcmp+0x14c>
 8003c78:	f022 457f 	bic.w	r5, r2, #4278190080	; 0xff000000
 8003c7c:	ebb5 2f13 	cmp.w	r5, r3, lsr #8
 8003c80:	f1a2 3c01 	sub.w	ip, r2, #16843009	; 0x1010101
 8003c84:	ea2c 0c02 	bic.w	ip, ip, r2
 8003c88:	d10d      	bne.n	8003ca6 <strcmp+0xde>
 8003c8a:	f01c 3c80 	ands.w	ip, ip, #2155905152	; 0x80808080
 8003c8e:	bf08      	it	eq
 8003c90:	f851 3b04 	ldreq.w	r3, [r1], #4
 8003c94:	d10a      	bne.n	8003cac <strcmp+0xe4>
 8003c96:	ea85 0502 	eor.w	r5, r5, r2
 8003c9a:	ebb5 6f03 	cmp.w	r5, r3, lsl #24
 8003c9e:	d10c      	bne.n	8003cba <strcmp+0xf2>
 8003ca0:	f850 2b04 	ldr.w	r2, [r0], #4
 8003ca4:	e7e8      	b.n	8003c78 <strcmp+0xb0>
 8003ca6:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8003caa:	e05b      	b.n	8003d64 <strcmp+0x19c>
 8003cac:	f03c 4c7f 	bics.w	ip, ip, #4278190080	; 0xff000000
 8003cb0:	d154      	bne.n	8003d5c <strcmp+0x194>
 8003cb2:	780b      	ldrb	r3, [r1, #0]
 8003cb4:	ea4f 6512 	mov.w	r5, r2, lsr #24
 8003cb8:	e054      	b.n	8003d64 <strcmp+0x19c>
 8003cba:	ea4f 6512 	mov.w	r5, r2, lsr #24
 8003cbe:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 8003cc2:	e04f      	b.n	8003d64 <strcmp+0x19c>
 8003cc4:	ea4f 4502 	mov.w	r5, r2, lsl #16
 8003cc8:	f1a2 3c01 	sub.w	ip, r2, #16843009	; 0x1010101
 8003ccc:	ea4f 4515 	mov.w	r5, r5, lsr #16
 8003cd0:	ea2c 0c02 	bic.w	ip, ip, r2
 8003cd4:	ebb5 4f13 	cmp.w	r5, r3, lsr #16
 8003cd8:	d118      	bne.n	8003d0c <strcmp+0x144>
 8003cda:	f01c 3c80 	ands.w	ip, ip, #2155905152	; 0x80808080
 8003cde:	bf08      	it	eq
 8003ce0:	f851 3b04 	ldreq.w	r3, [r1], #4
 8003ce4:	d107      	bne.n	8003cf6 <strcmp+0x12e>
 8003ce6:	ea85 0502 	eor.w	r5, r5, r2
 8003cea:	ebb5 4f03 	cmp.w	r5, r3, lsl #16
 8003cee:	d109      	bne.n	8003d04 <strcmp+0x13c>
 8003cf0:	f850 2b04 	ldr.w	r2, [r0], #4
 8003cf4:	e7e6      	b.n	8003cc4 <strcmp+0xfc>
 8003cf6:	ea5f 4c0c 	movs.w	ip, ip, lsl #16
 8003cfa:	d12f      	bne.n	8003d5c <strcmp+0x194>
 8003cfc:	880b      	ldrh	r3, [r1, #0]
 8003cfe:	ea4f 4512 	mov.w	r5, r2, lsr #16
 8003d02:	e02f      	b.n	8003d64 <strcmp+0x19c>
 8003d04:	ea4f 4303 	mov.w	r3, r3, lsl #16
 8003d08:	ea4f 4512 	mov.w	r5, r2, lsr #16
 8003d0c:	ea4f 4313 	mov.w	r3, r3, lsr #16
 8003d10:	e028      	b.n	8003d64 <strcmp+0x19c>
 8003d12:	bf00      	nop
 8003d14:	f002 05ff 	and.w	r5, r2, #255	; 0xff
 8003d18:	ebb5 6f13 	cmp.w	r5, r3, lsr #24
 8003d1c:	f1a2 3c01 	sub.w	ip, r2, #16843009	; 0x1010101
 8003d20:	ea2c 0c02 	bic.w	ip, ip, r2
 8003d24:	d10d      	bne.n	8003d42 <strcmp+0x17a>
 8003d26:	f01c 3c80 	ands.w	ip, ip, #2155905152	; 0x80808080
 8003d2a:	bf08      	it	eq
 8003d2c:	f851 3b04 	ldreq.w	r3, [r1], #4
 8003d30:	d10a      	bne.n	8003d48 <strcmp+0x180>
 8003d32:	ea85 0502 	eor.w	r5, r5, r2
 8003d36:	ebb5 2f03 	cmp.w	r5, r3, lsl #8
 8003d3a:	d10a      	bne.n	8003d52 <strcmp+0x18a>
 8003d3c:	f850 2b04 	ldr.w	r2, [r0], #4
 8003d40:	e7e8      	b.n	8003d14 <strcmp+0x14c>
 8003d42:	ea4f 6313 	mov.w	r3, r3, lsr #24
 8003d46:	e00d      	b.n	8003d64 <strcmp+0x19c>
 8003d48:	f012 0fff 	tst.w	r2, #255	; 0xff
 8003d4c:	d006      	beq.n	8003d5c <strcmp+0x194>
 8003d4e:	f851 3b04 	ldr.w	r3, [r1], #4
 8003d52:	ea4f 2512 	mov.w	r5, r2, lsr #8
 8003d56:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003d5a:	e003      	b.n	8003d64 <strcmp+0x19c>
 8003d5c:	f04f 0000 	mov.w	r0, #0
 8003d60:	bc20      	pop	{r5}
 8003d62:	4770      	bx	lr
 8003d64:	f005 02ff 	and.w	r2, r5, #255	; 0xff
 8003d68:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 8003d6c:	2801      	cmp	r0, #1
 8003d6e:	bf28      	it	cs
 8003d70:	4290      	cmpcs	r0, r2
 8003d72:	bf04      	itt	eq
 8003d74:	0a2d      	lsreq	r5, r5, #8
 8003d76:	0a1b      	lsreq	r3, r3, #8
 8003d78:	d0f4      	beq.n	8003d64 <strcmp+0x19c>
 8003d7a:	eba2 0000 	sub.w	r0, r2, r0
 8003d7e:	bc20      	pop	{r5}
 8003d80:	4770      	bx	lr
 8003d82:	bf00      	nop

08003d84 <Vector6C.part.0>:
extern UBaseType_t uxSavedInterruptStatus;

static inline void osalOsRescheduleS(void)
{
    osalDbgCheckClassS();
    if(uxYieldPending()) taskYIELD();
 8003d84:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8003d88:	4a0d      	ldr	r2, [pc, #52]	; (8003dc0 <Vector6C.part.0+0x3c>)
 8003d8a:	f8d3 1d20 	ldr.w	r1, [r3, #3360]	; 0xd20
 8003d8e:	6011      	str	r1, [r2, #0]
 8003d90:	4a0c      	ldr	r2, [pc, #48]	; (8003dc4 <Vector6C.part.0+0x40>)
 8003d92:	6812      	ldr	r2, [r2, #0]
 8003d94:	b14a      	cbz	r2, 8003daa <Vector6C.part.0+0x26>
 8003d96:	f8d3 2d20 	ldr.w	r2, [r3, #3360]	; 0xd20
 8003d9a:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
 8003d9e:	f8c3 2d20 	str.w	r2, [r3, #3360]	; 0xd20
 8003da2:	f8d3 2d20 	ldr.w	r2, [r3, #3360]	; 0xd20
 8003da6:	f8c3 2d20 	str.w	r2, [r3, #3360]	; 0xd20
 8003daa:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8003dae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003db2:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8003db6:	f3bf 8f4f 	dsb	sy
 8003dba:	f3bf 8f6f 	isb	sy
}
 8003dbe:	4770      	bx	lr
 8003dc0:	2000134c 	.word	0x2000134c
 8003dc4:	20001358 	.word	0x20001358

08003dc8 <sduRequestsHook>:
 * @retval true         Message handled internally.
 * @retval false        Message not handled.
 */
bool sduRequestsHook(USBDriver *usbp) {

  if ((usbp->setup[0] & USB_RTYPE_TYPE_MASK) == USB_RTYPE_TYPE_CLASS) {
 8003dc8:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
bool sduRequestsHook(USBDriver *usbp) {
 8003dcc:	4603      	mov	r3, r0
  if ((usbp->setup[0] & USB_RTYPE_TYPE_MASK) == USB_RTYPE_TYPE_CLASS) {
 8003dce:	f002 0260 	and.w	r2, r2, #96	; 0x60
 8003dd2:	2a20      	cmp	r2, #32
 8003dd4:	d114      	bne.n	8003e00 <sduRequestsHook+0x38>
    switch (usbp->setup[1]) {
 8003dd6:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
 8003dda:	2000      	movs	r0, #0
 8003ddc:	2a21      	cmp	r2, #33	; 0x21
 8003dde:	d802      	bhi.n	8003de6 <sduRequestsHook+0x1e>
 8003de0:	2a1f      	cmp	r2, #31
 8003de2:	d803      	bhi.n	8003dec <sduRequestsHook+0x24>
 8003de4:	4770      	bx	lr
 8003de6:	2a22      	cmp	r2, #34	; 0x22
 8003de8:	d007      	beq.n	8003dfa <sduRequestsHook+0x32>
 8003dea:	4770      	bx	lr
    case CDC_GET_LINE_CODING:
      usbSetupTransfer(usbp, (uint8_t *)&linecoding, sizeof(linecoding), NULL);
 8003dec:	4a05      	ldr	r2, [pc, #20]	; (8003e04 <sduRequestsHook+0x3c>)
 8003dee:	669a      	str	r2, [r3, #104]	; 0x68
 8003df0:	2207      	movs	r2, #7
 8003df2:	66da      	str	r2, [r3, #108]	; 0x6c
    case CDC_SET_LINE_CODING:
      usbSetupTransfer(usbp, (uint8_t *)&linecoding, sizeof(linecoding), NULL);
      return true;
    case CDC_SET_CONTROL_LINE_STATE:
      /* Nothing to do, there are no control lines.*/
      usbSetupTransfer(usbp, NULL, 0, NULL);
 8003df4:	6718      	str	r0, [r3, #112]	; 0x70
      return true;
 8003df6:	2001      	movs	r0, #1
 8003df8:	4770      	bx	lr
      usbSetupTransfer(usbp, NULL, 0, NULL);
 8003dfa:	e9c3 001a 	strd	r0, r0, [r3, #104]	; 0x68
 8003dfe:	e7f9      	b.n	8003df4 <sduRequestsHook+0x2c>
    default:
      return false;
    }
  }
  return false;
 8003e00:	2000      	movs	r0, #0
}
 8003e02:	4770      	bx	lr
 8003e04:	20000850 	.word	0x20000850

08003e08 <sduInterruptTransmitted>:
 */
void sduInterruptTransmitted(USBDriver *usbp, usbep_t ep) {

  (void)usbp;
  (void)ep;
}
 8003e08:	4770      	bx	lr
	...

08003e0c <set_address>:
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 */
static void set_address(USBDriver *usbp) {

  usbp->address = usbp->setup[2];
 8003e0c:	f890 3076 	ldrb.w	r3, [r0, #118]	; 0x76
 *
 * @notapi
 */
void usb_lld_set_address(USBDriver *usbp) {

  STM32_USB->DADDR = (uint32_t)(usbp->address) | DADDR_EF;
 8003e10:	4a07      	ldr	r2, [pc, #28]	; (8003e30 <set_address+0x24>)
 8003e12:	f880 307e 	strb.w	r3, [r0, #126]	; 0x7e
 8003e16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
static void set_address(USBDriver *usbp) {
 8003e1a:	b510      	push	{r4, lr}
 8003e1c:	64d3      	str	r3, [r2, #76]	; 0x4c
  usb_lld_set_address(usbp);
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_ADDRESS);
 8003e1e:	6843      	ldr	r3, [r0, #4]
static void set_address(USBDriver *usbp) {
 8003e20:	4604      	mov	r4, r0
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_ADDRESS);
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	b10b      	cbz	r3, 8003e2a <set_address+0x1e>
 8003e26:	2101      	movs	r1, #1
 8003e28:	4798      	blx	r3
  usbp->state = USB_SELECTED;
 8003e2a:	2303      	movs	r3, #3
 8003e2c:	7023      	strb	r3, [r4, #0]
}
 8003e2e:	bd10      	pop	{r4, pc}
 8003e30:	40005c00 	.word	0x40005c00

08003e34 <Vector6C>:
/**
 * @brief   DMA1 stream 1 shared ISR.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH1_HANDLER) {
 8003e34:	b508      	push	{r3, lr}

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM1);
 8003e36:	4b0b      	ldr	r3, [pc, #44]	; (8003e64 <Vector6C+0x30>)
 8003e38:	6819      	ldr	r1, [r3, #0]
 8003e3a:	689a      	ldr	r2, [r3, #8]
 8003e3c:	f001 010e 	and.w	r1, r1, #14
 8003e40:	420a      	tst	r2, r1
 8003e42:	d005      	beq.n	8003e50 <Vector6C+0x1c>
 8003e44:	4a08      	ldr	r2, [pc, #32]	; (8003e68 <Vector6C+0x34>)
 8003e46:	6059      	str	r1, [r3, #4]
 8003e48:	6813      	ldr	r3, [r2, #0]
 8003e4a:	b10b      	cbz	r3, 8003e50 <Vector6C+0x1c>
 8003e4c:	6850      	ldr	r0, [r2, #4]
 8003e4e:	4798      	blx	r3
 8003e50:	2100      	movs	r1, #0
 8003e52:	4b06      	ldr	r3, [pc, #24]	; (8003e6c <Vector6C+0x38>)
 8003e54:	681a      	ldr	r2, [r3, #0]
 8003e56:	6019      	str	r1, [r3, #0]

  OSAL_IRQ_EPILOGUE();
 8003e58:	b11a      	cbz	r2, 8003e62 <Vector6C+0x2e>
}
 8003e5a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8003e5e:	f7ff bf91 	b.w	8003d84 <Vector6C.part.0>
 8003e62:	bd08      	pop	{r3, pc}
 8003e64:	40020000 	.word	0x40020000
 8003e68:	20000fe8 	.word	0x20000fe8
 8003e6c:	2000164c 	.word	0x2000164c

08003e70 <Vector70>:
/**
 * @brief   DMA1 stream 2 shared ISR.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH2_HANDLER) {
 8003e70:	b508      	push	{r3, lr}

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM2);
 8003e72:	4b19      	ldr	r3, [pc, #100]	; (8003ed8 <Vector70+0x68>)
 8003e74:	6819      	ldr	r1, [r3, #0]
 8003e76:	69da      	ldr	r2, [r3, #28]
 8003e78:	0909      	lsrs	r1, r1, #4
 8003e7a:	f001 010e 	and.w	r1, r1, #14
 8003e7e:	420a      	tst	r2, r1
 8003e80:	d006      	beq.n	8003e90 <Vector70+0x20>
 8003e82:	010a      	lsls	r2, r1, #4
 8003e84:	605a      	str	r2, [r3, #4]
 8003e86:	4a15      	ldr	r2, [pc, #84]	; (8003edc <Vector70+0x6c>)
 8003e88:	6893      	ldr	r3, [r2, #8]
 8003e8a:	b10b      	cbz	r3, 8003e90 <Vector70+0x20>
 8003e8c:	68d0      	ldr	r0, [r2, #12]
 8003e8e:	4798      	blx	r3
 8003e90:	2100      	movs	r1, #0
 8003e92:	4b13      	ldr	r3, [pc, #76]	; (8003ee0 <Vector70+0x70>)
 8003e94:	681a      	ldr	r2, [r3, #0]
 8003e96:	6019      	str	r1, [r3, #0]

  OSAL_IRQ_EPILOGUE();
 8003e98:	b1e2      	cbz	r2, 8003ed4 <Vector70+0x64>
 8003e9a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8003e9e:	4a11      	ldr	r2, [pc, #68]	; (8003ee4 <Vector70+0x74>)
 8003ea0:	f8d3 1d20 	ldr.w	r1, [r3, #3360]	; 0xd20
 8003ea4:	6011      	str	r1, [r2, #0]
 8003ea6:	4a10      	ldr	r2, [pc, #64]	; (8003ee8 <Vector70+0x78>)
 8003ea8:	6812      	ldr	r2, [r2, #0]
 8003eaa:	b14a      	cbz	r2, 8003ec0 <Vector70+0x50>
 8003eac:	f8d3 2d20 	ldr.w	r2, [r3, #3360]	; 0xd20
 8003eb0:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
 8003eb4:	f8c3 2d20 	str.w	r2, [r3, #3360]	; 0xd20
 8003eb8:	f8d3 2d20 	ldr.w	r2, [r3, #3360]	; 0xd20
 8003ebc:	f8c3 2d20 	str.w	r2, [r3, #3360]	; 0xd20
 8003ec0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8003ec4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ec8:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8003ecc:	f3bf 8f4f 	dsb	sy
 8003ed0:	f3bf 8f6f 	isb	sy
}
 8003ed4:	bd08      	pop	{r3, pc}
 8003ed6:	bf00      	nop
 8003ed8:	40020000 	.word	0x40020000
 8003edc:	20000fe8 	.word	0x20000fe8
 8003ee0:	2000164c 	.word	0x2000164c
 8003ee4:	2000134c 	.word	0x2000134c
 8003ee8:	20001358 	.word	0x20001358

08003eec <Vector74>:
/**
 * @brief   DMA1 stream 3 shared ISR.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH3_HANDLER) {
 8003eec:	b508      	push	{r3, lr}

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM3);
 8003eee:	4b19      	ldr	r3, [pc, #100]	; (8003f54 <Vector74+0x68>)
 8003ef0:	6819      	ldr	r1, [r3, #0]
 8003ef2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ef4:	0a09      	lsrs	r1, r1, #8
 8003ef6:	f001 010e 	and.w	r1, r1, #14
 8003efa:	420a      	tst	r2, r1
 8003efc:	d006      	beq.n	8003f0c <Vector74+0x20>
 8003efe:	020a      	lsls	r2, r1, #8
 8003f00:	605a      	str	r2, [r3, #4]
 8003f02:	4a15      	ldr	r2, [pc, #84]	; (8003f58 <Vector74+0x6c>)
 8003f04:	6913      	ldr	r3, [r2, #16]
 8003f06:	b10b      	cbz	r3, 8003f0c <Vector74+0x20>
 8003f08:	6950      	ldr	r0, [r2, #20]
 8003f0a:	4798      	blx	r3
 8003f0c:	2100      	movs	r1, #0
 8003f0e:	4b13      	ldr	r3, [pc, #76]	; (8003f5c <Vector74+0x70>)
 8003f10:	681a      	ldr	r2, [r3, #0]
 8003f12:	6019      	str	r1, [r3, #0]

  OSAL_IRQ_EPILOGUE();
 8003f14:	b1e2      	cbz	r2, 8003f50 <Vector74+0x64>
 8003f16:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8003f1a:	4a11      	ldr	r2, [pc, #68]	; (8003f60 <Vector74+0x74>)
 8003f1c:	f8d3 1d20 	ldr.w	r1, [r3, #3360]	; 0xd20
 8003f20:	6011      	str	r1, [r2, #0]
 8003f22:	4a10      	ldr	r2, [pc, #64]	; (8003f64 <Vector74+0x78>)
 8003f24:	6812      	ldr	r2, [r2, #0]
 8003f26:	b14a      	cbz	r2, 8003f3c <Vector74+0x50>
 8003f28:	f8d3 2d20 	ldr.w	r2, [r3, #3360]	; 0xd20
 8003f2c:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
 8003f30:	f8c3 2d20 	str.w	r2, [r3, #3360]	; 0xd20
 8003f34:	f8d3 2d20 	ldr.w	r2, [r3, #3360]	; 0xd20
 8003f38:	f8c3 2d20 	str.w	r2, [r3, #3360]	; 0xd20
 8003f3c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8003f40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f44:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8003f48:	f3bf 8f4f 	dsb	sy
 8003f4c:	f3bf 8f6f 	isb	sy
}
 8003f50:	bd08      	pop	{r3, pc}
 8003f52:	bf00      	nop
 8003f54:	40020000 	.word	0x40020000
 8003f58:	20000fe8 	.word	0x20000fe8
 8003f5c:	2000164c 	.word	0x2000164c
 8003f60:	2000134c 	.word	0x2000134c
 8003f64:	20001358 	.word	0x20001358

08003f68 <Vector78>:
/**
 * @brief   DMA1 stream 4 shared ISR.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH4_HANDLER) {
 8003f68:	b508      	push	{r3, lr}

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM4);
 8003f6a:	4b19      	ldr	r3, [pc, #100]	; (8003fd0 <Vector78+0x68>)
 8003f6c:	6819      	ldr	r1, [r3, #0]
 8003f6e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f70:	0b09      	lsrs	r1, r1, #12
 8003f72:	f001 010e 	and.w	r1, r1, #14
 8003f76:	420a      	tst	r2, r1
 8003f78:	d006      	beq.n	8003f88 <Vector78+0x20>
 8003f7a:	030a      	lsls	r2, r1, #12
 8003f7c:	605a      	str	r2, [r3, #4]
 8003f7e:	4a15      	ldr	r2, [pc, #84]	; (8003fd4 <Vector78+0x6c>)
 8003f80:	6993      	ldr	r3, [r2, #24]
 8003f82:	b10b      	cbz	r3, 8003f88 <Vector78+0x20>
 8003f84:	69d0      	ldr	r0, [r2, #28]
 8003f86:	4798      	blx	r3
 8003f88:	2100      	movs	r1, #0
 8003f8a:	4b13      	ldr	r3, [pc, #76]	; (8003fd8 <Vector78+0x70>)
 8003f8c:	681a      	ldr	r2, [r3, #0]
 8003f8e:	6019      	str	r1, [r3, #0]

  OSAL_IRQ_EPILOGUE();
 8003f90:	b1e2      	cbz	r2, 8003fcc <Vector78+0x64>
 8003f92:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8003f96:	4a11      	ldr	r2, [pc, #68]	; (8003fdc <Vector78+0x74>)
 8003f98:	f8d3 1d20 	ldr.w	r1, [r3, #3360]	; 0xd20
 8003f9c:	6011      	str	r1, [r2, #0]
 8003f9e:	4a10      	ldr	r2, [pc, #64]	; (8003fe0 <Vector78+0x78>)
 8003fa0:	6812      	ldr	r2, [r2, #0]
 8003fa2:	b14a      	cbz	r2, 8003fb8 <Vector78+0x50>
 8003fa4:	f8d3 2d20 	ldr.w	r2, [r3, #3360]	; 0xd20
 8003fa8:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
 8003fac:	f8c3 2d20 	str.w	r2, [r3, #3360]	; 0xd20
 8003fb0:	f8d3 2d20 	ldr.w	r2, [r3, #3360]	; 0xd20
 8003fb4:	f8c3 2d20 	str.w	r2, [r3, #3360]	; 0xd20
 8003fb8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8003fbc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003fc0:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8003fc4:	f3bf 8f4f 	dsb	sy
 8003fc8:	f3bf 8f6f 	isb	sy
}
 8003fcc:	bd08      	pop	{r3, pc}
 8003fce:	bf00      	nop
 8003fd0:	40020000 	.word	0x40020000
 8003fd4:	20000fe8 	.word	0x20000fe8
 8003fd8:	2000164c 	.word	0x2000164c
 8003fdc:	2000134c 	.word	0x2000134c
 8003fe0:	20001358 	.word	0x20001358

08003fe4 <Vector7C>:
/**
 * @brief   DMA1 stream 5 shared ISR.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH5_HANDLER) {
 8003fe4:	b508      	push	{r3, lr}

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM5);
 8003fe6:	4b19      	ldr	r3, [pc, #100]	; (800404c <Vector7C+0x68>)
 8003fe8:	6819      	ldr	r1, [r3, #0]
 8003fea:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003fec:	0c09      	lsrs	r1, r1, #16
 8003fee:	f001 010e 	and.w	r1, r1, #14
 8003ff2:	420a      	tst	r2, r1
 8003ff4:	d006      	beq.n	8004004 <Vector7C+0x20>
 8003ff6:	040a      	lsls	r2, r1, #16
 8003ff8:	605a      	str	r2, [r3, #4]
 8003ffa:	4a15      	ldr	r2, [pc, #84]	; (8004050 <Vector7C+0x6c>)
 8003ffc:	6a13      	ldr	r3, [r2, #32]
 8003ffe:	b10b      	cbz	r3, 8004004 <Vector7C+0x20>
 8004000:	6a50      	ldr	r0, [r2, #36]	; 0x24
 8004002:	4798      	blx	r3
 8004004:	2100      	movs	r1, #0
 8004006:	4b13      	ldr	r3, [pc, #76]	; (8004054 <Vector7C+0x70>)
 8004008:	681a      	ldr	r2, [r3, #0]
 800400a:	6019      	str	r1, [r3, #0]

  OSAL_IRQ_EPILOGUE();
 800400c:	b1e2      	cbz	r2, 8004048 <Vector7C+0x64>
 800400e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8004012:	4a11      	ldr	r2, [pc, #68]	; (8004058 <Vector7C+0x74>)
 8004014:	f8d3 1d20 	ldr.w	r1, [r3, #3360]	; 0xd20
 8004018:	6011      	str	r1, [r2, #0]
 800401a:	4a10      	ldr	r2, [pc, #64]	; (800405c <Vector7C+0x78>)
 800401c:	6812      	ldr	r2, [r2, #0]
 800401e:	b14a      	cbz	r2, 8004034 <Vector7C+0x50>
 8004020:	f8d3 2d20 	ldr.w	r2, [r3, #3360]	; 0xd20
 8004024:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
 8004028:	f8c3 2d20 	str.w	r2, [r3, #3360]	; 0xd20
 800402c:	f8d3 2d20 	ldr.w	r2, [r3, #3360]	; 0xd20
 8004030:	f8c3 2d20 	str.w	r2, [r3, #3360]	; 0xd20
 8004034:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8004038:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800403c:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8004040:	f3bf 8f4f 	dsb	sy
 8004044:	f3bf 8f6f 	isb	sy
}
 8004048:	bd08      	pop	{r3, pc}
 800404a:	bf00      	nop
 800404c:	40020000 	.word	0x40020000
 8004050:	20000fe8 	.word	0x20000fe8
 8004054:	2000164c 	.word	0x2000164c
 8004058:	2000134c 	.word	0x2000134c
 800405c:	20001358 	.word	0x20001358

08004060 <Vector80>:
/**
 * @brief   DMA1 stream 6 shared ISR.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH6_HANDLER) {
 8004060:	b508      	push	{r3, lr}

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM6);
 8004062:	4b19      	ldr	r3, [pc, #100]	; (80040c8 <Vector80+0x68>)
 8004064:	6819      	ldr	r1, [r3, #0]
 8004066:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004068:	0d09      	lsrs	r1, r1, #20
 800406a:	f001 010e 	and.w	r1, r1, #14
 800406e:	420a      	tst	r2, r1
 8004070:	d006      	beq.n	8004080 <Vector80+0x20>
 8004072:	050a      	lsls	r2, r1, #20
 8004074:	605a      	str	r2, [r3, #4]
 8004076:	4a15      	ldr	r2, [pc, #84]	; (80040cc <Vector80+0x6c>)
 8004078:	6a93      	ldr	r3, [r2, #40]	; 0x28
 800407a:	b10b      	cbz	r3, 8004080 <Vector80+0x20>
 800407c:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 800407e:	4798      	blx	r3
 8004080:	2100      	movs	r1, #0
 8004082:	4b13      	ldr	r3, [pc, #76]	; (80040d0 <Vector80+0x70>)
 8004084:	681a      	ldr	r2, [r3, #0]
 8004086:	6019      	str	r1, [r3, #0]

  OSAL_IRQ_EPILOGUE();
 8004088:	b1e2      	cbz	r2, 80040c4 <Vector80+0x64>
 800408a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800408e:	4a11      	ldr	r2, [pc, #68]	; (80040d4 <Vector80+0x74>)
 8004090:	f8d3 1d20 	ldr.w	r1, [r3, #3360]	; 0xd20
 8004094:	6011      	str	r1, [r2, #0]
 8004096:	4a10      	ldr	r2, [pc, #64]	; (80040d8 <Vector80+0x78>)
 8004098:	6812      	ldr	r2, [r2, #0]
 800409a:	b14a      	cbz	r2, 80040b0 <Vector80+0x50>
 800409c:	f8d3 2d20 	ldr.w	r2, [r3, #3360]	; 0xd20
 80040a0:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
 80040a4:	f8c3 2d20 	str.w	r2, [r3, #3360]	; 0xd20
 80040a8:	f8d3 2d20 	ldr.w	r2, [r3, #3360]	; 0xd20
 80040ac:	f8c3 2d20 	str.w	r2, [r3, #3360]	; 0xd20
 80040b0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80040b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040b8:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80040bc:	f3bf 8f4f 	dsb	sy
 80040c0:	f3bf 8f6f 	isb	sy
}
 80040c4:	bd08      	pop	{r3, pc}
 80040c6:	bf00      	nop
 80040c8:	40020000 	.word	0x40020000
 80040cc:	20000fe8 	.word	0x20000fe8
 80040d0:	2000164c 	.word	0x2000164c
 80040d4:	2000134c 	.word	0x2000134c
 80040d8:	20001358 	.word	0x20001358

080040dc <Vector84>:
/**
 * @brief   DMA1 stream 7 shared ISR.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH7_HANDLER) {
 80040dc:	b508      	push	{r3, lr}

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM7);
 80040de:	4b19      	ldr	r3, [pc, #100]	; (8004144 <Vector84+0x68>)
 80040e0:	6819      	ldr	r1, [r3, #0]
 80040e2:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80040e6:	0e09      	lsrs	r1, r1, #24
 80040e8:	f001 010e 	and.w	r1, r1, #14
 80040ec:	420a      	tst	r2, r1
 80040ee:	d006      	beq.n	80040fe <Vector84+0x22>
 80040f0:	060a      	lsls	r2, r1, #24
 80040f2:	605a      	str	r2, [r3, #4]
 80040f4:	4a14      	ldr	r2, [pc, #80]	; (8004148 <Vector84+0x6c>)
 80040f6:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80040f8:	b10b      	cbz	r3, 80040fe <Vector84+0x22>
 80040fa:	6b50      	ldr	r0, [r2, #52]	; 0x34
 80040fc:	4798      	blx	r3
 80040fe:	2100      	movs	r1, #0
 8004100:	4b12      	ldr	r3, [pc, #72]	; (800414c <Vector84+0x70>)
 8004102:	681a      	ldr	r2, [r3, #0]
 8004104:	6019      	str	r1, [r3, #0]

  OSAL_IRQ_EPILOGUE();
 8004106:	b1e2      	cbz	r2, 8004142 <Vector84+0x66>
 8004108:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800410c:	4a10      	ldr	r2, [pc, #64]	; (8004150 <Vector84+0x74>)
 800410e:	f8d3 1d20 	ldr.w	r1, [r3, #3360]	; 0xd20
 8004112:	6011      	str	r1, [r2, #0]
 8004114:	4a0f      	ldr	r2, [pc, #60]	; (8004154 <Vector84+0x78>)
 8004116:	6812      	ldr	r2, [r2, #0]
 8004118:	b14a      	cbz	r2, 800412e <Vector84+0x52>
 800411a:	f8d3 2d20 	ldr.w	r2, [r3, #3360]	; 0xd20
 800411e:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
 8004122:	f8c3 2d20 	str.w	r2, [r3, #3360]	; 0xd20
 8004126:	f8d3 2d20 	ldr.w	r2, [r3, #3360]	; 0xd20
 800412a:	f8c3 2d20 	str.w	r2, [r3, #3360]	; 0xd20
 800412e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8004132:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004136:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800413a:	f3bf 8f4f 	dsb	sy
 800413e:	f3bf 8f6f 	isb	sy
}
 8004142:	bd08      	pop	{r3, pc}
 8004144:	40020000 	.word	0x40020000
 8004148:	20000fe8 	.word	0x20000fe8
 800414c:	2000164c 	.word	0x2000164c
 8004150:	2000134c 	.word	0x2000134c
 8004154:	20001358 	.word	0x20001358

08004158 <notify3>:

#if STM32_SERIAL_USE_USART3 || defined(__DOXYGEN__)
static void notify3(io_queue_t *qp) {

  (void)qp;
  USART3->CR1 |= USART_CR1_TXEIE;
 8004158:	4a02      	ldr	r2, [pc, #8]	; (8004164 <notify3+0xc>)
 800415a:	68d3      	ldr	r3, [r2, #12]
 800415c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004160:	60d3      	str	r3, [r2, #12]
}
 8004162:	4770      	bx	lr
 8004164:	40004800 	.word	0x40004800

08004168 <usb_packet_write_from_buffer>:
  stm32_usb_descriptor_t *udp = USB_GET_DESCRIPTOR(ep);
 8004168:	4b0d      	ldr	r3, [pc, #52]	; (80041a0 <usb_packet_write_from_buffer+0x38>)
                                         size_t n) {
 800416a:	b510      	push	{r4, lr}
  stm32_usb_descriptor_t *udp = USB_GET_DESCRIPTOR(ep);
 800416c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800416e:	0104      	lsls	r4, r0, #4
 8004170:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004174:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8004178:	eb03 1000 	add.w	r0, r3, r0, lsl #4
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);
 800417c:	58e3      	ldr	r3, [r4, r3]
 800417e:	4411      	add	r1, r2
 8004180:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8004184:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8004188:	005b      	lsls	r3, r3, #1
  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
 800418a:	6042      	str	r2, [r0, #4]
  while (i > 0) {
 800418c:	2a00      	cmp	r2, #0
 800418e:	eba1 0002 	sub.w	r0, r1, r2
 8004192:	dc00      	bgt.n	8004196 <usb_packet_write_from_buffer+0x2e>
}
 8004194:	bd10      	pop	{r4, pc}
    w |= *buf++ << 8;
 8004196:	8800      	ldrh	r0, [r0, #0]
    i -= 2;
 8004198:	3a02      	subs	r2, #2
    w |= *buf++ << 8;
 800419a:	f843 0b04 	str.w	r0, [r3], #4
    i -= 2;
 800419e:	e7f5      	b.n	800418c <usb_packet_write_from_buffer+0x24>
 80041a0:	40005c00 	.word	0x40005c00

080041a4 <_put.lto_priv.2>:
}

static msg_t _put(void *ip, uint8_t b) {
  MemoryStream *msp = ip;

  if (msp->size - msp->eos <= 0)
 80041a4:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
 80041a8:	429a      	cmp	r2, r3
    return MSG_RESET;
  *(msp->buffer + msp->eos) = b;
 80041aa:	bf1f      	itttt	ne
 80041ac:	6842      	ldrne	r2, [r0, #4]
 80041ae:	54d1      	strbne	r1, [r2, r3]
  msp->eos += 1;
 80041b0:	68c3      	ldrne	r3, [r0, #12]
 80041b2:	3301      	addne	r3, #1
 80041b4:	bf1a      	itte	ne
 80041b6:	60c3      	strne	r3, [r0, #12]
  return MSG_OK;
 80041b8:	2000      	movne	r0, #0
    return MSG_RESET;
 80041ba:	f06f 0001 	mvneq.w	r0, #1
}
 80041be:	4770      	bx	lr

080041c0 <_get.lto_priv.2>:

static msg_t _get(void *ip) {
  uint8_t b;
  MemoryStream *msp = ip;

  if (msp->eos - msp->offset <= 0)
 80041c0:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 80041c4:	429a      	cmp	r2, r3
    return MSG_RESET;
  b = *(msp->buffer + msp->offset);
 80041c6:	bf1f      	itttt	ne
 80041c8:	6842      	ldrne	r2, [r0, #4]
 80041ca:	5cd2      	ldrbne	r2, [r2, r3]
  msp->offset += 1;
 80041cc:	3301      	addne	r3, #1
 80041ce:	6103      	strne	r3, [r0, #16]
  return b;
 80041d0:	bf14      	ite	ne
 80041d2:	4610      	movne	r0, r2
    return MSG_RESET;
 80041d4:	f06f 0001 	mvneq.w	r0, #1
}
 80041d8:	4770      	bx	lr

080041da <strToInt>:

    return (result>=base)? -1 : result;
}

int32_t strToInt(char* string, uint8_t base)
{
 80041da:	b570      	push	{r4, r5, r6, lr}
    uint32_t value = 0;
    bool invert = false;
    unsigned int i = 0;

    if(string[0] == '\0') {
 80041dc:	7803      	ldrb	r3, [r0, #0]
 80041de:	b1e3      	cbz	r3, 800421a <strToInt+0x40>
        return -1;
    }

    if(string[0] == '-') {
 80041e0:	2b2d      	cmp	r3, #45	; 0x2d
 80041e2:	d127      	bne.n	8004234 <strToInt+0x5a>
        invert = true;
        i++;
 80041e4:	2201      	movs	r2, #1
    bool invert = false;
 80041e6:	4614      	mov	r4, r2
 80041e8:	4402      	add	r2, r0
        invert = true;
 80041ea:	2000      	movs	r0, #0
 80041ec:	e01b      	b.n	8004226 <strToInt+0x4c>
    }

    for(; string[i]; i++) {
        value *= base;
 80041ee:	fb00 f501 	mul.w	r5, r0, r1
    if(input >= '0' && input <= '9') {
 80041f2:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 80041f6:	b2c0      	uxtb	r0, r0
    input &=~ 0x20;
 80041f8:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    if(input >= '0' && input <= '9') {
 80041fc:	2809      	cmp	r0, #9
    if(input >= 'A' && input <= 'Z') {
 80041fe:	f1a3 0641 	sub.w	r6, r3, #65	; 0x41
    int8_t result = -1;
 8004202:	bf8c      	ite	hi
 8004204:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
        result = input - '0';
 8004208:	b240      	sxtbls	r0, r0
    if(input >= 'A' && input <= 'Z') {
 800420a:	2e19      	cmp	r6, #25
 800420c:	d808      	bhi.n	8004220 <strToInt+0x46>
        result = input - 'A' + 10;
 800420e:	f1a3 0037 	sub.w	r0, r3, #55	; 0x37
 8004212:	b2c3      	uxtb	r3, r0
    if(result >= base) {
 8004214:	4299      	cmp	r1, r3
        result = input - 'A' + 10;
 8004216:	b240      	sxtb	r0, r0
    if(result >= base) {
 8004218:	d804      	bhi.n	8004224 <strToInt+0x4a>
        return -1;
 800421a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800421e:	e008      	b.n	8004232 <strToInt+0x58>

        int8_t ci = charToInt(string[i], base);
        if(ci < 0) {
 8004220:	1c43      	adds	r3, r0, #1
 8004222:	d006      	beq.n	8004232 <strToInt+0x58>
            return -1;
        }

        value += ci;
 8004224:	4428      	add	r0, r5
    for(; string[i]; i++) {
 8004226:	f812 3b01 	ldrb.w	r3, [r2], #1
 800422a:	2b00      	cmp	r3, #0
 800422c:	d1df      	bne.n	80041ee <strToInt+0x14>
    }

    return (invert)? -value : value;
 800422e:	b104      	cbz	r4, 8004232 <strToInt+0x58>
 8004230:	4240      	negs	r0, r0
}
 8004232:	bd70      	pop	{r4, r5, r6, pc}
    unsigned int i = 0;
 8004234:	2200      	movs	r2, #0
 8004236:	e7d6      	b.n	80041e6 <strToInt+0xc>

08004238 <NVIC_SystemReset.lto_priv.0>:
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004238:	f3bf 8f4f 	dsb	sy
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800423c:	4905      	ldr	r1, [pc, #20]	; (8004254 <NVIC_SystemReset.lto_priv.0+0x1c>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800423e:	4b06      	ldr	r3, [pc, #24]	; (8004258 <NVIC_SystemReset.lto_priv.0+0x20>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8004240:	68ca      	ldr	r2, [r1, #12]
 8004242:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8004246:	4313      	orrs	r3, r2
 8004248:	60cb      	str	r3, [r1, #12]
 800424a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 800424e:	bf00      	nop
 8004250:	e7fd      	b.n	800424e <NVIC_SystemReset.lto_priv.0+0x16>
 8004252:	bf00      	nop
 8004254:	e000ed00 	.word	0xe000ed00
 8004258:	05fa0004 	.word	0x05fa0004

0800425c <shellCommandRegister>:
    {"license", cmdLicense, NULL},
    {"sanity", cmdSanity, NULL},
};

void shellCommandRegister(char* name, shellcmd_t function, void* user)
{
 800425c:	b5f0      	push	{r4, r5, r6, r7, lr}
    /* -1 since there should be a final line with NULL, NULL, NULL */
    if(shellCommandsIndex >= sizeof(shellCommands)/sizeof(ShellCommand)-1) {
 800425e:	4d07      	ldr	r5, [pc, #28]	; (800427c <shellCommandRegister+0x20>)
 8004260:	782b      	ldrb	r3, [r5, #0]
 8004262:	2b0d      	cmp	r3, #13
 8004264:	d808      	bhi.n	8004278 <shellCommandRegister+0x1c>
        return;
    }
    shellCommands[shellCommandsIndex].sc_name = name;
 8004266:	240c      	movs	r4, #12
 8004268:	435c      	muls	r4, r3
 800426a:	4f05      	ldr	r7, [pc, #20]	; (8004280 <shellCommandRegister+0x24>)
    shellCommands[shellCommandsIndex].sc_function = function;
    shellCommands[shellCommandsIndex].sc_user = user;
    shellCommandsIndex++;
 800426c:	3301      	adds	r3, #1
    shellCommands[shellCommandsIndex].sc_name = name;
 800426e:	193e      	adds	r6, r7, r4
    shellCommands[shellCommandsIndex].sc_user = user;
 8004270:	e9c6 1201 	strd	r1, r2, [r6, #4]
    shellCommands[shellCommandsIndex].sc_name = name;
 8004274:	5138      	str	r0, [r7, r4]
    shellCommandsIndex++;
 8004276:	702b      	strb	r3, [r5, #0]
}
 8004278:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800427a:	bf00      	nop
 800427c:	20000910 	.word	0x20000910
 8004280:	2000085c 	.word	0x2000085c

08004284 <get_descriptor>:
        uint16_t lang)
{

    (void)usbp;
    (void)lang;
    switch (dtype) {
 8004284:	2902      	cmp	r1, #2
{
 8004286:	4613      	mov	r3, r2
 8004288:	b570      	push	{r4, r5, r6, lr}
    switch (dtype) {
 800428a:	d054      	beq.n	8004336 <get_descriptor+0xb2>
 800428c:	2903      	cmp	r1, #3
 800428e:	d004      	beq.n	800429a <get_descriptor+0x16>
        case USB_DESCRIPTOR_DEVICE:
            return &vcom_device_descriptor;
 8004290:	2901      	cmp	r1, #1
 8004292:	482b      	ldr	r0, [pc, #172]	; (8004340 <get_descriptor+0xbc>)
 8004294:	bf18      	it	ne
 8004296:	2000      	movne	r0, #0
                usbMakeSerial();
                return &vcom_strings[dindex];
            }
    }
    return NULL;
}
 8004298:	bd70      	pop	{r4, r5, r6, pc}
            if (dindex < 3)
 800429a:	2a02      	cmp	r2, #2
 800429c:	d803      	bhi.n	80042a6 <get_descriptor+0x22>
                return &vcom_strings[dindex];
 800429e:	4829      	ldr	r0, [pc, #164]	; (8004344 <get_descriptor+0xc0>)
 80042a0:	eb00 00c2 	add.w	r0, r0, r2, lsl #3
 80042a4:	e7f8      	b.n	8004298 <get_descriptor+0x14>
            if (dindex == 3) {
 80042a6:	2a03      	cmp	r2, #3
 80042a8:	d147      	bne.n	800433a <get_descriptor+0xb6>
    if(serialString[0]) {
 80042aa:	4927      	ldr	r1, [pc, #156]	; (8004348 <get_descriptor+0xc4>)
 80042ac:	780a      	ldrb	r2, [r1, #0]
 80042ae:	b10a      	cbz	r2, 80042b4 <get_descriptor+0x30>
                return &vcom_strings[dindex];
 80042b0:	4826      	ldr	r0, [pc, #152]	; (800434c <get_descriptor+0xc8>)
 80042b2:	e7f1      	b.n	8004298 <get_descriptor+0x14>
    serialString[0] = USB_DESC_BYTE(sizeof(serialString));
 80042b4:	2084      	movs	r0, #132	; 0x84
    serialString[1] = USB_DESC_BYTE(USB_DESCRIPTOR_STRING);
 80042b6:	460c      	mov	r4, r1
    serialString[0] = USB_DESC_BYTE(sizeof(serialString));
 80042b8:	7008      	strb	r0, [r1, #0]
        serialString[3+i]=0;
 80042ba:	4616      	mov	r6, r2
 80042bc:	4608      	mov	r0, r1
    serialString[1] = USB_DESC_BYTE(USB_DESCRIPTOR_STRING);
 80042be:	704b      	strb	r3, [r1, #1]
        serialString[2+i]=hexNibble((idReg[i>>2] >> (4*((i>>1)%2))) & 0xF);
 80042c0:	0893      	lsrs	r3, r2, #2
 80042c2:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80042c6:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
 80042ca:	f893 37e8 	ldrb.w	r3, [r3, #2024]	; 0x7e8
 80042ce:	f3c2 0540 	ubfx	r5, r2, #1, #1
 80042d2:	00ad      	lsls	r5, r5, #2
 80042d4:	412b      	asrs	r3, r5
 80042d6:	f003 030f 	and.w	r3, r3, #15
    if(a<10) {
 80042da:	2b09      	cmp	r3, #9
 80042dc:	f102 0202 	add.w	r2, r2, #2
        return '0'+a;
 80042e0:	bf94      	ite	ls
 80042e2:	3330      	addls	r3, #48	; 0x30
        return 'a'+a-10;
 80042e4:	3357      	addhi	r3, #87	; 0x57
    for(i=0; i<48; i+=2) {
 80042e6:	2a30      	cmp	r2, #48	; 0x30
        serialString[2+i]=hexNibble((idReg[i>>2] >> (4*((i>>1)%2))) & 0xF);
 80042e8:	70a3      	strb	r3, [r4, #2]
        serialString[3+i]=0;
 80042ea:	70e6      	strb	r6, [r4, #3]
    for(i=0; i<48; i+=2) {
 80042ec:	f104 0402 	add.w	r4, r4, #2
 80042f0:	d1e6      	bne.n	80042c0 <get_descriptor+0x3c>
    serialString[50]='-';
 80042f2:	232d      	movs	r3, #45	; 0x2d
    serialString[51]=0;
 80042f4:	f881 6033 	strb.w	r6, [r1, #51]	; 0x33
    serialString[50]='-';
 80042f8:	f881 3032 	strb.w	r3, [r1, #50]	; 0x32
        serialString[53+i]=0;
 80042fc:	2400      	movs	r4, #0
    serialString[51]=0;
 80042fe:	2114      	movs	r1, #20
 8004300:	4d13      	ldr	r5, [pc, #76]	; (8004350 <get_descriptor+0xcc>)
        serialString[52+i]=hexNibble(*buildId >> 4);
 8004302:	f815 3f01 	ldrb.w	r3, [r5, #1]!
        serialString[53+i]=0;
 8004306:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
        serialString[52+i]=hexNibble(*buildId >> 4);
 800430a:	091a      	lsrs	r2, r3, #4
    if(a<10) {
 800430c:	2b9f      	cmp	r3, #159	; 0x9f
        serialString[54+i]=hexNibble(*buildId & 0xF);
 800430e:	f003 030f 	and.w	r3, r3, #15
        return '0'+a;
 8004312:	bf94      	ite	ls
 8004314:	3230      	addls	r2, #48	; 0x30
        return 'a'+a-10;
 8004316:	3257      	addhi	r2, #87	; 0x57
    if(a<10) {
 8004318:	2b09      	cmp	r3, #9
        return '0'+a;
 800431a:	bf94      	ite	ls
 800431c:	3330      	addls	r3, #48	; 0x30
        return 'a'+a-10;
 800431e:	3357      	addhi	r3, #87	; 0x57
    for(i=0; i<80; i+=4) {
 8004320:	3901      	subs	r1, #1
        serialString[52+i]=hexNibble(*buildId >> 4);
 8004322:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34
        serialString[54+i]=hexNibble(*buildId & 0xF);
 8004326:	f880 3036 	strb.w	r3, [r0, #54]	; 0x36
        serialString[55+i]=0;
 800432a:	f880 4037 	strb.w	r4, [r0, #55]	; 0x37
    for(i=0; i<80; i+=4) {
 800432e:	f100 0004 	add.w	r0, r0, #4
 8004332:	d1e6      	bne.n	8004302 <get_descriptor+0x7e>
 8004334:	e7bc      	b.n	80042b0 <get_descriptor+0x2c>
    switch (dtype) {
 8004336:	4807      	ldr	r0, [pc, #28]	; (8004354 <get_descriptor+0xd0>)
 8004338:	e7ae      	b.n	8004298 <get_descriptor+0x14>
    return NULL;
 800433a:	2000      	movs	r0, #0
 800433c:	e7ac      	b.n	8004298 <get_descriptor+0x14>
 800433e:	bf00      	nop
 8004340:	0800cc38 	.word	0x0800cc38
 8004344:	0800cce8 	.word	0x0800cce8
 8004348:	20001231 	.word	0x20001231
 800434c:	0800cd00 	.word	0x0800cd00
 8004350:	0800cd73 	.word	0x0800cd73
 8004354:	0800cbec 	.word	0x0800cbec

08004358 <i2cSafeResultToString>:
}


const char* i2cSafeResultToString(i2c_result result)
{
    if(result == I2C_BUS_OK) return "OK";
 8004358:	4602      	mov	r2, r0
 800435a:	b188      	cbz	r0, 8004380 <i2cSafeResultToString+0x28>
    else if(result == I2C_BUS_TIMEOUT) return "Timeout";
 800435c:	1c41      	adds	r1, r0, #1
 800435e:	d011      	beq.n	8004384 <i2cSafeResultToString+0x2c>
    else if(result == I2C_BUS_RESET) return "Transfer Error";
 8004360:	1c83      	adds	r3, r0, #2
 8004362:	d011      	beq.n	8004388 <i2cSafeResultToString+0x30>
    else if(result == I2C_BUS_STUCK_SCL_PULLED_LOW) return "SCL stuck low";
 8004364:	2801      	cmp	r0, #1
 8004366:	d011      	beq.n	800438c <i2cSafeResultToString+0x34>
    else if(result == I2C_BUS_STUCK_SDA_PULLED_LOW) return "SDA stuck low";
 8004368:	2802      	cmp	r0, #2
 800436a:	d011      	beq.n	8004390 <i2cSafeResultToString+0x38>
    else if(result == I2C_BUS_STUCK_SCL_PULLED_HIGH) return "SCL stuck high";
 800436c:	2803      	cmp	r0, #3
 800436e:	d011      	beq.n	8004394 <i2cSafeResultToString+0x3c>
    else if(result == I2C_BUS_STUCK_SDA_PULLED_HIGH) return "SDA stuck high";
 8004370:	2804      	cmp	r0, #4
 8004372:	d011      	beq.n	8004398 <i2cSafeResultToString+0x40>
    else if(result == I2C_BUS_STUCK_SHORTED_TOGETHER) return "SDA/SCL shorted together";
    else return "Unknown";
 8004374:	4b09      	ldr	r3, [pc, #36]	; (800439c <i2cSafeResultToString+0x44>)
 8004376:	480a      	ldr	r0, [pc, #40]	; (80043a0 <i2cSafeResultToString+0x48>)
 8004378:	2a05      	cmp	r2, #5
 800437a:	bf08      	it	eq
 800437c:	4618      	moveq	r0, r3
 800437e:	4770      	bx	lr
    if(result == I2C_BUS_OK) return "OK";
 8004380:	4808      	ldr	r0, [pc, #32]	; (80043a4 <i2cSafeResultToString+0x4c>)
 8004382:	4770      	bx	lr
    else if(result == I2C_BUS_TIMEOUT) return "Timeout";
 8004384:	4808      	ldr	r0, [pc, #32]	; (80043a8 <i2cSafeResultToString+0x50>)
 8004386:	4770      	bx	lr
    else if(result == I2C_BUS_RESET) return "Transfer Error";
 8004388:	4808      	ldr	r0, [pc, #32]	; (80043ac <i2cSafeResultToString+0x54>)
 800438a:	4770      	bx	lr
    else if(result == I2C_BUS_STUCK_SCL_PULLED_LOW) return "SCL stuck low";
 800438c:	4808      	ldr	r0, [pc, #32]	; (80043b0 <i2cSafeResultToString+0x58>)
 800438e:	4770      	bx	lr
    else if(result == I2C_BUS_STUCK_SDA_PULLED_LOW) return "SDA stuck low";
 8004390:	4808      	ldr	r0, [pc, #32]	; (80043b4 <i2cSafeResultToString+0x5c>)
 8004392:	4770      	bx	lr
    else if(result == I2C_BUS_STUCK_SCL_PULLED_HIGH) return "SCL stuck high";
 8004394:	4808      	ldr	r0, [pc, #32]	; (80043b8 <i2cSafeResultToString+0x60>)
 8004396:	4770      	bx	lr
    else if(result == I2C_BUS_STUCK_SDA_PULLED_HIGH) return "SDA stuck high";
 8004398:	4808      	ldr	r0, [pc, #32]	; (80043bc <i2cSafeResultToString+0x64>)
}
 800439a:	4770      	bx	lr
 800439c:	0800ba64 	.word	0x0800ba64
 80043a0:	0800bac2 	.word	0x0800bac2
 80043a4:	0800ba7d 	.word	0x0800ba7d
 80043a8:	0800ba80 	.word	0x0800ba80
 80043ac:	0800ba88 	.word	0x0800ba88
 80043b0:	0800ba97 	.word	0x0800ba97
 80043b4:	0800bab4 	.word	0x0800bab4
 80043b8:	0800baa5 	.word	0x0800baa5
 80043bc:	0800ba55 	.word	0x0800ba55

080043c0 <gpioGetPortDriver>:
    return &GPIODriverData.ports[index];
}

static const GPIOPort* gpioGetPortDriver(uint8_t index)
{
    if(index >= GPIODriverData.numPorts) {
 80043c0:	4b04      	ldr	r3, [pc, #16]	; (80043d4 <gpioGetPortDriver+0x14>)
 80043c2:	791a      	ldrb	r2, [r3, #4]
 80043c4:	4282      	cmp	r2, r0
        return &gpioDummyPort;
    }

    return &GPIODriverData.ports[index];
 80043c6:	bf83      	ittte	hi
 80043c8:	220c      	movhi	r2, #12
 80043ca:	681b      	ldrhi	r3, [r3, #0]
 80043cc:	fb02 3000 	mlahi	r0, r2, r0, r3
        return &gpioDummyPort;
 80043d0:	4801      	ldrls	r0, [pc, #4]	; (80043d8 <gpioGetPortDriver+0x18>)
}
 80043d2:	4770      	bx	lr
 80043d4:	20000928 	.word	0x20000928
 80043d8:	0800ca58 	.word	0x0800ca58

080043dc <gpioGetPin>:

    return port->functions->setValue(port, 1<<gpioPin, on<<gpioPin);
}

bool gpioGetPin(uint16_t pin)
{
 80043dc:	b513      	push	{r0, r1, r4, lr}
 80043de:	4604      	mov	r4, r0
    uint8_t gpioPort = pin >> 8;
    uint8_t gpioPin = pin & 0xff;

    const GPIOPort* port = gpioGetPortDriver(gpioPort);
 80043e0:	0a00      	lsrs	r0, r0, #8
 80043e2:	f7ff ffed 	bl	80043c0 <gpioGetPortDriver>

    uint32_t value = 0;
 80043e6:	2300      	movs	r3, #0
 80043e8:	9301      	str	r3, [sp, #4]
    port->functions->getValue(port, &value);
 80043ea:	6883      	ldr	r3, [r0, #8]
 80043ec:	a901      	add	r1, sp, #4
 80043ee:	68db      	ldr	r3, [r3, #12]
 80043f0:	4798      	blx	r3

    return (value >> gpioPin) & 1;
 80043f2:	9801      	ldr	r0, [sp, #4]
 80043f4:	b2e4      	uxtb	r4, r4
 80043f6:	40e0      	lsrs	r0, r4
}
 80043f8:	f000 0001 	and.w	r0, r0, #1
 80043fc:	b002      	add	sp, #8
 80043fe:	bd10      	pop	{r4, pc}

08004400 <gpioPortIoDisable>:

    return value;
}

void gpioPortIoDisable(uint8_t gpioPort, bool disable)
{
 8004400:	b510      	push	{r4, lr}
    const GPIOPort* port = gpioGetPortDriver(gpioPort);
 8004402:	f7ff ffdd 	bl	80043c0 <gpioGetPortDriver>

    if(port->functions->busIoDisable) {
 8004406:	6883      	ldr	r3, [r0, #8]
 8004408:	691b      	ldr	r3, [r3, #16]
 800440a:	b113      	cbz	r3, 8004412 <gpioPortIoDisable+0x12>
        port->functions->busIoDisable(port, disable);
    }
}
 800440c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        port->functions->busIoDisable(port, disable);
 8004410:	4718      	bx	r3
}
 8004412:	bd10      	pop	{r4, pc}

08004414 <gpioCPUSetPinMode>:
{
    (void)driver;
    (void)pin;
    (void)pinMode;

    palSetPadMode((ioportid_t)driver->driver, pin, pinMode);
 8004414:	2301      	movs	r3, #1
    0xF,        /* PAL_MODE_STM32_ALTERNATE_OPENDRAIN, 50MHz.*/
  };
  uint32_t mh, ml, crh, crl, cfg;
  unsigned i;

  if (mode == PAL_MODE_INPUT_PULLUP)
 8004416:	2a03      	cmp	r2, #3
{
 8004418:	b5f0      	push	{r4, r5, r6, r7, lr}
    palSetPadMode((ioportid_t)driver->driver, pin, pinMode);
 800441a:	6800      	ldr	r0, [r0, #0]
 800441c:	fa03 f101 	lsl.w	r1, r3, r1
 8004420:	d129      	bne.n	8004476 <gpioCPUSetPinMode+0x62>
    port->BSRR = mask;
 8004422:	6101      	str	r1, [r0, #16]
  else if (mode == PAL_MODE_INPUT_PULLDOWN)
    port->BRR = mask;
  cfg = cfgtab[mode];
 8004424:	4b16      	ldr	r3, [pc, #88]	; (8004480 <gpioCPUSetPinMode+0x6c>)
 8004426:	2608      	movs	r6, #8
 8004428:	5c9f      	ldrb	r7, [r3, r2]
  mh = ml = crh = crl = 0;
 800442a:	2300      	movs	r3, #0
 800442c:	461a      	mov	r2, r3
 800442e:	461d      	mov	r5, r3
 8004430:	461c      	mov	r4, r3
  for (i = 0; i < 8; i++) {
    ml <<= 4;
    mh <<= 4;
    crl <<= 4;
    crh <<= 4;
    if ((mask & 0x0080) == 0)
 8004432:	f011 0f80 	tst.w	r1, #128	; 0x80
    ml <<= 4;
 8004436:	ea4f 1404 	mov.w	r4, r4, lsl #4
    crl <<= 4;
 800443a:	ea4f 1202 	mov.w	r2, r2, lsl #4
    mh <<= 4;
 800443e:	ea4f 1505 	mov.w	r5, r5, lsl #4
    crh <<= 4;
 8004442:	ea4f 1303 	mov.w	r3, r3, lsl #4
      ml |= 0xf;
 8004446:	bf0c      	ite	eq
 8004448:	f044 040f 	orreq.w	r4, r4, #15
    else
      crl |= cfg;
 800444c:	433a      	orrne	r2, r7
    if ((mask & 0x8000) == 0)
 800444e:	f411 4f00 	tst.w	r1, #32768	; 0x8000
      mh |= 0xf;
 8004452:	bf0c      	ite	eq
 8004454:	f045 050f 	orreq.w	r5, r5, #15
    else
      crh |= cfg;
 8004458:	433b      	orrne	r3, r7
  for (i = 0; i < 8; i++) {
 800445a:	3e01      	subs	r6, #1
    mask <<= 1;
 800445c:	ea4f 0141 	mov.w	r1, r1, lsl #1
  for (i = 0; i < 8; i++) {
 8004460:	d1e7      	bne.n	8004432 <gpioCPUSetPinMode+0x1e>
  }
  port->CRH = (port->CRH & mh) | crh;
 8004462:	6841      	ldr	r1, [r0, #4]
 8004464:	4029      	ands	r1, r5
 8004466:	430b      	orrs	r3, r1
 8004468:	6043      	str	r3, [r0, #4]
  port->CRL = (port->CRL & ml) | crl;
 800446a:	6803      	ldr	r3, [r0, #0]
 800446c:	4023      	ands	r3, r4
 800446e:	4313      	orrs	r3, r2
 8004470:	6003      	str	r3, [r0, #0]

    return true;
}
 8004472:	2001      	movs	r0, #1
 8004474:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if (mode == PAL_MODE_INPUT_PULLDOWN)
 8004476:	2a04      	cmp	r2, #4
    port->BRR = mask;
 8004478:	bf08      	it	eq
 800447a:	6141      	streq	r1, [r0, #20]
 800447c:	e7d2      	b.n	8004424 <gpioCPUSetPinMode+0x10>
 800447e:	bf00      	nop
 8004480:	0800c918 	.word	0x0800c918

08004484 <gpioCPUSetValue>:
    (void)driver;
    (void)pinsToChange;
    (void)newValue;

    //syssts_t sts = osalSysGetStatusAndLockX();
    palWriteGroup((ioportid_t)driver->driver, pinsToChange, 0, newValue);
 8004484:	6803      	ldr	r3, [r0, #0]
 8004486:	ea21 0002 	bic.w	r0, r1, r2
 800448a:	400a      	ands	r2, r1
 800448c:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8004490:	611a      	str	r2, [r3, #16]
    //osalSysRestoreStatusX(sts);

    return true;
}
 8004492:	2001      	movs	r0, #1
 8004494:	4770      	bx	lr

08004496 <gpioCPUGetValue>:
static bool gpioCPUGetValue(const GPIOPort* driver, uint32_t* value)
{
    (void)driver;
    (void)value;

    *value = palReadPort((ioportid_t)driver->driver);
 8004496:	6803      	ldr	r3, [r0, #0]

    return true;
}
 8004498:	2001      	movs	r0, #1
    *value = palReadPort((ioportid_t)driver->driver);
 800449a:	689b      	ldr	r3, [r3, #8]
 800449c:	600b      	str	r3, [r1, #0]
}
 800449e:	4770      	bx	lr

080044a0 <gpioCPUInit>:
    .getValue = gpioCPUGetValue,
    .status = gpioCPUStatus
};

void gpioCPUInit(uint8_t gpioPortId, ioportid_t port)
{
 80044a0:	b510      	push	{r4, lr}
    if(index >= GPIODriverData.numPorts) {
 80044a2:	4a0c      	ldr	r2, [pc, #48]	; (80044d4 <gpioCPUInit+0x34>)
 80044a4:	7913      	ldrb	r3, [r2, #4]
 80044a6:	4283      	cmp	r3, r0
 80044a8:	d912      	bls.n	80044d0 <gpioCPUInit+0x30>
    if(GPIODriverData.registeredPorts & _BV(index)) {
 80044aa:	6894      	ldr	r4, [r2, #8]
 80044ac:	fa24 f300 	lsr.w	r3, r4, r0
 80044b0:	07db      	lsls	r3, r3, #31
 80044b2:	d40d      	bmi.n	80044d0 <gpioCPUInit+0x30>
    GPIODriverData.registeredPorts |= _BV(index);
 80044b4:	2301      	movs	r3, #1
 80044b6:	4083      	lsls	r3, r0
 80044b8:	4323      	orrs	r3, r4
 80044ba:	6093      	str	r3, [r2, #8]
    return &GPIODriverData.ports[index];
 80044bc:	230c      	movs	r3, #12
 80044be:	4358      	muls	r0, r3
 80044c0:	6813      	ldr	r3, [r2, #0]
    GPIOPort* portDriver = gpioRegisterPortDriver(gpioPortId);
    if(!portDriver) {
 80044c2:	181a      	adds	r2, r3, r0
 80044c4:	d004      	beq.n	80044d0 <gpioCPUInit+0x30>
        return;
    }

    portDriver->driver = port;
 80044c6:	5019      	str	r1, [r3, r0]
    portDriver->functions = &gpioCPUFunctions;
 80044c8:	4b03      	ldr	r3, [pc, #12]	; (80044d8 <gpioCPUInit+0x38>)
 80044ca:	6093      	str	r3, [r2, #8]
    portDriver->numPins = 16;
 80044cc:	2310      	movs	r3, #16
 80044ce:	6053      	str	r3, [r2, #4]
}
 80044d0:	bd10      	pop	{r4, pc}
 80044d2:	bf00      	nop
 80044d4:	20000928 	.word	0x20000928
 80044d8:	0800ca28 	.word	0x0800ca28

080044dc <converterTune>:
#include "converter.h"
#include "shell.h"
#include "chprintf.h"

bool converterTune(ConverterManager* converter, ConverterTuneRequest* tuneRequest)
{
 80044dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    /* Iterate over all bands */
    for(uint8_t i=0; converter->bands[i].functions; i++) {
 80044e0:	f04f 0c14 	mov.w	ip, #20
{
 80044e4:	4604      	mov	r4, r0
 80044e6:	460d      	mov	r5, r1
    for(uint8_t i=0; converter->bands[i].functions; i++) {
 80044e8:	6941      	ldr	r1, [r0, #20]
 80044ea:	2000      	movs	r0, #0
 80044ec:	b2c6      	uxtb	r6, r0
 80044ee:	fb0c f806 	mul.w	r8, ip, r6
 80044f2:	eb01 0208 	add.w	r2, r1, r8
 80044f6:	6913      	ldr	r3, [r2, #16]
 80044f8:	b1b3      	cbz	r3, 8004528 <converterTune+0x4c>
        if(_BV(i) & converter-> disabledBands) {
 80044fa:	69e7      	ldr	r7, [r4, #28]
 80044fc:	40f7      	lsrs	r7, r6
 80044fe:	07fb      	lsls	r3, r7, #31
 8004500:	d41d      	bmi.n	800453e <converterTune+0x62>
            continue;
        }

        uint32_t tmpFreq = tuneRequest->inputFrequencyKHz;

        if((tuneRequest->forceBand && tuneRequest->bandId == i) ||
 8004502:	7a2b      	ldrb	r3, [r5, #8]
 8004504:	b1a3      	cbz	r3, 8004530 <converterTune+0x54>
 8004506:	7a6b      	ldrb	r3, [r5, #9]
 8004508:	42b3      	cmp	r3, r6
 800450a:	d118      	bne.n	800453e <converterTune+0x62>
                (!tuneRequest->forceBand &&
                 tmpFreq >= converter->bands[i].minFrequencyKHz &&
                 tmpFreq <= converter->bands[i].maxFrequencyKHz)) {


            if(converter->activeBand != 0xff && converter->activeBand != i) {
 800450c:	7e23      	ldrb	r3, [r4, #24]
 800450e:	2bff      	cmp	r3, #255	; 0xff
 8004510:	d117      	bne.n	8004542 <converterTune+0x66>
                    converter->bands[converter->activeBand].functions->converterLeaveBand(converter,
                            &converter->bands[converter->activeBand]);
                }
            }

            converter->activeBand = i;
 8004512:	7626      	strb	r6, [r4, #24]
            tuneRequest->bandId = i;
 8004514:	726e      	strb	r6, [r5, #9]

            bool retVal = converter->bands[i].functions->converterTuneBand(converter, &converter->bands[i], tuneRequest);
 8004516:	6961      	ldr	r1, [r4, #20]
 8004518:	462a      	mov	r2, r5
 800451a:	4441      	add	r1, r8
 800451c:	690b      	ldr	r3, [r1, #16]
 800451e:	4620      	mov	r0, r4
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4798      	blx	r3
            if(retVal) {
 8004524:	4606      	mov	r6, r0
 8004526:	b9c0      	cbnz	r0, 800455a <converterTune+0x7e>
    for(uint8_t i=0; converter->bands[i].functions; i++) {
 8004528:	2600      	movs	r6, #0
        }
    }


    return false;
}
 800452a:	4630      	mov	r0, r6
 800452c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        uint32_t tmpFreq = tuneRequest->inputFrequencyKHz;
 8004530:	682f      	ldr	r7, [r5, #0]
                (!tuneRequest->forceBand &&
 8004532:	6853      	ldr	r3, [r2, #4]
 8004534:	42bb      	cmp	r3, r7
 8004536:	d802      	bhi.n	800453e <converterTune+0x62>
                 tmpFreq >= converter->bands[i].minFrequencyKHz &&
 8004538:	6893      	ldr	r3, [r2, #8]
 800453a:	42bb      	cmp	r3, r7
 800453c:	d2e6      	bcs.n	800450c <converterTune+0x30>
    for(uint8_t i=0; converter->bands[i].functions; i++) {
 800453e:	3001      	adds	r0, #1
 8004540:	e7d4      	b.n	80044ec <converterTune+0x10>
            if(converter->activeBand != 0xff && converter->activeBand != i) {
 8004542:	42b3      	cmp	r3, r6
 8004544:	d0e5      	beq.n	8004512 <converterTune+0x36>
                if(converter->bands[converter->activeBand].functions->converterLeaveBand) {
 8004546:	2214      	movs	r2, #20
 8004548:	fb02 1103 	mla	r1, r2, r3, r1
 800454c:	690b      	ldr	r3, [r1, #16]
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d0de      	beq.n	8004512 <converterTune+0x36>
                    converter->bands[converter->activeBand].functions->converterLeaveBand(converter,
 8004554:	4620      	mov	r0, r4
 8004556:	4798      	blx	r3
 8004558:	e7db      	b.n	8004512 <converterTune+0x36>
                converter->currentTune = *tuneRequest;
 800455a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800455c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800455e:	682b      	ldr	r3, [r5, #0]
 8004560:	6023      	str	r3, [r4, #0]
 8004562:	e7e2      	b.n	800452a <converterTune+0x4e>

08004564 <converterTuneBypass>:


#include "converter.h"

static bool converterTuneBypass(const ConverterManager* converter, const ConverterBand* band, ConverterTuneRequest* tuneRequest)
{
 8004564:	b510      	push	{r4, lr}
 8004566:	4614      	mov	r4, r2
    (void) band;

    converter->setConverterGpio(converter, 0);
 8004568:	6a03      	ldr	r3, [r0, #32]
 800456a:	2100      	movs	r1, #0
 800456c:	4798      	blx	r3

    tuneRequest->outputFrequencyKHz = tuneRequest->inputFrequencyKHz;
 800456e:	6823      	ldr	r3, [r4, #0]
    tuneRequest->spectrumInversion = false;

    return true;
}
 8004570:	2001      	movs	r0, #1
    tuneRequest->outputFrequencyKHz = tuneRequest->inputFrequencyKHz;
 8004572:	60e3      	str	r3, [r4, #12]
    tuneRequest->spectrumInversion = false;
 8004574:	2300      	movs	r3, #0
 8004576:	7423      	strb	r3, [r4, #16]
}
 8004578:	bd10      	pop	{r4, pc}

0800457a <converterTuneSW>:

#include "converter.h"


static bool converterTuneSW(const ConverterManager* converter, const ConverterBand* band, ConverterTuneRequest* tuneRequest)
{
 800457a:	b510      	push	{r4, lr}
 800457c:	4614      	mov	r4, r2
    (void) band;

    /* Switch on LO and Mixer */
    converter->setConverterGpio(converter, _BV(CONVERTER_IO_PIN_MIX_SW_EN) | _BV(CONVERTER_IO_PIN_MIX_SW_LO));
 800457e:	6a03      	ldr	r3, [r0, #32]
 8004580:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004584:	4798      	blx	r3

    tuneRequest->outputFrequencyKHz = configCPU_CLOCK_HZ/1000 +tuneRequest->inputFrequencyKHz;
 8004586:	6823      	ldr	r3, [r4, #0]
    tuneRequest->spectrumInversion = false;

    return true;
}
 8004588:	2001      	movs	r0, #1
    tuneRequest->outputFrequencyKHz = configCPU_CLOCK_HZ/1000 +tuneRequest->inputFrequencyKHz;
 800458a:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 800458e:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8004592:	60e3      	str	r3, [r4, #12]
    tuneRequest->spectrumInversion = false;
 8004594:	2300      	movs	r3, #0
 8004596:	7423      	strb	r3, [r4, #16]
}
 8004598:	bd10      	pop	{r4, pc}

0800459a <converterLeaveSW>:

static bool converterLeaveSW(const ConverterManager* converter, const ConverterBand* band)
{
 800459a:	b508      	push	{r3, lr}
    (void) converter;
    (void) band;

    /* Turn everything off */
    converter->setConverterGpio(converter, 0);
 800459c:	2100      	movs	r1, #0
 800459e:	6a03      	ldr	r3, [r0, #32]
 80045a0:	4798      	blx	r3

    return true;
}
 80045a2:	2001      	movs	r0, #1
 80045a4:	bd08      	pop	{r3, pc}

080045a6 <converterTuneSHF>:
 */

#include "converter.h"

static bool converterTuneSHF(const ConverterManager* converter, const ConverterBand* band, ConverterTuneRequest* tuneRequest)
{
 80045a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ConverterSHFConfig* config = (ConverterSHFConfig*)band->userData;
 80045a8:	68cd      	ldr	r5, [r1, #12]
{
 80045aa:	4616      	mov	r6, r2
    } else {
        ioOut |= _BV(CONVERTER_IO_PIN_ANT_HIGH);
    }*/

    if(config->useHighSideMixing) {
        loFreq = tuneRequest->inputFrequencyKHz + config->ifFrequencyKHz;
 80045ac:	6814      	ldr	r4, [r2, #0]
    if(config->useHighSideMixing) {
 80045ae:	782a      	ldrb	r2, [r5, #0]
{
 80045b0:	4607      	mov	r7, r0
        loFreq = tuneRequest->inputFrequencyKHz + config->ifFrequencyKHz;
 80045b2:	686b      	ldr	r3, [r5, #4]
    if(config->useHighSideMixing) {
 80045b4:	b1aa      	cbz	r2, 80045e2 <converterTuneSHF+0x3c>
        loFreq = tuneRequest->inputFrequencyKHz + config->ifFrequencyKHz;
 80045b6:	441c      	add	r4, r3
        }
        loFreq = tuneRequest->inputFrequencyKHz - config->ifFrequencyKHz;
    }

    /* If tuning failed, try to use LO/2 and enable doubler */
    if(!config->loTune(loFreq, 2)) {
 80045b8:	2102      	movs	r1, #2
 80045ba:	4620      	mov	r0, r4
 80045bc:	68ab      	ldr	r3, [r5, #8]
 80045be:	4798      	blx	r3
 80045c0:	b9a8      	cbnz	r0, 80045ee <converterTuneSHF+0x48>
        loFreq /= 2;
        ioOut |= _BV(CONVERTER_IO_PIN_MIX_X2);

        /* Try again, if it fails now it is fatal */
        if(!config->loTune(loFreq, 2)) {
 80045c2:	2102      	movs	r1, #2
 80045c4:	68ab      	ldr	r3, [r5, #8]
 80045c6:	0860      	lsrs	r0, r4, #1
 80045c8:	4798      	blx	r3
 80045ca:	b160      	cbz	r0, 80045e6 <converterTuneSHF+0x40>
        ioOut |= _BV(CONVERTER_IO_PIN_MIX_X2);
 80045cc:	f44f 4140 	mov.w	r1, #49152	; 0xc000
            return false;
        }
    }

    converter->setConverterGpio(converter, ioOut);
 80045d0:	4638      	mov	r0, r7
 80045d2:	6a3b      	ldr	r3, [r7, #32]
 80045d4:	4798      	blx	r3

    tuneRequest->outputFrequencyKHz = config->ifFrequencyKHz;
 80045d6:	686b      	ldr	r3, [r5, #4]
    tuneRequest->spectrumInversion = config->useHighSideMixing;

    return true;
 80045d8:	2001      	movs	r0, #1
    tuneRequest->outputFrequencyKHz = config->ifFrequencyKHz;
 80045da:	60f3      	str	r3, [r6, #12]
    tuneRequest->spectrumInversion = config->useHighSideMixing;
 80045dc:	782b      	ldrb	r3, [r5, #0]
 80045de:	7433      	strb	r3, [r6, #16]
    return true;
 80045e0:	e002      	b.n	80045e8 <converterTuneSHF+0x42>
        if(tuneRequest->inputFrequencyKHz < config->ifFrequencyKHz) {
 80045e2:	429c      	cmp	r4, r3
 80045e4:	d201      	bcs.n	80045ea <converterTuneSHF+0x44>
            return false;
 80045e6:	2000      	movs	r0, #0
}
 80045e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        loFreq = tuneRequest->inputFrequencyKHz - config->ifFrequencyKHz;
 80045ea:	1ae4      	subs	r4, r4, r3
 80045ec:	e7e4      	b.n	80045b8 <converterTuneSHF+0x12>
    uint32_t ioOut = _BV(CONVERTER_IO_PIN_MIX_EN);
 80045ee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80045f2:	e7ed      	b.n	80045d0 <converterTuneSHF+0x2a>

080045f4 <converterLeaveSHF>:

static bool converterLeaveSHF(const ConverterManager* converter, const ConverterBand* band)
{
 80045f4:	b510      	push	{r4, lr}
 80045f6:	4604      	mov	r4, r0
    ConverterSHFConfig* config = (ConverterSHFConfig*)band->userData;

    /* Turn everything off */
    config->loTune(0, -127);
 80045f8:	68cb      	ldr	r3, [r1, #12]
 80045fa:	2000      	movs	r0, #0
 80045fc:	f06f 017e 	mvn.w	r1, #126	; 0x7e
 8004600:	689b      	ldr	r3, [r3, #8]
 8004602:	4798      	blx	r3
    converter->setConverterGpio(converter, 0);
 8004604:	4620      	mov	r0, r4
 8004606:	2100      	movs	r1, #0
 8004608:	6a23      	ldr	r3, [r4, #32]
 800460a:	4798      	blx	r3

    return true;
}
 800460c:	2001      	movs	r0, #1
 800460e:	bd10      	pop	{r4, pc}

08004610 <prvInsertBlockIntoFreeList>:
 8004610:	b510      	push	{r4, lr}
 8004612:	4b0f      	ldr	r3, [pc, #60]	; (8004650 <prvInsertBlockIntoFreeList+0x40>)
 8004614:	461a      	mov	r2, r3
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4283      	cmp	r3, r0
 800461a:	d3fb      	bcc.n	8004614 <prvInsertBlockIntoFreeList+0x4>
 800461c:	6854      	ldr	r4, [r2, #4]
 800461e:	1911      	adds	r1, r2, r4
 8004620:	4288      	cmp	r0, r1
 8004622:	bf01      	itttt	eq
 8004624:	6841      	ldreq	r1, [r0, #4]
 8004626:	4610      	moveq	r0, r2
 8004628:	1909      	addeq	r1, r1, r4
 800462a:	6051      	streq	r1, [r2, #4]
 800462c:	6844      	ldr	r4, [r0, #4]
 800462e:	1901      	adds	r1, r0, r4
 8004630:	428b      	cmp	r3, r1
 8004632:	d107      	bne.n	8004644 <prvInsertBlockIntoFreeList+0x34>
 8004634:	4907      	ldr	r1, [pc, #28]	; (8004654 <prvInsertBlockIntoFreeList+0x44>)
 8004636:	6809      	ldr	r1, [r1, #0]
 8004638:	428b      	cmp	r3, r1
 800463a:	bf1f      	itttt	ne
 800463c:	6859      	ldrne	r1, [r3, #4]
 800463e:	681b      	ldrne	r3, [r3, #0]
 8004640:	1909      	addne	r1, r1, r4
 8004642:	6041      	strne	r1, [r0, #4]
 8004644:	4290      	cmp	r0, r2
 8004646:	6003      	str	r3, [r0, #0]
 8004648:	bf18      	it	ne
 800464a:	6010      	strne	r0, [r2, #0]
 800464c:	bd10      	pop	{r4, pc}
 800464e:	bf00      	nop
 8004650:	20001618 	.word	0x20001618
 8004654:	200011b0 	.word	0x200011b0

08004658 <vTaskSuspendAll>:
 8004658:	4a02      	ldr	r2, [pc, #8]	; (8004664 <vTaskSuspendAll+0xc>)
 800465a:	6813      	ldr	r3, [r2, #0]
 800465c:	3301      	adds	r3, #1
 800465e:	6013      	str	r3, [r2, #0]
 8004660:	4770      	bx	lr
 8004662:	bf00      	nop
 8004664:	2000136c 	.word	0x2000136c

08004668 <prvGetExpectedIdleTime>:
 8004668:	4b09      	ldr	r3, [pc, #36]	; (8004690 <prvGetExpectedIdleTime+0x28>)
 800466a:	4a0a      	ldr	r2, [pc, #40]	; (8004694 <prvGetExpectedIdleTime+0x2c>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	6812      	ldr	r2, [r2, #0]
 8004670:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 8004672:	b958      	cbnz	r0, 800468c <prvGetExpectedIdleTime+0x24>
 8004674:	4a08      	ldr	r2, [pc, #32]	; (8004698 <prvGetExpectedIdleTime+0x30>)
 8004676:	6812      	ldr	r2, [r2, #0]
 8004678:	2a01      	cmp	r2, #1
 800467a:	d808      	bhi.n	800468e <prvGetExpectedIdleTime+0x26>
 800467c:	2b01      	cmp	r3, #1
 800467e:	d806      	bhi.n	800468e <prvGetExpectedIdleTime+0x26>
 8004680:	4b06      	ldr	r3, [pc, #24]	; (800469c <prvGetExpectedIdleTime+0x34>)
 8004682:	6818      	ldr	r0, [r3, #0]
 8004684:	4b06      	ldr	r3, [pc, #24]	; (80046a0 <prvGetExpectedIdleTime+0x38>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	1ac0      	subs	r0, r0, r3
 800468a:	4770      	bx	lr
 800468c:	2000      	movs	r0, #0
 800468e:	4770      	bx	lr
 8004690:	20001374 	.word	0x20001374
 8004694:	200011a8 	.word	0x200011a8
 8004698:	200011b8 	.word	0x200011b8
 800469c:	200015f8 	.word	0x200015f8
 80046a0:	20001648 	.word	0x20001648

080046a4 <prvResetNextTaskUnblockTime>:
 80046a4:	4a06      	ldr	r2, [pc, #24]	; (80046c0 <prvResetNextTaskUnblockTime+0x1c>)
 80046a6:	6813      	ldr	r3, [r2, #0]
 80046a8:	6819      	ldr	r1, [r3, #0]
 80046aa:	4b06      	ldr	r3, [pc, #24]	; (80046c4 <prvResetNextTaskUnblockTime+0x20>)
 80046ac:	b919      	cbnz	r1, 80046b6 <prvResetNextTaskUnblockTime+0x12>
 80046ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80046b2:	601a      	str	r2, [r3, #0]
 80046b4:	4770      	bx	lr
 80046b6:	6812      	ldr	r2, [r2, #0]
 80046b8:	68d2      	ldr	r2, [r2, #12]
 80046ba:	68d2      	ldr	r2, [r2, #12]
 80046bc:	6852      	ldr	r2, [r2, #4]
 80046be:	e7f8      	b.n	80046b2 <prvResetNextTaskUnblockTime+0xe>
 80046c0:	200011ac 	.word	0x200011ac
 80046c4:	200015f8 	.word	0x200015f8
	...

080046d0 <vPortSVCHandler>:
 80046d0:	4b0b      	ldr	r3, [pc, #44]	; (8004700 <pxCurrentTCBConst2>)
 80046d2:	6819      	ldr	r1, [r3, #0]
 80046d4:	6808      	ldr	r0, [r1, #0]
 80046d6:	c830      	ldmia	r0!, {r4, r5}
 80046d8:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80046dc:	f380 8809 	msr	PSP, r0
 80046e0:	f3bf 8f6f 	isb	sy
 80046e4:	f04f 0000 	mov.w	r0, #0
 80046e8:	f380 8811 	msr	BASEPRI, r0
 80046ec:	f04e 0e0d 	orr.w	lr, lr, #13
 80046f0:	4770      	bx	lr
 80046f2:	bf00      	nop
 80046f4:	f3af 8000 	nop.w
 80046f8:	f3af 8000 	nop.w
 80046fc:	f3af 8000 	nop.w

08004700 <pxCurrentTCBConst2>:
 8004700:	200011a8 	.word	0x200011a8

08004704 <prvPortStartFirstTask>:
 8004704:	4806      	ldr	r0, [pc, #24]	; (8004720 <prvPortStartFirstTask+0x1c>)
 8004706:	6800      	ldr	r0, [r0, #0]
 8004708:	6800      	ldr	r0, [r0, #0]
 800470a:	f380 8808 	msr	MSP, r0
 800470e:	b662      	cpsie	i
 8004710:	b661      	cpsie	f
 8004712:	f3bf 8f4f 	dsb	sy
 8004716:	f3bf 8f6f 	isb	sy
 800471a:	df00      	svc	0
 800471c:	bf00      	nop
 800471e:	0000      	.short	0x0000
 8004720:	e000ed08 	.word	0xe000ed08

08004724 <vPortEnterCritical>:
 8004724:	4a06      	ldr	r2, [pc, #24]	; (8004740 <vPortEnterCritical+0x1c>)
 8004726:	6813      	ldr	r3, [r2, #0]
 8004728:	b93b      	cbnz	r3, 800473a <vPortEnterCritical+0x16>
 800472a:	f04f 01bf 	mov.w	r1, #191	; 0xbf
 800472e:	f381 8811 	msr	BASEPRI, r1
 8004732:	f3bf 8f6f 	isb	sy
 8004736:	f3bf 8f4f 	dsb	sy
 800473a:	3301      	adds	r3, #1
 800473c:	6013      	str	r3, [r2, #0]
 800473e:	4770      	bx	lr
 8004740:	20001358 	.word	0x20001358

08004744 <vTaskEndScheduler>:
 8004744:	b508      	push	{r3, lr}
 8004746:	f7ff ffed 	bl	8004724 <vPortEnterCritical>
 800474a:	2200      	movs	r2, #0
 800474c:	4b02      	ldr	r3, [pc, #8]	; (8004758 <vTaskEndScheduler+0x14>)
 800474e:	601a      	str	r2, [r3, #0]
 8004750:	b672      	cpsid	i
 8004752:	b671      	cpsid	f
 8004754:	bd08      	pop	{r3, pc}
 8004756:	bf00      	nop
 8004758:	20001614 	.word	0x20001614

0800475c <ibqReleaseEmptyBufferS>:
   *
   * @param[in] ibqp      pointer to the @p input_buffers_queue_t object
   *
   * @sclass
   */
  void ibqReleaseEmptyBufferS(input_buffers_queue_t *ibqp) {
 800475c:	b510      	push	{r4, lr}
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static BaseType_t xPortIsCriticalSection( void ){
uint32_t ulBasePri;
	__asm volatile( "mrs %0, basepri" : "=r"( ulBasePri ) );
 800475e:	f3ef 8311 	mrs	r3, BASEPRI
	
	return (ulBasePri > 0)? pdTRUE : pdFALSE;
 8004762:	b12b      	cbz	r3, 8004770 <ibqReleaseEmptyBufferS+0x14>
	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 8004764:	f3ef 8305 	mrs	r3, IPSR
	if( ulCurrentInterrupt == 0 )
 8004768:	b12b      	cbz	r3, 8004776 <ibqReleaseEmptyBufferS+0x1a>

  osalDbgCheckClassS();
 800476a:	f7ff ffeb 	bl	8004744 <vTaskEndScheduler>
 800476e:	e7fe      	b.n	800476e <ibqReleaseEmptyBufferS+0x12>
 8004770:	f7ff ffe8 	bl	8004744 <vTaskEndScheduler>
 8004774:	e7fe      	b.n	8004774 <ibqReleaseEmptyBufferS+0x18>
  osalDbgAssert(!ibqIsEmptyI(ibqp), "buffers queue empty");
 8004776:	68c3      	ldr	r3, [r0, #12]
 8004778:	b913      	cbnz	r3, 8004780 <ibqReleaseEmptyBufferS+0x24>
 800477a:	f7ff ffe3 	bl	8004744 <vTaskEndScheduler>
 800477e:	e7fe      	b.n	800477e <ibqReleaseEmptyBufferS+0x22>

  /* Freeing a buffer slot in the queue.*/
  ibqp->bcounter--;
 8004780:	68c3      	ldr	r3, [r0, #12]
  ibqp->brdptr += ibqp->bsize;
 8004782:	69c2      	ldr	r2, [r0, #28]
  ibqp->bcounter--;
 8004784:	3b01      	subs	r3, #1
 8004786:	60c3      	str	r3, [r0, #12]
  ibqp->brdptr += ibqp->bsize;
 8004788:	6943      	ldr	r3, [r0, #20]
 800478a:	4413      	add	r3, r2
  if (ibqp->brdptr >= ibqp->btop) {
 800478c:	6982      	ldr	r2, [r0, #24]
  ibqp->brdptr += ibqp->bsize;
 800478e:	6143      	str	r3, [r0, #20]
  if (ibqp->brdptr >= ibqp->btop) {
 8004790:	4293      	cmp	r3, r2
    ibqp->brdptr = ibqp->buffers;
 8004792:	bf24      	itt	cs
 8004794:	6a43      	ldrcs	r3, [r0, #36]	; 0x24
 8004796:	6143      	strcs	r3, [r0, #20]
  }

  /* No "current" buffer.*/
  ibqp->ptr = NULL;
 8004798:	2300      	movs	r3, #0
 800479a:	6283      	str	r3, [r0, #40]	; 0x28

  /* Notifying the buffer release.*/
  if (ibqp->notify != NULL) {
 800479c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800479e:	b113      	cbz	r3, 80047a6 <ibqReleaseEmptyBufferS+0x4a>
    ibqp->notify(ibqp);
  }
}
 80047a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ibqp->notify(ibqp);
 80047a4:	4718      	bx	r3
}
 80047a6:	bd10      	pop	{r4, pc}

080047a8 <obqGetFullBufferI>:
 * @retval NULL         if the queue is empty.
 *
 * @iclass
 */
uint8_t *obqGetFullBufferI(output_buffers_queue_t *obqp,
                           size_t *sizep) {
 80047a8:	b508      	push	{r3, lr}
 80047aa:	4603      	mov	r3, r0
	__asm volatile( "mrs %0, basepri" : "=r"( ulBasePri ) );
 80047ac:	f3ef 8211 	mrs	r2, BASEPRI
	return (ulBasePri > 0)? pdTRUE : pdFALSE;
 80047b0:	b15a      	cbz	r2, 80047ca <obqGetFullBufferI+0x22>

  osalDbgCheckClassI();

  if (obqIsEmptyI(obqp)) {
 80047b2:	e9d0 2004 	ldrd	r2, r0, [r0, #16]
 80047b6:	4282      	cmp	r2, r0
 80047b8:	d101      	bne.n	80047be <obqGetFullBufferI+0x16>
 80047ba:	68db      	ldr	r3, [r3, #12]
 80047bc:	b91b      	cbnz	r3, 80047c6 <obqGetFullBufferI+0x1e>
    return NULL;
  }

  /* Buffer size.*/
  *sizep = *((size_t *)obqp->brdptr);
 80047be:	f850 3b04 	ldr.w	r3, [r0], #4
 80047c2:	600b      	str	r3, [r1, #0]

  return obqp->brdptr + sizeof (size_t);
}
 80047c4:	bd08      	pop	{r3, pc}
    return NULL;
 80047c6:	2000      	movs	r0, #0
 80047c8:	e7fc      	b.n	80047c4 <obqGetFullBufferI+0x1c>
  osalDbgCheckClassI();
 80047ca:	f7ff ffbb 	bl	8004744 <vTaskEndScheduler>
 80047ce:	e7fe      	b.n	80047ce <obqGetFullBufferI+0x26>

080047d0 <obqPostFullBufferS>:
 * @param[in] obqp      pointer to the @p output_buffers_queue_t object
 * @param[in] size      used size of the buffer, cannot be zero
 *
 * @sclass
 */
void obqPostFullBufferS(output_buffers_queue_t *obqp, size_t size) {
 80047d0:	b510      	push	{r4, lr}
	__asm volatile( "mrs %0, basepri" : "=r"( ulBasePri ) );
 80047d2:	f3ef 8311 	mrs	r3, BASEPRI
	return (ulBasePri > 0)? pdTRUE : pdFALSE;
 80047d6:	b12b      	cbz	r3, 80047e4 <obqPostFullBufferS+0x14>
	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 80047d8:	f3ef 8305 	mrs	r3, IPSR
	if( ulCurrentInterrupt == 0 )
 80047dc:	b12b      	cbz	r3, 80047ea <obqPostFullBufferS+0x1a>

  osalDbgCheckClassS();
 80047de:	f7ff ffb1 	bl	8004744 <vTaskEndScheduler>
 80047e2:	e7fe      	b.n	80047e2 <obqPostFullBufferS+0x12>
 80047e4:	f7ff ffae 	bl	8004744 <vTaskEndScheduler>
 80047e8:	e7fe      	b.n	80047e8 <obqPostFullBufferS+0x18>
  osalDbgCheck((size > 0U) && (size <= (obqp->bsize - sizeof (size_t))));
 80047ea:	b119      	cbz	r1, 80047f4 <obqPostFullBufferS+0x24>
 80047ec:	69c3      	ldr	r3, [r0, #28]
 80047ee:	3b04      	subs	r3, #4
 80047f0:	4299      	cmp	r1, r3
 80047f2:	d902      	bls.n	80047fa <obqPostFullBufferS+0x2a>
 80047f4:	f7ff ffa6 	bl	8004744 <vTaskEndScheduler>
 80047f8:	e7fe      	b.n	80047f8 <obqPostFullBufferS+0x28>
  osalDbgAssert(!obqIsFullI(obqp), "buffers queue full");
 80047fa:	68c3      	ldr	r3, [r0, #12]
 80047fc:	b913      	cbnz	r3, 8004804 <obqPostFullBufferS+0x34>
 80047fe:	f7ff ffa1 	bl	8004744 <vTaskEndScheduler>
 8004802:	e7fe      	b.n	8004802 <obqPostFullBufferS+0x32>

  /* Writing size field in the buffer.*/
  *((size_t *)obqp->bwrptr) = size;
 8004804:	6903      	ldr	r3, [r0, #16]
 8004806:	6019      	str	r1, [r3, #0]

  /* Posting the buffer in the queue.*/
  obqp->bcounter--;
 8004808:	68c2      	ldr	r2, [r0, #12]
 800480a:	3a01      	subs	r2, #1
 800480c:	60c2      	str	r2, [r0, #12]
  obqp->bwrptr += obqp->bsize;
 800480e:	69c2      	ldr	r2, [r0, #28]
 8004810:	4413      	add	r3, r2
  if (obqp->bwrptr >= obqp->btop) {
 8004812:	6982      	ldr	r2, [r0, #24]
  obqp->bwrptr += obqp->bsize;
 8004814:	6103      	str	r3, [r0, #16]
  if (obqp->bwrptr >= obqp->btop) {
 8004816:	4293      	cmp	r3, r2
    obqp->bwrptr = obqp->buffers;
 8004818:	bf24      	itt	cs
 800481a:	6a43      	ldrcs	r3, [r0, #36]	; 0x24
 800481c:	6103      	strcs	r3, [r0, #16]
  }

  /* No "current" buffer.*/
  obqp->ptr = NULL;
 800481e:	2300      	movs	r3, #0
 8004820:	6283      	str	r3, [r0, #40]	; 0x28

  /* Notifying the buffer release.*/
  if (obqp->notify != NULL) {
 8004822:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8004824:	b113      	cbz	r3, 800482c <obqPostFullBufferS+0x5c>
    obqp->notify(obqp);
  }
}
 8004826:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    obqp->notify(obqp);
 800482a:	4718      	bx	r3
}
 800482c:	bd10      	pop	{r4, pc}
	...

08004830 <osalOsRescheduleS.lto_priv.1>:
{
 8004830:	b508      	push	{r3, lr}
	__asm volatile( "mrs %0, basepri" : "=r"( ulBasePri ) );
 8004832:	f3ef 8311 	mrs	r3, BASEPRI
	return (ulBasePri > 0)? pdTRUE : pdFALSE;
 8004836:	b12b      	cbz	r3, 8004844 <osalOsRescheduleS.lto_priv.1+0x14>
	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 8004838:	f3ef 8205 	mrs	r2, IPSR
	if( ulCurrentInterrupt == 0 )
 800483c:	b12a      	cbz	r2, 800484a <osalOsRescheduleS.lto_priv.1+0x1a>
    osalDbgCheckClassS();
 800483e:	f7ff ff81 	bl	8004744 <vTaskEndScheduler>
 8004842:	e7fe      	b.n	8004842 <osalOsRescheduleS.lto_priv.1+0x12>
 8004844:	f7ff ff7e 	bl	8004744 <vTaskEndScheduler>
 8004848:	e7fe      	b.n	8004848 <osalOsRescheduleS.lto_priv.1+0x18>
 800484a:	4b04      	ldr	r3, [pc, #16]	; (800485c <osalOsRescheduleS.lto_priv.1+0x2c>)
 800484c:	6819      	ldr	r1, [r3, #0]
 800484e:	601a      	str	r2, [r3, #0]
    if(uxYieldPending()) taskYIELD();
 8004850:	b119      	cbz	r1, 800485a <osalOsRescheduleS.lto_priv.1+0x2a>
}
 8004852:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8004856:	f7ff ba95 	b.w	8003d84 <Vector6C.part.0>
 800485a:	bd08      	pop	{r3, pc}
 800485c:	2000164c 	.word	0x2000164c

08004860 <usbStartReceiveI>:
 *                      the packet size because the excess is discarded.
 *
 * @iclass
 */
void usbStartReceiveI(USBDriver *usbp, usbep_t ep,
                      uint8_t *buf, size_t n) {
 8004860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm volatile( "mrs %0, basepri" : "=r"( ulBasePri ) );
 8004862:	f3ef 8411 	mrs	r4, BASEPRI
	return (ulBasePri > 0)? pdTRUE : pdFALSE;
 8004866:	b11c      	cbz	r4, 8004870 <usbStartReceiveI+0x10>
  USBOutEndpointState *osp;

  osalDbgCheckClassI();
  osalDbgCheck((usbp != NULL) && (ep <= (usbep_t)USB_MAX_ENDPOINTS));
 8004868:	b928      	cbnz	r0, 8004876 <usbStartReceiveI+0x16>
 800486a:	f7ff ff6b 	bl	8004744 <vTaskEndScheduler>
 800486e:	e7fe      	b.n	800486e <usbStartReceiveI+0xe>
  osalDbgCheckClassI();
 8004870:	f7ff ff68 	bl	8004744 <vTaskEndScheduler>
 8004874:	e7fe      	b.n	8004874 <usbStartReceiveI+0x14>
  osalDbgCheck((usbp != NULL) && (ep <= (usbep_t)USB_MAX_ENDPOINTS));
 8004876:	2907      	cmp	r1, #7
 8004878:	d8f7      	bhi.n	800486a <usbStartReceiveI+0xa>
  osalDbgAssert(!usbGetReceiveStatusI(usbp, ep), "already receiving");
 800487a:	2401      	movs	r4, #1
 800487c:	8946      	ldrh	r6, [r0, #10]
 800487e:	fa04 f501 	lsl.w	r5, r4, r1
 8004882:	b2af      	uxth	r7, r5
 8004884:	4035      	ands	r5, r6
 8004886:	d002      	beq.n	800488e <usbStartReceiveI+0x2e>
 8004888:	f7ff ff5c 	bl	8004744 <vTaskEndScheduler>
 800488c:	e7fe      	b.n	800488c <usbStartReceiveI+0x2c>

  /* Marking the endpoint as active.*/
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 800488e:	433e      	orrs	r6, r7
 8004890:	8146      	strh	r6, [r0, #10]

  /* Setting up the transfer.*/
  /*lint -save -e661 [18.1] pclint is confused by the check on ep.*/
  osp = usbp->epc[ep]->out_state;
 8004892:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8004896:	68c6      	ldr	r6, [r0, #12]
 8004898:	69b0      	ldr	r0, [r6, #24]
  /*lint -restore*/
  osp->rxbuf  = buf;
  osp->rxsize = n;
  osp->rxcnt  = 0;
 800489a:	e9c0 3500 	strd	r3, r5, [r0]
  osp->rxbuf  = buf;
 800489e:	6082      	str	r2, [r0, #8]
 */
void usb_lld_start_out(USBDriver *usbp, usbep_t ep) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;

  /* Transfer initialization.*/
  if (osp->rxsize == 0)         /* Special case for zero sized packets.*/
 80048a0:	b1b3      	cbz	r3, 80048d0 <usbStartReceiveI+0x70>
    osp->rxpkts = 1;
  else
    osp->rxpkts = (uint16_t)((osp->rxsize + usbp->epc[ep]->out_maxsize - 1) /
 80048a2:	8a72      	ldrh	r2, [r6, #18]
 80048a4:	3b01      	subs	r3, #1
 80048a6:	4413      	add	r3, r2
 80048a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80048ac:	b29b      	uxth	r3, r3
                             usbp->epc[ep]->out_maxsize);

  EPR_SET_STAT_RX(ep, EPR_STAT_RX_VALID);
 80048ae:	4a09      	ldr	r2, [pc, #36]	; (80048d4 <usbStartReceiveI+0x74>)
 80048b0:	8183      	strh	r3, [r0, #12]
 80048b2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80048b6:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80048ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048be:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80048c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048ca:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  osp->thread = NULL;
#endif

  /* Starting transfer.*/
  usb_lld_start_out(usbp, ep);
}
 80048ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    osp->rxpkts = 1;
 80048d0:	4623      	mov	r3, r4
 80048d2:	e7ec      	b.n	80048ae <usbStartReceiveI+0x4e>
 80048d4:	40005c00 	.word	0x40005c00

080048d8 <usbStartTransmitI>:
 * @param[in] n         transaction size
 *
 * @iclass
 */
void usbStartTransmitI(USBDriver *usbp, usbep_t ep,
                       const uint8_t *buf, size_t n) {
 80048d8:	b570      	push	{r4, r5, r6, lr}
 80048da:	460c      	mov	r4, r1
 80048dc:	4611      	mov	r1, r2
	__asm volatile( "mrs %0, basepri" : "=r"( ulBasePri ) );
 80048de:	f3ef 8211 	mrs	r2, BASEPRI
	return (ulBasePri > 0)? pdTRUE : pdFALSE;
 80048e2:	b11a      	cbz	r2, 80048ec <usbStartTransmitI+0x14>
  USBInEndpointState *isp;

  osalDbgCheckClassI();
  osalDbgCheck((usbp != NULL) && (ep <= (usbep_t)USB_MAX_ENDPOINTS));
 80048e4:	b928      	cbnz	r0, 80048f2 <usbStartTransmitI+0x1a>
 80048e6:	f7ff ff2d 	bl	8004744 <vTaskEndScheduler>
 80048ea:	e7fe      	b.n	80048ea <usbStartTransmitI+0x12>
  osalDbgCheckClassI();
 80048ec:	f7ff ff2a 	bl	8004744 <vTaskEndScheduler>
 80048f0:	e7fe      	b.n	80048f0 <usbStartTransmitI+0x18>
  osalDbgCheck((usbp != NULL) && (ep <= (usbep_t)USB_MAX_ENDPOINTS));
 80048f2:	2c07      	cmp	r4, #7
 80048f4:	d8f7      	bhi.n	80048e6 <usbStartTransmitI+0xe>
  osalDbgAssert(!usbGetTransmitStatusI(usbp, ep), "already transmitting");
 80048f6:	2501      	movs	r5, #1
 80048f8:	8906      	ldrh	r6, [r0, #8]
 80048fa:	40a5      	lsls	r5, r4
 80048fc:	b2aa      	uxth	r2, r5
 80048fe:	4035      	ands	r5, r6
 8004900:	d002      	beq.n	8004908 <usbStartTransmitI+0x30>
 8004902:	f7ff ff1f 	bl	8004744 <vTaskEndScheduler>
 8004906:	e7fe      	b.n	8004906 <usbStartTransmitI+0x2e>

  /* Marking the endpoint as active.*/
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8004908:	4316      	orrs	r6, r2
 800490a:	8106      	strh	r6, [r0, #8]

  /* Setting up the transfer.*/
  /*lint -save -e661 [18.1] pclint is confused by the check on ep.*/
  isp = usbp->epc[ep]->in_state;
 800490c:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 8004910:	68c2      	ldr	r2, [r0, #12]
 8004912:	6950      	ldr	r0, [r2, #20]
  size_t n;
  USBInEndpointState *isp = usbp->epc[ep]->in_state;

  /* Transfer initialization.*/
  n = isp->txsize;
  if (n > (size_t)usbp->epc[ep]->in_maxsize)
 8004914:	8a12      	ldrh	r2, [r2, #16]
  /*lint -restore*/
  isp->txbuf  = buf;
  isp->txsize = n;
  isp->txcnt  = 0;
 8004916:	e9c0 3500 	strd	r3, r5, [r0]
 800491a:	429a      	cmp	r2, r3
 800491c:	bf28      	it	cs
 800491e:	461a      	movcs	r2, r3
  isp->txbuf  = buf;
 8004920:	6081      	str	r1, [r0, #8]
    n = (size_t)usbp->epc[ep]->in_maxsize;

  isp->txlast = n;
 8004922:	60c2      	str	r2, [r0, #12]
  usb_packet_write_from_buffer(ep, isp->txbuf, n);
 8004924:	4620      	mov	r0, r4
 8004926:	f7ff fc1f 	bl	8004168 <usb_packet_write_from_buffer>

  EPR_SET_STAT_TX(ep, EPR_STAT_TX_VALID);
 800492a:	4a08      	ldr	r2, [pc, #32]	; (800494c <usbStartTransmitI+0x74>)
 800492c:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
 8004930:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
 8004934:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004938:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 800493c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004940:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004944:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
  isp->thread = NULL;
#endif

  /* Starting transfer.*/
  usb_lld_start_in(usbp, ep);
}
 8004948:	bd70      	pop	{r4, r5, r6, pc}
 800494a:	bf00      	nop
 800494c:	40005c00 	.word	0x40005c00

08004950 <obnotify>:
static void obnotify(io_buffers_queue_t *bqp) {
 8004950:	b513      	push	{r0, r1, r4, lr}
  SerialUSBDriver *sdup = bqGetLinkX(bqp);
 8004952:	6b44      	ldr	r4, [r0, #52]	; 0x34
  if ((usbGetDriverStateI(sdup->config->usbp) != USB_ACTIVE) ||
 8004954:	f8d4 3498 	ldr.w	r3, [r4, #1176]	; 0x498
 8004958:	681a      	ldr	r2, [r3, #0]
 800495a:	7811      	ldrb	r1, [r2, #0]
 800495c:	2904      	cmp	r1, #4
 800495e:	d116      	bne.n	800498e <obnotify+0x3e>
 8004960:	7d21      	ldrb	r1, [r4, #20]
 8004962:	2902      	cmp	r1, #2
 8004964:	d113      	bne.n	800498e <obnotify+0x3e>
  if (!usbGetTransmitStatusI(sdup->config->usbp, sdup->config->bulk_in)) {
 8004966:	7919      	ldrb	r1, [r3, #4]
 8004968:	2301      	movs	r3, #1
 800496a:	8912      	ldrh	r2, [r2, #8]
 800496c:	408b      	lsls	r3, r1
 800496e:	4213      	tst	r3, r2
 8004970:	d10d      	bne.n	800498e <obnotify+0x3e>
    uint8_t *buf = obqGetFullBufferI(&sdup->obqueue, &n);
 8004972:	a901      	add	r1, sp, #4
 8004974:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004978:	f7ff ff16 	bl	80047a8 <obqGetFullBufferI>
    if (buf != NULL) {
 800497c:	4602      	mov	r2, r0
 800497e:	b130      	cbz	r0, 800498e <obnotify+0x3e>
      usbStartTransmitI(sdup->config->usbp, sdup->config->bulk_in, buf, n);
 8004980:	f8d4 0498 	ldr.w	r0, [r4, #1176]	; 0x498
 8004984:	9b01      	ldr	r3, [sp, #4]
 8004986:	7901      	ldrb	r1, [r0, #4]
 8004988:	6800      	ldr	r0, [r0, #0]
 800498a:	f7ff ffa5 	bl	80048d8 <usbStartTransmitI>
}
 800498e:	b002      	add	sp, #8
 8004990:	bd10      	pop	{r4, pc}
	...

08004994 <dmaStreamRelease>:
 *
 * @param[in] dmastp    pointer to a stm32_dma_stream_t structure
 *
 * @special
 */
void dmaStreamRelease(const stm32_dma_stream_t *dmastp) {
 8004994:	b570      	push	{r4, r5, r6, lr}

  osalDbgCheck(dmastp != NULL);
 8004996:	b910      	cbnz	r0, 800499e <dmaStreamRelease+0xa>
 8004998:	f7ff fed4 	bl	8004744 <vTaskEndScheduler>
 800499c:	e7fe      	b.n	800499c <dmaStreamRelease+0x8>

  /* Check if the streams is not taken.*/
  osalDbgAssert((dma_streams_mask & (1 << dmastp->selfindex)) != 0U,
 800499e:	2501      	movs	r5, #1
 80049a0:	4a15      	ldr	r2, [pc, #84]	; (80049f8 <dmaStreamRelease+0x64>)
 80049a2:	7c46      	ldrb	r6, [r0, #17]
 80049a4:	6813      	ldr	r3, [r2, #0]
 80049a6:	fa05 f106 	lsl.w	r1, r5, r6
 80049aa:	4219      	tst	r1, r3
 80049ac:	d102      	bne.n	80049b4 <dmaStreamRelease+0x20>
 80049ae:	f7ff fec9 	bl	8004744 <vTaskEndScheduler>
 80049b2:	e7fe      	b.n	80049b2 <dmaStreamRelease+0x1e>
                "not allocated");

  /* Marks the stream as not allocated.*/
  dma_streams_mask &= ~(1U << dmastp->selfindex);
 80049b4:	ea23 0301 	bic.w	r3, r3, r1

  /* Disables the associated IRQ vector if it is no more in use.*/
  if ((dma_streams_mask & dmastp->cmask) == 0U) {
 80049b8:	6881      	ldr	r1, [r0, #8]
  dma_streams_mask &= ~(1U << dmastp->selfindex);
 80049ba:	6013      	str	r3, [r2, #0]
  if ((dma_streams_mask & dmastp->cmask) == 0U) {
 80049bc:	ea13 0401 	ands.w	r4, r3, r1
 80049c0:	d10b      	bne.n	80049da <dmaStreamRelease+0x46>
    nvicDisableVector(dmastp->vector);
 80049c2:	7c82      	ldrb	r2, [r0, #18]
 *
 * @param[in] n         the interrupt number
 */
void nvicDisableVector(uint32_t n) {

  NVIC->ICER[n >> 5U] = 1U << (n & 0x1FU);
 80049c4:	f002 011f 	and.w	r1, r2, #31
 80049c8:	408d      	lsls	r5, r1
 80049ca:	0950      	lsrs	r0, r2, #5
 80049cc:	490b      	ldr	r1, [pc, #44]	; (80049fc <dmaStreamRelease+0x68>)
 80049ce:	3020      	adds	r0, #32
 80049d0:	f841 5020 	str.w	r5, [r1, r0, lsl #2]
#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = 0U;
 80049d4:	4411      	add	r1, r2
 80049d6:	f881 4300 	strb.w	r4, [r1, #768]	; 0x300
  }

  /* Removes the DMA handler.*/
  _stm32_dma_isr_redir[dmastp->selfindex].dma_func  = NULL;
 80049da:	2100      	movs	r1, #0
 80049dc:	4a08      	ldr	r2, [pc, #32]	; (8004a00 <dmaStreamRelease+0x6c>)
  _stm32_dma_isr_redir[dmastp->selfindex].dma_param = NULL;

  /* Shutting down clocks that are no more required, if any.*/
  if ((dma_streams_mask & STM32_DMA1_STREAMS_MASK) == 0U) {
 80049de:	065b      	lsls	r3, r3, #25
  _stm32_dma_isr_redir[dmastp->selfindex].dma_func  = NULL;
 80049e0:	f842 1036 	str.w	r1, [r2, r6, lsl #3]
  _stm32_dma_isr_redir[dmastp->selfindex].dma_param = NULL;
 80049e4:	eb02 02c6 	add.w	r2, r2, r6, lsl #3
 80049e8:	6051      	str	r1, [r2, #4]
    rccDisableDMA1(false);
 80049ea:	bf01      	itttt	eq
 80049ec:	4a05      	ldreq	r2, [pc, #20]	; (8004a04 <dmaStreamRelease+0x70>)
 80049ee:	6953      	ldreq	r3, [r2, #20]
 80049f0:	f023 0301 	biceq.w	r3, r3, #1
 80049f4:	6153      	streq	r3, [r2, #20]
#if STM32_DMA2_NUM_CHANNELS > 0
  if ((dma_streams_mask & STM32_DMA2_STREAMS_MASK) == 0U) {
    rccDisableDMA2(false);
  }
#endif
}
 80049f6:	bd70      	pop	{r4, r5, r6, pc}
 80049f8:	20001044 	.word	0x20001044
 80049fc:	e000e100 	.word	0xe000e100
 8004a00:	20000fe8 	.word	0x20000fe8
 8004a04:	40021000 	.word	0x40021000

08004a08 <i2c_lld_serve_tx_end_irq>:
 *
 * @param[in] i2cp      pointer to the @p I2CDriver object
 *
 * @notapi
 */
static void i2c_lld_serve_tx_end_irq(I2CDriver *i2cp, uint32_t flags) {
 8004a08:	b508      	push	{r3, lr}
  I2C_TypeDef *dp = i2cp->i2c;

  /* DMA errors handling.*/
#if defined(STM32_I2C_DMA_ERROR_HOOK)
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8004a0a:	070b      	lsls	r3, r1, #28
 8004a0c:	d502      	bpl.n	8004a14 <i2c_lld_serve_tx_end_irq+0xc>
    STM32_I2C_DMA_ERROR_HOOK(i2cp);
 8004a0e:	f7ff fe99 	bl	8004744 <vTaskEndScheduler>
 8004a12:	e7fe      	b.n	8004a12 <i2c_lld_serve_tx_end_irq+0xa>
  }
#else
  (void)flags;
#endif

  dmaStreamDisable(i2cp->dmatx);
 8004a14:	e9d0 311d 	ldrd	r3, r1, [r0, #116]	; 0x74
 8004a18:	6858      	ldr	r0, [r3, #4]
 8004a1a:	6802      	ldr	r2, [r0, #0]
 8004a1c:	f022 020f 	bic.w	r2, r2, #15
 8004a20:	6002      	str	r2, [r0, #0]
 8004a22:	7c18      	ldrb	r0, [r3, #16]
 8004a24:	681a      	ldr	r2, [r3, #0]
 8004a26:	230e      	movs	r3, #14
 8004a28:	4083      	lsls	r3, r0
 8004a2a:	6053      	str	r3, [r2, #4]
  /* Enables interrupts to catch BTF event meaning transmission part complete.
     Interrupt handler will decide to generate STOP or to begin receiving part
     of R/W transaction itself.*/
  dp->CR2 |= I2C_CR2_ITEVTEN;
 8004a2c:	684b      	ldr	r3, [r1, #4]
 8004a2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004a32:	604b      	str	r3, [r1, #4]
}
 8004a34:	bd08      	pop	{r3, pc}

08004a36 <spi_lld_serve_tx_interrupt>:
 * @brief   Shared end-of-tx service routine.
 *
 * @param[in] spip      pointer to the @p SPIDriver object
 * @param[in] flags     pre-shifted content of the ISR register
 */
static void spi_lld_serve_tx_interrupt(SPIDriver *spip, uint32_t flags) {
 8004a36:	b508      	push	{r3, lr}

  /* DMA errors handling.*/
#if defined(STM32_SPI_DMA_ERROR_HOOK)
  (void)spip;
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8004a38:	070b      	lsls	r3, r1, #28
 8004a3a:	d502      	bpl.n	8004a42 <spi_lld_serve_tx_interrupt+0xc>
    STM32_SPI_DMA_ERROR_HOOK(spip);
 8004a3c:	f7ff fe82 	bl	8004744 <vTaskEndScheduler>
 8004a40:	e7fe      	b.n	8004a40 <spi_lld_serve_tx_interrupt+0xa>
  }
#else
  (void)spip;
  (void)flags;
#endif
}
 8004a42:	bd08      	pop	{r3, pc}

08004a44 <usb_lld_init_endpoint>:
void usb_lld_init_endpoint(USBDriver *usbp, usbep_t ep) {
 8004a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  const USBEndpointConfig *epcp = usbp->epc[ep];
 8004a46:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 8004a4a:	68de      	ldr	r6, [r3, #12]
  switch (epcp->ep_mode & USB_EP_MODE_TYPE) {
 8004a4c:	6833      	ldr	r3, [r6, #0]
 8004a4e:	f003 0303 	and.w	r3, r3, #3
 8004a52:	2b02      	cmp	r3, #2
 8004a54:	d006      	beq.n	8004a64 <usb_lld_init_endpoint+0x20>
 8004a56:	2b03      	cmp	r3, #3
 8004a58:	d022      	beq.n	8004aa0 <usb_lld_init_endpoint+0x5c>
 8004a5a:	2b01      	cmp	r3, #1
 8004a5c:	d123      	bne.n	8004aa6 <usb_lld_init_endpoint+0x62>
    osalDbgAssert(false, "isochronous support disabled");
 8004a5e:	f7ff fe71 	bl	8004744 <vTaskEndScheduler>
 8004a62:	e7fe      	b.n	8004a62 <usb_lld_init_endpoint+0x1e>
    epr = EPR_EP_TYPE_BULK;
 8004a64:	2200      	movs	r2, #0
  dp = USB_GET_DESCRIPTOR(ep);
 8004a66:	4b33      	ldr	r3, [pc, #204]	; (8004b34 <usb_lld_init_endpoint+0xf0>)
 8004a68:	ea4f 1c01 	mov.w	ip, r1, lsl #4
 8004a6c:	6d1c      	ldr	r4, [r3, #80]	; 0x50
  if (epcp->in_state != NULL) {
 8004a6e:	6973      	ldr	r3, [r6, #20]
  dp = USB_GET_DESCRIPTOR(ep);
 8004a70:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 8004a74:	f504 44c0 	add.w	r4, r4, #24576	; 0x6000
 8004a78:	eb04 1501 	add.w	r5, r4, r1, lsl #4
  if (epcp->in_state != NULL) {
 8004a7c:	b1d3      	cbz	r3, 8004ab4 <usb_lld_init_endpoint+0x70>
    dp->TXCOUNT0 = 0;
 8004a7e:	2300      	movs	r3, #0
 8004a80:	606b      	str	r3, [r5, #4]
    dp->TXADDR0  = usb_pm_alloc(usbp, epcp->in_maxsize);
 8004a82:	8a33      	ldrh	r3, [r6, #16]
  next = usbp->pmnext;
 8004a84:	f8d0 7084 	ldr.w	r7, [r0, #132]	; 0x84
  usbp->pmnext += (size + 1) & ~1;
 8004a88:	3301      	adds	r3, #1
 8004a8a:	f023 0301 	bic.w	r3, r3, #1
 8004a8e:	443b      	add	r3, r7
  osalDbgAssert(usbp->pmnext <= STM32_USB_PMA_SIZE, "PMA overflow");
 8004a90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  usbp->pmnext += (size + 1) & ~1;
 8004a94:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  osalDbgAssert(usbp->pmnext <= STM32_USB_PMA_SIZE, "PMA overflow");
 8004a98:	d908      	bls.n	8004aac <usb_lld_init_endpoint+0x68>
 8004a9a:	f7ff fe53 	bl	8004744 <vTaskEndScheduler>
 8004a9e:	e7fe      	b.n	8004a9e <usb_lld_init_endpoint+0x5a>
  switch (epcp->ep_mode & USB_EP_MODE_TYPE) {
 8004aa0:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8004aa4:	e7df      	b.n	8004a66 <usb_lld_init_endpoint+0x22>
    epr = EPR_EP_TYPE_CONTROL;
 8004aa6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004aaa:	e7dc      	b.n	8004a66 <usb_lld_init_endpoint+0x22>
    dp->TXADDR0  = usb_pm_alloc(usbp, epcp->in_maxsize);
 8004aac:	f84c 7004 	str.w	r7, [ip, r4]
    epr |= EPR_STAT_TX_NAK;
 8004ab0:	f042 0220 	orr.w	r2, r2, #32
  if (epcp->out_state != NULL) {
 8004ab4:	69b3      	ldr	r3, [r6, #24]
 8004ab6:	b32b      	cbz	r3, 8004b04 <usb_lld_init_endpoint+0xc0>
    if (epcp->out_maxsize > 62)
 8004ab8:	8a74      	ldrh	r4, [r6, #18]
 8004aba:	2c3e      	cmp	r4, #62	; 0x3e
      nblocks = (((((epcp->out_maxsize - 1) | 0x1f) + 1) / 32) << 10) |
 8004abc:	f104 33ff 	add.w	r3, r4, #4294967295	; 0xffffffff
    if (epcp->out_maxsize > 62)
 8004ac0:	d916      	bls.n	8004af0 <usb_lld_init_endpoint+0xac>
      nblocks = (((((epcp->out_maxsize - 1) | 0x1f) + 1) / 32) << 10) |
 8004ac2:	f043 031f 	orr.w	r3, r3, #31
 8004ac6:	4e1c      	ldr	r6, [pc, #112]	; (8004b38 <usb_lld_init_endpoint+0xf4>)
 8004ac8:	3301      	adds	r3, #1
 8004aca:	115b      	asrs	r3, r3, #5
 8004acc:	ea46 2383 	orr.w	r3, r6, r3, lsl #10
 8004ad0:	b29b      	uxth	r3, r3
    dp->RXCOUNT0 = nblocks;
 8004ad2:	60eb      	str	r3, [r5, #12]
  usbp->pmnext += (size + 1) & ~1;
 8004ad4:	3401      	adds	r4, #1
  next = usbp->pmnext;
 8004ad6:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
  usbp->pmnext += (size + 1) & ~1;
 8004ada:	f024 0401 	bic.w	r4, r4, #1
 8004ade:	441c      	add	r4, r3
  osalDbgAssert(usbp->pmnext <= STM32_USB_PMA_SIZE, "PMA overflow");
 8004ae0:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
  usbp->pmnext += (size + 1) & ~1;
 8004ae4:	f8c0 4084 	str.w	r4, [r0, #132]	; 0x84
  osalDbgAssert(usbp->pmnext <= STM32_USB_PMA_SIZE, "PMA overflow");
 8004ae8:	d909      	bls.n	8004afe <usb_lld_init_endpoint+0xba>
 8004aea:	f7ff fe2b 	bl	8004744 <vTaskEndScheduler>
 8004aee:	e7fe      	b.n	8004aee <usb_lld_init_endpoint+0xaa>
      nblocks = ((((epcp->out_maxsize - 1) | 1) + 1) / 2) << 10;
 8004af0:	f043 0301 	orr.w	r3, r3, #1
 8004af4:	3301      	adds	r3, #1
 8004af6:	025b      	lsls	r3, r3, #9
 8004af8:	f403 437c 	and.w	r3, r3, #64512	; 0xfc00
 8004afc:	e7e9      	b.n	8004ad2 <usb_lld_init_endpoint+0x8e>
    dp->RXADDR0  = usb_pm_alloc(usbp, epcp->out_maxsize);
 8004afe:	60ab      	str	r3, [r5, #8]
    epr |= EPR_STAT_RX_NAK;
 8004b00:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  EPR_SET(ep, epr | ep);
 8004b04:	f248 0480 	movw	r4, #32896	; 0x8080
  EPR_TOGGLE(ep, epr);
 8004b08:	f647 0370 	movw	r3, #30832	; 0x7870
  EPR_SET(ep, epr | ep);
 8004b0c:	ea42 0001 	orr.w	r0, r2, r1
 8004b10:	f420 4078 	bic.w	r0, r0, #63488	; 0xf800
 8004b14:	0089      	lsls	r1, r1, #2
 8004b16:	f020 00f0 	bic.w	r0, r0, #240	; 0xf0
 8004b1a:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8004b1e:	f501 41b8 	add.w	r1, r1, #23552	; 0x5c00
 8004b22:	4320      	orrs	r0, r4
 8004b24:	6008      	str	r0, [r1, #0]
  EPR_TOGGLE(ep, epr);
 8004b26:	6808      	ldr	r0, [r1, #0]
 8004b28:	4013      	ands	r3, r2
 8004b2a:	4043      	eors	r3, r0
 8004b2c:	4323      	orrs	r3, r4
 8004b2e:	600b      	str	r3, [r1, #0]
}
 8004b30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b32:	bf00      	nop
 8004b34:	40005c00 	.word	0x40005c00
 8004b38:	ffff8000 	.word	0xffff8000

08004b3c <prvTaskExitError>:
 8004b3c:	b508      	push	{r3, lr}
 8004b3e:	4b04      	ldr	r3, [pc, #16]	; (8004b50 <prvTaskExitError+0x14>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	3301      	adds	r3, #1
 8004b44:	d000      	beq.n	8004b48 <prvTaskExitError+0xc>
 8004b46:	e7fe      	b.n	8004b46 <prvTaskExitError+0xa>
 8004b48:	f7ff fdec 	bl	8004724 <vPortEnterCritical>
 8004b4c:	e7fe      	b.n	8004b4c <prvTaskExitError+0x10>
 8004b4e:	bf00      	nop
 8004b50:	20001358 	.word	0x20001358

08004b54 <vPortExitCritical>:
 8004b54:	4a04      	ldr	r2, [pc, #16]	; (8004b68 <vPortExitCritical+0x14>)
 8004b56:	6813      	ldr	r3, [r2, #0]
 8004b58:	b903      	cbnz	r3, 8004b5c <vPortExitCritical+0x8>
 8004b5a:	e7fe      	b.n	8004b5a <vPortExitCritical+0x6>
 8004b5c:	3b01      	subs	r3, #1
 8004b5e:	6013      	str	r3, [r2, #0]
 8004b60:	b90b      	cbnz	r3, 8004b66 <vPortExitCritical+0x12>
 8004b62:	f383 8811 	msr	BASEPRI, r3
 8004b66:	4770      	bx	lr
 8004b68:	20001358 	.word	0x20001358

08004b6c <osalSysUnlock.lto_priv.0>:
static inline void osalSysUnlockFromISR(void)
{
    taskEXIT_CRITICAL_FROM_ISR(uxSavedInterruptStatus);
}

static inline void osalSysUnlock(void){
 8004b6c:	b508      	push	{r3, lr}
	__asm volatile( "mrs %0, basepri" : "=r"( ulBasePri ) );
 8004b6e:	f3ef 8311 	mrs	r3, BASEPRI
	return (ulBasePri > 0)? pdTRUE : pdFALSE;
 8004b72:	b12b      	cbz	r3, 8004b80 <osalSysUnlock.lto_priv.0+0x14>
	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 8004b74:	f3ef 8205 	mrs	r2, IPSR
	if( ulCurrentInterrupt == 0 )
 8004b78:	b12a      	cbz	r2, 8004b86 <osalSysUnlock.lto_priv.0+0x1a>
    osalDbgCheckClassS();
 8004b7a:	f7ff fde3 	bl	8004744 <vTaskEndScheduler>
 8004b7e:	e7fe      	b.n	8004b7e <osalSysUnlock.lto_priv.0+0x12>
 8004b80:	f7ff fde0 	bl	8004744 <vTaskEndScheduler>
 8004b84:	e7fe      	b.n	8004b84 <osalSysUnlock.lto_priv.0+0x18>
 8004b86:	4b12      	ldr	r3, [pc, #72]	; (8004bd0 <osalSysUnlock.lto_priv.0+0x64>)
 8004b88:	6819      	ldr	r1, [r3, #0]
 8004b8a:	601a      	str	r2, [r3, #0]
    if(uxYieldPending()) taskYIELD();
 8004b8c:	b1e1      	cbz	r1, 8004bc8 <osalSysUnlock.lto_priv.0+0x5c>
 8004b8e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8004b92:	4a10      	ldr	r2, [pc, #64]	; (8004bd4 <osalSysUnlock.lto_priv.0+0x68>)
 8004b94:	f8d3 1d20 	ldr.w	r1, [r3, #3360]	; 0xd20
 8004b98:	6011      	str	r1, [r2, #0]
 8004b9a:	4a0f      	ldr	r2, [pc, #60]	; (8004bd8 <osalSysUnlock.lto_priv.0+0x6c>)
 8004b9c:	6812      	ldr	r2, [r2, #0]
 8004b9e:	b14a      	cbz	r2, 8004bb4 <osalSysUnlock.lto_priv.0+0x48>
 8004ba0:	f8d3 2d20 	ldr.w	r2, [r3, #3360]	; 0xd20
 8004ba4:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
 8004ba8:	f8c3 2d20 	str.w	r2, [r3, #3360]	; 0xd20
 8004bac:	f8d3 2d20 	ldr.w	r2, [r3, #3360]	; 0xd20
 8004bb0:	f8c3 2d20 	str.w	r2, [r3, #3360]	; 0xd20
 8004bb4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8004bb8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004bbc:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8004bc0:	f3bf 8f4f 	dsb	sy
 8004bc4:	f3bf 8f6f 	isb	sy
    osalOsRescheduleS();
    taskEXIT_CRITICAL();
}
 8004bc8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    taskEXIT_CRITICAL();
 8004bcc:	f7ff bfc2 	b.w	8004b54 <vPortExitCritical>
 8004bd0:	2000164c 	.word	0x2000164c
 8004bd4:	2000134c 	.word	0x2000134c
 8004bd8:	20001358 	.word	0x20001358

08004bdc <xTaskCheckForTimeOut>:
 8004bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bde:	460c      	mov	r4, r1
 8004be0:	f7ff fda0 	bl	8004724 <vPortEnterCritical>
 8004be4:	6823      	ldr	r3, [r4, #0]
 8004be6:	4d0f      	ldr	r5, [pc, #60]	; (8004c24 <xTaskCheckForTimeOut+0x48>)
 8004be8:	1c5a      	adds	r2, r3, #1
 8004bea:	6829      	ldr	r1, [r5, #0]
 8004bec:	d012      	beq.n	8004c14 <xTaskCheckForTimeOut+0x38>
 8004bee:	4e0e      	ldr	r6, [pc, #56]	; (8004c28 <xTaskCheckForTimeOut+0x4c>)
 8004bf0:	f8d0 c000 	ldr.w	ip, [r0]
 8004bf4:	6837      	ldr	r7, [r6, #0]
 8004bf6:	6842      	ldr	r2, [r0, #4]
 8004bf8:	45bc      	cmp	ip, r7
 8004bfa:	d001      	beq.n	8004c00 <xTaskCheckForTimeOut+0x24>
 8004bfc:	428a      	cmp	r2, r1
 8004bfe:	d90f      	bls.n	8004c20 <xTaskCheckForTimeOut+0x44>
 8004c00:	1a8f      	subs	r7, r1, r2
 8004c02:	42bb      	cmp	r3, r7
 8004c04:	d90a      	bls.n	8004c1c <xTaskCheckForTimeOut+0x40>
 8004c06:	1a5b      	subs	r3, r3, r1
 8004c08:	4413      	add	r3, r2
 8004c0a:	6023      	str	r3, [r4, #0]
 8004c0c:	6833      	ldr	r3, [r6, #0]
 8004c0e:	6003      	str	r3, [r0, #0]
 8004c10:	682b      	ldr	r3, [r5, #0]
 8004c12:	6043      	str	r3, [r0, #4]
 8004c14:	2000      	movs	r0, #0
 8004c16:	f7ff ff9d 	bl	8004b54 <vPortExitCritical>
 8004c1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	6023      	str	r3, [r4, #0]
 8004c20:	2001      	movs	r0, #1
 8004c22:	e7f8      	b.n	8004c16 <xTaskCheckForTimeOut+0x3a>
 8004c24:	20001648 	.word	0x20001648
 8004c28:	200015fc 	.word	0x200015fc

08004c2c <ulPortEnterCriticalFromISR>:
 8004c2c:	f3ef 8011 	mrs	r0, BASEPRI
 8004c30:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8004c34:	f383 8811 	msr	BASEPRI, r3
 8004c38:	f3bf 8f6f 	isb	sy
 8004c3c:	f3bf 8f4f 	dsb	sy
 8004c40:	4a02      	ldr	r2, [pc, #8]	; (8004c4c <ulPortEnterCriticalFromISR+0x20>)
 8004c42:	6813      	ldr	r3, [r2, #0]
 8004c44:	3301      	adds	r3, #1
 8004c46:	6013      	str	r3, [r2, #0]
 8004c48:	4770      	bx	lr
 8004c4a:	bf00      	nop
 8004c4c:	20001358 	.word	0x20001358

08004c50 <osalSysLockFromISR.lto_priv.0>:
{
 8004c50:	b508      	push	{r3, lr}
    uxSavedInterruptStatus = taskENTER_CRITICAL_FROM_ISR();
 8004c52:	f7ff ffeb 	bl	8004c2c <ulPortEnterCriticalFromISR>
 8004c56:	4b01      	ldr	r3, [pc, #4]	; (8004c5c <osalSysLockFromISR.lto_priv.0+0xc>)
 8004c58:	6018      	str	r0, [r3, #0]
}
 8004c5a:	bd08      	pop	{r3, pc}
 8004c5c:	20001368 	.word	0x20001368

08004c60 <vPortExitCriticalFromISR>:
 8004c60:	4a04      	ldr	r2, [pc, #16]	; (8004c74 <vPortExitCriticalFromISR+0x14>)
 8004c62:	6813      	ldr	r3, [r2, #0]
 8004c64:	b903      	cbnz	r3, 8004c68 <vPortExitCriticalFromISR+0x8>
 8004c66:	e7fe      	b.n	8004c66 <vPortExitCriticalFromISR+0x6>
 8004c68:	3b01      	subs	r3, #1
 8004c6a:	6013      	str	r3, [r2, #0]
 8004c6c:	f380 8811 	msr	BASEPRI, r0
 8004c70:	4770      	bx	lr
 8004c72:	bf00      	nop
 8004c74:	20001358 	.word	0x20001358

08004c78 <osalSysUnlockFromISR.lto_priv.0>:
    taskEXIT_CRITICAL_FROM_ISR(uxSavedInterruptStatus);
 8004c78:	4b01      	ldr	r3, [pc, #4]	; (8004c80 <osalSysUnlockFromISR.lto_priv.0+0x8>)
 8004c7a:	6818      	ldr	r0, [r3, #0]
 8004c7c:	f7ff bff0 	b.w	8004c60 <vPortExitCriticalFromISR>
 8004c80:	20001368 	.word	0x20001368

08004c84 <sof_handler>:
/*
 * Handles the USB driver global events.
 */
uint32_t sofCounter;
static void sof_handler(USBDriver *usbp)
{
 8004c84:	b513      	push	{r0, r1, r4, lr}
  if ((usbGetDriverStateI(sdup->config->usbp) != USB_ACTIVE) ||
 8004c86:	4c29      	ldr	r4, [pc, #164]	; (8004d2c <sof_handler+0xa8>)

    (void)usbp;

    osalSysLockFromISR();
 8004c88:	f7ff ffe2 	bl	8004c50 <osalSysLockFromISR.lto_priv.0>
 8004c8c:	f8d4 1498 	ldr.w	r1, [r4, #1176]	; 0x498
 8004c90:	6808      	ldr	r0, [r1, #0]
 8004c92:	7803      	ldrb	r3, [r0, #0]
 8004c94:	2b04      	cmp	r3, #4
 8004c96:	d139      	bne.n	8004d0c <sof_handler+0x88>
 8004c98:	7d23      	ldrb	r3, [r4, #20]
 8004c9a:	2b02      	cmp	r3, #2
 8004c9c:	d136      	bne.n	8004d0c <sof_handler+0x88>
  if (usbGetTransmitStatusI(sdup->config->usbp, sdup->config->bulk_in)) {
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	790a      	ldrb	r2, [r1, #4]
 8004ca2:	4093      	lsls	r3, r2
 8004ca4:	8902      	ldrh	r2, [r0, #8]
 8004ca6:	4213      	tst	r3, r2
 8004ca8:	d130      	bne.n	8004d0c <sof_handler+0x88>
	__asm volatile( "mrs %0, basepri" : "=r"( ulBasePri ) );
 8004caa:	f3ef 8311 	mrs	r3, BASEPRI
	return (ulBasePri > 0)? pdTRUE : pdFALSE;
 8004cae:	b31b      	cbz	r3, 8004cf8 <sof_handler+0x74>

  osalDbgCheckClassI();

  /* If queue is empty and there is a buffer partially filled and
     it is not being written.*/
  if (obqIsEmptyI(obqp) && (obqp->ptr != NULL)) {
 8004cb0:	e9d4 3218 	ldrd	r3, r2, [r4, #96]	; 0x60
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d132      	bne.n	8004d1e <sof_handler+0x9a>
 8004cb8:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8004cba:	2a00      	cmp	r2, #0
 8004cbc:	d02f      	beq.n	8004d1e <sof_handler+0x9a>
 8004cbe:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 8004cc0:	2a00      	cmp	r2, #0
 8004cc2:	d02c      	beq.n	8004d1e <sof_handler+0x9a>
    size_t size = (size_t)obqp->ptr - ((size_t)obqp->bwrptr + sizeof (size_t));
 8004cc4:	3a04      	subs	r2, #4

    if (size > 0U) {
 8004cc6:	1ad2      	subs	r2, r2, r3
 8004cc8:	d029      	beq.n	8004d1e <sof_handler+0x9a>

      /* Writing size field in the buffer.*/
      *((size_t *)obqp->bwrptr) = size;
 8004cca:	601a      	str	r2, [r3, #0]

      /* Posting the buffer in the queue.*/
      obqp->bcounter--;
 8004ccc:	6de2      	ldr	r2, [r4, #92]	; 0x5c
    uint8_t *buf = obqGetFullBufferI(&sdup->obqueue, &n);
 8004cce:	4818      	ldr	r0, [pc, #96]	; (8004d30 <sof_handler+0xac>)
 8004cd0:	3a01      	subs	r2, #1
 8004cd2:	65e2      	str	r2, [r4, #92]	; 0x5c
      obqp->bwrptr += obqp->bsize;
 8004cd4:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8004cd6:	a901      	add	r1, sp, #4
 8004cd8:	4413      	add	r3, r2
      if (obqp->bwrptr >= obqp->btop) {
 8004cda:	6ea2      	ldr	r2, [r4, #104]	; 0x68
      obqp->bwrptr += obqp->bsize;
 8004cdc:	6623      	str	r3, [r4, #96]	; 0x60
      if (obqp->bwrptr >= obqp->btop) {
 8004cde:	4293      	cmp	r3, r2
        obqp->bwrptr = obqp->buffers;
 8004ce0:	bf24      	itt	cs
 8004ce2:	6f63      	ldrcs	r3, [r4, #116]	; 0x74
 8004ce4:	6623      	strcs	r3, [r4, #96]	; 0x60
      }

      /* No "current" buffer.*/
      obqp->ptr = NULL;
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	67a3      	str	r3, [r4, #120]	; 0x78
 8004cea:	f7ff fd5d 	bl	80047a8 <obqGetFullBufferI>
    osalDbgAssert(buf != NULL, "queue is empty");
 8004cee:	4602      	mov	r2, r0
 8004cf0:	b928      	cbnz	r0, 8004cfe <sof_handler+0x7a>
 8004cf2:	f7ff fd27 	bl	8004744 <vTaskEndScheduler>
 8004cf6:	e7fe      	b.n	8004cf6 <sof_handler+0x72>
  osalDbgCheckClassI();
 8004cf8:	f7ff fd24 	bl	8004744 <vTaskEndScheduler>
 8004cfc:	e7fe      	b.n	8004cfc <sof_handler+0x78>
    usbStartTransmitI(sdup->config->usbp, sdup->config->bulk_in, buf, n);
 8004cfe:	f8d4 0498 	ldr.w	r0, [r4, #1176]	; 0x498
 8004d02:	9b01      	ldr	r3, [sp, #4]
 8004d04:	7901      	ldrb	r1, [r0, #4]
 8004d06:	6800      	ldr	r0, [r0, #0]
 8004d08:	f7ff fde6 	bl	80048d8 <usbStartTransmitI>
    sduSOFHookI(&SDU1);
    sofCounter++;
 8004d0c:	4a09      	ldr	r2, [pc, #36]	; (8004d34 <sof_handler+0xb0>)
 8004d0e:	6813      	ldr	r3, [r2, #0]
 8004d10:	3301      	adds	r3, #1
 8004d12:	6013      	str	r3, [r2, #0]
    osalSysUnlockFromISR();
}
 8004d14:	b002      	add	sp, #8
 8004d16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    osalSysUnlockFromISR();
 8004d1a:	f7ff bfad 	b.w	8004c78 <osalSysUnlockFromISR.lto_priv.0>
    if(sdup->config->sofCallback) sdup->config->sofCallback(sdup->config->usbp, false);
 8004d1e:	688b      	ldr	r3, [r1, #8]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d0f3      	beq.n	8004d0c <sof_handler+0x88>
 8004d24:	2100      	movs	r1, #0
 8004d26:	4798      	blx	r3
 8004d28:	e7f0      	b.n	8004d0c <sof_handler+0x88>
 8004d2a:	bf00      	nop
 8004d2c:	20000a44 	.word	0x20000a44
 8004d30:	20000a94 	.word	0x20000a94
 8004d34:	200012c8 	.word	0x200012c8

08004d38 <_usb_ep0setup>:
 * @notapi
 */
void _usb_ep0setup(USBDriver *usbp, usbep_t ep) {
  size_t max;

  usbp->ep0state = USB_EP0_WAITING_SETUP;
 8004d38:	2300      	movs	r3, #0
void _usb_ep0setup(USBDriver *usbp, usbep_t ep) {
 8004d3a:	b570      	push	{r4, r5, r6, lr}
 8004d3c:	4604      	mov	r4, r0
  usbp->ep0state = USB_EP0_WAITING_SETUP;
 8004d3e:	f880 3064 	strb.w	r3, [r0, #100]	; 0x64
  udp = USB_GET_DESCRIPTOR(ep);
 8004d42:	4bb1      	ldr	r3, [pc, #708]	; (8005008 <_usb_ep0setup+0x2d0>)
  usbReadSetup(usbp, ep, usbp->setup);
 8004d44:	f100 0274 	add.w	r2, r0, #116	; 0x74
 8004d48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d4a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004d4e:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8004d52:	eb03 1301 	add.w	r3, r3, r1, lsl #4
  pmap = USB_ADDR2PTR(udp->RXADDR0);
 8004d56:	689b      	ldr	r3, [r3, #8]
 8004d58:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8004d5c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8004d60:	005b      	lsls	r3, r3, #1
 8004d62:	f103 0110 	add.w	r1, r3, #16
 8004d66:	4618      	mov	r0, r3
    *(uint16_t *)buf = (uint16_t)*pmap++;
 8004d68:	3304      	adds	r3, #4
 8004d6a:	6800      	ldr	r0, [r0, #0]
  for (n = 0; n < 4; n++) {
 8004d6c:	428b      	cmp	r3, r1
    *(uint16_t *)buf = (uint16_t)*pmap++;
 8004d6e:	f822 0b02 	strh.w	r0, [r2], #2
  for (n = 0; n < 4; n++) {
 8004d72:	d1f8      	bne.n	8004d66 <_usb_ep0setup+0x2e>

  /* First verify if the application has an handler installed for this
     request.*/
  /*lint -save -e9007 [13.5] No side effects, it is intentional.*/
  if ((usbp->config->requests_hook_cb == NULL) ||
 8004d74:	6863      	ldr	r3, [r4, #4]
 8004d76:	689b      	ldr	r3, [r3, #8]
 8004d78:	bb1b      	cbnz	r3, 8004dc2 <_usb_ep0setup+0x8a>
      !(usbp->config->requests_hook_cb(usbp))) {
  /*lint -restore*/
    /* Invoking the default handler, if this fails then stalls the
       endpoint zero as error.*/
    /*lint -save -e9007 [13.5] No side effects, it is intentional.*/
    if (((usbp->setup[0] & USB_RTYPE_TYPE_MASK) != USB_RTYPE_TYPE_STD) ||
 8004d7a:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 8004d7e:	f013 0560 	ands.w	r5, r3, #96	; 0x60
 8004d82:	d040      	beq.n	8004e06 <_usb_ep0setup+0xce>
 */
void usb_lld_stall_in(USBDriver *usbp, usbep_t ep) {

  (void)usbp;

  EPR_SET_STAT_TX(ep, EPR_STAT_TX_STALL);
 8004d84:	f248 0080 	movw	r0, #32896	; 0x8080
 8004d88:	499f      	ldr	r1, [pc, #636]	; (8005008 <_usb_ep0setup+0x2d0>)
 8004d8a:	680b      	ldr	r3, [r1, #0]
 8004d8c:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
 8004d90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d94:	f083 0210 	eor.w	r2, r3, #16
 8004d98:	4302      	orrs	r2, r0
 8004d9a:	600a      	str	r2, [r1, #0]
  EPR_SET_STAT_RX(ep, EPR_STAT_RX_STALL);
 8004d9c:	680b      	ldr	r3, [r1, #0]
 8004d9e:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8004da2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004da6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004daa:	4303      	orrs	r3, r0
 8004dac:	600b      	str	r3, [r1, #0]
      /* Error response, the state machine goes into an error state, the low
         level layer will have to reset it to USB_EP0_WAITING_SETUP after
         receiving a SETUP packet.*/
      usb_lld_stall_in(usbp, 0);
      usb_lld_stall_out(usbp, 0);
      _usb_isr_invoke_event_cb(usbp, USB_EVENT_STALLED);
 8004dae:	6863      	ldr	r3, [r4, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	b113      	cbz	r3, 8004dba <_usb_ep0setup+0x82>
 8004db4:	2106      	movs	r1, #6
 8004db6:	4620      	mov	r0, r4
 8004db8:	4798      	blx	r3
      usbp->ep0state = USB_EP0_ERROR;
 8004dba:	2306      	movs	r3, #6
 8004dbc:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
#else
      usb_lld_end_setup(usbp, ep);
#endif
    }
  }
}
 8004dc0:	bd70      	pop	{r4, r5, r6, pc}
      !(usbp->config->requests_hook_cb(usbp))) {
 8004dc2:	4620      	mov	r0, r4
 8004dc4:	4798      	blx	r3
  if ((usbp->config->requests_hook_cb == NULL) ||
 8004dc6:	2800      	cmp	r0, #0
 8004dc8:	d0d7      	beq.n	8004d7a <_usb_ep0setup+0x42>
  max = (size_t)get_hword(&usbp->setup[6]);
 8004dca:	f8b4 307a 	ldrh.w	r3, [r4, #122]	; 0x7a
  if (usbp->ep0n > max) {
 8004dce:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8004dd0:	429a      	cmp	r2, r3
    usbp->ep0n = max;
 8004dd2:	bf88      	it	hi
 8004dd4:	66e3      	strhi	r3, [r4, #108]	; 0x6c
  if ((usbp->setup[0] & USB_RTYPE_DIR_MASK) == USB_RTYPE_DIR_DEV2HOST) {
 8004dd6:	f994 3074 	ldrsb.w	r3, [r4, #116]	; 0x74
    if (usbp->ep0n != 0U) {
 8004dda:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
  if ((usbp->setup[0] & USB_RTYPE_DIR_MASK) == USB_RTYPE_DIR_DEV2HOST) {
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	f280 815a 	bge.w	8005096 <_usb_ep0setup+0x35e>
    if (usbp->ep0n != 0U) {
 8004de2:	2900      	cmp	r1, #0
 8004de4:	f000 814b 	beq.w	800507e <_usb_ep0setup+0x346>
      usbp->ep0state = USB_EP0_TX;
 8004de8:	2301      	movs	r3, #1
 8004dea:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
      osalSysLockFromISR();
 8004dee:	f7ff ff2f 	bl	8004c50 <osalSysLockFromISR.lto_priv.0>
      usbStartTransmitI(usbp, 0, usbp->ep0next, usbp->ep0n);
 8004df2:	e9d4 231a 	ldrd	r2, r3, [r4, #104]	; 0x68
 8004df6:	2100      	movs	r1, #0
 8004df8:	4620      	mov	r0, r4
 8004dfa:	f7ff fd6d 	bl	80048d8 <usbStartTransmitI>
}
 8004dfe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      osalSysUnlockFromISR();
 8004e02:	f7ff bf39 	b.w	8004c78 <osalSysUnlockFromISR.lto_priv.0>
           ((uint32_t)usbp->setup[1] << 8U))) {
 8004e06:	f894 2075 	ldrb.w	r2, [r4, #117]	; 0x75
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 8004e0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
                                        USB_RTYPE_TYPE_MASK)) |
 8004e0e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 8004e12:	f240 3202 	movw	r2, #770	; 0x302
 8004e16:	4293      	cmp	r3, r2
 8004e18:	f000 810d 	beq.w	8005036 <_usb_ep0setup+0x2fe>
 8004e1c:	d821      	bhi.n	8004e62 <_usb_ep0setup+0x12a>
 8004e1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e22:	d048      	beq.n	8004eb6 <_usb_ep0setup+0x17e>
 8004e24:	d80d      	bhi.n	8004e42 <_usb_ep0setup+0x10a>
 8004e26:	2b01      	cmp	r3, #1
 8004e28:	d03f      	beq.n	8004eaa <_usb_ep0setup+0x172>
 8004e2a:	2b02      	cmp	r3, #2
 8004e2c:	f000 80ad 	beq.w	8004f8a <_usb_ep0setup+0x252>
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d1a7      	bne.n	8004d84 <_usb_ep0setup+0x4c>
    usbSetupTransfer(usbp, (uint8_t *)&usbp->status, 2, NULL);
 8004e34:	f104 027c 	add.w	r2, r4, #124	; 0x7c
 8004e38:	66a2      	str	r2, [r4, #104]	; 0x68
 8004e3a:	2202      	movs	r2, #2
 8004e3c:	66e2      	str	r2, [r4, #108]	; 0x6c
    usbSetupTransfer(usbp, NULL, 0, set_address);
 8004e3e:	6723      	str	r3, [r4, #112]	; 0x70
    return true;
 8004e40:	e7c3      	b.n	8004dca <_usb_ep0setup+0x92>
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 8004e42:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
 8004e46:	f000 80ba 	beq.w	8004fbe <_usb_ep0setup+0x286>
 8004e4a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e4e:	d199      	bne.n	8004d84 <_usb_ep0setup+0x4c>
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
 8004e50:	f894 3076 	ldrb.w	r3, [r4, #118]	; 0x76
 8004e54:	2b01      	cmp	r3, #1
 8004e56:	d195      	bne.n	8004d84 <_usb_ep0setup+0x4c>
      usbp->status |= 2U;
 8004e58:	f8b4 307c 	ldrh.w	r3, [r4, #124]	; 0x7c
 8004e5c:	f043 0302 	orr.w	r3, r3, #2
 8004e60:	e032      	b.n	8004ec8 <_usb_ep0setup+0x190>
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 8004e62:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e66:	d039      	beq.n	8004edc <_usb_ep0setup+0x1a4>
 8004e68:	d817      	bhi.n	8004e9a <_usb_ep0setup+0x162>
 8004e6a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8004e6e:	d031      	beq.n	8004ed4 <_usb_ep0setup+0x19c>
 8004e70:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004e74:	d186      	bne.n	8004d84 <_usb_ep0setup+0x4c>
    dp = usbp->config->get_descriptor_cb(usbp, usbp->setup[3],
 8004e76:	6863      	ldr	r3, [r4, #4]
 8004e78:	4620      	mov	r0, r4
 8004e7a:	685e      	ldr	r6, [r3, #4]
 8004e7c:	f894 2076 	ldrb.w	r2, [r4, #118]	; 0x76
 8004e80:	f8b4 3078 	ldrh.w	r3, [r4, #120]	; 0x78
 8004e84:	f894 1077 	ldrb.w	r1, [r4, #119]	; 0x77
 8004e88:	47b0      	blx	r6
    if (dp == NULL) {
 8004e8a:	2800      	cmp	r0, #0
 8004e8c:	f43f af7a 	beq.w	8004d84 <_usb_ep0setup+0x4c>
    usbSetupTransfer(usbp, (uint8_t *)dp->ud_string, dp->ud_size, NULL);
 8004e90:	6843      	ldr	r3, [r0, #4]
 8004e92:	66a3      	str	r3, [r4, #104]	; 0x68
 8004e94:	6803      	ldr	r3, [r0, #0]
    usbSetupTransfer(usbp, &usbp->configuration, 1, NULL);
 8004e96:	66e3      	str	r3, [r4, #108]	; 0x6c
 8004e98:	e01a      	b.n	8004ed0 <_usb_ep0setup+0x198>
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 8004e9a:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
 8004e9e:	d022      	beq.n	8004ee6 <_usb_ep0setup+0x1ae>
 8004ea0:	f640 4202 	movw	r2, #3074	; 0xc02
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	f47f af6d 	bne.w	8004d84 <_usb_ep0setup+0x4c>
    usbSetupTransfer(usbp, (uint8_t *)zero_status, 2, NULL);
 8004eaa:	4b58      	ldr	r3, [pc, #352]	; (800500c <_usb_ep0setup+0x2d4>)
        usbSetupTransfer(usbp, (uint8_t *)halted_status, 2, NULL);
 8004eac:	66a3      	str	r3, [r4, #104]	; 0x68
 8004eae:	2302      	movs	r3, #2
 8004eb0:	66e3      	str	r3, [r4, #108]	; 0x6c
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	e7c3      	b.n	8004e3e <_usb_ep0setup+0x106>
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
 8004eb6:	f894 3076 	ldrb.w	r3, [r4, #118]	; 0x76
 8004eba:	2b01      	cmp	r3, #1
 8004ebc:	f47f af62 	bne.w	8004d84 <_usb_ep0setup+0x4c>
      usbp->status &= ~2U;
 8004ec0:	f8b4 307c 	ldrh.w	r3, [r4, #124]	; 0x7c
 8004ec4:	f023 0302 	bic.w	r3, r3, #2
      usbSetupTransfer(usbp, NULL, 0, NULL);
 8004ec8:	e9c4 551a 	strd	r5, r5, [r4, #104]	; 0x68
      usbp->status |= 2U;
 8004ecc:	f8a4 307c 	strh.w	r3, [r4, #124]	; 0x7c
    usbSetupTransfer(usbp, &usbp->configuration, 1, NULL);
 8004ed0:	6725      	str	r5, [r4, #112]	; 0x70
    return true;
 8004ed2:	e77a      	b.n	8004dca <_usb_ep0setup+0x92>
    usbSetupTransfer(usbp, NULL, 0, set_address);
 8004ed4:	e9c4 551a 	strd	r5, r5, [r4, #104]	; 0x68
 8004ed8:	4b4d      	ldr	r3, [pc, #308]	; (8005010 <_usb_ep0setup+0x2d8>)
 8004eda:	e7b0      	b.n	8004e3e <_usb_ep0setup+0x106>
    usbSetupTransfer(usbp, &usbp->configuration, 1, NULL);
 8004edc:	f104 037f 	add.w	r3, r4, #127	; 0x7f
 8004ee0:	66a3      	str	r3, [r4, #104]	; 0x68
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	e7d7      	b.n	8004e96 <_usb_ep0setup+0x15e>
    if (usbp->configuration != usbp->setup[2]) {
 8004ee6:	f894 207f 	ldrb.w	r2, [r4, #127]	; 0x7f
 8004eea:	f894 3076 	ldrb.w	r3, [r4, #118]	; 0x76
 8004eee:	429a      	cmp	r2, r3
 8004ef0:	d047      	beq.n	8004f82 <_usb_ep0setup+0x24a>
      if (usbp->state == USB_ACTIVE) {
 8004ef2:	7823      	ldrb	r3, [r4, #0]
 8004ef4:	2b04      	cmp	r3, #4
 8004ef6:	d137      	bne.n	8004f68 <_usb_ep0setup+0x230>
        osalSysLockFromISR ();
 8004ef8:	f7ff feaa 	bl	8004c50 <osalSysLockFromISR.lto_priv.0>
	__asm volatile( "mrs %0, basepri" : "=r"( ulBasePri ) );
 8004efc:	f3ef 8311 	mrs	r3, BASEPRI
	return (ulBasePri > 0)? pdTRUE : pdFALSE;
 8004f00:	b913      	cbnz	r3, 8004f08 <_usb_ep0setup+0x1d0>
  osalDbgCheckClassI();
 8004f02:	f7ff fc1f 	bl	8004744 <vTaskEndScheduler>
 8004f06:	e7fe      	b.n	8004f06 <_usb_ep0setup+0x1ce>
  osalDbgAssert(usbp->state == USB_ACTIVE, "invalid state");
 8004f08:	7823      	ldrb	r3, [r4, #0]
 8004f0a:	2b04      	cmp	r3, #4
 8004f0c:	d002      	beq.n	8004f14 <_usb_ep0setup+0x1dc>
 8004f0e:	f7ff fc19 	bl	8004744 <vTaskEndScheduler>
 8004f12:	e7fe      	b.n	8004f12 <_usb_ep0setup+0x1da>
  usbp->transmitting &= 1U;
 8004f14:	68a3      	ldr	r3, [r4, #8]
  for (i = 1; i <= USB_ENDOPOINTS_NUMBER; i++) {
 8004f16:	2201      	movs	r2, #1
 8004f18:	f003 1301 	and.w	r3, r3, #65537	; 0x10001
 8004f1c:	60a3      	str	r3, [r4, #8]
    usbp->epc[i] = NULL;
 8004f1e:	2300      	movs	r3, #0
 8004f20:	e9c4 3304 	strd	r3, r3, [r4, #16]
 8004f24:	e9c4 3306 	strd	r3, r3, [r4, #24]
 8004f28:	e9c4 3308 	strd	r3, r3, [r4, #32]
 8004f2c:	62a3      	str	r3, [r4, #40]	; 0x28
  usbp->pmnext = 64;
 8004f2e:	2340      	movs	r3, #64	; 0x40
    EPR_TOGGLE(i, 0);
 8004f30:	f248 0080 	movw	r0, #32896	; 0x8080
  usbp->pmnext = 64;
 8004f34:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    EPR_TOGGLE(i, 0);
 8004f38:	0093      	lsls	r3, r2, #2
 8004f3a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004f3e:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8004f42:	6819      	ldr	r1, [r3, #0]
  for (i = 1; i <= USB_ENDOPOINTS_NUMBER; i++) {
 8004f44:	3201      	adds	r2, #1
    EPR_TOGGLE(i, 0);
 8004f46:	4301      	orrs	r1, r0
  for (i = 1; i <= USB_ENDOPOINTS_NUMBER; i++) {
 8004f48:	2a08      	cmp	r2, #8
    EPR_TOGGLE(i, 0);
 8004f4a:	6019      	str	r1, [r3, #0]
    EPR_SET(i, 0);
 8004f4c:	6018      	str	r0, [r3, #0]
  for (i = 1; i <= USB_ENDOPOINTS_NUMBER; i++) {
 8004f4e:	d1f3      	bne.n	8004f38 <_usb_ep0setup+0x200>
        osalSysUnlockFromISR ();
 8004f50:	f7ff fe92 	bl	8004c78 <osalSysUnlockFromISR.lto_priv.0>
        usbp->configuration = 0U;
 8004f54:	2300      	movs	r3, #0
        usbp->state = USB_SELECTED;
 8004f56:	2103      	movs	r1, #3
        usbp->configuration = 0U;
 8004f58:	f884 307f 	strb.w	r3, [r4, #127]	; 0x7f
        _usb_isr_invoke_event_cb(usbp, USB_EVENT_UNCONFIGURED);
 8004f5c:	6863      	ldr	r3, [r4, #4]
        usbp->state = USB_SELECTED;
 8004f5e:	7021      	strb	r1, [r4, #0]
        _usb_isr_invoke_event_cb(usbp, USB_EVENT_UNCONFIGURED);
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	b10b      	cbz	r3, 8004f68 <_usb_ep0setup+0x230>
 8004f64:	4620      	mov	r0, r4
 8004f66:	4798      	blx	r3
      if (usbp->setup[2] != 0U) {
 8004f68:	f894 3076 	ldrb.w	r3, [r4, #118]	; 0x76
 8004f6c:	b14b      	cbz	r3, 8004f82 <_usb_ep0setup+0x24a>
        usbp->configuration = usbp->setup[2];
 8004f6e:	f884 307f 	strb.w	r3, [r4, #127]	; 0x7f
        usbp->state = USB_ACTIVE;
 8004f72:	2304      	movs	r3, #4
 8004f74:	7023      	strb	r3, [r4, #0]
        _usb_isr_invoke_event_cb(usbp, USB_EVENT_CONFIGURED);
 8004f76:	6863      	ldr	r3, [r4, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	b113      	cbz	r3, 8004f82 <_usb_ep0setup+0x24a>
 8004f7c:	2102      	movs	r1, #2
 8004f7e:	4620      	mov	r0, r4
 8004f80:	4798      	blx	r3
    usbSetupTransfer(usbp, NULL, 0, NULL);
 8004f82:	2300      	movs	r3, #0
 8004f84:	e9c4 331a 	strd	r3, r3, [r4, #104]	; 0x68
 8004f88:	e759      	b.n	8004e3e <_usb_ep0setup+0x106>
    if ((usbp->setup[4] & 0x80U) != 0U) {
 8004f8a:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
  switch (STM32_USB->EPR[ep] & EPR_STAT_TX_MASK) {
 8004f8e:	f003 020f 	and.w	r2, r3, #15
 8004f92:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004f96:	4b1c      	ldr	r3, [pc, #112]	; (8005008 <_usb_ep0setup+0x2d0>)
 8004f98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f9c:	d008      	beq.n	8004fb0 <_usb_ep0setup+0x278>
 8004f9e:	f013 0330 	ands.w	r3, r3, #48	; 0x30
 8004fa2:	f43f aeef 	beq.w	8004d84 <_usb_ep0setup+0x4c>
 8004fa6:	2b10      	cmp	r3, #16
        usbSetupTransfer(usbp, (uint8_t *)active_status, 2, NULL);
 8004fa8:	bf14      	ite	ne
 8004faa:	4b1a      	ldrne	r3, [pc, #104]	; (8005014 <_usb_ep0setup+0x2dc>)
        usbSetupTransfer(usbp, (uint8_t *)halted_status, 2, NULL);
 8004fac:	4b1a      	ldreq	r3, [pc, #104]	; (8005018 <_usb_ep0setup+0x2e0>)
 8004fae:	e77d      	b.n	8004eac <_usb_ep0setup+0x174>
  switch (STM32_USB->EPR[ep] & EPR_STAT_RX_MASK) {
 8004fb0:	f413 5340 	ands.w	r3, r3, #12288	; 0x3000
 8004fb4:	f43f aee6 	beq.w	8004d84 <_usb_ep0setup+0x4c>
 8004fb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fbc:	e7f4      	b.n	8004fa8 <_usb_ep0setup+0x270>
    if (usbp->setup[2] != USB_FEATURE_ENDPOINT_HALT) {
 8004fbe:	f894 3076 	ldrb.w	r3, [r4, #118]	; 0x76
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	f47f aede 	bne.w	8004d84 <_usb_ep0setup+0x4c>
    if ((usbp->setup[4] & 0x0FU) != 0U) {
 8004fc8:	f894 2078 	ldrb.w	r2, [r4, #120]	; 0x78
 8004fcc:	f012 030f 	ands.w	r3, r2, #15
 8004fd0:	d0d7      	beq.n	8004f82 <_usb_ep0setup+0x24a>
      if ((usbp->setup[4] & 0x80U) != 0U) {
 8004fd2:	009b      	lsls	r3, r3, #2
 8004fd4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004fd8:	f012 0f80 	tst.w	r2, #128	; 0x80
 8004fdc:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00

  (void)usbp;

  /* Makes sure to not put to NAK an endpoint that is already
     transferring.*/
  if ((STM32_USB->EPR[ep] & EPR_STAT_TX_MASK) != EPR_STAT_TX_VALID)
 8004fe0:	681a      	ldr	r2, [r3, #0]
 8004fe2:	d01b      	beq.n	800501c <_usb_ep0setup+0x2e4>
 8004fe4:	f002 0230 	and.w	r2, r2, #48	; 0x30
 8004fe8:	2a30      	cmp	r2, #48	; 0x30
 8004fea:	d0ca      	beq.n	8004f82 <_usb_ep0setup+0x24a>
    EPR_SET_STAT_TX(ep, EPR_STAT_TX_NAK);
 8004fec:	681a      	ldr	r2, [r3, #0]
 8004fee:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
 8004ff2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ff6:	f082 0220 	eor.w	r2, r2, #32
 8004ffa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
    EPR_SET_STAT_TX(ep, EPR_STAT_RX_NAK);
 8004ffe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005002:	601a      	str	r2, [r3, #0]
 8005004:	e7bd      	b.n	8004f82 <_usb_ep0setup+0x24a>
 8005006:	bf00      	nop
 8005008:	40005c00 	.word	0x40005c00
 800500c:	0800cd60 	.word	0x0800cd60
 8005010:	08003e0d 	.word	0x08003e0d
 8005014:	0800c8ec 	.word	0x0800c8ec
 8005018:	0800ca64 	.word	0x0800ca64
  if ((STM32_USB->EPR[ep] & EPR_STAT_RX_MASK) != EPR_STAT_RX_VALID)
 800501c:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
 8005020:	f5b2 5f40 	cmp.w	r2, #12288	; 0x3000
 8005024:	d0ad      	beq.n	8004f82 <_usb_ep0setup+0x24a>
    EPR_SET_STAT_TX(ep, EPR_STAT_RX_NAK);
 8005026:	681a      	ldr	r2, [r3, #0]
 8005028:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
 800502c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005030:	f442 4220 	orr.w	r2, r2, #40960	; 0xa000
 8005034:	e7e3      	b.n	8004ffe <_usb_ep0setup+0x2c6>
    if (usbp->setup[2] != USB_FEATURE_ENDPOINT_HALT) {
 8005036:	f894 3076 	ldrb.w	r3, [r4, #118]	; 0x76
 800503a:	2b00      	cmp	r3, #0
 800503c:	f47f aea2 	bne.w	8004d84 <_usb_ep0setup+0x4c>
    if ((usbp->setup[4] & 0x0FU) != 0U) {
 8005040:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
 8005044:	f013 010f 	ands.w	r1, r3, #15
 8005048:	d09b      	beq.n	8004f82 <_usb_ep0setup+0x24a>
      if ((usbp->setup[4] & 0x80U) != 0U) {
 800504a:	4a1b      	ldr	r2, [pc, #108]	; (80050b8 <_usb_ep0setup+0x380>)
 800504c:	f013 0f80 	tst.w	r3, #128	; 0x80
  EPR_SET_STAT_TX(ep, EPR_STAT_TX_STALL);
 8005050:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005054:	bf15      	itete	ne
 8005056:	f423 43f0 	bicne.w	r3, r3, #30720	; 0x7800
  EPR_SET_STAT_RX(ep, EPR_STAT_RX_STALL);
 800505a:	f423 4390 	biceq.w	r3, r3, #18432	; 0x4800
  EPR_SET_STAT_TX(ep, EPR_STAT_TX_STALL);
 800505e:	f023 0340 	bicne.w	r3, r3, #64	; 0x40
  EPR_SET_STAT_RX(ep, EPR_STAT_RX_STALL);
 8005062:	f023 0370 	biceq.w	r3, r3, #112	; 0x70
  EPR_SET_STAT_TX(ep, EPR_STAT_TX_STALL);
 8005066:	bf14      	ite	ne
 8005068:	f083 0310 	eorne.w	r3, r3, #16
  EPR_SET_STAT_RX(ep, EPR_STAT_RX_STALL);
 800506c:	f483 5380 	eoreq.w	r3, r3, #4096	; 0x1000
 8005070:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005074:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005078:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800507c:	e781      	b.n	8004f82 <_usb_ep0setup+0x24a>
      usbp->ep0state = USB_EP0_WAITING_STS;
 800507e:	2303      	movs	r3, #3
 8005080:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
      osalSysLockFromISR();
 8005084:	f7ff fde4 	bl	8004c50 <osalSysLockFromISR.lto_priv.0>
      usbStartReceiveI(usbp, 0, NULL, 0);
 8005088:	460b      	mov	r3, r1
 800508a:	460a      	mov	r2, r1
      usbStartReceiveI(usbp, 0, usbp->ep0next, usbp->ep0n);
 800508c:	2100      	movs	r1, #0
 800508e:	4620      	mov	r0, r4
 8005090:	f7ff fbe6 	bl	8004860 <usbStartReceiveI>
      osalSysUnlockFromISR();
 8005094:	e6b3      	b.n	8004dfe <_usb_ep0setup+0xc6>
    if (usbp->ep0n != 0U) {
 8005096:	b139      	cbz	r1, 80050a8 <_usb_ep0setup+0x370>
      usbp->ep0state = USB_EP0_RX;
 8005098:	2304      	movs	r3, #4
 800509a:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
      osalSysLockFromISR();
 800509e:	f7ff fdd7 	bl	8004c50 <osalSysLockFromISR.lto_priv.0>
      usbStartReceiveI(usbp, 0, usbp->ep0next, usbp->ep0n);
 80050a2:	e9d4 231a 	ldrd	r2, r3, [r4, #104]	; 0x68
 80050a6:	e7f1      	b.n	800508c <_usb_ep0setup+0x354>
      usbp->ep0state = USB_EP0_SENDING_STS;
 80050a8:	2305      	movs	r3, #5
 80050aa:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
      osalSysLockFromISR();
 80050ae:	f7ff fdcf 	bl	8004c50 <osalSysLockFromISR.lto_priv.0>
      usbStartTransmitI(usbp, 0, NULL, 0);
 80050b2:	460b      	mov	r3, r1
 80050b4:	460a      	mov	r2, r1
 80050b6:	e69e      	b.n	8004df6 <_usb_ep0setup+0xbe>
 80050b8:	40005c00 	.word	0x40005c00

080050bc <_usb_ep0in>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number, always zero
 *
 * @notapi
 */
void _usb_ep0in(USBDriver *usbp, usbep_t ep) {
 80050bc:	b510      	push	{r4, lr}
 80050be:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
 80050c2:	4604      	mov	r4, r0
 80050c4:	2b06      	cmp	r3, #6
 80050c6:	d852      	bhi.n	800516e <_usb_ep0in+0xb2>
 80050c8:	e8df f003 	tbb	[pc, r3]
 80050cc:	311d0431 	.word	0x311d0431
 80050d0:	2c31      	.short	0x2c31
 80050d2:	34          	.byte	0x34
 80050d3:	00          	.byte	0x00
  case USB_EP0_TX:
    max = (size_t)get_hword(&usbp->setup[6]);
    /* If the transmitted size is less than the requested size and it is a
       multiple of the maximum packet size then a zero size packet must be
       transmitted.*/
    if ((usbp->ep0n < max) &&
 80050d4:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
    max = (size_t)get_hword(&usbp->setup[6]);
 80050d6:	f8b0 207a 	ldrh.w	r2, [r0, #122]	; 0x7a
    if ((usbp->ep0n < max) &&
 80050da:	4293      	cmp	r3, r2
 80050dc:	d213      	bcs.n	8005106 <_usb_ep0in+0x4a>
        ((usbp->ep0n % usbp->epc[0]->in_maxsize) == 0U)) {
 80050de:	68c2      	ldr	r2, [r0, #12]
 80050e0:	8a11      	ldrh	r1, [r2, #16]
 80050e2:	fbb3 f2f1 	udiv	r2, r3, r1
 80050e6:	fb01 3112 	mls	r1, r1, r2, r3
    if ((usbp->ep0n < max) &&
 80050ea:	b961      	cbnz	r1, 8005106 <_usb_ep0in+0x4a>
      osalSysLockFromISR();
 80050ec:	f7ff fdb0 	bl	8004c50 <osalSysLockFromISR.lto_priv.0>
      usbStartTransmitI(usbp, 0, NULL, 0);
 80050f0:	460b      	mov	r3, r1
 80050f2:	460a      	mov	r2, r1
 80050f4:	4620      	mov	r0, r4
 80050f6:	f7ff fbef 	bl	80048d8 <usbStartTransmitI>
      osalSysUnlockFromISR();
 80050fa:	f7ff fdbd 	bl	8004c78 <osalSysUnlockFromISR.lto_priv.0>
      usbp->ep0state = USB_EP0_WAITING_TX0;
 80050fe:	2302      	movs	r3, #2
       level layer will have to reset it to USB_EP0_WAITING_SETUP after
       receiving a SETUP packet.*/
    usb_lld_stall_in(usbp, 0);
    usb_lld_stall_out(usbp, 0);
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_STALLED);
    usbp->ep0state = USB_EP0_ERROR;
 8005100:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
    return;
  default:
    osalDbgAssert(false, "EP0 state machine invalid state");
  }
}
 8005104:	bd10      	pop	{r4, pc}
    usbp->ep0state = USB_EP0_WAITING_STS;
 8005106:	2303      	movs	r3, #3
 8005108:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
    osalSysLockFromISR();
 800510c:	f7ff fda0 	bl	8004c50 <osalSysLockFromISR.lto_priv.0>
    usbStartReceiveI(usbp, 0, NULL, 0);
 8005110:	2300      	movs	r3, #0
 8005112:	4620      	mov	r0, r4
 8005114:	461a      	mov	r2, r3
 8005116:	4619      	mov	r1, r3
 8005118:	f7ff fba2 	bl	8004860 <usbStartReceiveI>
}
 800511c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    osalSysUnlockFromISR();
 8005120:	f7ff bdaa 	b.w	8004c78 <osalSysUnlockFromISR.lto_priv.0>
    if (usbp->ep0endcb != NULL) {
 8005124:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8005126:	b103      	cbz	r3, 800512a <_usb_ep0in+0x6e>
      usbp->ep0endcb(usbp);
 8005128:	4798      	blx	r3
    usbp->ep0state = USB_EP0_WAITING_SETUP;
 800512a:	2300      	movs	r3, #0
 800512c:	e7e8      	b.n	8005100 <_usb_ep0in+0x44>
    osalDbgAssert(false, "EP0 state machine error");
 800512e:	f7ff fb09 	bl	8004744 <vTaskEndScheduler>
 8005132:	e7fe      	b.n	8005132 <_usb_ep0in+0x76>
  EPR_SET_STAT_TX(ep, EPR_STAT_TX_STALL);
 8005134:	f248 0080 	movw	r0, #32896	; 0x8080
 8005138:	490e      	ldr	r1, [pc, #56]	; (8005174 <_usb_ep0in+0xb8>)
 800513a:	680b      	ldr	r3, [r1, #0]
 800513c:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
 8005140:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005144:	f083 0210 	eor.w	r2, r3, #16
 8005148:	4302      	orrs	r2, r0
 800514a:	600a      	str	r2, [r1, #0]
  EPR_SET_STAT_RX(ep, EPR_STAT_RX_STALL);
 800514c:	680b      	ldr	r3, [r1, #0]
 800514e:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8005152:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005156:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800515a:	4303      	orrs	r3, r0
 800515c:	600b      	str	r3, [r1, #0]
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_STALLED);
 800515e:	6863      	ldr	r3, [r4, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	b113      	cbz	r3, 800516a <_usb_ep0in+0xae>
 8005164:	2106      	movs	r1, #6
 8005166:	4620      	mov	r0, r4
 8005168:	4798      	blx	r3
    usbp->ep0state = USB_EP0_ERROR;
 800516a:	2306      	movs	r3, #6
 800516c:	e7c8      	b.n	8005100 <_usb_ep0in+0x44>
    osalDbgAssert(false, "EP0 state machine invalid state");
 800516e:	f7ff fae9 	bl	8004744 <vTaskEndScheduler>
 8005172:	e7fe      	b.n	8005172 <_usb_ep0in+0xb6>
 8005174:	40005c00 	.word	0x40005c00

08005178 <_usb_ep0out>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number, always zero
 *
 * @notapi
 */
void _usb_ep0out(USBDriver *usbp, usbep_t ep) {
 8005178:	b510      	push	{r4, lr}
 800517a:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
 800517e:	4604      	mov	r4, r0
 8005180:	2b06      	cmp	r3, #6
 8005182:	d83f      	bhi.n	8005204 <_usb_ep0out+0x8c>
 8005184:	e8df f003 	tbb	[pc, r3]
 8005188:	131e1e1e 	.word	0x131e1e1e
 800518c:	1e04      	.short	0x1e04
 800518e:	21          	.byte	0x21
 800518f:	00          	.byte	0x00

  (void)ep;
  switch (usbp->ep0state) {
  case USB_EP0_RX:
    /* Receive phase over, sending the zero sized status packet.*/
    usbp->ep0state = USB_EP0_SENDING_STS;
 8005190:	2305      	movs	r3, #5
 8005192:	f880 3064 	strb.w	r3, [r0, #100]	; 0x64
#if (USB_EP0_STATUS_STAGE == USB_EP0_STATUS_STAGE_SW)
    osalSysLockFromISR();
 8005196:	f7ff fd5b 	bl	8004c50 <osalSysLockFromISR.lto_priv.0>
    usbStartTransmitI(usbp, 0, NULL, 0);
 800519a:	2300      	movs	r3, #0
 800519c:	4620      	mov	r0, r4
 800519e:	461a      	mov	r2, r3
 80051a0:	4619      	mov	r1, r3
 80051a2:	f7ff fb99 	bl	80048d8 <usbStartTransmitI>
    usbp->ep0state = USB_EP0_ERROR;
    return;
  default:
    osalDbgAssert(false, "EP0 state machine invalid state");
  }
}
 80051a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    osalSysUnlockFromISR();
 80051aa:	f7ff bd65 	b.w	8004c78 <osalSysUnlockFromISR.lto_priv.0>
    if (usbGetReceiveTransactionSizeX(usbp, 0) != 0U) {
 80051ae:	68c3      	ldr	r3, [r0, #12]
 80051b0:	699b      	ldr	r3, [r3, #24]
 80051b2:	685b      	ldr	r3, [r3, #4]
 80051b4:	b92b      	cbnz	r3, 80051c2 <_usb_ep0out+0x4a>
    if (usbp->ep0endcb != NULL) {
 80051b6:	6f03      	ldr	r3, [r0, #112]	; 0x70
 80051b8:	b103      	cbz	r3, 80051bc <_usb_ep0out+0x44>
      usbp->ep0endcb(usbp);
 80051ba:	4798      	blx	r3
    usbp->ep0state = USB_EP0_WAITING_SETUP;
 80051bc:	2300      	movs	r3, #0
    usbp->ep0state = USB_EP0_ERROR;
 80051be:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
}
 80051c2:	bd10      	pop	{r4, pc}
    osalDbgAssert(false, "EP0 state machine error");
 80051c4:	f7ff fabe 	bl	8004744 <vTaskEndScheduler>
 80051c8:	e7fe      	b.n	80051c8 <_usb_ep0out+0x50>
  EPR_SET_STAT_TX(ep, EPR_STAT_TX_STALL);
 80051ca:	f248 0080 	movw	r0, #32896	; 0x8080
 80051ce:	490f      	ldr	r1, [pc, #60]	; (800520c <_usb_ep0out+0x94>)
 80051d0:	680b      	ldr	r3, [r1, #0]
 80051d2:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
 80051d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80051da:	f083 0210 	eor.w	r2, r3, #16
 80051de:	4302      	orrs	r2, r0
 80051e0:	600a      	str	r2, [r1, #0]
  EPR_SET_STAT_RX(ep, EPR_STAT_RX_STALL);
 80051e2:	680b      	ldr	r3, [r1, #0]
 80051e4:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80051e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051ec:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80051f0:	4303      	orrs	r3, r0
 80051f2:	600b      	str	r3, [r1, #0]
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_STALLED);
 80051f4:	6863      	ldr	r3, [r4, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	b113      	cbz	r3, 8005200 <_usb_ep0out+0x88>
 80051fa:	2106      	movs	r1, #6
 80051fc:	4620      	mov	r0, r4
 80051fe:	4798      	blx	r3
    usbp->ep0state = USB_EP0_ERROR;
 8005200:	2306      	movs	r3, #6
 8005202:	e7dc      	b.n	80051be <_usb_ep0out+0x46>
    osalDbgAssert(false, "EP0 state machine invalid state");
 8005204:	f7ff fa9e 	bl	8004744 <vTaskEndScheduler>
 8005208:	e7fe      	b.n	8005208 <_usb_ep0out+0x90>
 800520a:	bf00      	nop
 800520c:	40005c00 	.word	0x40005c00

08005210 <sofNeededCallback>:
static void sofNeededCallback(USBDriver *usbp, bool enable)
{
    (void) usbp;
    static bool sofEnabled = true;

    if(!allowDisableSOF && !enable) return;
 8005210:	4b0c      	ldr	r3, [pc, #48]	; (8005244 <sofNeededCallback+0x34>)
{
 8005212:	b510      	push	{r4, lr}
    if(!allowDisableSOF && !enable) return;
 8005214:	781b      	ldrb	r3, [r3, #0]
 8005216:	b903      	cbnz	r3, 800521a <sofNeededCallback+0xa>
 8005218:	b199      	cbz	r1, 8005242 <sofNeededCallback+0x32>
    if(sofEnabled == enable) return;
 800521a:	4c0b      	ldr	r4, [pc, #44]	; (8005248 <sofNeededCallback+0x38>)
 800521c:	7823      	ldrb	r3, [r4, #0]
 800521e:	428b      	cmp	r3, r1
 8005220:	d00f      	beq.n	8005242 <sofNeededCallback+0x32>

    syssts_t basepri = osalSysGetStatusAndLockX();
 8005222:	f7ff fd03 	bl	8004c2c <ulPortEnterCriticalFromISR>

    if(enable) {
 8005226:	4b09      	ldr	r3, [pc, #36]	; (800524c <sofNeededCallback+0x3c>)
        STM32_USB->CNTR |= CNTR_SOFM;
 8005228:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    if(enable) {
 800522a:	b139      	cbz	r1, 800523c <sofNeededCallback+0x2c>
        STM32_USB->CNTR |= CNTR_SOFM;
 800522c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    } else {
        STM32_USB->CNTR &=~ CNTR_SOFM;
 8005230:	641a      	str	r2, [r3, #64]	; 0x40
    }

    sofEnabled = enable;
 8005232:	7021      	strb	r1, [r4, #0]

    osalSysRestoreStatusX(basepri);
}
 8005234:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    osalSysRestoreStatusX(basepri);
 8005238:	f7ff bd12 	b.w	8004c60 <vPortExitCriticalFromISR>
        STM32_USB->CNTR &=~ CNTR_SOFM;
 800523c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005240:	e7f6      	b.n	8005230 <sofNeededCallback+0x20>
}
 8005242:	bd10      	pop	{r4, pc}
 8005244:	20000800 	.word	0x20000800
 8005248:	20000911 	.word	0x20000911
 800524c:	40005c00 	.word	0x40005c00

08005250 <gpioCPUGetPinMode>:
{
 8005250:	b538      	push	{r3, r4, r5, lr}
 8005252:	4604      	mov	r4, r0
    syssts_t sts = osalSysGetStatusAndLockX();
 8005254:	f7ff fcea 	bl	8004c2c <ulPortEnterCriticalFromISR>
    cr = (uint64_t)(((ioportid_t)driver->driver)->CRH) << 32;
 8005258:	6823      	ldr	r3, [r4, #0]
    uint8_t config = (cr >> (4*pin)) & 0xF;
 800525a:	0089      	lsls	r1, r1, #2
    cr = (uint64_t)(((ioportid_t)driver->driver)->CRH) << 32;
 800525c:	685d      	ldr	r5, [r3, #4]
    cr |= ((ioportid_t)driver->driver)->CRL;
 800525e:	681c      	ldr	r4, [r3, #0]
    osalSysRestoreStatusX(sts);
 8005260:	f7ff fcfe 	bl	8004c60 <vPortExitCriticalFromISR>
    uint8_t config = (cr >> (4*pin)) & 0xF;
 8005264:	f1c1 0220 	rsb	r2, r1, #32
 8005268:	f1a1 0320 	sub.w	r3, r1, #32
 800526c:	fa05 f202 	lsl.w	r2, r5, r2
 8005270:	fa24 f101 	lsr.w	r1, r4, r1
 8005274:	fa25 f303 	lsr.w	r3, r5, r3
 8005278:	4311      	orrs	r1, r2
 800527a:	4319      	orrs	r1, r3
}
 800527c:	4b02      	ldr	r3, [pc, #8]	; (8005288 <gpioCPUGetPinMode+0x38>)
    return cfgToMode[config];
 800527e:	f001 010f 	and.w	r1, r1, #15
}
 8005282:	5c58      	ldrb	r0, [r3, r1]
 8005284:	bd38      	pop	{r3, r4, r5, pc}
 8005286:	bf00      	nop
 8005288:	0800c908 	.word	0x0800c908
 800528c:	00000000 	.word	0x00000000

08005290 <xPortPendSVHandler>:
 8005290:	4b18      	ldr	r3, [pc, #96]	; (80052f4 <pxCurrentTCBConst+0x4>)
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	4818      	ldr	r0, [pc, #96]	; (80052f8 <pxCurrentTCBConst+0x8>)
 8005296:	461a      	mov	r2, r3
 8005298:	6002      	str	r2, [r0, #0]
 800529a:	f3ef 8009 	mrs	r0, PSP
 800529e:	f3bf 8f6f 	isb	sy
 80052a2:	4b13      	ldr	r3, [pc, #76]	; (80052f0 <pxCurrentTCBConst>)
 80052a4:	681a      	ldr	r2, [r3, #0]
 80052a6:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80052aa:	4c14      	ldr	r4, [pc, #80]	; (80052fc <pxCurrentTCBConst+0xc>)
 80052ac:	6824      	ldr	r4, [r4, #0]
 80052ae:	f3ef 8111 	mrs	r1, BASEPRI
 80052b2:	e920 0012 	stmdb	r0!, {r1, r4}
 80052b6:	6010      	str	r0, [r2, #0]
 80052b8:	e92d 4008 	stmdb	sp!, {r3, lr}
 80052bc:	f04f 00bf 	mov.w	r0, #191	; 0xbf
 80052c0:	f380 8811 	msr	BASEPRI, r0
 80052c4:	f006 f9be 	bl	800b644 <vTaskSwitchContext>
 80052c8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80052cc:	6819      	ldr	r1, [r3, #0]
 80052ce:	6808      	ldr	r0, [r1, #0]
 80052d0:	c812      	ldmia	r0!, {r1, r4}
 80052d2:	f381 8811 	msr	BASEPRI, r1
 80052d6:	4909      	ldr	r1, [pc, #36]	; (80052fc <pxCurrentTCBConst+0xc>)
 80052d8:	600c      	str	r4, [r1, #0]
 80052da:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80052de:	f380 8809 	msr	PSP, r0
 80052e2:	f3bf 8f6f 	isb	sy
 80052e6:	4770      	bx	lr
 80052e8:	f3af 8000 	nop.w
 80052ec:	f3af 8000 	nop.w

080052f0 <pxCurrentTCBConst>:
 80052f0:	200011a8 	.word	0x200011a8
 80052f4:	2000134c 	.word	0x2000134c
 80052f8:	e000ed20 	.word	0xe000ed20
 80052fc:	20001358 	.word	0x20001358

08005300 <vPortValidateInterruptPriority>:
 8005300:	f3ef 8305 	mrs	r3, IPSR
 8005304:	2b0f      	cmp	r3, #15
 8005306:	d906      	bls.n	8005316 <vPortValidateInterruptPriority+0x16>
 8005308:	4a09      	ldr	r2, [pc, #36]	; (8005330 <vPortValidateInterruptPriority+0x30>)
 800530a:	5c9b      	ldrb	r3, [r3, r2]
 800530c:	4a09      	ldr	r2, [pc, #36]	; (8005334 <vPortValidateInterruptPriority+0x34>)
 800530e:	7812      	ldrb	r2, [r2, #0]
 8005310:	429a      	cmp	r2, r3
 8005312:	d900      	bls.n	8005316 <vPortValidateInterruptPriority+0x16>
 8005314:	e7fe      	b.n	8005314 <vPortValidateInterruptPriority+0x14>
 8005316:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800531a:	4a07      	ldr	r2, [pc, #28]	; (8005338 <vPortValidateInterruptPriority+0x38>)
 800531c:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 8005320:	6812      	ldr	r2, [r2, #0]
 8005322:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005326:	4293      	cmp	r3, r2
 8005328:	d900      	bls.n	800532c <vPortValidateInterruptPriority+0x2c>
 800532a:	e7fe      	b.n	800532a <vPortValidateInterruptPriority+0x2a>
 800532c:	4770      	bx	lr
 800532e:	bf00      	nop
 8005330:	e000e3f0 	.word	0xe000e3f0
 8005334:	20001340 	.word	0x20001340
 8005338:	20001344 	.word	0x20001344

0800533c <vPortBusyDelay>:
 800533c:	2300      	movs	r3, #0
 800533e:	08c0      	lsrs	r0, r0, #3

08005340 <loop6999>:
 8005340:	4283      	cmp	r3, r0
 8005342:	d001      	beq.n	8005348 <done6999>
 8005344:	3301      	adds	r3, #1
 8005346:	e7fb      	b.n	8005340 <loop6999>

08005348 <done6999>:
 8005348:	4770      	bx	lr

0800534a <vListInsertEnd>:
 800534a:	6843      	ldr	r3, [r0, #4]
 800534c:	689a      	ldr	r2, [r3, #8]
 800534e:	604b      	str	r3, [r1, #4]
 8005350:	608a      	str	r2, [r1, #8]
 8005352:	689a      	ldr	r2, [r3, #8]
 8005354:	6051      	str	r1, [r2, #4]
 8005356:	6099      	str	r1, [r3, #8]
 8005358:	6803      	ldr	r3, [r0, #0]
 800535a:	6108      	str	r0, [r1, #16]
 800535c:	3301      	adds	r3, #1
 800535e:	6003      	str	r3, [r0, #0]
 8005360:	4770      	bx	lr
	...

08005364 <prvAddNewTaskToReadyList>:
 8005364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005366:	f7ff f9dd 	bl	8004724 <vPortEnterCritical>
 800536a:	4a49      	ldr	r2, [pc, #292]	; (8005490 <prvAddNewTaskToReadyList+0x12c>)
 800536c:	4f49      	ldr	r7, [pc, #292]	; (8005494 <prvAddNewTaskToReadyList+0x130>)
 800536e:	6813      	ldr	r3, [r2, #0]
 8005370:	4604      	mov	r4, r0
 8005372:	3301      	adds	r3, #1
 8005374:	6013      	str	r3, [r2, #0]
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	4847      	ldr	r0, [pc, #284]	; (8005498 <prvAddNewTaskToReadyList+0x134>)
 800537a:	2b00      	cmp	r3, #0
 800537c:	d17d      	bne.n	800547a <prvAddNewTaskToReadyList+0x116>
 800537e:	603c      	str	r4, [r7, #0]
 8005380:	6812      	ldr	r2, [r2, #0]
 8005382:	2a01      	cmp	r2, #1
 8005384:	d13f      	bne.n	8005406 <prvAddNewTaskToReadyList+0xa2>
 8005386:	4602      	mov	r2, r0
 8005388:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 800538c:	f04f 0c14 	mov.w	ip, #20
 8005390:	461d      	mov	r5, r3
 8005392:	f102 0108 	add.w	r1, r2, #8
 8005396:	e9c2 1601 	strd	r1, r6, [r2, #4]
 800539a:	e9c2 1103 	strd	r1, r1, [r2, #12]
 800539e:	fb0c f103 	mul.w	r1, ip, r3
 80053a2:	3301      	adds	r3, #1
 80053a4:	2b05      	cmp	r3, #5
 80053a6:	5045      	str	r5, [r0, r1]
 80053a8:	f102 0214 	add.w	r2, r2, #20
 80053ac:	d1f1      	bne.n	8005392 <prvAddNewTaskToReadyList+0x2e>
 80053ae:	4a3b      	ldr	r2, [pc, #236]	; (800549c <prvAddNewTaskToReadyList+0x138>)
 80053b0:	f102 0308 	add.w	r3, r2, #8
 80053b4:	e9c2 3601 	strd	r3, r6, [r2, #4]
 80053b8:	e9c2 3303 	strd	r3, r3, [r2, #12]
 80053bc:	4b38      	ldr	r3, [pc, #224]	; (80054a0 <prvAddNewTaskToReadyList+0x13c>)
 80053be:	6015      	str	r5, [r2, #0]
 80053c0:	f103 0108 	add.w	r1, r3, #8
 80053c4:	e9c3 1601 	strd	r1, r6, [r3, #4]
 80053c8:	e9c3 1103 	strd	r1, r1, [r3, #12]
 80053cc:	4935      	ldr	r1, [pc, #212]	; (80054a4 <prvAddNewTaskToReadyList+0x140>)
 80053ce:	601d      	str	r5, [r3, #0]
 80053d0:	f101 0c08 	add.w	ip, r1, #8
 80053d4:	600d      	str	r5, [r1, #0]
 80053d6:	e9c1 c601 	strd	ip, r6, [r1, #4]
 80053da:	e9c1 cc03 	strd	ip, ip, [r1, #12]
 80053de:	4932      	ldr	r1, [pc, #200]	; (80054a8 <prvAddNewTaskToReadyList+0x144>)
 80053e0:	f101 0c08 	add.w	ip, r1, #8
 80053e4:	600d      	str	r5, [r1, #0]
 80053e6:	e9c1 c601 	strd	ip, r6, [r1, #4]
 80053ea:	e9c1 cc03 	strd	ip, ip, [r1, #12]
 80053ee:	492f      	ldr	r1, [pc, #188]	; (80054ac <prvAddNewTaskToReadyList+0x148>)
 80053f0:	f101 0c08 	add.w	ip, r1, #8
 80053f4:	600d      	str	r5, [r1, #0]
 80053f6:	e9c1 c601 	strd	ip, r6, [r1, #4]
 80053fa:	e9c1 cc03 	strd	ip, ip, [r1, #12]
 80053fe:	492c      	ldr	r1, [pc, #176]	; (80054b0 <prvAddNewTaskToReadyList+0x14c>)
 8005400:	600a      	str	r2, [r1, #0]
 8005402:	4a2c      	ldr	r2, [pc, #176]	; (80054b4 <prvAddNewTaskToReadyList+0x150>)
 8005404:	6013      	str	r3, [r2, #0]
 8005406:	4a2c      	ldr	r2, [pc, #176]	; (80054b8 <prvAddNewTaskToReadyList+0x154>)
 8005408:	492c      	ldr	r1, [pc, #176]	; (80054bc <prvAddNewTaskToReadyList+0x158>)
 800540a:	6813      	ldr	r3, [r2, #0]
 800540c:	680d      	ldr	r5, [r1, #0]
 800540e:	3301      	adds	r3, #1
 8005410:	6013      	str	r3, [r2, #0]
 8005412:	6463      	str	r3, [r4, #68]	; 0x44
 8005414:	2301      	movs	r3, #1
 8005416:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005418:	4093      	lsls	r3, r2
 800541a:	432b      	orrs	r3, r5
 800541c:	600b      	str	r3, [r1, #0]
 800541e:	2314      	movs	r3, #20
 8005420:	1d21      	adds	r1, r4, #4
 8005422:	fb03 0002 	mla	r0, r3, r2, r0
 8005426:	f7ff ff90 	bl	800534a <vListInsertEnd>
 800542a:	f7ff fb93 	bl	8004b54 <vPortExitCritical>
 800542e:	4b24      	ldr	r3, [pc, #144]	; (80054c0 <prvAddNewTaskToReadyList+0x15c>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	b30b      	cbz	r3, 8005478 <prvAddNewTaskToReadyList+0x114>
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005438:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800543a:	429a      	cmp	r2, r3
 800543c:	d21c      	bcs.n	8005478 <prvAddNewTaskToReadyList+0x114>
 800543e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005442:	4a20      	ldr	r2, [pc, #128]	; (80054c4 <prvAddNewTaskToReadyList+0x160>)
 8005444:	f8d3 1d20 	ldr.w	r1, [r3, #3360]	; 0xd20
 8005448:	6011      	str	r1, [r2, #0]
 800544a:	4a1f      	ldr	r2, [pc, #124]	; (80054c8 <prvAddNewTaskToReadyList+0x164>)
 800544c:	6812      	ldr	r2, [r2, #0]
 800544e:	b14a      	cbz	r2, 8005464 <prvAddNewTaskToReadyList+0x100>
 8005450:	f8d3 2d20 	ldr.w	r2, [r3, #3360]	; 0xd20
 8005454:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
 8005458:	f8c3 2d20 	str.w	r2, [r3, #3360]	; 0xd20
 800545c:	f8d3 2d20 	ldr.w	r2, [r3, #3360]	; 0xd20
 8005460:	f8c3 2d20 	str.w	r2, [r3, #3360]	; 0xd20
 8005464:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005468:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800546c:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8005470:	f3bf 8f4f 	dsb	sy
 8005474:	f3bf 8f6f 	isb	sy
 8005478:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800547a:	4b11      	ldr	r3, [pc, #68]	; (80054c0 <prvAddNewTaskToReadyList+0x15c>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d1c1      	bne.n	8005406 <prvAddNewTaskToReadyList+0xa2>
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005486:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005488:	429a      	cmp	r2, r3
 800548a:	bf98      	it	ls
 800548c:	603c      	strls	r4, [r7, #0]
 800548e:	e7ba      	b.n	8005406 <prvAddNewTaskToReadyList+0xa2>
 8005490:	2000135c 	.word	0x2000135c
 8005494:	200011a8 	.word	0x200011a8
 8005498:	200011b8 	.word	0x200011b8
 800549c:	2000137c 	.word	0x2000137c
 80054a0:	20001390 	.word	0x20001390
 80054a4:	20001600 	.word	0x20001600
 80054a8:	20001634 	.word	0x20001634
 80054ac:	20001620 	.word	0x20001620
 80054b0:	200011ac 	.word	0x200011ac
 80054b4:	200011b4 	.word	0x200011b4
 80054b8:	20001370 	.word	0x20001370
 80054bc:	20001374 	.word	0x20001374
 80054c0:	20001614 	.word	0x20001614
 80054c4:	2000134c 	.word	0x2000134c
 80054c8:	20001358 	.word	0x20001358

080054cc <vListInsert>:
 80054cc:	b530      	push	{r4, r5, lr}
 80054ce:	680c      	ldr	r4, [r1, #0]
 80054d0:	1c63      	adds	r3, r4, #1
 80054d2:	d10a      	bne.n	80054ea <vListInsert+0x1e>
 80054d4:	6903      	ldr	r3, [r0, #16]
 80054d6:	685a      	ldr	r2, [r3, #4]
 80054d8:	604a      	str	r2, [r1, #4]
 80054da:	6091      	str	r1, [r2, #8]
 80054dc:	608b      	str	r3, [r1, #8]
 80054de:	6059      	str	r1, [r3, #4]
 80054e0:	6803      	ldr	r3, [r0, #0]
 80054e2:	6108      	str	r0, [r1, #16]
 80054e4:	3301      	adds	r3, #1
 80054e6:	6003      	str	r3, [r0, #0]
 80054e8:	bd30      	pop	{r4, r5, pc}
 80054ea:	f100 0208 	add.w	r2, r0, #8
 80054ee:	4613      	mov	r3, r2
 80054f0:	6852      	ldr	r2, [r2, #4]
 80054f2:	6815      	ldr	r5, [r2, #0]
 80054f4:	42a5      	cmp	r5, r4
 80054f6:	d9fa      	bls.n	80054ee <vListInsert+0x22>
 80054f8:	e7ed      	b.n	80054d6 <vListInsert+0xa>

080054fa <uxListRemove>:
 80054fa:	6903      	ldr	r3, [r0, #16]
 80054fc:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
 8005500:	608a      	str	r2, [r1, #8]
 8005502:	6051      	str	r1, [r2, #4]
 8005504:	6859      	ldr	r1, [r3, #4]
 8005506:	4281      	cmp	r1, r0
 8005508:	bf08      	it	eq
 800550a:	605a      	streq	r2, [r3, #4]
 800550c:	2200      	movs	r2, #0
 800550e:	6102      	str	r2, [r0, #16]
 8005510:	681a      	ldr	r2, [r3, #0]
 8005512:	3a01      	subs	r2, #1
 8005514:	601a      	str	r2, [r3, #0]
 8005516:	6818      	ldr	r0, [r3, #0]
 8005518:	4770      	bx	lr
	...

0800551c <monitorKick>:
    xTaskCreate(taskPeriodicMon, "Monitor", stackSize, NULL, 1, &monThreadHandle );
}

void monitorKick(MonitorEntry* entry, bool active)
{
    if(entry->active == active) {
 800551c:	7c03      	ldrb	r3, [r0, #16]
{
 800551e:	b570      	push	{r4, r5, r6, lr}
    if(entry->active == active) {
 8005520:	428b      	cmp	r3, r1
 8005522:	d04f      	beq.n	80055c4 <monitorKick+0xa8>
        return;
    }

    entry->active = active;

    if(monThreadHandle && active) {
 8005524:	4b28      	ldr	r3, [pc, #160]	; (80055c8 <monitorKick+0xac>)
    entry->active = active;
 8005526:	7401      	strb	r1, [r0, #16]
    if(monThreadHandle && active) {
 8005528:	681c      	ldr	r4, [r3, #0]
 800552a:	2c00      	cmp	r4, #0
 800552c:	d04a      	beq.n	80055c4 <monitorKick+0xa8>
 800552e:	2900      	cmp	r1, #0
 8005530:	d048      	beq.n	80055c4 <monitorKick+0xa8>
 8005532:	f7ff f8f7 	bl	8004724 <vPortEnterCritical>
 8005536:	2202      	movs	r2, #2
 8005538:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
 800553c:	f884 2064 	strb.w	r2, [r4, #100]	; 0x64
 8005540:	2201      	movs	r2, #1
 8005542:	4293      	cmp	r3, r2
 8005544:	b2dd      	uxtb	r5, r3
 8005546:	6622      	str	r2, [r4, #96]	; 0x60
 8005548:	d138      	bne.n	80055bc <monitorKick+0xa0>
 800554a:	1d26      	adds	r6, r4, #4
 800554c:	4630      	mov	r0, r6
 800554e:	f7ff ffd4 	bl	80054fa <uxListRemove>
 8005552:	2014      	movs	r0, #20
 8005554:	4a1d      	ldr	r2, [pc, #116]	; (80055cc <monitorKick+0xb0>)
 8005556:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005558:	6811      	ldr	r1, [r2, #0]
 800555a:	409d      	lsls	r5, r3
 800555c:	430d      	orrs	r5, r1
 800555e:	6015      	str	r5, [r2, #0]
 8005560:	4a1b      	ldr	r2, [pc, #108]	; (80055d0 <monitorKick+0xb4>)
 8005562:	4631      	mov	r1, r6
 8005564:	fb00 2003 	mla	r0, r0, r3, r2
 8005568:	f7ff feef 	bl	800534a <vListInsertEnd>
 800556c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800556e:	b103      	cbz	r3, 8005572 <monitorKick+0x56>
 8005570:	e7fe      	b.n	8005570 <monitorKick+0x54>
 8005572:	f7ff f897 	bl	80046a4 <prvResetNextTaskUnblockTime>
 8005576:	4b17      	ldr	r3, [pc, #92]	; (80055d4 <monitorKick+0xb8>)
 8005578:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800557e:	429a      	cmp	r2, r3
 8005580:	d91c      	bls.n	80055bc <monitorKick+0xa0>
 8005582:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005586:	4a14      	ldr	r2, [pc, #80]	; (80055d8 <monitorKick+0xbc>)
 8005588:	f8d3 1d20 	ldr.w	r1, [r3, #3360]	; 0xd20
 800558c:	6011      	str	r1, [r2, #0]
 800558e:	4a13      	ldr	r2, [pc, #76]	; (80055dc <monitorKick+0xc0>)
 8005590:	6812      	ldr	r2, [r2, #0]
 8005592:	b14a      	cbz	r2, 80055a8 <monitorKick+0x8c>
 8005594:	f8d3 2d20 	ldr.w	r2, [r3, #3360]	; 0xd20
 8005598:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
 800559c:	f8c3 2d20 	str.w	r2, [r3, #3360]	; 0xd20
 80055a0:	f8d3 2d20 	ldr.w	r2, [r3, #3360]	; 0xd20
 80055a4:	f8c3 2d20 	str.w	r2, [r3, #3360]	; 0xd20
 80055a8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80055ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055b0:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80055b4:	f3bf 8f4f 	dsb	sy
 80055b8:	f3bf 8f6f 	isb	sy
        xTaskNotify(monThreadHandle, 1, eSetValueWithOverwrite);
    }
}
 80055bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80055c0:	f7ff bac8 	b.w	8004b54 <vPortExitCritical>
 80055c4:	bd70      	pop	{r4, r5, r6, pc}
 80055c6:	bf00      	nop
 80055c8:	200011a4 	.word	0x200011a4
 80055cc:	20001374 	.word	0x20001374
 80055d0:	200011b8 	.word	0x200011b8
 80055d4:	200011a8 	.word	0x200011a8
 80055d8:	2000134c 	.word	0x2000134c
 80055dc:	20001358 	.word	0x20001358

080055e0 <xTaskIncrementTick>:
 80055e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055e4:	4b38      	ldr	r3, [pc, #224]	; (80056c8 <xTaskIncrementTick+0xe8>)
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d166      	bne.n	80056ba <xTaskIncrementTick+0xda>
 80055ec:	4b37      	ldr	r3, [pc, #220]	; (80056cc <xTaskIncrementTick+0xec>)
 80055ee:	681d      	ldr	r5, [r3, #0]
 80055f0:	3501      	adds	r5, #1
 80055f2:	601d      	str	r5, [r3, #0]
 80055f4:	b97d      	cbnz	r5, 8005616 <xTaskIncrementTick+0x36>
 80055f6:	4b36      	ldr	r3, [pc, #216]	; (80056d0 <xTaskIncrementTick+0xf0>)
 80055f8:	681a      	ldr	r2, [r3, #0]
 80055fa:	6812      	ldr	r2, [r2, #0]
 80055fc:	b102      	cbz	r2, 8005600 <xTaskIncrementTick+0x20>
 80055fe:	e7fe      	b.n	80055fe <xTaskIncrementTick+0x1e>
 8005600:	4a34      	ldr	r2, [pc, #208]	; (80056d4 <xTaskIncrementTick+0xf4>)
 8005602:	6819      	ldr	r1, [r3, #0]
 8005604:	6810      	ldr	r0, [r2, #0]
 8005606:	6018      	str	r0, [r3, #0]
 8005608:	6011      	str	r1, [r2, #0]
 800560a:	4a33      	ldr	r2, [pc, #204]	; (80056d8 <xTaskIncrementTick+0xf8>)
 800560c:	6813      	ldr	r3, [r2, #0]
 800560e:	3301      	adds	r3, #1
 8005610:	6013      	str	r3, [r2, #0]
 8005612:	f7ff f847 	bl	80046a4 <prvResetNextTaskUnblockTime>
 8005616:	4e31      	ldr	r6, [pc, #196]	; (80056dc <xTaskIncrementTick+0xfc>)
 8005618:	2400      	movs	r4, #0
 800561a:	6833      	ldr	r3, [r6, #0]
 800561c:	4f30      	ldr	r7, [pc, #192]	; (80056e0 <xTaskIncrementTick+0x100>)
 800561e:	42ab      	cmp	r3, r5
 8005620:	d910      	bls.n	8005644 <xTaskIncrementTick+0x64>
 8005622:	2214      	movs	r2, #20
 8005624:	4b2f      	ldr	r3, [pc, #188]	; (80056e4 <xTaskIncrementTick+0x104>)
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800562a:	4353      	muls	r3, r2
 800562c:	58fb      	ldr	r3, [r7, r3]
 800562e:	2b02      	cmp	r3, #2
 8005630:	bf28      	it	cs
 8005632:	2401      	movcs	r4, #1
 8005634:	4b2c      	ldr	r3, [pc, #176]	; (80056e8 <xTaskIncrementTick+0x108>)
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	2b00      	cmp	r3, #0
 800563a:	bf0c      	ite	eq
 800563c:	4620      	moveq	r0, r4
 800563e:	2001      	movne	r0, #1
 8005640:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005644:	f8df a088 	ldr.w	sl, [pc, #136]	; 80056d0 <xTaskIncrementTick+0xf0>
 8005648:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 80056ec <xTaskIncrementTick+0x10c>
 800564c:	f8da 3000 	ldr.w	r3, [sl]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	b91b      	cbnz	r3, 800565c <xTaskIncrementTick+0x7c>
 8005654:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005658:	6033      	str	r3, [r6, #0]
 800565a:	e7e2      	b.n	8005622 <xTaskIncrementTick+0x42>
 800565c:	f8da 3000 	ldr.w	r3, [sl]
 8005660:	68db      	ldr	r3, [r3, #12]
 8005662:	f8d3 b00c 	ldr.w	fp, [r3, #12]
 8005666:	f8db 2004 	ldr.w	r2, [fp, #4]
 800566a:	4295      	cmp	r5, r2
 800566c:	d201      	bcs.n	8005672 <xTaskIncrementTick+0x92>
 800566e:	6032      	str	r2, [r6, #0]
 8005670:	e7d7      	b.n	8005622 <xTaskIncrementTick+0x42>
 8005672:	f10b 0804 	add.w	r8, fp, #4
 8005676:	4640      	mov	r0, r8
 8005678:	f7ff ff3f 	bl	80054fa <uxListRemove>
 800567c:	f8db 2028 	ldr.w	r2, [fp, #40]	; 0x28
 8005680:	b11a      	cbz	r2, 800568a <xTaskIncrementTick+0xaa>
 8005682:	f10b 0018 	add.w	r0, fp, #24
 8005686:	f7ff ff38 	bl	80054fa <uxListRemove>
 800568a:	2201      	movs	r2, #1
 800568c:	f8db 002c 	ldr.w	r0, [fp, #44]	; 0x2c
 8005690:	f8d9 3000 	ldr.w	r3, [r9]
 8005694:	4082      	lsls	r2, r0
 8005696:	431a      	orrs	r2, r3
 8005698:	f8c9 2000 	str.w	r2, [r9]
 800569c:	2214      	movs	r2, #20
 800569e:	4641      	mov	r1, r8
 80056a0:	fb02 7000 	mla	r0, r2, r0, r7
 80056a4:	f7ff fe51 	bl	800534a <vListInsertEnd>
 80056a8:	4b0e      	ldr	r3, [pc, #56]	; (80056e4 <xTaskIncrementTick+0x104>)
 80056aa:	f8db 202c 	ldr.w	r2, [fp, #44]	; 0x2c
 80056ae:	6819      	ldr	r1, [r3, #0]
 80056b0:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 80056b2:	429a      	cmp	r2, r3
 80056b4:	bf28      	it	cs
 80056b6:	2401      	movcs	r4, #1
 80056b8:	e7c8      	b.n	800564c <xTaskIncrementTick+0x6c>
 80056ba:	4a0d      	ldr	r2, [pc, #52]	; (80056f0 <xTaskIncrementTick+0x110>)
 80056bc:	2400      	movs	r4, #0
 80056be:	6813      	ldr	r3, [r2, #0]
 80056c0:	3301      	adds	r3, #1
 80056c2:	6013      	str	r3, [r2, #0]
 80056c4:	e7b6      	b.n	8005634 <xTaskIncrementTick+0x54>
 80056c6:	bf00      	nop
 80056c8:	2000136c 	.word	0x2000136c
 80056cc:	20001648 	.word	0x20001648
 80056d0:	200011ac 	.word	0x200011ac
 80056d4:	200011b4 	.word	0x200011b4
 80056d8:	200015fc 	.word	0x200015fc
 80056dc:	200015f8 	.word	0x200015f8
 80056e0:	200011b8 	.word	0x200011b8
 80056e4:	200011a8 	.word	0x200011a8
 80056e8:	2000164c 	.word	0x2000164c
 80056ec:	20001374 	.word	0x20001374
 80056f0:	20001364 	.word	0x20001364

080056f4 <xTaskResumeAll>:
 80056f4:	4837      	ldr	r0, [pc, #220]	; (80057d4 <xTaskResumeAll+0xe0>)
 80056f6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80056fa:	6803      	ldr	r3, [r0, #0]
 80056fc:	b903      	cbnz	r3, 8005700 <xTaskResumeAll+0xc>
 80056fe:	e7fe      	b.n	80056fe <xTaskResumeAll+0xa>
 8005700:	f7ff f810 	bl	8004724 <vPortEnterCritical>
 8005704:	6803      	ldr	r3, [r0, #0]
 8005706:	3b01      	subs	r3, #1
 8005708:	6003      	str	r3, [r0, #0]
 800570a:	6804      	ldr	r4, [r0, #0]
 800570c:	b124      	cbz	r4, 8005718 <xTaskResumeAll+0x24>
 800570e:	2000      	movs	r0, #0
 8005710:	f7ff fa20 	bl	8004b54 <vPortExitCritical>
 8005714:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005718:	4b2f      	ldr	r3, [pc, #188]	; (80057d8 <xTaskResumeAll+0xe4>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d0f6      	beq.n	800570e <xTaskResumeAll+0x1a>
 8005720:	4d2e      	ldr	r5, [pc, #184]	; (80057dc <xTaskResumeAll+0xe8>)
 8005722:	4e2f      	ldr	r6, [pc, #188]	; (80057e0 <xTaskResumeAll+0xec>)
 8005724:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 80057e4 <xTaskResumeAll+0xf0>
 8005728:	e01f      	b.n	800576a <xTaskResumeAll+0x76>
 800572a:	68eb      	ldr	r3, [r5, #12]
 800572c:	2701      	movs	r7, #1
 800572e:	68dc      	ldr	r4, [r3, #12]
 8005730:	f104 0904 	add.w	r9, r4, #4
 8005734:	f104 0018 	add.w	r0, r4, #24
 8005738:	f7ff fedf 	bl	80054fa <uxListRemove>
 800573c:	4648      	mov	r0, r9
 800573e:	f7ff fedc 	bl	80054fa <uxListRemove>
 8005742:	2014      	movs	r0, #20
 8005744:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005746:	6831      	ldr	r1, [r6, #0]
 8005748:	fa07 f302 	lsl.w	r3, r7, r2
 800574c:	430b      	orrs	r3, r1
 800574e:	fb00 8002 	mla	r0, r0, r2, r8
 8005752:	4649      	mov	r1, r9
 8005754:	6033      	str	r3, [r6, #0]
 8005756:	f7ff fdf8 	bl	800534a <vListInsertEnd>
 800575a:	4b23      	ldr	r3, [pc, #140]	; (80057e8 <xTaskResumeAll+0xf4>)
 800575c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005762:	429a      	cmp	r2, r3
 8005764:	d301      	bcc.n	800576a <xTaskResumeAll+0x76>
 8005766:	4b21      	ldr	r3, [pc, #132]	; (80057ec <xTaskResumeAll+0xf8>)
 8005768:	601f      	str	r7, [r3, #0]
 800576a:	682b      	ldr	r3, [r5, #0]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d1dc      	bne.n	800572a <xTaskResumeAll+0x36>
 8005770:	b10c      	cbz	r4, 8005776 <xTaskResumeAll+0x82>
 8005772:	f7fe ff97 	bl	80046a4 <prvResetNextTaskUnblockTime>
 8005776:	4d1e      	ldr	r5, [pc, #120]	; (80057f0 <xTaskResumeAll+0xfc>)
 8005778:	682c      	ldr	r4, [r5, #0]
 800577a:	b144      	cbz	r4, 800578e <xTaskResumeAll+0x9a>
 800577c:	2701      	movs	r7, #1
 800577e:	4e1b      	ldr	r6, [pc, #108]	; (80057ec <xTaskResumeAll+0xf8>)
 8005780:	f7ff ff2e 	bl	80055e0 <xTaskIncrementTick>
 8005784:	b100      	cbz	r0, 8005788 <xTaskResumeAll+0x94>
 8005786:	6037      	str	r7, [r6, #0]
 8005788:	3c01      	subs	r4, #1
 800578a:	d1f9      	bne.n	8005780 <xTaskResumeAll+0x8c>
 800578c:	602c      	str	r4, [r5, #0]
 800578e:	4b17      	ldr	r3, [pc, #92]	; (80057ec <xTaskResumeAll+0xf8>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d0bb      	beq.n	800570e <xTaskResumeAll+0x1a>
 8005796:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800579a:	4a16      	ldr	r2, [pc, #88]	; (80057f4 <xTaskResumeAll+0x100>)
 800579c:	f8d3 1d20 	ldr.w	r1, [r3, #3360]	; 0xd20
 80057a0:	6011      	str	r1, [r2, #0]
 80057a2:	4a15      	ldr	r2, [pc, #84]	; (80057f8 <xTaskResumeAll+0x104>)
 80057a4:	6812      	ldr	r2, [r2, #0]
 80057a6:	b14a      	cbz	r2, 80057bc <xTaskResumeAll+0xc8>
 80057a8:	f8d3 2d20 	ldr.w	r2, [r3, #3360]	; 0xd20
 80057ac:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
 80057b0:	f8c3 2d20 	str.w	r2, [r3, #3360]	; 0xd20
 80057b4:	f8d3 2d20 	ldr.w	r2, [r3, #3360]	; 0xd20
 80057b8:	f8c3 2d20 	str.w	r2, [r3, #3360]	; 0xd20
 80057bc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80057c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057c4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80057c8:	f3bf 8f4f 	dsb	sy
 80057cc:	f3bf 8f6f 	isb	sy
 80057d0:	2001      	movs	r0, #1
 80057d2:	e79d      	b.n	8005710 <xTaskResumeAll+0x1c>
 80057d4:	2000136c 	.word	0x2000136c
 80057d8:	2000135c 	.word	0x2000135c
 80057dc:	20001600 	.word	0x20001600
 80057e0:	20001374 	.word	0x20001374
 80057e4:	200011b8 	.word	0x200011b8
 80057e8:	200011a8 	.word	0x200011a8
 80057ec:	2000164c 	.word	0x2000164c
 80057f0:	20001364 	.word	0x20001364
 80057f4:	2000134c 	.word	0x2000134c
 80057f8:	20001358 	.word	0x20001358

080057fc <pvPortMalloc>:
 80057fc:	4938      	ldr	r1, [pc, #224]	; (80058e0 <pvPortMalloc+0xe4>)
 80057fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005802:	f7fe ff29 	bl	8004658 <vTaskSuspendAll>
 8005806:	680b      	ldr	r3, [r1, #0]
 8005808:	4604      	mov	r4, r0
 800580a:	4d36      	ldr	r5, [pc, #216]	; (80058e4 <pvPortMalloc+0xe8>)
 800580c:	b9f3      	cbnz	r3, 800584c <pvPortMalloc+0x50>
 800580e:	2000      	movs	r0, #0
 8005810:	4b35      	ldr	r3, [pc, #212]	; (80058e8 <pvPortMalloc+0xec>)
 8005812:	4a36      	ldr	r2, [pc, #216]	; (80058ec <pvPortMalloc+0xf0>)
 8005814:	f1a3 0708 	sub.w	r7, r3, #8
 8005818:	1ad2      	subs	r2, r2, r3
 800581a:	075e      	lsls	r6, r3, #29
 800581c:	bf18      	it	ne
 800581e:	3307      	addne	r3, #7
 8005820:	4e33      	ldr	r6, [pc, #204]	; (80058f0 <pvPortMalloc+0xf4>)
 8005822:	443a      	add	r2, r7
 8005824:	bf18      	it	ne
 8005826:	f023 0307 	bicne.w	r3, r3, #7
 800582a:	f022 0207 	bic.w	r2, r2, #7
 800582e:	6033      	str	r3, [r6, #0]
 8005830:	6070      	str	r0, [r6, #4]
 8005832:	e9c2 0000 	strd	r0, r0, [r2]
 8005836:	1ad0      	subs	r0, r2, r3
 8005838:	e9c3 2000 	strd	r2, r0, [r3]
 800583c:	4b2d      	ldr	r3, [pc, #180]	; (80058f4 <pvPortMalloc+0xf8>)
 800583e:	600a      	str	r2, [r1, #0]
 8005840:	6018      	str	r0, [r3, #0]
 8005842:	4b2d      	ldr	r3, [pc, #180]	; (80058f8 <pvPortMalloc+0xfc>)
 8005844:	6018      	str	r0, [r3, #0]
 8005846:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800584a:	602b      	str	r3, [r5, #0]
 800584c:	682f      	ldr	r7, [r5, #0]
 800584e:	4227      	tst	r7, r4
 8005850:	d140      	bne.n	80058d4 <pvPortMalloc+0xd8>
 8005852:	2c00      	cmp	r4, #0
 8005854:	d039      	beq.n	80058ca <pvPortMalloc+0xce>
 8005856:	f104 0308 	add.w	r3, r4, #8
 800585a:	0760      	lsls	r0, r4, #29
 800585c:	bf1c      	itt	ne
 800585e:	f023 0307 	bicne.w	r3, r3, #7
 8005862:	3308      	addne	r3, #8
 8005864:	2b00      	cmp	r3, #0
 8005866:	d035      	beq.n	80058d4 <pvPortMalloc+0xd8>
 8005868:	f8df 808c 	ldr.w	r8, [pc, #140]	; 80058f8 <pvPortMalloc+0xfc>
 800586c:	f8d8 6000 	ldr.w	r6, [r8]
 8005870:	429e      	cmp	r6, r3
 8005872:	d32f      	bcc.n	80058d4 <pvPortMalloc+0xd8>
 8005874:	4a1e      	ldr	r2, [pc, #120]	; (80058f0 <pvPortMalloc+0xf4>)
 8005876:	6815      	ldr	r5, [r2, #0]
 8005878:	6868      	ldr	r0, [r5, #4]
 800587a:	4298      	cmp	r0, r3
 800587c:	d201      	bcs.n	8005882 <pvPortMalloc+0x86>
 800587e:	682c      	ldr	r4, [r5, #0]
 8005880:	b974      	cbnz	r4, 80058a0 <pvPortMalloc+0xa4>
 8005882:	6809      	ldr	r1, [r1, #0]
 8005884:	42a9      	cmp	r1, r5
 8005886:	d025      	beq.n	80058d4 <pvPortMalloc+0xd8>
 8005888:	6829      	ldr	r1, [r5, #0]
 800588a:	6814      	ldr	r4, [r2, #0]
 800588c:	6011      	str	r1, [r2, #0]
 800588e:	1ac2      	subs	r2, r0, r3
 8005890:	2a10      	cmp	r2, #16
 8005892:	f104 0408 	add.w	r4, r4, #8
 8005896:	d90a      	bls.n	80058ae <pvPortMalloc+0xb2>
 8005898:	18e8      	adds	r0, r5, r3
 800589a:	0741      	lsls	r1, r0, #29
 800589c:	d003      	beq.n	80058a6 <pvPortMalloc+0xaa>
 800589e:	e7fe      	b.n	800589e <pvPortMalloc+0xa2>
 80058a0:	462a      	mov	r2, r5
 80058a2:	4625      	mov	r5, r4
 80058a4:	e7e8      	b.n	8005878 <pvPortMalloc+0x7c>
 80058a6:	6042      	str	r2, [r0, #4]
 80058a8:	606b      	str	r3, [r5, #4]
 80058aa:	f7fe feb1 	bl	8004610 <prvInsertBlockIntoFreeList>
 80058ae:	2300      	movs	r3, #0
 80058b0:	4910      	ldr	r1, [pc, #64]	; (80058f4 <pvPortMalloc+0xf8>)
 80058b2:	686a      	ldr	r2, [r5, #4]
 80058b4:	6808      	ldr	r0, [r1, #0]
 80058b6:	1ab6      	subs	r6, r6, r2
 80058b8:	4286      	cmp	r6, r0
 80058ba:	ea47 0702 	orr.w	r7, r7, r2
 80058be:	f8c8 6000 	str.w	r6, [r8]
 80058c2:	bf38      	it	cc
 80058c4:	600e      	strcc	r6, [r1, #0]
 80058c6:	606f      	str	r7, [r5, #4]
 80058c8:	602b      	str	r3, [r5, #0]
 80058ca:	f7ff ff13 	bl	80056f4 <xTaskResumeAll>
 80058ce:	0763      	lsls	r3, r4, #29
 80058d0:	d002      	beq.n	80058d8 <pvPortMalloc+0xdc>
 80058d2:	e7fe      	b.n	80058d2 <pvPortMalloc+0xd6>
 80058d4:	2400      	movs	r4, #0
 80058d6:	e7f8      	b.n	80058ca <pvPortMalloc+0xce>
 80058d8:	4620      	mov	r0, r4
 80058da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80058de:	bf00      	nop
 80058e0:	200011b0 	.word	0x200011b0
 80058e4:	20001378 	.word	0x20001378
 80058e8:	20001650 	.word	0x20001650
 80058ec:	20005000 	.word	0x20005000
 80058f0:	20001618 	.word	0x20001618
 80058f4:	200015f4 	.word	0x200015f4
 80058f8:	200013a4 	.word	0x200013a4

080058fc <vPortFree>:
 80058fc:	b508      	push	{r3, lr}
 80058fe:	b1e8      	cbz	r0, 800593c <vPortFree+0x40>
 8005900:	4a0f      	ldr	r2, [pc, #60]	; (8005940 <vPortFree+0x44>)
 8005902:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8005906:	6812      	ldr	r2, [r2, #0]
 8005908:	4213      	tst	r3, r2
 800590a:	d100      	bne.n	800590e <vPortFree+0x12>
 800590c:	e7fe      	b.n	800590c <vPortFree+0x10>
 800590e:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8005912:	b101      	cbz	r1, 8005916 <vPortFree+0x1a>
 8005914:	e7fe      	b.n	8005914 <vPortFree+0x18>
 8005916:	ea23 0302 	bic.w	r3, r3, r2
 800591a:	f840 3c04 	str.w	r3, [r0, #-4]
 800591e:	f7fe fe9b 	bl	8004658 <vTaskSuspendAll>
 8005922:	4a08      	ldr	r2, [pc, #32]	; (8005944 <vPortFree+0x48>)
 8005924:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8005928:	6811      	ldr	r1, [r2, #0]
 800592a:	3808      	subs	r0, #8
 800592c:	440b      	add	r3, r1
 800592e:	6013      	str	r3, [r2, #0]
 8005930:	f7fe fe6e 	bl	8004610 <prvInsertBlockIntoFreeList>
 8005934:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8005938:	f7ff bedc 	b.w	80056f4 <xTaskResumeAll>
 800593c:	bd08      	pop	{r3, pc}
 800593e:	bf00      	nop
 8005940:	20001378 	.word	0x20001378
 8005944:	200013a4 	.word	0x200013a4

08005948 <prvDeleteTCB>:
 8005948:	b510      	push	{r4, lr}
 800594a:	f890 3065 	ldrb.w	r3, [r0, #101]	; 0x65
 800594e:	4604      	mov	r4, r0
 8005950:	b93b      	cbnz	r3, 8005962 <prvDeleteTCB+0x1a>
 8005952:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8005954:	f7ff ffd2 	bl	80058fc <vPortFree>
 8005958:	4620      	mov	r0, r4
 800595a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800595e:	f7ff bfcd 	b.w	80058fc <vPortFree>
 8005962:	2b01      	cmp	r3, #1
 8005964:	d0f9      	beq.n	800595a <prvDeleteTCB+0x12>
 8005966:	2b02      	cmp	r3, #2
 8005968:	d000      	beq.n	800596c <prvDeleteTCB+0x24>
 800596a:	e7fe      	b.n	800596a <prvDeleteTCB+0x22>
 800596c:	bd10      	pop	{r4, pc}
	...

08005970 <prvListTasksWithinSingleList>:
 8005970:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005974:	f8d1 a000 	ldr.w	sl, [r1]
 8005978:	4604      	mov	r4, r0
 800597a:	460d      	mov	r5, r1
 800597c:	4617      	mov	r7, r2
 800597e:	f1ba 0f00 	cmp.w	sl, #0
 8005982:	d040      	beq.n	8005a06 <prvListTasksWithinSingleList+0x96>
 8005984:	f04f 0a00 	mov.w	sl, #0
 8005988:	684b      	ldr	r3, [r1, #4]
 800598a:	f101 0808 	add.w	r8, r1, #8
 800598e:	685b      	ldr	r3, [r3, #4]
 8005990:	f8df 909c 	ldr.w	r9, [pc, #156]	; 8005a30 <prvListTasksWithinSingleList+0xc0>
 8005994:	4543      	cmp	r3, r8
 8005996:	604b      	str	r3, [r1, #4]
 8005998:	bf04      	itt	eq
 800599a:	68cb      	ldreq	r3, [r1, #12]
 800599c:	604b      	streq	r3, [r1, #4]
 800599e:	684b      	ldr	r3, [r1, #4]
 80059a0:	68db      	ldr	r3, [r3, #12]
 80059a2:	9301      	str	r3, [sp, #4]
 80059a4:	686a      	ldr	r2, [r5, #4]
 80059a6:	6852      	ldr	r2, [r2, #4]
 80059a8:	4590      	cmp	r8, r2
 80059aa:	606a      	str	r2, [r5, #4]
 80059ac:	bf04      	itt	eq
 80059ae:	f8d8 2004 	ldreq.w	r2, [r8, #4]
 80059b2:	606a      	streq	r2, [r5, #4]
 80059b4:	686a      	ldr	r2, [r5, #4]
 80059b6:	f8d2 b00c 	ldr.w	fp, [r2, #12]
 80059ba:	f1bb 0f00 	cmp.w	fp, #0
 80059be:	d126      	bne.n	8005a0e <prvListTasksWithinSingleList+0x9e>
 80059c0:	f8d9 6000 	ldr.w	r6, [r9]
 80059c4:	2300      	movs	r3, #0
 80059c6:	f106 0034 	add.w	r0, r6, #52	; 0x34
 80059ca:	6060      	str	r0, [r4, #4]
 80059cc:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 80059ce:	6026      	str	r6, [r4, #0]
 80059d0:	6120      	str	r0, [r4, #16]
 80059d2:	6b30      	ldr	r0, [r6, #48]	; 0x30
 80059d4:	61e0      	str	r0, [r4, #28]
 80059d6:	6c70      	ldr	r0, [r6, #68]	; 0x44
 80059d8:	60a0      	str	r0, [r4, #8]
 80059da:	6cf0      	ldr	r0, [r6, #76]	; 0x4c
 80059dc:	61a3      	str	r3, [r4, #24]
 80059de:	6160      	str	r0, [r4, #20]
 80059e0:	f8d9 0000 	ldr.w	r0, [r9]
 80059e4:	4286      	cmp	r6, r0
 80059e6:	d114      	bne.n	8005a12 <prvListTasksWithinSingleList+0xa2>
 80059e8:	7323      	strb	r3, [r4, #12]
 80059ea:	2000      	movs	r0, #0
 80059ec:	6b33      	ldr	r3, [r6, #48]	; 0x30
 80059ee:	5c1e      	ldrb	r6, [r3, r0]
 80059f0:	2ea5      	cmp	r6, #165	; 0xa5
 80059f2:	d01b      	beq.n	8005a2c <prvListTasksWithinSingleList+0xbc>
 80059f4:	9b01      	ldr	r3, [sp, #4]
 80059f6:	0880      	lsrs	r0, r0, #2
 80059f8:	455b      	cmp	r3, fp
 80059fa:	8420      	strh	r0, [r4, #32]
 80059fc:	f10a 0a01 	add.w	sl, sl, #1
 8005a00:	f104 0424 	add.w	r4, r4, #36	; 0x24
 8005a04:	d1ce      	bne.n	80059a4 <prvListTasksWithinSingleList+0x34>
 8005a06:	4650      	mov	r0, sl
 8005a08:	b003      	add	sp, #12
 8005a0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a0e:	465e      	mov	r6, fp
 8005a10:	e7d8      	b.n	80059c4 <prvListTasksWithinSingleList+0x54>
 8005a12:	2f03      	cmp	r7, #3
 8005a14:	7327      	strb	r7, [r4, #12]
 8005a16:	d1e8      	bne.n	80059ea <prvListTasksWithinSingleList+0x7a>
 8005a18:	f7fe fe1e 	bl	8004658 <vTaskSuspendAll>
 8005a1c:	6ab0      	ldr	r0, [r6, #40]	; 0x28
 8005a1e:	b110      	cbz	r0, 8005a26 <prvListTasksWithinSingleList+0xb6>
 8005a20:	f04f 0302 	mov.w	r3, #2
 8005a24:	7323      	strb	r3, [r4, #12]
 8005a26:	f7ff fe65 	bl	80056f4 <xTaskResumeAll>
 8005a2a:	e7de      	b.n	80059ea <prvListTasksWithinSingleList+0x7a>
 8005a2c:	3001      	adds	r0, #1
 8005a2e:	e7de      	b.n	80059ee <prvListTasksWithinSingleList+0x7e>
 8005a30:	200011a8 	.word	0x200011a8

08005a34 <xPortSysTickHandler>:
 8005a34:	b508      	push	{r3, lr}
 8005a36:	f7fe fe75 	bl	8004724 <vPortEnterCritical>
 8005a3a:	f7ff fdd1 	bl	80055e0 <xTaskIncrementTick>
 8005a3e:	b148      	cbz	r0, 8005a54 <xPortSysTickHandler+0x20>
 8005a40:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005a44:	4a05      	ldr	r2, [pc, #20]	; (8005a5c <xPortSysTickHandler+0x28>)
 8005a46:	f8d3 1d20 	ldr.w	r1, [r3, #3360]	; 0xd20
 8005a4a:	6011      	str	r1, [r2, #0]
 8005a4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a50:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8005a54:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8005a58:	f7ff b87c 	b.w	8004b54 <vPortExitCritical>
 8005a5c:	2000134c 	.word	0x2000134c

08005a60 <xTaskRemoveFromEventList>:
 8005a60:	b538      	push	{r3, r4, r5, lr}
 8005a62:	68c3      	ldr	r3, [r0, #12]
 8005a64:	68dc      	ldr	r4, [r3, #12]
 8005a66:	b904      	cbnz	r4, 8005a6a <xTaskRemoveFromEventList+0xa>
 8005a68:	e7fe      	b.n	8005a68 <xTaskRemoveFromEventList+0x8>
 8005a6a:	f104 0518 	add.w	r5, r4, #24
 8005a6e:	4628      	mov	r0, r5
 8005a70:	f7ff fd43 	bl	80054fa <uxListRemove>
 8005a74:	4b12      	ldr	r3, [pc, #72]	; (8005ac0 <xTaskRemoveFromEventList+0x60>)
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	b9f3      	cbnz	r3, 8005ab8 <xTaskRemoveFromEventList+0x58>
 8005a7a:	1d25      	adds	r5, r4, #4
 8005a7c:	4628      	mov	r0, r5
 8005a7e:	f7ff fd3c 	bl	80054fa <uxListRemove>
 8005a82:	2301      	movs	r3, #1
 8005a84:	490f      	ldr	r1, [pc, #60]	; (8005ac4 <xTaskRemoveFromEventList+0x64>)
 8005a86:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005a88:	6808      	ldr	r0, [r1, #0]
 8005a8a:	4093      	lsls	r3, r2
 8005a8c:	4303      	orrs	r3, r0
 8005a8e:	2014      	movs	r0, #20
 8005a90:	600b      	str	r3, [r1, #0]
 8005a92:	4629      	mov	r1, r5
 8005a94:	4b0c      	ldr	r3, [pc, #48]	; (8005ac8 <xTaskRemoveFromEventList+0x68>)
 8005a96:	fb00 3002 	mla	r0, r0, r2, r3
 8005a9a:	f7ff fc56 	bl	800534a <vListInsertEnd>
 8005a9e:	4b0b      	ldr	r3, [pc, #44]	; (8005acc <xTaskRemoveFromEventList+0x6c>)
 8005aa0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aa6:	429a      	cmp	r2, r3
 8005aa8:	bf85      	ittet	hi
 8005aaa:	2001      	movhi	r0, #1
 8005aac:	4b08      	ldrhi	r3, [pc, #32]	; (8005ad0 <xTaskRemoveFromEventList+0x70>)
 8005aae:	2000      	movls	r0, #0
 8005ab0:	6018      	strhi	r0, [r3, #0]
 8005ab2:	f7fe fdf7 	bl	80046a4 <prvResetNextTaskUnblockTime>
 8005ab6:	bd38      	pop	{r3, r4, r5, pc}
 8005ab8:	4629      	mov	r1, r5
 8005aba:	4806      	ldr	r0, [pc, #24]	; (8005ad4 <xTaskRemoveFromEventList+0x74>)
 8005abc:	e7ed      	b.n	8005a9a <xTaskRemoveFromEventList+0x3a>
 8005abe:	bf00      	nop
 8005ac0:	2000136c 	.word	0x2000136c
 8005ac4:	20001374 	.word	0x20001374
 8005ac8:	200011b8 	.word	0x200011b8
 8005acc:	200011a8 	.word	0x200011a8
 8005ad0:	2000164c 	.word	0x2000164c
 8005ad4:	20001600 	.word	0x20001600

08005ad8 <prvUnlockQueue>:
 8005ad8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005adc:	4604      	mov	r4, r0
 8005ade:	f04f 0801 	mov.w	r8, #1
 8005ae2:	f7fe fe1f 	bl	8004724 <vPortEnterCritical>
 8005ae6:	f890 5045 	ldrb.w	r5, [r0, #69]	; 0x45
 8005aea:	4f1b      	ldr	r7, [pc, #108]	; (8005b58 <prvUnlockQueue+0x80>)
 8005aec:	b26d      	sxtb	r5, r5
 8005aee:	f100 0624 	add.w	r6, r0, #36	; 0x24
 8005af2:	2d00      	cmp	r5, #0
 8005af4:	dc17      	bgt.n	8005b26 <prvUnlockQueue+0x4e>
 8005af6:	23ff      	movs	r3, #255	; 0xff
 8005af8:	f04f 0801 	mov.w	r8, #1
 8005afc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005b00:	f7ff f828 	bl	8004b54 <vPortExitCritical>
 8005b04:	f7fe fe0e 	bl	8004724 <vPortEnterCritical>
 8005b08:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 8005b0c:	4f12      	ldr	r7, [pc, #72]	; (8005b58 <prvUnlockQueue+0x80>)
 8005b0e:	b26d      	sxtb	r5, r5
 8005b10:	f104 0610 	add.w	r6, r4, #16
 8005b14:	2d00      	cmp	r5, #0
 8005b16:	dc12      	bgt.n	8005b3e <prvUnlockQueue+0x66>
 8005b18:	23ff      	movs	r3, #255	; 0xff
 8005b1a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8005b1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005b22:	f7ff b817 	b.w	8004b54 <vPortExitCritical>
 8005b26:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d0e4      	beq.n	8005af6 <prvUnlockQueue+0x1e>
 8005b2c:	4630      	mov	r0, r6
 8005b2e:	f7ff ff97 	bl	8005a60 <xTaskRemoveFromEventList>
 8005b32:	b108      	cbz	r0, 8005b38 <prvUnlockQueue+0x60>
 8005b34:	f8c7 8000 	str.w	r8, [r7]
 8005b38:	3d01      	subs	r5, #1
 8005b3a:	b26d      	sxtb	r5, r5
 8005b3c:	e7d9      	b.n	8005af2 <prvUnlockQueue+0x1a>
 8005b3e:	6923      	ldr	r3, [r4, #16]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d0e9      	beq.n	8005b18 <prvUnlockQueue+0x40>
 8005b44:	4630      	mov	r0, r6
 8005b46:	f7ff ff8b 	bl	8005a60 <xTaskRemoveFromEventList>
 8005b4a:	b108      	cbz	r0, 8005b50 <prvUnlockQueue+0x78>
 8005b4c:	f8c7 8000 	str.w	r8, [r7]
 8005b50:	3d01      	subs	r5, #1
 8005b52:	b26d      	sxtb	r5, r5
 8005b54:	e7de      	b.n	8005b14 <prvUnlockQueue+0x3c>
 8005b56:	bf00      	nop
 8005b58:	2000164c 	.word	0x2000164c

08005b5c <prvAddCurrentTaskToDelayedList>:
 8005b5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b5e:	4b1a      	ldr	r3, [pc, #104]	; (8005bc8 <prvAddCurrentTaskToDelayedList+0x6c>)
 8005b60:	4d1a      	ldr	r5, [pc, #104]	; (8005bcc <prvAddCurrentTaskToDelayedList+0x70>)
 8005b62:	4606      	mov	r6, r0
 8005b64:	681c      	ldr	r4, [r3, #0]
 8005b66:	6828      	ldr	r0, [r5, #0]
 8005b68:	460f      	mov	r7, r1
 8005b6a:	3004      	adds	r0, #4
 8005b6c:	f7ff fcc5 	bl	80054fa <uxListRemove>
 8005b70:	b940      	cbnz	r0, 8005b84 <prvAddCurrentTaskToDelayedList+0x28>
 8005b72:	682a      	ldr	r2, [r5, #0]
 8005b74:	4916      	ldr	r1, [pc, #88]	; (8005bd0 <prvAddCurrentTaskToDelayedList+0x74>)
 8005b76:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 8005b78:	2201      	movs	r2, #1
 8005b7a:	680b      	ldr	r3, [r1, #0]
 8005b7c:	4082      	lsls	r2, r0
 8005b7e:	ea23 0302 	bic.w	r3, r3, r2
 8005b82:	600b      	str	r3, [r1, #0]
 8005b84:	1c73      	adds	r3, r6, #1
 8005b86:	d107      	bne.n	8005b98 <prvAddCurrentTaskToDelayedList+0x3c>
 8005b88:	b137      	cbz	r7, 8005b98 <prvAddCurrentTaskToDelayedList+0x3c>
 8005b8a:	6829      	ldr	r1, [r5, #0]
 8005b8c:	4811      	ldr	r0, [pc, #68]	; (8005bd4 <prvAddCurrentTaskToDelayedList+0x78>)
 8005b8e:	3104      	adds	r1, #4
 8005b90:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005b94:	f7ff bbd9 	b.w	800534a <vListInsertEnd>
 8005b98:	682b      	ldr	r3, [r5, #0]
 8005b9a:	19a4      	adds	r4, r4, r6
 8005b9c:	605c      	str	r4, [r3, #4]
 8005b9e:	d307      	bcc.n	8005bb0 <prvAddCurrentTaskToDelayedList+0x54>
 8005ba0:	4b0d      	ldr	r3, [pc, #52]	; (8005bd8 <prvAddCurrentTaskToDelayedList+0x7c>)
 8005ba2:	6818      	ldr	r0, [r3, #0]
 8005ba4:	6829      	ldr	r1, [r5, #0]
 8005ba6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005baa:	3104      	adds	r1, #4
 8005bac:	f7ff bc8e 	b.w	80054cc <vListInsert>
 8005bb0:	4b0a      	ldr	r3, [pc, #40]	; (8005bdc <prvAddCurrentTaskToDelayedList+0x80>)
 8005bb2:	6818      	ldr	r0, [r3, #0]
 8005bb4:	6829      	ldr	r1, [r5, #0]
 8005bb6:	3104      	adds	r1, #4
 8005bb8:	f7ff fc88 	bl	80054cc <vListInsert>
 8005bbc:	4b08      	ldr	r3, [pc, #32]	; (8005be0 <prvAddCurrentTaskToDelayedList+0x84>)
 8005bbe:	681a      	ldr	r2, [r3, #0]
 8005bc0:	42a2      	cmp	r2, r4
 8005bc2:	bf88      	it	hi
 8005bc4:	601c      	strhi	r4, [r3, #0]
 8005bc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005bc8:	20001648 	.word	0x20001648
 8005bcc:	200011a8 	.word	0x200011a8
 8005bd0:	20001374 	.word	0x20001374
 8005bd4:	20001620 	.word	0x20001620
 8005bd8:	200011b4 	.word	0x200011b4
 8005bdc:	200011ac 	.word	0x200011ac
 8005be0:	200015f8 	.word	0x200015f8

08005be4 <xQueueSemaphoreTake>:
 8005be4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005be8:	4604      	mov	r4, r0
 8005bea:	9101      	str	r1, [sp, #4]
 8005bec:	b900      	cbnz	r0, 8005bf0 <xQueueSemaphoreTake+0xc>
 8005bee:	e7fe      	b.n	8005bee <xQueueSemaphoreTake+0xa>
 8005bf0:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8005bf2:	b105      	cbz	r5, 8005bf6 <xQueueSemaphoreTake+0x12>
 8005bf4:	e7fe      	b.n	8005bf4 <xQueueSemaphoreTake+0x10>
 8005bf6:	4628      	mov	r0, r5
 8005bf8:	4f98      	ldr	r7, [pc, #608]	; (8005e5c <xQueueSemaphoreTake+0x278>)
 8005bfa:	4e99      	ldr	r6, [pc, #612]	; (8005e60 <xQueueSemaphoreTake+0x27c>)
 8005bfc:	e073      	b.n	8005ce6 <xQueueSemaphoreTake+0x102>
 8005bfe:	9b01      	ldr	r3, [sp, #4]
 8005c00:	b91b      	cbnz	r3, 8005c0a <xQueueSemaphoreTake+0x26>
 8005c02:	2d00      	cmp	r5, #0
 8005c04:	f000 8162 	beq.w	8005ecc <xQueueSemaphoreTake+0x2e8>
 8005c08:	e7fe      	b.n	8005c08 <xQueueSemaphoreTake+0x24>
 8005c0a:	b920      	cbnz	r0, 8005c16 <xQueueSemaphoreTake+0x32>
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	9302      	str	r3, [sp, #8]
 8005c10:	4b94      	ldr	r3, [pc, #592]	; (8005e64 <xQueueSemaphoreTake+0x280>)
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	9303      	str	r3, [sp, #12]
 8005c16:	f7fe ff9d 	bl	8004b54 <vPortExitCritical>
 8005c1a:	f7fe fd1d 	bl	8004658 <vTaskSuspendAll>
 8005c1e:	f7fe fd81 	bl	8004724 <vPortEnterCritical>
 8005c22:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8005c26:	a901      	add	r1, sp, #4
 8005c28:	2bff      	cmp	r3, #255	; 0xff
 8005c2a:	bf04      	itt	eq
 8005c2c:	2300      	moveq	r3, #0
 8005c2e:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
 8005c32:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8005c36:	a802      	add	r0, sp, #8
 8005c38:	2bff      	cmp	r3, #255	; 0xff
 8005c3a:	bf04      	itt	eq
 8005c3c:	2300      	moveq	r3, #0
 8005c3e:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
 8005c42:	f7fe ff87 	bl	8004b54 <vPortExitCritical>
 8005c46:	f7fe ffc9 	bl	8004bdc <xTaskCheckForTimeOut>
 8005c4a:	2800      	cmp	r0, #0
 8005c4c:	f040 80da 	bne.w	8005e04 <xQueueSemaphoreTake+0x220>
 8005c50:	f7fe fd68 	bl	8004724 <vPortEnterCritical>
 8005c54:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d13d      	bne.n	8005cd6 <xQueueSemaphoreTake+0xf2>
 8005c5a:	f7fe ff7b 	bl	8004b54 <vPortExitCritical>
 8005c5e:	6823      	ldr	r3, [r4, #0]
 8005c60:	f8df 8204 	ldr.w	r8, [pc, #516]	; 8005e68 <xQueueSemaphoreTake+0x284>
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	f040 8083 	bne.w	8005d70 <xQueueSemaphoreTake+0x18c>
 8005c6a:	f7fe fd5b 	bl	8004724 <vPortEnterCritical>
 8005c6e:	6865      	ldr	r5, [r4, #4]
 8005c70:	2d00      	cmp	r5, #0
 8005c72:	d07a      	beq.n	8005d6a <xQueueSemaphoreTake+0x186>
 8005c74:	f8d8 2000 	ldr.w	r2, [r8]
 8005c78:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8005c7a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	f080 80b8 	bcs.w	8005df2 <xQueueSemaphoreTake+0x20e>
 8005c82:	f04f 0914 	mov.w	r9, #20
 8005c86:	69aa      	ldr	r2, [r5, #24]
 8005c88:	fb09 6303 	mla	r3, r9, r3, r6
 8005c8c:	2a00      	cmp	r2, #0
 8005c8e:	bfa1      	itttt	ge
 8005c90:	f8d8 2000 	ldrge.w	r2, [r8]
 8005c94:	6ad2      	ldrge	r2, [r2, #44]	; 0x2c
 8005c96:	f1c2 0205 	rsbge	r2, r2, #5
 8005c9a:	61aa      	strge	r2, [r5, #24]
 8005c9c:	696a      	ldr	r2, [r5, #20]
 8005c9e:	429a      	cmp	r2, r3
 8005ca0:	d15e      	bne.n	8005d60 <xQueueSemaphoreTake+0x17c>
 8005ca2:	f105 0a04 	add.w	sl, r5, #4
 8005ca6:	4650      	mov	r0, sl
 8005ca8:	f7ff fc27 	bl	80054fa <uxListRemove>
 8005cac:	4b6f      	ldr	r3, [pc, #444]	; (8005e6c <xQueueSemaphoreTake+0x288>)
 8005cae:	2800      	cmp	r0, #0
 8005cb0:	f000 8090 	beq.w	8005dd4 <xQueueSemaphoreTake+0x1f0>
 8005cb4:	f8d8 2000 	ldr.w	r2, [r8]
 8005cb8:	6818      	ldr	r0, [r3, #0]
 8005cba:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005cbc:	62ea      	str	r2, [r5, #44]	; 0x2c
 8005cbe:	2501      	movs	r5, #1
 8005cc0:	fa05 f102 	lsl.w	r1, r5, r2
 8005cc4:	4301      	orrs	r1, r0
 8005cc6:	2014      	movs	r0, #20
 8005cc8:	6019      	str	r1, [r3, #0]
 8005cca:	fb00 6002 	mla	r0, r0, r2, r6
 8005cce:	4651      	mov	r1, sl
 8005cd0:	f7ff fb3b 	bl	800534a <vListInsertEnd>
 8005cd4:	e048      	b.n	8005d68 <xQueueSemaphoreTake+0x184>
 8005cd6:	4620      	mov	r0, r4
 8005cd8:	f7fe ff3c 	bl	8004b54 <vPortExitCritical>
 8005cdc:	f7ff fefc 	bl	8005ad8 <prvUnlockQueue>
 8005ce0:	f7ff fd08 	bl	80056f4 <xTaskResumeAll>
 8005ce4:	2001      	movs	r0, #1
 8005ce6:	f7fe fd1d 	bl	8004724 <vPortEnterCritical>
 8005cea:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d086      	beq.n	8005bfe <xQueueSemaphoreTake+0x1a>
 8005cf0:	3b01      	subs	r3, #1
 8005cf2:	63a3      	str	r3, [r4, #56]	; 0x38
 8005cf4:	6823      	ldr	r3, [r4, #0]
 8005cf6:	b943      	cbnz	r3, 8005d0a <xQueueSemaphoreTake+0x126>
 8005cf8:	4b5b      	ldr	r3, [pc, #364]	; (8005e68 <xQueueSemaphoreTake+0x284>)
 8005cfa:	681a      	ldr	r2, [r3, #0]
 8005cfc:	b11a      	cbz	r2, 8005d06 <xQueueSemaphoreTake+0x122>
 8005cfe:	6819      	ldr	r1, [r3, #0]
 8005d00:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8005d02:	3201      	adds	r2, #1
 8005d04:	650a      	str	r2, [r1, #80]	; 0x50
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	6063      	str	r3, [r4, #4]
 8005d0a:	6923      	ldr	r3, [r4, #16]
 8005d0c:	b30b      	cbz	r3, 8005d52 <xQueueSemaphoreTake+0x16e>
 8005d0e:	f104 0010 	add.w	r0, r4, #16
 8005d12:	f7ff fea5 	bl	8005a60 <xTaskRemoveFromEventList>
 8005d16:	b1e0      	cbz	r0, 8005d52 <xQueueSemaphoreTake+0x16e>
 8005d18:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005d1c:	4a54      	ldr	r2, [pc, #336]	; (8005e70 <xQueueSemaphoreTake+0x28c>)
 8005d1e:	f8d3 1d20 	ldr.w	r1, [r3, #3360]	; 0xd20
 8005d22:	6011      	str	r1, [r2, #0]
 8005d24:	4a53      	ldr	r2, [pc, #332]	; (8005e74 <xQueueSemaphoreTake+0x290>)
 8005d26:	6812      	ldr	r2, [r2, #0]
 8005d28:	b14a      	cbz	r2, 8005d3e <xQueueSemaphoreTake+0x15a>
 8005d2a:	f8d3 2d20 	ldr.w	r2, [r3, #3360]	; 0xd20
 8005d2e:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
 8005d32:	f8c3 2d20 	str.w	r2, [r3, #3360]	; 0xd20
 8005d36:	f8d3 2d20 	ldr.w	r2, [r3, #3360]	; 0xd20
 8005d3a:	f8c3 2d20 	str.w	r2, [r3, #3360]	; 0xd20
 8005d3e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005d42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d46:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8005d4a:	f3bf 8f4f 	dsb	sy
 8005d4e:	f3bf 8f6f 	isb	sy
 8005d52:	f7fe feff 	bl	8004b54 <vPortExitCritical>
 8005d56:	2501      	movs	r5, #1
 8005d58:	4628      	mov	r0, r5
 8005d5a:	b004      	add	sp, #16
 8005d5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d60:	f8d8 3000 	ldr.w	r3, [r8]
 8005d64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d66:	62eb      	str	r3, [r5, #44]	; 0x2c
 8005d68:	2001      	movs	r0, #1
 8005d6a:	f7fe fef3 	bl	8004b54 <vPortExitCritical>
 8005d6e:	4605      	mov	r5, r0
 8005d70:	f8d8 1000 	ldr.w	r1, [r8]
 8005d74:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8005d78:	3118      	adds	r1, #24
 8005d7a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005d7e:	f7ff fba5 	bl	80054cc <vListInsert>
 8005d82:	2101      	movs	r1, #1
 8005d84:	4648      	mov	r0, r9
 8005d86:	f7ff fee9 	bl	8005b5c <prvAddCurrentTaskToDelayedList>
 8005d8a:	4620      	mov	r0, r4
 8005d8c:	f7ff fea4 	bl	8005ad8 <prvUnlockQueue>
 8005d90:	f7ff fcb0 	bl	80056f4 <xTaskResumeAll>
 8005d94:	2800      	cmp	r0, #0
 8005d96:	d1a5      	bne.n	8005ce4 <xQueueSemaphoreTake+0x100>
 8005d98:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005d9c:	4a34      	ldr	r2, [pc, #208]	; (8005e70 <xQueueSemaphoreTake+0x28c>)
 8005d9e:	f8d3 1d20 	ldr.w	r1, [r3, #3360]	; 0xd20
 8005da2:	6011      	str	r1, [r2, #0]
 8005da4:	4a33      	ldr	r2, [pc, #204]	; (8005e74 <xQueueSemaphoreTake+0x290>)
 8005da6:	6812      	ldr	r2, [r2, #0]
 8005da8:	b14a      	cbz	r2, 8005dbe <xQueueSemaphoreTake+0x1da>
 8005daa:	f8d3 2d20 	ldr.w	r2, [r3, #3360]	; 0xd20
 8005dae:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
 8005db2:	f8c3 2d20 	str.w	r2, [r3, #3360]	; 0xd20
 8005db6:	f8d3 2d20 	ldr.w	r2, [r3, #3360]	; 0xd20
 8005dba:	f8c3 2d20 	str.w	r2, [r3, #3360]	; 0xd20
 8005dbe:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005dc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005dc6:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8005dca:	f3bf 8f4f 	dsb	sy
 8005dce:	f3bf 8f6f 	isb	sy
 8005dd2:	e787      	b.n	8005ce4 <xQueueSemaphoreTake+0x100>
 8005dd4:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8005dd6:	fb09 f900 	mul.w	r9, r9, r0
 8005dda:	f856 2009 	ldr.w	r2, [r6, r9]
 8005dde:	2a00      	cmp	r2, #0
 8005de0:	f47f af68 	bne.w	8005cb4 <xQueueSemaphoreTake+0xd0>
 8005de4:	2101      	movs	r1, #1
 8005de6:	681a      	ldr	r2, [r3, #0]
 8005de8:	4081      	lsls	r1, r0
 8005dea:	ea22 0201 	bic.w	r2, r2, r1
 8005dee:	601a      	str	r2, [r3, #0]
 8005df0:	e760      	b.n	8005cb4 <xQueueSemaphoreTake+0xd0>
 8005df2:	f8d8 3000 	ldr.w	r3, [r8]
 8005df6:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
 8005df8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dfa:	4298      	cmp	r0, r3
 8005dfc:	bf2c      	ite	cs
 8005dfe:	2000      	movcs	r0, #0
 8005e00:	2001      	movcc	r0, #1
 8005e02:	e7b2      	b.n	8005d6a <xQueueSemaphoreTake+0x186>
 8005e04:	4620      	mov	r0, r4
 8005e06:	f7ff fe67 	bl	8005ad8 <prvUnlockQueue>
 8005e0a:	f7ff fc73 	bl	80056f4 <xTaskResumeAll>
 8005e0e:	f7fe fc89 	bl	8004724 <vPortEnterCritical>
 8005e12:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005e14:	b113      	cbz	r3, 8005e1c <xQueueSemaphoreTake+0x238>
 8005e16:	f7fe fe9d 	bl	8004b54 <vPortExitCritical>
 8005e1a:	e763      	b.n	8005ce4 <xQueueSemaphoreTake+0x100>
 8005e1c:	f7fe fe9a 	bl	8004b54 <vPortExitCritical>
 8005e20:	2d00      	cmp	r5, #0
 8005e22:	d099      	beq.n	8005d58 <xQueueSemaphoreTake+0x174>
 8005e24:	f7fe fc7e 	bl	8004724 <vPortEnterCritical>
 8005e28:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005e2a:	b11b      	cbz	r3, 8005e34 <xQueueSemaphoreTake+0x250>
 8005e2c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f1c3 0305 	rsb	r3, r3, #5
 8005e34:	6864      	ldr	r4, [r4, #4]
 8005e36:	2c00      	cmp	r4, #0
 8005e38:	d048      	beq.n	8005ecc <xQueueSemaphoreTake+0x2e8>
 8005e3a:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8005e3c:	b901      	cbnz	r1, 8005e40 <xQueueSemaphoreTake+0x25c>
 8005e3e:	e7fe      	b.n	8005e3e <xQueueSemaphoreTake+0x25a>
 8005e40:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8005e42:	4293      	cmp	r3, r2
 8005e44:	bf38      	it	cc
 8005e46:	4613      	movcc	r3, r2
 8005e48:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d03e      	beq.n	8005ecc <xQueueSemaphoreTake+0x2e8>
 8005e4e:	2901      	cmp	r1, #1
 8005e50:	d13c      	bne.n	8005ecc <xQueueSemaphoreTake+0x2e8>
 8005e52:	4905      	ldr	r1, [pc, #20]	; (8005e68 <xQueueSemaphoreTake+0x284>)
 8005e54:	6809      	ldr	r1, [r1, #0]
 8005e56:	428c      	cmp	r4, r1
 8005e58:	d10e      	bne.n	8005e78 <xQueueSemaphoreTake+0x294>
 8005e5a:	e7fe      	b.n	8005e5a <xQueueSemaphoreTake+0x276>
 8005e5c:	200015fc 	.word	0x200015fc
 8005e60:	200011b8 	.word	0x200011b8
 8005e64:	20001648 	.word	0x20001648
 8005e68:	200011a8 	.word	0x200011a8
 8005e6c:	20001374 	.word	0x20001374
 8005e70:	2000134c 	.word	0x2000134c
 8005e74:	20001358 	.word	0x20001358
 8005e78:	2614      	movs	r6, #20
 8005e7a:	69a1      	ldr	r1, [r4, #24]
 8005e7c:	4f15      	ldr	r7, [pc, #84]	; (8005ed4 <xQueueSemaphoreTake+0x2f0>)
 8005e7e:	2900      	cmp	r1, #0
 8005e80:	fb06 7202 	mla	r2, r6, r2, r7
 8005e84:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005e86:	bfa4      	itt	ge
 8005e88:	f1c3 0305 	rsbge	r3, r3, #5
 8005e8c:	61a3      	strge	r3, [r4, #24]
 8005e8e:	6963      	ldr	r3, [r4, #20]
 8005e90:	4293      	cmp	r3, r2
 8005e92:	d11b      	bne.n	8005ecc <xQueueSemaphoreTake+0x2e8>
 8005e94:	f104 0804 	add.w	r8, r4, #4
 8005e98:	4640      	mov	r0, r8
 8005e9a:	f7ff fb2e 	bl	80054fa <uxListRemove>
 8005e9e:	4d0e      	ldr	r5, [pc, #56]	; (8005ed8 <xQueueSemaphoreTake+0x2f4>)
 8005ea0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005ea2:	b940      	cbnz	r0, 8005eb6 <xQueueSemaphoreTake+0x2d2>
 8005ea4:	4356      	muls	r6, r2
 8005ea6:	59bb      	ldr	r3, [r7, r6]
 8005ea8:	b92b      	cbnz	r3, 8005eb6 <xQueueSemaphoreTake+0x2d2>
 8005eaa:	2101      	movs	r1, #1
 8005eac:	682b      	ldr	r3, [r5, #0]
 8005eae:	4091      	lsls	r1, r2
 8005eb0:	ea23 0301 	bic.w	r3, r3, r1
 8005eb4:	602b      	str	r3, [r5, #0]
 8005eb6:	2301      	movs	r3, #1
 8005eb8:	2014      	movs	r0, #20
 8005eba:	6829      	ldr	r1, [r5, #0]
 8005ebc:	4093      	lsls	r3, r2
 8005ebe:	430b      	orrs	r3, r1
 8005ec0:	fb00 7002 	mla	r0, r0, r2, r7
 8005ec4:	4641      	mov	r1, r8
 8005ec6:	602b      	str	r3, [r5, #0]
 8005ec8:	f7ff fa3f 	bl	800534a <vListInsertEnd>
 8005ecc:	f7fe fe42 	bl	8004b54 <vPortExitCritical>
 8005ed0:	2500      	movs	r5, #0
 8005ed2:	e741      	b.n	8005d58 <xQueueSemaphoreTake+0x174>
 8005ed4:	200011b8 	.word	0x200011b8
 8005ed8:	20001374 	.word	0x20001374

08005edc <i2cAcquireBus>:
 *
 * @param[in] i2cp      pointer to the @p I2CDriver object
 *
 * @api
 */
void i2cAcquireBus(I2CDriver *i2cp) {
 8005edc:	b508      	push	{r3, lr}

  osalDbgCheck(i2cp != NULL);
 8005ede:	b910      	cbnz	r0, 8005ee6 <i2cAcquireBus+0xa>
 8005ee0:	f7fe fc30 	bl	8004744 <vTaskEndScheduler>
 8005ee4:	e7fe      	b.n	8005ee4 <i2cAcquireBus+0x8>
}

static inline void osalMutexLock(mutex_t* mutex)
{
    osalDbgCheck(mutex != NULL);
    xSemaphoreTake(mutex->handle, portMAX_DELAY);
 8005ee6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff

  osalMutexLock(&i2cp->mutex);
}
 8005eea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8005eee:	68c0      	ldr	r0, [r0, #12]
 8005ef0:	f7ff be78 	b.w	8005be4 <xQueueSemaphoreTake>

08005ef4 <vTaskDelay>:
 8005ef4:	b508      	push	{r3, lr}
 8005ef6:	b998      	cbnz	r0, 8005f20 <vTaskDelay+0x2c>
 8005ef8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005efc:	4a14      	ldr	r2, [pc, #80]	; (8005f50 <vTaskDelay+0x5c>)
 8005efe:	f8d3 1d20 	ldr.w	r1, [r3, #3360]	; 0xd20
 8005f02:	6011      	str	r1, [r2, #0]
 8005f04:	4a13      	ldr	r2, [pc, #76]	; (8005f54 <vTaskDelay+0x60>)
 8005f06:	6812      	ldr	r2, [r2, #0]
 8005f08:	b9ba      	cbnz	r2, 8005f3a <vTaskDelay+0x46>
 8005f0a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005f0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f12:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8005f16:	f3bf 8f4f 	dsb	sy
 8005f1a:	f3bf 8f6f 	isb	sy
 8005f1e:	e00b      	b.n	8005f38 <vTaskDelay+0x44>
 8005f20:	4b0d      	ldr	r3, [pc, #52]	; (8005f58 <vTaskDelay+0x64>)
 8005f22:	6819      	ldr	r1, [r3, #0]
 8005f24:	b101      	cbz	r1, 8005f28 <vTaskDelay+0x34>
 8005f26:	e7fe      	b.n	8005f26 <vTaskDelay+0x32>
 8005f28:	f7fe fb96 	bl	8004658 <vTaskSuspendAll>
 8005f2c:	f7ff fe16 	bl	8005b5c <prvAddCurrentTaskToDelayedList>
 8005f30:	f7ff fbe0 	bl	80056f4 <xTaskResumeAll>
 8005f34:	2800      	cmp	r0, #0
 8005f36:	d0df      	beq.n	8005ef8 <vTaskDelay+0x4>
 8005f38:	bd08      	pop	{r3, pc}
 8005f3a:	f8d3 2d20 	ldr.w	r2, [r3, #3360]	; 0xd20
 8005f3e:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
 8005f42:	f8c3 2d20 	str.w	r2, [r3, #3360]	; 0xd20
 8005f46:	f8d3 2d20 	ldr.w	r2, [r3, #3360]	; 0xd20
 8005f4a:	f8c3 2d20 	str.w	r2, [r3, #3360]	; 0xd20
 8005f4e:	e7dc      	b.n	8005f0a <vTaskDelay+0x16>
 8005f50:	2000134c 	.word	0x2000134c
 8005f54:	20001358 	.word	0x20001358
 8005f58:	2000136c 	.word	0x2000136c

08005f5c <packetQueueReadByte.constprop.0>:

#include "packetqueue.h"

static uint8_t packetQueueReadByte(PacketQueue_t* queue)
{
    uint8_t retVal = queue->buffer[queue->readPtr];
 8005f5c:	4b05      	ldr	r3, [pc, #20]	; (8005f74 <packetQueueReadByte.constprop.0+0x18>)
 8005f5e:	689a      	ldr	r2, [r3, #8]
 8005f60:	6819      	ldr	r1, [r3, #0]
 8005f62:	5c88      	ldrb	r0, [r1, r2]

    queue->readPtr++;
    if(queue->readPtr >= queue->bufferSize) {
 8005f64:	6859      	ldr	r1, [r3, #4]
    queue->readPtr++;
 8005f66:	3201      	adds	r2, #1
    if(queue->readPtr >= queue->bufferSize) {
 8005f68:	428a      	cmp	r2, r1
    queue->readPtr++;
 8005f6a:	609a      	str	r2, [r3, #8]
        queue->readPtr = 0;
 8005f6c:	bf24      	itt	cs
 8005f6e:	2200      	movcs	r2, #0
 8005f70:	609a      	strcs	r2, [r3, #8]
    }

    return retVal;
}
 8005f72:	4770      	bx	lr
 8005f74:	20001310 	.word	0x20001310

08005f78 <packetQueueWriteByte.constprop.0>:

static void packetQueueWriteByte(PacketQueue_t* queue, uint8_t byte)
 8005f78:	b570      	push	{r4, r5, r6, lr}
{
    if(queue->pktCount && queue->writePtr == queue->readPtr) {
 8005f7a:	4c15      	ldr	r4, [pc, #84]	; (8005fd0 <packetQueueWriteByte.constprop.0+0x58>)
static void packetQueueWriteByte(PacketQueue_t* queue, uint8_t byte)
 8005f7c:	4605      	mov	r5, r0
    if(queue->pktCount && queue->writePtr == queue->readPtr) {
 8005f7e:	8aa3      	ldrh	r3, [r4, #20]
 8005f80:	b1cb      	cbz	r3, 8005fb6 <packetQueueWriteByte.constprop.0+0x3e>
 8005f82:	68a2      	ldr	r2, [r4, #8]
 8005f84:	6923      	ldr	r3, [r4, #16]
 8005f86:	429a      	cmp	r2, r3
 8005f88:	d115      	bne.n	8005fb6 <packetQueueWriteByte.constprop.0+0x3e>
        /* We are about to overwrite a packet, so discard it */
        uint16_t dropPktLen = (packetQueueReadByte(queue) << 8) |
 8005f8a:	f7ff ffe7 	bl	8005f5c <packetQueueReadByte.constprop.0>
 8005f8e:	4606      	mov	r6, r0
                              (packetQueueReadByte(queue));
 8005f90:	f7ff ffe4 	bl	8005f5c <packetQueueReadByte.constprop.0>
        uint16_t dropPktLen = (packetQueueReadByte(queue) << 8) |
 8005f94:	ea40 2306 	orr.w	r3, r0, r6, lsl #8
        queue->readPtr += dropPktLen;
 8005f98:	68a0      	ldr	r0, [r4, #8]
        if(queue->readPtr >= queue->bufferSize) {
 8005f9a:	6862      	ldr	r2, [r4, #4]
        queue->readPtr += dropPktLen;
 8005f9c:	b29b      	uxth	r3, r3
 8005f9e:	4403      	add	r3, r0
        if(queue->readPtr >= queue->bufferSize) {
 8005fa0:	4293      	cmp	r3, r2
        queue->readPtr += dropPktLen;
 8005fa2:	60a3      	str	r3, [r4, #8]
            queue->readPtr -= queue->bufferSize;
 8005fa4:	bf24      	itt	cs
 8005fa6:	1a9b      	subcs	r3, r3, r2
 8005fa8:	60a3      	strcs	r3, [r4, #8]
        }
        queue->pktCount--;
 8005faa:	8aa3      	ldrh	r3, [r4, #20]
 8005fac:	3b01      	subs	r3, #1
 8005fae:	82a3      	strh	r3, [r4, #20]
        queue->numDropped++;
 8005fb0:	6a23      	ldr	r3, [r4, #32]
 8005fb2:	3301      	adds	r3, #1
 8005fb4:	6223      	str	r3, [r4, #32]
    }

    queue->buffer[queue->writePtr] = byte;
 8005fb6:	6923      	ldr	r3, [r4, #16]
 8005fb8:	6822      	ldr	r2, [r4, #0]
 8005fba:	54d5      	strb	r5, [r2, r3]

    queue->writePtr++;
 8005fbc:	6923      	ldr	r3, [r4, #16]
    if(queue->writePtr >= queue->bufferSize) {
 8005fbe:	6862      	ldr	r2, [r4, #4]
    queue->writePtr++;
 8005fc0:	3301      	adds	r3, #1
    if(queue->writePtr >= queue->bufferSize) {
 8005fc2:	4293      	cmp	r3, r2
    queue->writePtr++;
 8005fc4:	6123      	str	r3, [r4, #16]
        queue->writePtr = 0;
 8005fc6:	bf24      	itt	cs
 8005fc8:	2300      	movcs	r3, #0
 8005fca:	6123      	strcs	r3, [r4, #16]
    }
}
 8005fcc:	bd70      	pop	{r4, r5, r6, pc}
 8005fce:	bf00      	nop
 8005fd0:	20001310 	.word	0x20001310

08005fd4 <packetQueuePutBytes.constprop.0>:
    packetQueueWriteByte(queue, 0x00);
    packetQueueWriteByte(queue, 0x00);
    queue->pktLen = 0;
}

void packetQueuePutBytes(PacketQueue_t* queue, const uint8_t* payload, uint16_t size)
 8005fd4:	b570      	push	{r4, r5, r6, lr}
 8005fd6:	4606      	mov	r6, r0
 8005fd8:	460c      	mov	r4, r1
{
    for(uint32_t i=0; i<size; i++) {
 8005fda:	2500      	movs	r5, #0
 8005fdc:	42a5      	cmp	r5, r4
 8005fde:	d304      	bcc.n	8005fea <packetQueuePutBytes.constprop.0+0x16>
        packetQueueWriteByte(queue, payload[i]);
    }

    queue->pktLen += size;
 8005fe0:	4b04      	ldr	r3, [pc, #16]	; (8005ff4 <packetQueuePutBytes.constprop.0+0x20>)
 8005fe2:	6999      	ldr	r1, [r3, #24]
 8005fe4:	4421      	add	r1, r4
 8005fe6:	6199      	str	r1, [r3, #24]
}
 8005fe8:	bd70      	pop	{r4, r5, r6, pc}
        packetQueueWriteByte(queue, payload[i]);
 8005fea:	5d70      	ldrb	r0, [r6, r5]
 8005fec:	f7ff ffc4 	bl	8005f78 <packetQueueWriteByte.constprop.0>
    for(uint32_t i=0; i<size; i++) {
 8005ff0:	3501      	adds	r5, #1
 8005ff2:	e7f3      	b.n	8005fdc <packetQueuePutBytes.constprop.0+0x8>
 8005ff4:	20001310 	.word	0x20001310

08005ff8 <syslogWrite>:
    packetQueueReset(&syslogQueue);
    xSemaphoreGive(syslogSemaphore);
}

static size_t syslogWrite(void *instance, const uint8_t *bp, size_t n)
{
 8005ff8:	b510      	push	{r4, lr}
 8005ffa:	4614      	mov	r4, r2
 8005ffc:	4608      	mov	r0, r1
    (void)instance;

    packetQueuePutBytes(&syslogQueue, bp, n);
 8005ffe:	b291      	uxth	r1, r2
 8006000:	f7ff ffe8 	bl	8005fd4 <packetQueuePutBytes.constprop.0>

    return n;
}
 8006004:	4620      	mov	r0, r4
 8006006:	bd10      	pop	{r4, pc}

08006008 <syslogPut>:

static msg_t syslogPut(void *instance, uint8_t b)
{
 8006008:	b507      	push	{r0, r1, r2, lr}
 800600a:	f88d 1007 	strb.w	r1, [sp, #7]
    (void)instance;

    packetQueuePutBytes(&syslogQueue, &b, 1);
 800600e:	f10d 0007 	add.w	r0, sp, #7
 8006012:	2101      	movs	r1, #1
 8006014:	f7ff ffde 	bl	8005fd4 <packetQueuePutBytes.constprop.0>

    return MSG_OK;
}
 8006018:	2000      	movs	r0, #0
 800601a:	b003      	add	sp, #12
 800601c:	f85d fb04 	ldr.w	pc, [sp], #4

08006020 <packetQueueEndWritePacket.constprop.0>:

void packetQueueEndWritePacket(PacketQueue_t* queue)
{
    /* Did we write more bytes than the ENTIRE queue? */
    if(queue->pktLen >= queue->bufferSize-2) {
 8006020:	4b13      	ldr	r3, [pc, #76]	; (8006070 <packetQueueEndWritePacket.constprop.0+0x50>)
 8006022:	685a      	ldr	r2, [r3, #4]
 8006024:	6999      	ldr	r1, [r3, #24]
 8006026:	3a02      	subs	r2, #2
 8006028:	4291      	cmp	r1, r2
 800602a:	d309      	bcc.n	8006040 <packetQueueEndWritePacket.constprop.0+0x20>
        queue->numDropped+=queue->pktCount+1;
 800602c:	6a1a      	ldr	r2, [r3, #32]
 800602e:	8a99      	ldrh	r1, [r3, #20]
 8006030:	3201      	adds	r2, #1
 8006032:	440a      	add	r2, r1
 8006034:	621a      	str	r2, [r3, #32]
        queue->pktCount = 0;
 8006036:	2200      	movs	r2, #0
 8006038:	829a      	strh	r2, [r3, #20]
        queue->readPtr = 0;
 800603a:	609a      	str	r2, [r3, #8]
        queue->writePtr = 0;
 800603c:	611a      	str	r2, [r3, #16]
 800603e:	4770      	bx	lr
        return;
    }

    /* Packet too long? */
    if(queue->pktLen > 0xffff) {
 8006040:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
        queue->writePtr = queue->lenHeaderStart;
 8006044:	69da      	ldr	r2, [r3, #28]
    if(queue->pktLen > 0xffff) {
 8006046:	d304      	bcc.n	8006052 <packetQueueEndWritePacket.constprop.0+0x32>
        queue->writePtr = queue->lenHeaderStart;
 8006048:	611a      	str	r2, [r3, #16]
        queue->numDropped++;
 800604a:	6a1a      	ldr	r2, [r3, #32]
 800604c:	3201      	adds	r2, #1
 800604e:	621a      	str	r2, [r3, #32]
 8006050:	4770      	bx	lr
        return;
    }

    uint32_t hdrIndex = queue->lenHeaderStart;
    queue->buffer[hdrIndex] = queue->pktLen >> 8;
 8006052:	6818      	ldr	r0, [r3, #0]
 8006054:	0a09      	lsrs	r1, r1, #8
 8006056:	5481      	strb	r1, [r0, r2]
    hdrIndex++;
    if(hdrIndex >= queue->bufferSize) {
 8006058:	6859      	ldr	r1, [r3, #4]
    hdrIndex++;
 800605a:	3201      	adds	r2, #1
        hdrIndex = 0;
 800605c:	428a      	cmp	r2, r1
 800605e:	bf28      	it	cs
 8006060:	2200      	movcs	r2, #0
    }
    queue->buffer[hdrIndex] = queue->pktLen & 0xff;
 8006062:	6998      	ldr	r0, [r3, #24]
 8006064:	6819      	ldr	r1, [r3, #0]
 8006066:	5488      	strb	r0, [r1, r2]
    queue->pktCount++;
 8006068:	8a9a      	ldrh	r2, [r3, #20]
 800606a:	3201      	adds	r2, #1
 800606c:	829a      	strh	r2, [r3, #20]
}
 800606e:	4770      	bx	lr
 8006070:	20001310 	.word	0x20001310

08006074 <vTaskDelete.constprop.0>:
 8006074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006076:	4d2f      	ldr	r5, [pc, #188]	; (8006134 <vTaskDelete.constprop.0+0xc0>)
 8006078:	f7fe fb54 	bl	8004724 <vPortEnterCritical>
 800607c:	682c      	ldr	r4, [r5, #0]
 800607e:	1d26      	adds	r6, r4, #4
 8006080:	4630      	mov	r0, r6
 8006082:	f7ff fa3a 	bl	80054fa <uxListRemove>
 8006086:	b960      	cbnz	r0, 80060a2 <vTaskDelete.constprop.0+0x2e>
 8006088:	2014      	movs	r0, #20
 800608a:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800608c:	4b2a      	ldr	r3, [pc, #168]	; (8006138 <vTaskDelete.constprop.0+0xc4>)
 800608e:	4378      	muls	r0, r7
 8006090:	581b      	ldr	r3, [r3, r0]
 8006092:	b933      	cbnz	r3, 80060a2 <vTaskDelete.constprop.0+0x2e>
 8006094:	2201      	movs	r2, #1
 8006096:	4929      	ldr	r1, [pc, #164]	; (800613c <vTaskDelete.constprop.0+0xc8>)
 8006098:	40ba      	lsls	r2, r7
 800609a:	680b      	ldr	r3, [r1, #0]
 800609c:	ea23 0302 	bic.w	r3, r3, r2
 80060a0:	600b      	str	r3, [r1, #0]
 80060a2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80060a4:	b11b      	cbz	r3, 80060ae <vTaskDelete.constprop.0+0x3a>
 80060a6:	f104 0018 	add.w	r0, r4, #24
 80060aa:	f7ff fa26 	bl	80054fa <uxListRemove>
 80060ae:	4a24      	ldr	r2, [pc, #144]	; (8006140 <vTaskDelete.constprop.0+0xcc>)
 80060b0:	6813      	ldr	r3, [r2, #0]
 80060b2:	3301      	adds	r3, #1
 80060b4:	6013      	str	r3, [r2, #0]
 80060b6:	682b      	ldr	r3, [r5, #0]
 80060b8:	429c      	cmp	r4, r3
 80060ba:	d113      	bne.n	80060e4 <vTaskDelete.constprop.0+0x70>
 80060bc:	4631      	mov	r1, r6
 80060be:	4821      	ldr	r0, [pc, #132]	; (8006144 <vTaskDelete.constprop.0+0xd0>)
 80060c0:	f7ff f943 	bl	800534a <vListInsertEnd>
 80060c4:	4a20      	ldr	r2, [pc, #128]	; (8006148 <vTaskDelete.constprop.0+0xd4>)
 80060c6:	6813      	ldr	r3, [r2, #0]
 80060c8:	3301      	adds	r3, #1
 80060ca:	6013      	str	r3, [r2, #0]
 80060cc:	f7fe fd42 	bl	8004b54 <vPortExitCritical>
 80060d0:	4b1e      	ldr	r3, [pc, #120]	; (800614c <vTaskDelete.constprop.0+0xd8>)
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	b36b      	cbz	r3, 8006132 <vTaskDelete.constprop.0+0xbe>
 80060d6:	682b      	ldr	r3, [r5, #0]
 80060d8:	429c      	cmp	r4, r3
 80060da:	d12a      	bne.n	8006132 <vTaskDelete.constprop.0+0xbe>
 80060dc:	4b1c      	ldr	r3, [pc, #112]	; (8006150 <vTaskDelete.constprop.0+0xdc>)
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	b153      	cbz	r3, 80060f8 <vTaskDelete.constprop.0+0x84>
 80060e2:	e7fe      	b.n	80060e2 <vTaskDelete.constprop.0+0x6e>
 80060e4:	4a1b      	ldr	r2, [pc, #108]	; (8006154 <vTaskDelete.constprop.0+0xe0>)
 80060e6:	4620      	mov	r0, r4
 80060e8:	6813      	ldr	r3, [r2, #0]
 80060ea:	3b01      	subs	r3, #1
 80060ec:	6013      	str	r3, [r2, #0]
 80060ee:	f7ff fc2b 	bl	8005948 <prvDeleteTCB>
 80060f2:	f7fe fad7 	bl	80046a4 <prvResetNextTaskUnblockTime>
 80060f6:	e7e9      	b.n	80060cc <vTaskDelete.constprop.0+0x58>
 80060f8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80060fc:	4a16      	ldr	r2, [pc, #88]	; (8006158 <vTaskDelete.constprop.0+0xe4>)
 80060fe:	f8d3 1d20 	ldr.w	r1, [r3, #3360]	; 0xd20
 8006102:	6011      	str	r1, [r2, #0]
 8006104:	4a15      	ldr	r2, [pc, #84]	; (800615c <vTaskDelete.constprop.0+0xe8>)
 8006106:	6812      	ldr	r2, [r2, #0]
 8006108:	b14a      	cbz	r2, 800611e <vTaskDelete.constprop.0+0xaa>
 800610a:	f8d3 2d20 	ldr.w	r2, [r3, #3360]	; 0xd20
 800610e:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
 8006112:	f8c3 2d20 	str.w	r2, [r3, #3360]	; 0xd20
 8006116:	f8d3 2d20 	ldr.w	r2, [r3, #3360]	; 0xd20
 800611a:	f8c3 2d20 	str.w	r2, [r3, #3360]	; 0xd20
 800611e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8006122:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006126:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800612a:	f3bf 8f4f 	dsb	sy
 800612e:	f3bf 8f6f 	isb	sy
 8006132:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006134:	200011a8 	.word	0x200011a8
 8006138:	200011b8 	.word	0x200011b8
 800613c:	20001374 	.word	0x20001374
 8006140:	20001370 	.word	0x20001370
 8006144:	20001634 	.word	0x20001634
 8006148:	20001360 	.word	0x20001360
 800614c:	20001614 	.word	0x20001614
 8006150:	2000136c 	.word	0x2000136c
 8006154:	2000135c 	.word	0x2000135c
 8006158:	2000134c 	.word	0x2000134c
 800615c:	20001358 	.word	0x20001358

08006160 <runInThreadBody>:
{
 8006160:	b508      	push	{r3, lr}
    func();
 8006162:	4780      	blx	r0
}
 8006164:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    vTaskDelete(NULL);
 8006168:	f7ff bf84 	b.w	8006074 <vTaskDelete.constprop.0>

0800616c <_usb_reset.constprop.0>:
void _usb_reset(USBDriver *usbp) {
 800616c:	b570      	push	{r4, r5, r6, lr}
  usbp->status        = 0;
 800616e:	2500      	movs	r5, #0
  usbp->state         = USB_READY;
 8006170:	2302      	movs	r3, #2
 8006172:	4c16      	ldr	r4, [pc, #88]	; (80061cc <_usb_reset.constprop.0+0x60>)
    usbp->epc[i] = NULL;
 8006174:	2220      	movs	r2, #32
 8006176:	4629      	mov	r1, r5
 8006178:	f104 000c 	add.w	r0, r4, #12
  usbp->state         = USB_READY;
 800617c:	7023      	strb	r3, [r4, #0]
  usbp->status        = 0;
 800617e:	67e5      	str	r5, [r4, #124]	; 0x7c
  usbp->transmitting  = 0;
 8006180:	60a5      	str	r5, [r4, #8]
    usbp->epc[i] = NULL;
 8006182:	f005 fb47 	bl	800b814 <memset>
  STM32_USB->DADDR  = DADDR_EF;
 8006186:	2280      	movs	r2, #128	; 0x80
  STM32_USB->BTABLE = BTABLE_ADDR;
 8006188:	4b11      	ldr	r3, [pc, #68]	; (80061d0 <_usb_reset.constprop.0+0x64>)
  usbp->ep0state = USB_EP0_WAITING_SETUP;
 800618a:	f884 5064 	strb.w	r5, [r4, #100]	; 0x64
 800618e:	651d      	str	r5, [r3, #80]	; 0x50
  STM32_USB->ISTR   = 0;
 8006190:	645d      	str	r5, [r3, #68]	; 0x44
  STM32_USB->DADDR  = DADDR_EF;
 8006192:	64da      	str	r2, [r3, #76]	; 0x4c
  if (usbp->config->sof_cb != NULL)
 8006194:	6862      	ldr	r2, [r4, #4]
  usb_lld_init_endpoint(usbp, 0);
 8006196:	4629      	mov	r1, r5
  if (usbp->config->sof_cb != NULL)
 8006198:	68d2      	ldr	r2, [r2, #12]
  usb_lld_init_endpoint(usbp, 0);
 800619a:	4620      	mov	r0, r4
    cntr |= CNTR_SOFM;
 800619c:	42aa      	cmp	r2, r5
 800619e:	bf0c      	ite	eq
 80061a0:	f44f 421c 	moveq.w	r2, #39936	; 0x9c00
 80061a4:	f44f 421e 	movne.w	r2, #40448	; 0x9e00
  STM32_USB->CNTR = cntr;
 80061a8:	641a      	str	r2, [r3, #64]	; 0x40
  usbp->pmnext = 64;
 80061aa:	2340      	movs	r3, #64	; 0x40
 80061ac:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  usbp->epc[0] = &ep0config;
 80061b0:	4b08      	ldr	r3, [pc, #32]	; (80061d4 <_usb_reset.constprop.0+0x68>)
 80061b2:	60e3      	str	r3, [r4, #12]
  usb_lld_init_endpoint(usbp, 0);
 80061b4:	f7fe fc46 	bl	8004a44 <usb_lld_init_endpoint>
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_RESET);
 80061b8:	6863      	ldr	r3, [r4, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	b123      	cbz	r3, 80061c8 <_usb_reset.constprop.0+0x5c>
 80061be:	4629      	mov	r1, r5
 80061c0:	4620      	mov	r0, r4
}
 80061c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_RESET);
 80061c6:	4718      	bx	r3
}
 80061c8:	bd70      	pop	{r4, r5, r6, pc}
 80061ca:	bf00      	nop
 80061cc:	20000f54 	.word	0x20000f54
 80061d0:	40005c00 	.word	0x40005c00
 80061d4:	0800c9bc 	.word	0x0800c9bc

080061d8 <Vector90>:
OSAL_IRQ_HANDLER(STM32_USB1_LP_HANDLER) {
 80061d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  istr = STM32_USB->ISTR;
 80061dc:	4d92      	ldr	r5, [pc, #584]	; (8006428 <Vector90+0x250>)
 80061de:	6c6c      	ldr	r4, [r5, #68]	; 0x44
  if (istr & ISTR_RESET) {
 80061e0:	0566      	lsls	r6, r4, #21
 80061e2:	d504      	bpl.n	80061ee <Vector90+0x16>
    STM32_USB->ISTR = ~ISTR_RESET;
 80061e4:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 80061e8:	646b      	str	r3, [r5, #68]	; 0x44
    _usb_reset(usbp);
 80061ea:	f7ff ffbf 	bl	800616c <_usb_reset.constprop.0>
  if (istr & ISTR_SUSP) {
 80061ee:	0520      	lsls	r0, r4, #20
 80061f0:	d511      	bpl.n	8006216 <Vector90+0x3e>
    STM32_USB->CNTR |= CNTR_FSUSP;
 80061f2:	6c2b      	ldr	r3, [r5, #64]	; 0x40
  usbp->saved_state = usbp->state;
 80061f4:	488d      	ldr	r0, [pc, #564]	; (800642c <Vector90+0x254>)
 80061f6:	f043 0308 	orr.w	r3, r3, #8
 80061fa:	642b      	str	r3, [r5, #64]	; 0x40
    STM32_USB->ISTR = ~ISTR_SUSP;
 80061fc:	f46f 6300 	mvn.w	r3, #2048	; 0x800
 8006200:	646b      	str	r3, [r5, #68]	; 0x44
 8006202:	7803      	ldrb	r3, [r0, #0]
 8006204:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  usbp->state       = USB_SUSPENDED;
 8006208:	2305      	movs	r3, #5
 800620a:	7003      	strb	r3, [r0, #0]
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_SUSPEND);
 800620c:	6843      	ldr	r3, [r0, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	b10b      	cbz	r3, 8006216 <Vector90+0x3e>
 8006212:	2104      	movs	r1, #4
 8006214:	4798      	blx	r3
  if (istr & ISTR_WKUP) {
 8006216:	04e1      	lsls	r1, r4, #19
 8006218:	d514      	bpl.n	8006244 <Vector90+0x6c>
    uint32_t fnr = STM32_USB->FNR;
 800621a:	4b83      	ldr	r3, [pc, #524]	; (8006428 <Vector90+0x250>)
 800621c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    if (!(fnr & FNR_RXDP)) {
 800621e:	0412      	lsls	r2, r2, #16
 8006220:	d40c      	bmi.n	800623c <Vector90+0x64>
      STM32_USB->CNTR &= ~CNTR_FSUSP;
 8006222:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  usbp->state = usbp->saved_state;
 8006224:	4881      	ldr	r0, [pc, #516]	; (800642c <Vector90+0x254>)
 8006226:	f022 0208 	bic.w	r2, r2, #8
 800622a:	641a      	str	r2, [r3, #64]	; 0x40
 800622c:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8006230:	7003      	strb	r3, [r0, #0]
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_WAKEUP);
 8006232:	6843      	ldr	r3, [r0, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	b10b      	cbz	r3, 800623c <Vector90+0x64>
 8006238:	2105      	movs	r1, #5
 800623a:	4798      	blx	r3
    STM32_USB->ISTR = ~ISTR_WKUP;
 800623c:	f46f 5280 	mvn.w	r2, #4096	; 0x1000
 8006240:	4b79      	ldr	r3, [pc, #484]	; (8006428 <Vector90+0x250>)
 8006242:	645a      	str	r2, [r3, #68]	; 0x44
  if (istr & ISTR_SOF) {
 8006244:	05a3      	lsls	r3, r4, #22
 8006246:	d508      	bpl.n	800625a <Vector90+0x82>
    _usb_isr_invoke_sof_cb(usbp);
 8006248:	4878      	ldr	r0, [pc, #480]	; (800642c <Vector90+0x254>)
 800624a:	6843      	ldr	r3, [r0, #4]
 800624c:	68db      	ldr	r3, [r3, #12]
 800624e:	b103      	cbz	r3, 8006252 <Vector90+0x7a>
 8006250:	4798      	blx	r3
    STM32_USB->ISTR = ~ISTR_SOF;
 8006252:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8006256:	4b74      	ldr	r3, [pc, #464]	; (8006428 <Vector90+0x250>)
 8006258:	645a      	str	r2, [r3, #68]	; 0x44
  const USBEndpointConfig *epcp = usbp->epc[ep];
 800625a:	4e74      	ldr	r6, [pc, #464]	; (800642c <Vector90+0x254>)
    EPR_CLEAR_CTR_TX(ep);
 800625c:	4d74      	ldr	r5, [pc, #464]	; (8006430 <Vector90+0x258>)
  while (istr & ISTR_CTR) {
 800625e:	f414 4100 	ands.w	r1, r4, #32768	; 0x8000
 8006262:	d122      	bne.n	80062aa <Vector90+0xd2>
 8006264:	4b73      	ldr	r3, [pc, #460]	; (8006434 <Vector90+0x25c>)
 8006266:	681a      	ldr	r2, [r3, #0]
 8006268:	6019      	str	r1, [r3, #0]
  OSAL_IRQ_EPILOGUE();
 800626a:	b1e2      	cbz	r2, 80062a6 <Vector90+0xce>
 800626c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8006270:	4a71      	ldr	r2, [pc, #452]	; (8006438 <Vector90+0x260>)
 8006272:	f8d3 1d20 	ldr.w	r1, [r3, #3360]	; 0xd20
 8006276:	6011      	str	r1, [r2, #0]
 8006278:	4a70      	ldr	r2, [pc, #448]	; (800643c <Vector90+0x264>)
 800627a:	6812      	ldr	r2, [r2, #0]
 800627c:	b14a      	cbz	r2, 8006292 <Vector90+0xba>
 800627e:	f8d3 2d20 	ldr.w	r2, [r3, #3360]	; 0xd20
 8006282:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
 8006286:	f8c3 2d20 	str.w	r2, [r3, #3360]	; 0xd20
 800628a:	f8d3 2d20 	ldr.w	r2, [r3, #3360]	; 0xd20
 800628e:	f8c3 2d20 	str.w	r2, [r3, #3360]	; 0xd20
 8006292:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8006296:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800629a:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800629e:	f3bf 8f4f 	dsb	sy
 80062a2:	f3bf 8f6f 	isb	sy
}
 80062a6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    usb_serve_endpoints(usbp, istr & ISTR_EP_ID_MASK);
 80062aa:	f004 040f 	and.w	r4, r4, #15
static void usb_serve_endpoints(USBDriver *usbp, uint32_t ep) {
 80062ae:	00a7      	lsls	r7, r4, #2
 80062b0:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80062b4:	f507 47b8 	add.w	r7, r7, #23552	; 0x5c00
  uint32_t epr = STM32_USB->EPR[ep];
 80062b8:	f8d7 a000 	ldr.w	sl, [r7]
  const USBEndpointConfig *epcp = usbp->epc[ep];
 80062bc:	f104 0902 	add.w	r9, r4, #2
 80062c0:	eb06 0389 	add.w	r3, r6, r9, lsl #2
  if (epr & EPR_CTR_TX) {
 80062c4:	f01a 0f80 	tst.w	sl, #128	; 0x80
  const USBEndpointConfig *epcp = usbp->epc[ep];
 80062c8:	f8d3 8004 	ldr.w	r8, [r3, #4]
  if (epr & EPR_CTR_TX) {
 80062cc:	d025      	beq.n	800631a <Vector90+0x142>
    EPR_CLEAR_CTR_TX(ep);
 80062ce:	683a      	ldr	r2, [r7, #0]
    USBInEndpointState *isp = epcp->in_state;
 80062d0:	f8d8 3014 	ldr.w	r3, [r8, #20]
    EPR_CLEAR_CTR_TX(ep);
 80062d4:	402a      	ands	r2, r5
 80062d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80062da:	603a      	str	r2, [r7, #0]
    isp->txcnt += isp->txlast;
 80062dc:	68d9      	ldr	r1, [r3, #12]
 80062de:	685a      	ldr	r2, [r3, #4]
    n = isp->txsize - isp->txcnt;
 80062e0:	6818      	ldr	r0, [r3, #0]
    isp->txcnt += isp->txlast;
 80062e2:	440a      	add	r2, r1
    if (n > 0) {
 80062e4:	1a80      	subs	r0, r0, r2
    isp->txcnt += isp->txlast;
 80062e6:	605a      	str	r2, [r3, #4]
    if (n > 0) {
 80062e8:	d02c      	beq.n	8006344 <Vector90+0x16c>
      if (n > epcp->in_maxsize)
 80062ea:	f8b8 2010 	ldrh.w	r2, [r8, #16]
 80062ee:	4282      	cmp	r2, r0
 80062f0:	bf28      	it	cs
 80062f2:	4602      	movcs	r2, r0
      isp->txbuf += isp->txlast;
 80062f4:	6898      	ldr	r0, [r3, #8]
 80062f6:	4401      	add	r1, r0
      isp->txlast = n;
 80062f8:	e9c3 1202 	strd	r1, r2, [r3, #8]
      usb_packet_write_from_buffer(ep, isp->txbuf, n);
 80062fc:	4620      	mov	r0, r4
 80062fe:	f7fd ff33 	bl	8004168 <usb_packet_write_from_buffer>
      EPR_SET_STAT_TX(ep, EPR_STAT_TX_VALID);
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
 8006308:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800630c:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 8006310:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006314:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006318:	603b      	str	r3, [r7, #0]
  if (epr & EPR_CTR_RX) {
 800631a:	f41a 4f00 	tst.w	sl, #32768	; 0x8000
 800631e:	d06a      	beq.n	80063f6 <Vector90+0x21e>
    EPR_CLEAR_CTR_RX(ep);
 8006320:	683b      	ldr	r3, [r7, #0]
    if (epr & EPR_SETUP) {
 8006322:	f41a 6f00 	tst.w	sl, #2048	; 0x800
    EPR_CLEAR_CTR_RX(ep);
 8006326:	ea03 0305 	and.w	r3, r3, r5
 800632a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800632e:	603b      	str	r3, [r7, #0]
      usb_packet_write_from_buffer(ep, isp->txbuf, n);
 8006330:	b2e1      	uxtb	r1, r4
    if (epr & EPR_SETUP) {
 8006332:	d016      	beq.n	8006362 <Vector90+0x18a>
      _usb_isr_invoke_setup_cb(usbp, ep);
 8006334:	eb06 0989 	add.w	r9, r6, r9, lsl #2
 8006338:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800633c:	685b      	ldr	r3, [r3, #4]
        _usb_isr_invoke_out_cb(usbp, ep);
 800633e:	4630      	mov	r0, r6
 8006340:	4798      	blx	r3
 8006342:	e058      	b.n	80063f6 <Vector90+0x21e>
      _usb_isr_invoke_in_cb(usbp, ep);
 8006344:	2301      	movs	r3, #1
 8006346:	fa03 f204 	lsl.w	r2, r3, r4
 800634a:	8933      	ldrh	r3, [r6, #8]
 800634c:	ea23 0302 	bic.w	r3, r3, r2
 8006350:	8133      	strh	r3, [r6, #8]
 8006352:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d0df      	beq.n	800631a <Vector90+0x142>
 800635a:	4621      	mov	r1, r4
 800635c:	4630      	mov	r0, r6
 800635e:	4798      	blx	r3
 8006360:	e7db      	b.n	800631a <Vector90+0x142>
      USBOutEndpointState *osp = epcp->out_state;
 8006362:	f8d8 2018 	ldr.w	r2, [r8, #24]
  stm32_usb_descriptor_t *udp = USB_GET_DESCRIPTOR(ep);
 8006366:	4b30      	ldr	r3, [pc, #192]	; (8006428 <Vector90+0x250>)
      n = usb_packet_read_to_buffer(ep, osp->rxbuf);
 8006368:	f8d2 c008 	ldr.w	ip, [r2, #8]
  stm32_usb_descriptor_t *udp = USB_GET_DESCRIPTOR(ep);
 800636c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800636e:	46e1      	mov	r9, ip
 8006370:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006374:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8006378:	eb03 1004 	add.w	r0, r3, r4, lsl #4
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->RXADDR0);
 800637c:	6883      	ldr	r3, [r0, #8]
  n = (size_t)udp->RXCOUNT0 & RXCOUNT_COUNT_MASK;
 800637e:	f8d0 e00c 	ldr.w	lr, [r0, #12]
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->RXADDR0);
 8006382:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
  n = (size_t)udp->RXCOUNT0 & RXCOUNT_COUNT_MASK;
 8006386:	f3ce 0009 	ubfx	r0, lr, #0, #10
 800638a:	f3ce 0e48 	ubfx	lr, lr, #1, #9
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->RXADDR0);
 800638e:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
  while (i >= 2) {
 8006392:	ea4f 0a8e 	mov.w	sl, lr, lsl #2
 8006396:	eb0a 0a43 	add.w	sl, sl, r3, lsl #1
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->RXADDR0);
 800639a:	005b      	lsls	r3, r3, #1
  while (i >= 2) {
 800639c:	4553      	cmp	r3, sl
 800639e:	f109 0902 	add.w	r9, r9, #2
 80063a2:	d12b      	bne.n	80063fc <Vector90+0x224>
  if (i >= 1) {
 80063a4:	f06f 0901 	mvn.w	r9, #1
 80063a8:	fb09 090e 	mla	r9, r9, lr, r0
 80063ac:	f1b9 0f00 	cmp.w	r9, #0
 80063b0:	d002      	beq.n	80063b8 <Vector90+0x1e0>
    *buf = (uint8_t)*pmap;
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f80c 301e 	strb.w	r3, [ip, lr, lsl #1]
      osp->rxbuf += n;
 80063b8:	6893      	ldr	r3, [r2, #8]
 80063ba:	4403      	add	r3, r0
 80063bc:	6093      	str	r3, [r2, #8]
      osp->rxcnt  += n;
 80063be:	6853      	ldr	r3, [r2, #4]
 80063c0:	4403      	add	r3, r0
 80063c2:	6053      	str	r3, [r2, #4]
      osp->rxsize -= n;
 80063c4:	6813      	ldr	r3, [r2, #0]
 80063c6:	1a1b      	subs	r3, r3, r0
 80063c8:	6013      	str	r3, [r2, #0]
      osp->rxpkts -= 1;
 80063ca:	8993      	ldrh	r3, [r2, #12]
 80063cc:	3b01      	subs	r3, #1
 80063ce:	b29b      	uxth	r3, r3
 80063d0:	8193      	strh	r3, [r2, #12]
      if ((n < epcp->out_maxsize) || (osp->rxpkts == 0)) {
 80063d2:	f8b8 2012 	ldrh.w	r2, [r8, #18]
 80063d6:	4282      	cmp	r2, r0
 80063d8:	d800      	bhi.n	80063dc <Vector90+0x204>
 80063da:	b9c3      	cbnz	r3, 800640e <Vector90+0x236>
        _usb_isr_invoke_out_cb(usbp, ep);
 80063dc:	2301      	movs	r3, #1
 80063de:	fa03 f204 	lsl.w	r2, r3, r4
 80063e2:	8973      	ldrh	r3, [r6, #10]
 80063e4:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 80063e8:	ea23 0302 	bic.w	r3, r3, r2
 80063ec:	8173      	strh	r3, [r6, #10]
 80063ee:	68e3      	ldr	r3, [r4, #12]
 80063f0:	68db      	ldr	r3, [r3, #12]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d1a3      	bne.n	800633e <Vector90+0x166>
    istr = STM32_USB->ISTR;
 80063f6:	4b0c      	ldr	r3, [pc, #48]	; (8006428 <Vector90+0x250>)
 80063f8:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 80063fa:	e730      	b.n	800625e <Vector90+0x86>
    uint32_t w = *pmap++;
 80063fc:	f853 bb04 	ldr.w	fp, [r3], #4
    *buf++ = (uint8_t)w;
 8006400:	f809 bc02 	strb.w	fp, [r9, #-2]
    *buf++ = (uint8_t)(w >> 8);
 8006404:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8006408:	f809 bc01 	strb.w	fp, [r9, #-1]
    i -= 2;
 800640c:	e7c6      	b.n	800639c <Vector90+0x1c4>
        EPR_SET_STAT_RX(ep, EPR_STAT_RX_VALID);
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8006414:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006418:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 800641c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006420:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006424:	603b      	str	r3, [r7, #0]
 8006426:	e7e6      	b.n	80063f6 <Vector90+0x21e>
 8006428:	40005c00 	.word	0x40005c00
 800642c:	20000f54 	.word	0x20000f54
 8006430:	ffff070f 	.word	0xffff070f
 8006434:	2000164c 	.word	0x2000164c
 8006438:	2000134c 	.word	0x2000134c
 800643c:	20001358 	.word	0x20001358

08006440 <dmaStreamAllocate.constprop.0>:
bool dmaStreamAllocate(const stm32_dma_stream_t *dmastp,
 8006440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  osalDbgCheck(dmastp != NULL);
 8006442:	b910      	cbnz	r0, 800644a <dmaStreamAllocate.constprop.0+0xa>
 8006444:	f7fe f97e 	bl	8004744 <vTaskEndScheduler>
 8006448:	e7fe      	b.n	8006448 <dmaStreamAllocate.constprop.0+0x8>
  if ((dma_streams_mask & (1U << dmastp->selfindex)) != 0U)
 800644a:	2301      	movs	r3, #1
 800644c:	4e1f      	ldr	r6, [pc, #124]	; (80064cc <dmaStreamAllocate.constprop.0+0x8c>)
 800644e:	7c47      	ldrb	r7, [r0, #17]
 8006450:	6835      	ldr	r5, [r6, #0]
 8006452:	fa03 f407 	lsl.w	r4, r3, r7
 8006456:	422c      	tst	r4, r5
 8006458:	d135      	bne.n	80064c6 <dmaStreamAllocate.constprop.0+0x86>
  _stm32_dma_isr_redir[dmastp->selfindex].dma_func  = func;
 800645a:	4b1d      	ldr	r3, [pc, #116]	; (80064d0 <dmaStreamAllocate.constprop.0+0x90>)
 800645c:	f843 1037 	str.w	r1, [r3, r7, lsl #3]
  _stm32_dma_isr_redir[dmastp->selfindex].dma_param = param;
 8006460:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006464:	605a      	str	r2, [r3, #4]
  if ((dma_streams_mask & STM32_DMA1_STREAMS_MASK) == 0U) {
 8006466:	066b      	lsls	r3, r5, #25
    rccEnableDMA1(false);
 8006468:	bf08      	it	eq
 800646a:	4a1a      	ldreq	r2, [pc, #104]	; (80064d4 <dmaStreamAllocate.constprop.0+0x94>)
  dmaStreamDisable(dmastp);
 800646c:	6801      	ldr	r1, [r0, #0]
    rccEnableDMA1(false);
 800646e:	bf02      	ittt	eq
 8006470:	6953      	ldreq	r3, [r2, #20]
 8006472:	f043 0301 	orreq.w	r3, r3, #1
 8006476:	6153      	streq	r3, [r2, #20]
  dmaStreamDisable(dmastp);
 8006478:	6843      	ldr	r3, [r0, #4]
 800647a:	681a      	ldr	r2, [r3, #0]
 800647c:	f022 020f 	bic.w	r2, r2, #15
 8006480:	601a      	str	r2, [r3, #0]
 8006482:	220e      	movs	r2, #14
 8006484:	7c07      	ldrb	r7, [r0, #16]
 8006486:	40ba      	lsls	r2, r7
 8006488:	604a      	str	r2, [r1, #4]
  dmastp->channel->CCR = STM32_DMA_CCR_RESET_VALUE;
 800648a:	2200      	movs	r2, #0
 800648c:	601a      	str	r2, [r3, #0]
  if (((dma_streams_mask & dmastp->cmask) == 0U) &&
 800648e:	6883      	ldr	r3, [r0, #8]
 8006490:	421d      	tst	r5, r3
 8006492:	d114      	bne.n	80064be <dmaStreamAllocate.constprop.0+0x7e>
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8006494:	21c0      	movs	r1, #192	; 0xc0
    nvicEnableVector(dmastp->vector, priority);
 8006496:	7c83      	ldrb	r3, [r0, #18]
 8006498:	f103 4260 	add.w	r2, r3, #3758096384	; 0xe0000000
 800649c:	f502 4261 	add.w	r2, r2, #57600	; 0xe100
 80064a0:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80064a4:	2201      	movs	r2, #1
 80064a6:	f003 011f 	and.w	r1, r3, #31
 80064aa:	095b      	lsrs	r3, r3, #5
 80064ac:	009b      	lsls	r3, r3, #2
 80064ae:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 80064b2:	408a      	lsls	r2, r1
 80064b4:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
 80064b8:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 80064bc:	601a      	str	r2, [r3, #0]
  return false;
 80064be:	2000      	movs	r0, #0
  dma_streams_mask |= (1U << dmastp->selfindex);
 80064c0:	432c      	orrs	r4, r5
 80064c2:	6034      	str	r4, [r6, #0]
}
 80064c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return true;
 80064c6:	4618      	mov	r0, r3
 80064c8:	e7fc      	b.n	80064c4 <dmaStreamAllocate.constprop.0+0x84>
 80064ca:	bf00      	nop
 80064cc:	20001044 	.word	0x20001044
 80064d0:	20000fe8 	.word	0x20000fe8
 80064d4:	40021000 	.word	0x40021000

080064d8 <xTaskNotifyWait.constprop.0>:
 80064d8:	b570      	push	{r4, r5, r6, lr}
 80064da:	4c27      	ldr	r4, [pc, #156]	; (8006578 <xTaskNotifyWait.constprop.0+0xa0>)
 80064dc:	4606      	mov	r6, r0
 80064de:	460d      	mov	r5, r1
 80064e0:	4610      	mov	r0, r2
 80064e2:	f7fe f91f 	bl	8004724 <vPortEnterCritical>
 80064e6:	6823      	ldr	r3, [r4, #0]
 80064e8:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 80064ec:	2b02      	cmp	r3, #2
 80064ee:	d028      	beq.n	8006542 <xTaskNotifyWait.constprop.0+0x6a>
 80064f0:	2101      	movs	r1, #1
 80064f2:	6822      	ldr	r2, [r4, #0]
 80064f4:	6e13      	ldr	r3, [r2, #96]	; 0x60
 80064f6:	ea23 0306 	bic.w	r3, r3, r6
 80064fa:	6613      	str	r3, [r2, #96]	; 0x60
 80064fc:	6823      	ldr	r3, [r4, #0]
 80064fe:	f883 1064 	strb.w	r1, [r3, #100]	; 0x64
 8006502:	b1f0      	cbz	r0, 8006542 <xTaskNotifyWait.constprop.0+0x6a>
 8006504:	f7ff fb2a 	bl	8005b5c <prvAddCurrentTaskToDelayedList>
 8006508:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800650c:	4a1b      	ldr	r2, [pc, #108]	; (800657c <xTaskNotifyWait.constprop.0+0xa4>)
 800650e:	f8d3 1d20 	ldr.w	r1, [r3, #3360]	; 0xd20
 8006512:	6011      	str	r1, [r2, #0]
 8006514:	4a1a      	ldr	r2, [pc, #104]	; (8006580 <xTaskNotifyWait.constprop.0+0xa8>)
 8006516:	6812      	ldr	r2, [r2, #0]
 8006518:	b14a      	cbz	r2, 800652e <xTaskNotifyWait.constprop.0+0x56>
 800651a:	f8d3 2d20 	ldr.w	r2, [r3, #3360]	; 0xd20
 800651e:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
 8006522:	f8c3 2d20 	str.w	r2, [r3, #3360]	; 0xd20
 8006526:	f8d3 2d20 	ldr.w	r2, [r3, #3360]	; 0xd20
 800652a:	f8c3 2d20 	str.w	r2, [r3, #3360]	; 0xd20
 800652e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8006532:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006536:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800653a:	f3bf 8f4f 	dsb	sy
 800653e:	f3bf 8f6f 	isb	sy
 8006542:	f7fe fb07 	bl	8004b54 <vPortExitCritical>
 8006546:	f7fe f8ed 	bl	8004724 <vPortEnterCritical>
 800654a:	6823      	ldr	r3, [r4, #0]
 800654c:	2000      	movs	r0, #0
 800654e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006550:	602b      	str	r3, [r5, #0]
 8006552:	6823      	ldr	r3, [r4, #0]
 8006554:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8006558:	2b02      	cmp	r3, #2
 800655a:	bf04      	itt	eq
 800655c:	6823      	ldreq	r3, [r4, #0]
 800655e:	6e1a      	ldreq	r2, [r3, #96]	; 0x60
 8006560:	f04f 0200 	mov.w	r2, #0
 8006564:	bf08      	it	eq
 8006566:	6618      	streq	r0, [r3, #96]	; 0x60
 8006568:	6823      	ldr	r3, [r4, #0]
 800656a:	bf08      	it	eq
 800656c:	2001      	moveq	r0, #1
 800656e:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 8006572:	f7fe faef 	bl	8004b54 <vPortExitCritical>
 8006576:	bd70      	pop	{r4, r5, r6, pc}
 8006578:	200011a8 	.word	0x200011a8
 800657c:	2000134c 	.word	0x2000134c
 8006580:	20001358 	.word	0x20001358

08006584 <taskPeriodicMon>:
{
 8006584:	b507      	push	{r0, r1, r2, lr}
        MonitorEntry* entry = monThreadFirst;
 8006586:	4e0d      	ldr	r6, [pc, #52]	; (80065bc <taskPeriodicMon+0x38>)
        bool workToCome = false;
 8006588:	2500      	movs	r5, #0
        MonitorEntry* entry = monThreadFirst;
 800658a:	6834      	ldr	r4, [r6, #0]
        while(entry) {
 800658c:	b95c      	cbnz	r4, 80065a6 <taskPeriodicMon+0x22>
        if(!workToCome) {
 800658e:	b92d      	cbnz	r5, 800659c <taskPeriodicMon+0x18>
            xTaskNotifyWait(0, ULONG_MAX, (uint32_t*)&ulInterruptStatus, portMAX_DELAY);
 8006590:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006594:	4628      	mov	r0, r5
 8006596:	a901      	add	r1, sp, #4
 8006598:	f7ff ff9e 	bl	80064d8 <xTaskNotifyWait.constprop.0>
        osalThreadSleepSeconds(10);
 800659c:	f242 7010 	movw	r0, #10000	; 0x2710
 80065a0:	f7ff fca8 	bl	8005ef4 <vTaskDelay>
    for(;;) {
 80065a4:	e7f0      	b.n	8006588 <taskPeriodicMon+0x4>
            if(entry->active) {
 80065a6:	7c23      	ldrb	r3, [r4, #16]
 80065a8:	b12b      	cbz	r3, 80065b6 <taskPeriodicMon+0x32>
                if(entry->callback) {
 80065aa:	6823      	ldr	r3, [r4, #0]
 80065ac:	b11b      	cbz	r3, 80065b6 <taskPeriodicMon+0x32>
                    entry->active = entry->callback(entry->param);
 80065ae:	6860      	ldr	r0, [r4, #4]
 80065b0:	4798      	blx	r3
 80065b2:	7420      	strb	r0, [r4, #16]
                    workToCome |= entry->active;
 80065b4:	4305      	orrs	r5, r0
            entry = entry->next;
 80065b6:	68a4      	ldr	r4, [r4, #8]
 80065b8:	e7e8      	b.n	800658c <taskPeriodicMon+0x8>
 80065ba:	bf00      	nop
 80065bc:	200011a0 	.word	0x200011a0

080065c0 <osalThreadSuspendTimeoutS>:
 80065c0:	b513      	push	{r0, r1, r4, lr}
 80065c2:	4604      	mov	r4, r0
 80065c4:	4608      	mov	r0, r1
 80065c6:	f3ef 8311 	mrs	r3, BASEPRI
 80065ca:	b12b      	cbz	r3, 80065d8 <osalThreadSuspendTimeoutS+0x18>
 80065cc:	f3ef 8305 	mrs	r3, IPSR
 80065d0:	b12b      	cbz	r3, 80065de <osalThreadSuspendTimeoutS+0x1e>
 80065d2:	f7fe f8b7 	bl	8004744 <vTaskEndScheduler>
 80065d6:	e7fe      	b.n	80065d6 <osalThreadSuspendTimeoutS+0x16>
 80065d8:	f7fe f8b4 	bl	8004744 <vTaskEndScheduler>
 80065dc:	e7fe      	b.n	80065dc <osalThreadSuspendTimeoutS+0x1c>
 80065de:	b181      	cbz	r1, 8006602 <osalThreadSuspendTimeoutS+0x42>
 80065e0:	b134      	cbz	r4, 80065f0 <osalThreadSuspendTimeoutS+0x30>
 80065e2:	f7fe f89f 	bl	8004724 <vPortEnterCritical>
 80065e6:	4b0a      	ldr	r3, [pc, #40]	; (8006610 <osalThreadSuspendTimeoutS+0x50>)
 80065e8:	6819      	ldr	r1, [r3, #0]
 80065ea:	f7fe fab3 	bl	8004b54 <vPortExitCritical>
 80065ee:	6021      	str	r1, [r4, #0]
 80065f0:	4602      	mov	r2, r0
 80065f2:	a901      	add	r1, sp, #4
 80065f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80065f8:	f7ff ff6e 	bl	80064d8 <xTaskNotifyWait.constprop.0>
 80065fc:	b920      	cbnz	r0, 8006608 <osalThreadSuspendTimeoutS+0x48>
 80065fe:	b104      	cbz	r4, 8006602 <osalThreadSuspendTimeoutS+0x42>
 8006600:	6020      	str	r0, [r4, #0]
 8006602:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006606:	e000      	b.n	800660a <osalThreadSuspendTimeoutS+0x4a>
 8006608:	9801      	ldr	r0, [sp, #4]
 800660a:	b002      	add	sp, #8
 800660c:	bd10      	pop	{r4, pc}
 800660e:	bf00      	nop
 8006610:	200011a8 	.word	0x200011a8

08006614 <spiReceive.part.0>:
 * @param[in] n         number of words to receive
 * @param[out] rxbuf    the pointer to the receive buffer
 *
 * @api
 */
void spiReceive(SPIDriver *spip, size_t n, void *rxbuf) {
 8006614:	b570      	push	{r4, r5, r6, lr}
 8006616:	460d      	mov	r5, r1
 8006618:	4616      	mov	r6, r2

  osalDbgCheck((spip != NULL) && (n > 0U) && (rxbuf != NULL));

  osalSysLock();
 800661a:	f7fe f883 	bl	8004724 <vPortEnterCritical>
  osalDbgAssert(spip->state == SPI_READY, "not ready");
 800661e:	7803      	ldrb	r3, [r0, #0]
 8006620:	2b02      	cmp	r3, #2
 8006622:	d002      	beq.n	800662a <spiReceive.part.0+0x16>
 8006624:	f7fe f88e 	bl	8004744 <vTaskEndScheduler>
 8006628:	e7fe      	b.n	8006628 <spiReceive.part.0+0x14>
  osalDbgAssert(spip->config->end_cb == NULL, "has callback");
 800662a:	6843      	ldr	r3, [r0, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	b113      	cbz	r3, 8006636 <spiReceive.part.0+0x22>
 8006630:	f7fe f888 	bl	8004744 <vTaskEndScheduler>
 8006634:	e7fe      	b.n	8006634 <spiReceive.part.0+0x20>
  spiStartReceiveI(spip, n, rxbuf);
 8006636:	2303      	movs	r3, #3
 8006638:	7003      	strb	r3, [r0, #0]
 */
void spi_lld_receive(SPIDriver *spip, size_t n, void *rxbuf) {

  osalDbgAssert(n < 65536, "unsupported DMA transfer size");

  dmaStreamSetMemory0(spip->dmarx, rxbuf);
 800663a:	6e43      	ldr	r3, [r0, #100]	; 0x64
  dmaStreamSetTransactionSize(spip->dmarx, n);
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode | STM32_DMA_CR_MINC);

  dmaStreamSetMemory0(spip->dmatx, &dummytx);
 800663c:	4a0f      	ldr	r2, [pc, #60]	; (800667c <spiReceive.part.0+0x68>)
  dmaStreamSetMemory0(spip->dmarx, rxbuf);
 800663e:	685c      	ldr	r4, [r3, #4]
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode | STM32_DMA_CR_MINC);
 8006640:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
  dmaStreamSetMemory0(spip->dmarx, rxbuf);
 8006642:	60e6      	str	r6, [r4, #12]
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode | STM32_DMA_CR_MINC);
 8006644:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  dmaStreamSetTransactionSize(spip->dmarx, n);
 8006648:	6065      	str	r5, [r4, #4]
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode | STM32_DMA_CR_MINC);
 800664a:	6023      	str	r3, [r4, #0]
  dmaStreamSetMemory0(spip->dmatx, &dummytx);
 800664c:	6e83      	ldr	r3, [r0, #104]	; 0x68
 800664e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006652:	685b      	ldr	r3, [r3, #4]
 8006654:	3008      	adds	r0, #8
 8006656:	60da      	str	r2, [r3, #12]
  dmaStreamSetTransactionSize(spip->dmatx, n);
  dmaStreamSetMode(spip->dmatx, spip->txdmamode);
 8006658:	6e82      	ldr	r2, [r0, #104]	; 0x68
  dmaStreamSetTransactionSize(spip->dmatx, n);
 800665a:	605d      	str	r5, [r3, #4]
  dmaStreamSetMode(spip->dmatx, spip->txdmamode);
 800665c:	601a      	str	r2, [r3, #0]

  dmaStreamEnable(spip->dmarx);
 800665e:	6822      	ldr	r2, [r4, #0]
 8006660:	f042 0201 	orr.w	r2, r2, #1
 8006664:	6022      	str	r2, [r4, #0]
  dmaStreamEnable(spip->dmatx);
 8006666:	681a      	ldr	r2, [r3, #0]
 8006668:	f042 0201 	orr.w	r2, r2, #1
 800666c:	601a      	str	r2, [r3, #0]
 800666e:	f7ff ffa7 	bl	80065c0 <osalThreadSuspendTimeoutS>
  (void) osalThreadSuspendS(&spip->thread);
  osalSysUnlock();
}
 8006672:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  osalSysUnlock();
 8006676:	f7fe ba79 	b.w	8004b6c <osalSysUnlock.lto_priv.0>
 800667a:	bf00      	nop
 800667c:	0800c9b8 	.word	0x0800c9b8

08006680 <osalThreadEnqueueTimeoutS>:
 8006680:	b570      	push	{r4, r5, r6, lr}
 8006682:	4605      	mov	r5, r0
 8006684:	4608      	mov	r0, r1
 8006686:	2900      	cmp	r1, #0
 8006688:	d03f      	beq.n	800670a <osalThreadEnqueueTimeoutS+0x8a>
 800668a:	b915      	cbnz	r5, 8006692 <osalThreadEnqueueTimeoutS+0x12>
 800668c:	f7fe f85a 	bl	8004744 <vTaskEndScheduler>
 8006690:	e7fe      	b.n	8006690 <osalThreadEnqueueTimeoutS+0x10>
 8006692:	f3ef 8311 	mrs	r3, BASEPRI
 8006696:	2b00      	cmp	r3, #0
 8006698:	d034      	beq.n	8006704 <osalThreadEnqueueTimeoutS+0x84>
 800669a:	f3ef 8305 	mrs	r3, IPSR
 800669e:	b113      	cbz	r3, 80066a6 <osalThreadEnqueueTimeoutS+0x26>
 80066a0:	f7fe f850 	bl	8004744 <vTaskEndScheduler>
 80066a4:	e7fe      	b.n	80066a4 <osalThreadEnqueueTimeoutS+0x24>
 80066a6:	4e1a      	ldr	r6, [pc, #104]	; (8006710 <osalThreadEnqueueTimeoutS+0x90>)
 80066a8:	f7fe f83c 	bl	8004724 <vPortEnterCritical>
 80066ac:	6834      	ldr	r4, [r6, #0]
 80066ae:	f7fe fa51 	bl	8004b54 <vPortExitCritical>
 80066b2:	682b      	ldr	r3, [r5, #0]
 80066b4:	b9e4      	cbnz	r4, 80066f0 <osalThreadEnqueueTimeoutS+0x70>
 80066b6:	6832      	ldr	r2, [r6, #0]
 80066b8:	6553      	str	r3, [r2, #84]	; 0x54
 80066ba:	b9dc      	cbnz	r4, 80066f4 <osalThreadEnqueueTimeoutS+0x74>
 80066bc:	6832      	ldr	r2, [r6, #0]
 80066be:	2100      	movs	r1, #0
 80066c0:	6591      	str	r1, [r2, #88]	; 0x58
 80066c2:	b103      	cbz	r3, 80066c6 <osalThreadEnqueueTimeoutS+0x46>
 80066c4:	659c      	str	r4, [r3, #88]	; 0x58
 80066c6:	686b      	ldr	r3, [r5, #4]
 80066c8:	602c      	str	r4, [r5, #0]
 80066ca:	b903      	cbnz	r3, 80066ce <osalThreadEnqueueTimeoutS+0x4e>
 80066cc:	606c      	str	r4, [r5, #4]
 80066ce:	4601      	mov	r1, r0
 80066d0:	2000      	movs	r0, #0
 80066d2:	f7ff ff75 	bl	80065c0 <osalThreadSuspendTimeoutS>
 80066d6:	1c43      	adds	r3, r0, #1
 80066d8:	d109      	bne.n	80066ee <osalThreadEnqueueTimeoutS+0x6e>
 80066da:	b96c      	cbnz	r4, 80066f8 <osalThreadEnqueueTimeoutS+0x78>
 80066dc:	6833      	ldr	r3, [r6, #0]
 80066de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066e0:	b904      	cbnz	r4, 80066e4 <osalThreadEnqueueTimeoutS+0x64>
 80066e2:	6834      	ldr	r4, [r6, #0]
 80066e4:	6da2      	ldr	r2, [r4, #88]	; 0x58
 80066e6:	b14b      	cbz	r3, 80066fc <osalThreadEnqueueTimeoutS+0x7c>
 80066e8:	659a      	str	r2, [r3, #88]	; 0x58
 80066ea:	b14a      	cbz	r2, 8006700 <osalThreadEnqueueTimeoutS+0x80>
 80066ec:	6553      	str	r3, [r2, #84]	; 0x54
 80066ee:	bd70      	pop	{r4, r5, r6, pc}
 80066f0:	4622      	mov	r2, r4
 80066f2:	e7e1      	b.n	80066b8 <osalThreadEnqueueTimeoutS+0x38>
 80066f4:	4622      	mov	r2, r4
 80066f6:	e7e2      	b.n	80066be <osalThreadEnqueueTimeoutS+0x3e>
 80066f8:	4623      	mov	r3, r4
 80066fa:	e7f0      	b.n	80066de <osalThreadEnqueueTimeoutS+0x5e>
 80066fc:	606a      	str	r2, [r5, #4]
 80066fe:	e7f4      	b.n	80066ea <osalThreadEnqueueTimeoutS+0x6a>
 8006700:	602b      	str	r3, [r5, #0]
 8006702:	e7f4      	b.n	80066ee <osalThreadEnqueueTimeoutS+0x6e>
 8006704:	f7fe f81e 	bl	8004744 <vTaskEndScheduler>
 8006708:	e7fe      	b.n	8006708 <osalThreadEnqueueTimeoutS+0x88>
 800670a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800670e:	e7ee      	b.n	80066ee <osalThreadEnqueueTimeoutS+0x6e>
 8006710:	200011a8 	.word	0x200011a8

08006714 <ibqGetFullBufferTimeoutS>:
                                 systime_t timeout) {
 8006714:	b538      	push	{r3, r4, r5, lr}
 8006716:	4604      	mov	r4, r0
 8006718:	460d      	mov	r5, r1
	__asm volatile( "mrs %0, basepri" : "=r"( ulBasePri ) );
 800671a:	f3ef 8311 	mrs	r3, BASEPRI
	return (ulBasePri > 0)? pdTRUE : pdFALSE;
 800671e:	b12b      	cbz	r3, 800672c <ibqGetFullBufferTimeoutS+0x18>
	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 8006720:	f3ef 8305 	mrs	r3, IPSR
	if( ulCurrentInterrupt == 0 )
 8006724:	b16b      	cbz	r3, 8006742 <ibqGetFullBufferTimeoutS+0x2e>
  osalDbgCheckClassS();
 8006726:	f7fe f80d 	bl	8004744 <vTaskEndScheduler>
 800672a:	e7fe      	b.n	800672a <ibqGetFullBufferTimeoutS+0x16>
 800672c:	f7fe f80a 	bl	8004744 <vTaskEndScheduler>
 8006730:	e7fe      	b.n	8006730 <ibqGetFullBufferTimeoutS+0x1c>
    if (ibqp->suspended) {
 8006732:	7a23      	ldrb	r3, [r4, #8]
 8006734:	b9ab      	cbnz	r3, 8006762 <ibqGetFullBufferTimeoutS+0x4e>
    msg_t msg = osalThreadEnqueueTimeoutS(&ibqp->waiting, timeout);
 8006736:	4629      	mov	r1, r5
 8006738:	4620      	mov	r0, r4
 800673a:	f7ff ffa1 	bl	8006680 <osalThreadEnqueueTimeoutS>
    if (msg < MSG_OK) {
 800673e:	2800      	cmp	r0, #0
 8006740:	db0e      	blt.n	8006760 <ibqGetFullBufferTimeoutS+0x4c>
  while (ibqIsEmptyI(ibqp)) {
 8006742:	68e3      	ldr	r3, [r4, #12]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d0f4      	beq.n	8006732 <ibqGetFullBufferTimeoutS+0x1e>
  osalDbgAssert(!ibqIsEmptyI(ibqp), "still empty");
 8006748:	68e3      	ldr	r3, [r4, #12]
 800674a:	b913      	cbnz	r3, 8006752 <ibqGetFullBufferTimeoutS+0x3e>
 800674c:	f7fd fffa 	bl	8004744 <vTaskEndScheduler>
 8006750:	e7fe      	b.n	8006750 <ibqGetFullBufferTimeoutS+0x3c>
  return MSG_OK;
 8006752:	2000      	movs	r0, #0
  ibqp->ptr = ibqp->brdptr + sizeof (size_t);
 8006754:	6962      	ldr	r2, [r4, #20]
 8006756:	1d13      	adds	r3, r2, #4
  ibqp->top = ibqp->ptr + *((size_t *)ibqp->brdptr);
 8006758:	6812      	ldr	r2, [r2, #0]
  ibqp->ptr = ibqp->brdptr + sizeof (size_t);
 800675a:	62a3      	str	r3, [r4, #40]	; 0x28
  ibqp->top = ibqp->ptr + *((size_t *)ibqp->brdptr);
 800675c:	4413      	add	r3, r2
 800675e:	62e3      	str	r3, [r4, #44]	; 0x2c
}
 8006760:	bd38      	pop	{r3, r4, r5, pc}
      return MSG_RESET;
 8006762:	f06f 0001 	mvn.w	r0, #1
 8006766:	e7fb      	b.n	8006760 <ibqGetFullBufferTimeoutS+0x4c>

08006768 <ibqGetTimeout>:
msg_t ibqGetTimeout(input_buffers_queue_t *ibqp, systime_t timeout) {
 8006768:	b538      	push	{r3, r4, r5, lr}
 800676a:	460d      	mov	r5, r1
  osalSysLock();
 800676c:	f7fd ffda 	bl	8004724 <vPortEnterCritical>
  if (ibqp->ptr == NULL) {
 8006770:	6a83      	ldr	r3, [r0, #40]	; 0x28
msg_t ibqGetTimeout(input_buffers_queue_t *ibqp, systime_t timeout) {
 8006772:	4604      	mov	r4, r0
  if (ibqp->ptr == NULL) {
 8006774:	b943      	cbnz	r3, 8006788 <ibqGetTimeout+0x20>
    msg = ibqGetFullBufferTimeoutS(ibqp, timeout);
 8006776:	4629      	mov	r1, r5
 8006778:	f7ff ffcc 	bl	8006714 <ibqGetFullBufferTimeoutS>
    if (msg != MSG_OK) {
 800677c:	4605      	mov	r5, r0
 800677e:	b118      	cbz	r0, 8006788 <ibqGetTimeout+0x20>
  osalSysUnlock();
 8006780:	f7fe f9f4 	bl	8004b6c <osalSysUnlock.lto_priv.0>
}
 8006784:	4628      	mov	r0, r5
 8006786:	bd38      	pop	{r3, r4, r5, pc}
  msg = (msg_t)*ibqp->ptr;
 8006788:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  if (ibqp->ptr >= ibqp->top) {
 800678a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  msg = (msg_t)*ibqp->ptr;
 800678c:	f813 5b01 	ldrb.w	r5, [r3], #1
  if (ibqp->ptr >= ibqp->top) {
 8006790:	4293      	cmp	r3, r2
  ibqp->ptr++;
 8006792:	62a3      	str	r3, [r4, #40]	; 0x28
  if (ibqp->ptr >= ibqp->top) {
 8006794:	d3f4      	bcc.n	8006780 <ibqGetTimeout+0x18>
    ibqReleaseEmptyBufferS(ibqp);
 8006796:	4620      	mov	r0, r4
 8006798:	f7fd ffe0 	bl	800475c <ibqReleaseEmptyBufferS>
 800679c:	e7f0      	b.n	8006780 <ibqGetTimeout+0x18>

0800679e <_get.lto_priv.1>:
  return ibqGetTimeout(&((SerialUSBDriver *)ip)->ibqueue, TIME_INFINITE);
 800679e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80067a2:	3018      	adds	r0, #24
 80067a4:	f7ff bfe0 	b.w	8006768 <ibqGetTimeout>

080067a8 <_gett.lto_priv.1>:
  return ibqGetTimeout(&((SerialUSBDriver *)ip)->ibqueue, timeout);
 80067a8:	3018      	adds	r0, #24
 80067aa:	f7ff bfdd 	b.w	8006768 <ibqGetTimeout>

080067ae <obqGetEmptyBufferTimeoutS>:
                                systime_t timeout) {
 80067ae:	b538      	push	{r3, r4, r5, lr}
 80067b0:	4604      	mov	r4, r0
 80067b2:	460d      	mov	r5, r1
	__asm volatile( "mrs %0, basepri" : "=r"( ulBasePri ) );
 80067b4:	f3ef 8311 	mrs	r3, BASEPRI
	return (ulBasePri > 0)? pdTRUE : pdFALSE;
 80067b8:	b12b      	cbz	r3, 80067c6 <obqGetEmptyBufferTimeoutS+0x18>
	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 80067ba:	f3ef 8305 	mrs	r3, IPSR
	if( ulCurrentInterrupt == 0 )
 80067be:	b16b      	cbz	r3, 80067dc <obqGetEmptyBufferTimeoutS+0x2e>
  osalDbgCheckClassS();
 80067c0:	f7fd ffc0 	bl	8004744 <vTaskEndScheduler>
 80067c4:	e7fe      	b.n	80067c4 <obqGetEmptyBufferTimeoutS+0x16>
 80067c6:	f7fd ffbd 	bl	8004744 <vTaskEndScheduler>
 80067ca:	e7fe      	b.n	80067ca <obqGetEmptyBufferTimeoutS+0x1c>
    if (obqp->suspended) {
 80067cc:	7a23      	ldrb	r3, [r4, #8]
 80067ce:	b9ab      	cbnz	r3, 80067fc <obqGetEmptyBufferTimeoutS+0x4e>
    msg_t msg = osalThreadEnqueueTimeoutS(&obqp->waiting, timeout);
 80067d0:	4629      	mov	r1, r5
 80067d2:	4620      	mov	r0, r4
 80067d4:	f7ff ff54 	bl	8006680 <osalThreadEnqueueTimeoutS>
    if (msg < MSG_OK) {
 80067d8:	2800      	cmp	r0, #0
 80067da:	db0e      	blt.n	80067fa <obqGetEmptyBufferTimeoutS+0x4c>
  while (obqIsFullI(obqp)) {
 80067dc:	68e3      	ldr	r3, [r4, #12]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d0f4      	beq.n	80067cc <obqGetEmptyBufferTimeoutS+0x1e>
  osalDbgAssert(!obqIsFullI(obqp), "still full");
 80067e2:	68e3      	ldr	r3, [r4, #12]
 80067e4:	b913      	cbnz	r3, 80067ec <obqGetEmptyBufferTimeoutS+0x3e>
 80067e6:	f7fd ffad 	bl	8004744 <vTaskEndScheduler>
 80067ea:	e7fe      	b.n	80067ea <obqGetEmptyBufferTimeoutS+0x3c>
  return MSG_OK;
 80067ec:	2000      	movs	r0, #0
  obqp->ptr = obqp->bwrptr + sizeof (size_t);
 80067ee:	6923      	ldr	r3, [r4, #16]
 80067f0:	1d1a      	adds	r2, r3, #4
 80067f2:	62a2      	str	r2, [r4, #40]	; 0x28
  obqp->top = obqp->bwrptr + obqp->bsize;
 80067f4:	69e2      	ldr	r2, [r4, #28]
 80067f6:	4413      	add	r3, r2
 80067f8:	62e3      	str	r3, [r4, #44]	; 0x2c
}
 80067fa:	bd38      	pop	{r3, r4, r5, pc}
      return MSG_RESET;
 80067fc:	f06f 0001 	mvn.w	r0, #1
 8006800:	e7fb      	b.n	80067fa <obqGetEmptyBufferTimeoutS+0x4c>

08006802 <obqPutTimeout>:
                    systime_t timeout) {
 8006802:	b570      	push	{r4, r5, r6, lr}
 8006804:	460d      	mov	r5, r1
 8006806:	4616      	mov	r6, r2
  osalSysLock();
 8006808:	f7fd ff8c 	bl	8004724 <vPortEnterCritical>
  if (obqp->ptr == NULL) {
 800680c:	6a83      	ldr	r3, [r0, #40]	; 0x28
                    systime_t timeout) {
 800680e:	4604      	mov	r4, r0
  if (obqp->ptr == NULL) {
 8006810:	b933      	cbnz	r3, 8006820 <obqPutTimeout+0x1e>
    msg = obqGetEmptyBufferTimeoutS(obqp, timeout);
 8006812:	4631      	mov	r1, r6
 8006814:	f7ff ffcb 	bl	80067ae <obqGetEmptyBufferTimeoutS>
    if (msg != MSG_OK) {
 8006818:	b110      	cbz	r0, 8006820 <obqPutTimeout+0x1e>
      osalSysUnlock();
 800681a:	f7fe f9a7 	bl	8004b6c <osalSysUnlock.lto_priv.0>
}
 800681e:	bd70      	pop	{r4, r5, r6, pc}
  *obqp->ptr = b;
 8006820:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006822:	701d      	strb	r5, [r3, #0]
  obqp->ptr++;
 8006824:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  if (obqp->ptr >= obqp->top) {
 8006826:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  obqp->ptr++;
 8006828:	3301      	adds	r3, #1
  if (obqp->ptr >= obqp->top) {
 800682a:	4293      	cmp	r3, r2
  obqp->ptr++;
 800682c:	62a3      	str	r3, [r4, #40]	; 0x28
  if (obqp->ptr >= obqp->top) {
 800682e:	d304      	bcc.n	800683a <obqPutTimeout+0x38>
    obqPostFullBufferS(obqp, obqp->bsize - sizeof (size_t));
 8006830:	69e1      	ldr	r1, [r4, #28]
 8006832:	4620      	mov	r0, r4
 8006834:	3904      	subs	r1, #4
 8006836:	f7fd ffcb 	bl	80047d0 <obqPostFullBufferS>
  osalSysUnlock();
 800683a:	f7fe f997 	bl	8004b6c <osalSysUnlock.lto_priv.0>
  return MSG_OK;
 800683e:	2000      	movs	r0, #0
 8006840:	e7ed      	b.n	800681e <obqPutTimeout+0x1c>

08006842 <_put.lto_priv.1>:
  if(sdup->config->sofCallback) sdup->config->sofCallback(sdup->config->usbp, true);
 8006842:	f8d0 2498 	ldr.w	r2, [r0, #1176]	; 0x498
static msg_t _put(void *ip, uint8_t b) {
 8006846:	b538      	push	{r3, r4, r5, lr}
  if(sdup->config->sofCallback) sdup->config->sofCallback(sdup->config->usbp, true);
 8006848:	6893      	ldr	r3, [r2, #8]
static msg_t _put(void *ip, uint8_t b) {
 800684a:	4604      	mov	r4, r0
 800684c:	460d      	mov	r5, r1
  if(sdup->config->sofCallback) sdup->config->sofCallback(sdup->config->usbp, true);
 800684e:	b113      	cbz	r3, 8006856 <_put.lto_priv.1+0x14>
 8006850:	2101      	movs	r1, #1
 8006852:	6810      	ldr	r0, [r2, #0]
 8006854:	4798      	blx	r3
  return obqPutTimeout(&((SerialUSBDriver *)ip)->obqueue, b, TIME_INFINITE);
 8006856:	4629      	mov	r1, r5
 8006858:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800685c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
}
 8006860:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return obqPutTimeout(&((SerialUSBDriver *)ip)->obqueue, b, TIME_INFINITE);
 8006864:	f7ff bfcd 	b.w	8006802 <obqPutTimeout>

08006868 <_putt.lto_priv.1>:
static msg_t _putt(void *ip, uint8_t b, systime_t timeout) {
 8006868:	b570      	push	{r4, r5, r6, lr}
 800686a:	4616      	mov	r6, r2
  if(sdup->config->sofCallback) sdup->config->sofCallback(sdup->config->usbp, true);
 800686c:	f8d0 2498 	ldr.w	r2, [r0, #1176]	; 0x498
static msg_t _putt(void *ip, uint8_t b, systime_t timeout) {
 8006870:	4604      	mov	r4, r0
  if(sdup->config->sofCallback) sdup->config->sofCallback(sdup->config->usbp, true);
 8006872:	6893      	ldr	r3, [r2, #8]
static msg_t _putt(void *ip, uint8_t b, systime_t timeout) {
 8006874:	460d      	mov	r5, r1
  if(sdup->config->sofCallback) sdup->config->sofCallback(sdup->config->usbp, true);
 8006876:	b113      	cbz	r3, 800687e <_putt.lto_priv.1+0x16>
 8006878:	2101      	movs	r1, #1
 800687a:	6810      	ldr	r0, [r2, #0]
 800687c:	4798      	blx	r3
  return obqPutTimeout(&((SerialUSBDriver *)ip)->obqueue, b, timeout);
 800687e:	4632      	mov	r2, r6
 8006880:	4629      	mov	r1, r5
 8006882:	f104 0050 	add.w	r0, r4, #80	; 0x50
}
 8006886:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return obqPutTimeout(&((SerialUSBDriver *)ip)->obqueue, b, timeout);
 800688a:	f7ff bfba 	b.w	8006802 <obqPutTimeout>

0800688e <iqGetTimeout>:
 * @retval MSG_TIMEOUT  if the specified time expired.
 * @retval MSG_RESET    if the queue has been reset.
 *
 * @api
 */
msg_t iqGetTimeout(input_queue_t *iqp, systime_t timeout) {
 800688e:	b538      	push	{r3, r4, r5, lr}
 8006890:	4604      	mov	r4, r0
 8006892:	460d      	mov	r5, r1
  uint8_t b;

  osalSysLock();
 8006894:	f7fd ff46 	bl	8004724 <vPortEnterCritical>

  /* Waiting until there is a character available or a timeout occurs.*/
  while (iqIsEmptyI(iqp)) {
 8006898:	68a3      	ldr	r3, [r4, #8]
 800689a:	b19b      	cbz	r3, 80068c4 <iqGetTimeout+0x36>
      return msg;
    }
  }

  /* Getting the character from the queue.*/
  iqp->q_counter--;
 800689c:	68a3      	ldr	r3, [r4, #8]
  b = *iqp->q_rdptr++;
 800689e:	69a2      	ldr	r2, [r4, #24]
  iqp->q_counter--;
 80068a0:	3b01      	subs	r3, #1
 80068a2:	60a3      	str	r3, [r4, #8]
  b = *iqp->q_rdptr++;
 80068a4:	1c53      	adds	r3, r2, #1
 80068a6:	61a3      	str	r3, [r4, #24]
 80068a8:	7815      	ldrb	r5, [r2, #0]
  if (iqp->q_rdptr >= iqp->q_top) {
 80068aa:	6922      	ldr	r2, [r4, #16]
 80068ac:	4293      	cmp	r3, r2
    iqp->q_rdptr = iqp->q_buffer;
 80068ae:	bf24      	itt	cs
 80068b0:	68e3      	ldrcs	r3, [r4, #12]
 80068b2:	61a3      	strcs	r3, [r4, #24]
  }

  /* Inform the low side that the queue has at least one slot available.*/
  if (iqp->q_notify != NULL) {
 80068b4:	69e3      	ldr	r3, [r4, #28]
 80068b6:	b10b      	cbz	r3, 80068bc <iqGetTimeout+0x2e>
    iqp->q_notify(iqp);
 80068b8:	4620      	mov	r0, r4
 80068ba:	4798      	blx	r3
  }

  osalSysUnlock();
 80068bc:	f7fe f956 	bl	8004b6c <osalSysUnlock.lto_priv.0>

  return (msg_t)b;
 80068c0:	4628      	mov	r0, r5
 80068c2:	e007      	b.n	80068d4 <iqGetTimeout+0x46>
    msg_t msg = osalThreadEnqueueTimeoutS(&iqp->q_waiting, timeout);
 80068c4:	4629      	mov	r1, r5
 80068c6:	4620      	mov	r0, r4
 80068c8:	f7ff feda 	bl	8006680 <osalThreadEnqueueTimeoutS>
    if (msg < MSG_OK) {
 80068cc:	2800      	cmp	r0, #0
 80068ce:	dae3      	bge.n	8006898 <iqGetTimeout+0xa>
      osalSysUnlock();
 80068d0:	f7fe f94c 	bl	8004b6c <osalSysUnlock.lto_priv.0>
}
 80068d4:	bd38      	pop	{r3, r4, r5, pc}

080068d6 <_get.lto_priv.0>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
}

static msg_t _get(void *ip) {

  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, TIME_INFINITE);
 80068d6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80068da:	3018      	adds	r0, #24
 80068dc:	f7ff bfd7 	b.w	800688e <iqGetTimeout>

080068e0 <_gett.lto_priv.0>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, timeout);
}

static msg_t _gett(void *ip, systime_t timeout) {

  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
 80068e0:	3018      	adds	r0, #24
 80068e2:	f7ff bfd4 	b.w	800688e <iqGetTimeout>
	...

080068e8 <iqReadTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t iqReadTimeout(input_queue_t *iqp, uint8_t *bp,
                     size_t n, systime_t timeout) {
 80068e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068ec:	4604      	mov	r4, r0
 80068ee:	460d      	mov	r5, r1
 80068f0:	461f      	mov	r7, r3
  systime_t deadline;
  qnotify_t nfy = iqp->q_notify;
  size_t r = 0;

  osalDbgCheck(n > 0U);
 80068f2:	4616      	mov	r6, r2
 80068f4:	b912      	cbnz	r2, 80068fc <iqReadTimeout+0x14>
 80068f6:	f7fd ff25 	bl	8004744 <vTaskEndScheduler>
 80068fa:	e7fe      	b.n	80068fa <iqReadTimeout+0x12>
  size_t r = 0;
 80068fc:	f04f 0800 	mov.w	r8, #0
 8006900:	f8df a088 	ldr.w	sl, [pc, #136]	; 800698c <iqReadTimeout+0xa4>
  qnotify_t nfy = iqp->q_notify;
 8006904:	f8d0 901c 	ldr.w	r9, [r0, #28]

  osalSysLock();
 8006908:	f7fd ff0c 	bl	8004724 <vPortEnterCritical>
 800690c:	f7fe fcf8 	bl	8005300 <vPortValidateInterruptPriority>
 8006910:	f8da 3000 	ldr.w	r3, [sl]
    while (iqIsEmptyI(iqp)) {
      msg_t msg;

      /* TIME_INFINITE and TIME_IMMEDIATE are handled differently, no
         deadline.*/
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
 8006914:	f107 3bff 	add.w	fp, r7, #4294967295	; 0xffffffff
  deadline = osalOsGetSystemTimeX() + timeout;
 8006918:	18fb      	adds	r3, r7, r3
 800691a:	9301      	str	r3, [sp, #4]
    while (iqIsEmptyI(iqp)) {
 800691c:	68a3      	ldr	r3, [r4, #8]
 800691e:	b1e3      	cbz	r3, 800695a <iqReadTimeout+0x72>
        return r;
      }
    }

    /* Getting the character from the queue.*/
    iqp->q_counter--;
 8006920:	68a3      	ldr	r3, [r4, #8]
 8006922:	3b01      	subs	r3, #1
 8006924:	60a3      	str	r3, [r4, #8]
    *bp++ = *iqp->q_rdptr++;
 8006926:	69a3      	ldr	r3, [r4, #24]
 8006928:	1c5a      	adds	r2, r3, #1
 800692a:	61a2      	str	r2, [r4, #24]
 800692c:	781b      	ldrb	r3, [r3, #0]
 800692e:	f805 3b01 	strb.w	r3, [r5], #1
    if (iqp->q_rdptr >= iqp->q_top) {
 8006932:	6923      	ldr	r3, [r4, #16]
 8006934:	69a2      	ldr	r2, [r4, #24]
 8006936:	429a      	cmp	r2, r3
      iqp->q_rdptr = iqp->q_buffer;
 8006938:	bf24      	itt	cs
 800693a:	68e3      	ldrcs	r3, [r4, #12]
 800693c:	61a3      	strcs	r3, [r4, #24]
    }

    /* Inform the low side that the queue has at least one slot available.*/
    if (nfy != NULL) {
 800693e:	f1b9 0f00 	cmp.w	r9, #0
 8006942:	d001      	beq.n	8006948 <iqReadTimeout+0x60>
      nfy(iqp);
 8006944:	4620      	mov	r0, r4
 8006946:	47c8      	blx	r9
    }

    /* Giving a preemption chance in a controlled point.*/
    osalSysUnlock();
 8006948:	f7fe f910 	bl	8004b6c <osalSysUnlock.lto_priv.0>

    r++;
    if (--n == 0U) {
 800694c:	3e01      	subs	r6, #1
    r++;
 800694e:	f108 0801 	add.w	r8, r8, #1
    if (--n == 0U) {
 8006952:	d016      	beq.n	8006982 <iqReadTimeout+0x9a>
      return r;
    }

    osalSysLock();
 8006954:	f7fd fee6 	bl	8004724 <vPortEnterCritical>
  while (true) {
 8006958:	e7e0      	b.n	800691c <iqReadTimeout+0x34>
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
 800695a:	f11b 0f03 	cmn.w	fp, #3
 800695e:	d906      	bls.n	800696e <iqReadTimeout+0x86>
        msg = osalThreadEnqueueTimeoutS(&iqp->q_waiting, timeout);
 8006960:	4639      	mov	r1, r7
        msg = osalThreadEnqueueTimeoutS(&iqp->q_waiting, next_timeout);
 8006962:	4620      	mov	r0, r4
 8006964:	f7ff fe8c 	bl	8006680 <osalThreadEnqueueTimeoutS>
      if (msg != MSG_OK) {
 8006968:	2800      	cmp	r0, #0
 800696a:	d0d7      	beq.n	800691c <iqReadTimeout+0x34>
 800696c:	e007      	b.n	800697e <iqReadTimeout+0x96>
 800696e:	f7fe fcc7 	bl	8005300 <vPortValidateInterruptPriority>
 8006972:	f8da 1000 	ldr.w	r1, [sl]
        systime_t next_timeout = deadline - osalOsGetSystemTimeX();
 8006976:	9b01      	ldr	r3, [sp, #4]
 8006978:	1a59      	subs	r1, r3, r1
        if (next_timeout > timeout) {
 800697a:	428f      	cmp	r7, r1
 800697c:	d2f1      	bcs.n	8006962 <iqReadTimeout+0x7a>
        osalSysUnlock();
 800697e:	f7fe f8f5 	bl	8004b6c <osalSysUnlock.lto_priv.0>
  }
}
 8006982:	4640      	mov	r0, r8
 8006984:	b003      	add	sp, #12
 8006986:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800698a:	bf00      	nop
 800698c:	20001648 	.word	0x20001648

08006990 <_read.lto_priv.0>:
  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp,
 8006990:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006994:	3018      	adds	r0, #24
 8006996:	f7ff bfa7 	b.w	80068e8 <iqReadTimeout>

0800699a <_readt.lto_priv.0>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp, n, timeout);
}

static size_t _readt(void *ip, uint8_t *bp, size_t n, systime_t timeout) {

  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp, n, timeout);
 800699a:	3018      	adds	r0, #24
 800699c:	f7ff bfa4 	b.w	80068e8 <iqReadTimeout>

080069a0 <oqPutTimeout>:
 * @retval MSG_TIMEOUT  if the specified time expired.
 * @retval MSG_RESET    if the queue has been reset.
 *
 * @api
 */
msg_t oqPutTimeout(output_queue_t *oqp, uint8_t b, systime_t timeout) {
 80069a0:	b570      	push	{r4, r5, r6, lr}
 80069a2:	4604      	mov	r4, r0
 80069a4:	460d      	mov	r5, r1
 80069a6:	4616      	mov	r6, r2

  osalSysLock();
 80069a8:	f7fd febc 	bl	8004724 <vPortEnterCritical>

  /* Waiting until there is a slot available or a timeout occurs.*/
  while (oqIsFullI(oqp)) {
 80069ac:	68a3      	ldr	r3, [r4, #8]
 80069ae:	b1a3      	cbz	r3, 80069da <oqPutTimeout+0x3a>
      return msg;
    }
  }

  /* Putting the character into the queue.*/
  oqp->q_counter--;
 80069b0:	68a3      	ldr	r3, [r4, #8]
 80069b2:	3b01      	subs	r3, #1
 80069b4:	60a3      	str	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
 80069b6:	6963      	ldr	r3, [r4, #20]
 80069b8:	1c5a      	adds	r2, r3, #1
 80069ba:	6162      	str	r2, [r4, #20]
 80069bc:	701d      	strb	r5, [r3, #0]
  if (oqp->q_wrptr >= oqp->q_top) {
 80069be:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 80069c2:	429a      	cmp	r2, r3
    oqp->q_wrptr = oqp->q_buffer;
 80069c4:	bf24      	itt	cs
 80069c6:	68e3      	ldrcs	r3, [r4, #12]
 80069c8:	6163      	strcs	r3, [r4, #20]
  }

  /* Inform the low side that the queue has at least one character available.*/
  if (oqp->q_notify != NULL) {
 80069ca:	69e3      	ldr	r3, [r4, #28]
 80069cc:	b10b      	cbz	r3, 80069d2 <oqPutTimeout+0x32>
    oqp->q_notify(oqp);
 80069ce:	4620      	mov	r0, r4
 80069d0:	4798      	blx	r3
  }

  osalSysUnlock();
 80069d2:	f7fe f8cb 	bl	8004b6c <osalSysUnlock.lto_priv.0>
 80069d6:	2000      	movs	r0, #0
 80069d8:	e007      	b.n	80069ea <oqPutTimeout+0x4a>
    msg_t msg = osalThreadEnqueueTimeoutS(&oqp->q_waiting, timeout);
 80069da:	4631      	mov	r1, r6
 80069dc:	4620      	mov	r0, r4
 80069de:	f7ff fe4f 	bl	8006680 <osalThreadEnqueueTimeoutS>
    if (msg < MSG_OK) {
 80069e2:	2800      	cmp	r0, #0
 80069e4:	dae2      	bge.n	80069ac <oqPutTimeout+0xc>
      osalSysUnlock();
 80069e6:	f7fe f8c1 	bl	8004b6c <osalSysUnlock.lto_priv.0>

  return MSG_OK;
}
 80069ea:	bd70      	pop	{r4, r5, r6, pc}

080069ec <_put.lto_priv.0>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
 80069ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80069f0:	303c      	adds	r0, #60	; 0x3c
 80069f2:	f7ff bfd5 	b.w	80069a0 <oqPutTimeout>

080069f6 <_putt.lto_priv.0>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, timeout);
 80069f6:	303c      	adds	r0, #60	; 0x3c
 80069f8:	f7ff bfd2 	b.w	80069a0 <oqPutTimeout>

080069fc <oqWriteTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t oqWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
                      size_t n, systime_t timeout) {
 80069fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a00:	4604      	mov	r4, r0
 8006a02:	460d      	mov	r5, r1
 8006a04:	461f      	mov	r7, r3
  systime_t deadline;
  qnotify_t nfy = oqp->q_notify;
  size_t w = 0;

  osalDbgCheck(n > 0U);
 8006a06:	4616      	mov	r6, r2
 8006a08:	b912      	cbnz	r2, 8006a10 <oqWriteTimeout+0x14>
 8006a0a:	f7fd fe9b 	bl	8004744 <vTaskEndScheduler>
 8006a0e:	e7fe      	b.n	8006a0e <oqWriteTimeout+0x12>
  size_t w = 0;
 8006a10:	f04f 0800 	mov.w	r8, #0
 8006a14:	f8df a088 	ldr.w	sl, [pc, #136]	; 8006aa0 <oqWriteTimeout+0xa4>
  qnotify_t nfy = oqp->q_notify;
 8006a18:	f8d0 901c 	ldr.w	r9, [r0, #28]

  osalSysLock();
 8006a1c:	f7fd fe82 	bl	8004724 <vPortEnterCritical>
 8006a20:	f7fe fc6e 	bl	8005300 <vPortValidateInterruptPriority>
 8006a24:	f8da 3000 	ldr.w	r3, [sl]
    msg_t msg;

    while (oqIsFullI(oqp)) {
      /* TIME_INFINITE and TIME_IMMEDIATE are handled differently, no
         deadline.*/
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
 8006a28:	f107 3bff 	add.w	fp, r7, #4294967295	; 0xffffffff
  deadline = osalOsGetSystemTimeX() + timeout;
 8006a2c:	18fb      	adds	r3, r7, r3
 8006a2e:	9301      	str	r3, [sp, #4]
    while (oqIsFullI(oqp)) {
 8006a30:	68a3      	ldr	r3, [r4, #8]
 8006a32:	b1e3      	cbz	r3, 8006a6e <oqWriteTimeout+0x72>
        return w;
      }
    }

    /* Putting the character into the queue.*/
    oqp->q_counter--;
 8006a34:	68a3      	ldr	r3, [r4, #8]
 8006a36:	3b01      	subs	r3, #1
 8006a38:	60a3      	str	r3, [r4, #8]
    *oqp->q_wrptr++ = *bp++;
 8006a3a:	6963      	ldr	r3, [r4, #20]
 8006a3c:	1c5a      	adds	r2, r3, #1
 8006a3e:	6162      	str	r2, [r4, #20]
 8006a40:	f815 2b01 	ldrb.w	r2, [r5], #1
 8006a44:	701a      	strb	r2, [r3, #0]
    if (oqp->q_wrptr >= oqp->q_top) {
 8006a46:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 8006a4a:	429a      	cmp	r2, r3
      oqp->q_wrptr = oqp->q_buffer;
 8006a4c:	bf24      	itt	cs
 8006a4e:	68e3      	ldrcs	r3, [r4, #12]
 8006a50:	6163      	strcs	r3, [r4, #20]
    }

    /* Inform the low side that the queue has at least one character available.*/
    if (nfy != NULL) {
 8006a52:	f1b9 0f00 	cmp.w	r9, #0
 8006a56:	d001      	beq.n	8006a5c <oqWriteTimeout+0x60>
      nfy(oqp);
 8006a58:	4620      	mov	r0, r4
 8006a5a:	47c8      	blx	r9
    }

    /* Giving a preemption chance in a controlled point.*/
    osalSysUnlock();
 8006a5c:	f7fe f886 	bl	8004b6c <osalSysUnlock.lto_priv.0>

    w++;
    if (--n == 0U) {
 8006a60:	3e01      	subs	r6, #1
    w++;
 8006a62:	f108 0801 	add.w	r8, r8, #1
    if (--n == 0U) {
 8006a66:	d016      	beq.n	8006a96 <oqWriteTimeout+0x9a>
      return w;
    }

    osalSysLock();
 8006a68:	f7fd fe5c 	bl	8004724 <vPortEnterCritical>
  while (true) {
 8006a6c:	e7e0      	b.n	8006a30 <oqWriteTimeout+0x34>
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
 8006a6e:	f11b 0f03 	cmn.w	fp, #3
 8006a72:	d906      	bls.n	8006a82 <oqWriteTimeout+0x86>
        msg = osalThreadEnqueueTimeoutS(&oqp->q_waiting, timeout);
 8006a74:	4639      	mov	r1, r7
        msg = osalThreadEnqueueTimeoutS(&oqp->q_waiting, next_timeout);
 8006a76:	4620      	mov	r0, r4
 8006a78:	f7ff fe02 	bl	8006680 <osalThreadEnqueueTimeoutS>
      if (msg != MSG_OK) {
 8006a7c:	2800      	cmp	r0, #0
 8006a7e:	d0d7      	beq.n	8006a30 <oqWriteTimeout+0x34>
 8006a80:	e007      	b.n	8006a92 <oqWriteTimeout+0x96>
 8006a82:	f7fe fc3d 	bl	8005300 <vPortValidateInterruptPriority>
 8006a86:	f8da 1000 	ldr.w	r1, [sl]
        systime_t next_timeout = deadline - osalOsGetSystemTimeX();
 8006a8a:	9b01      	ldr	r3, [sp, #4]
 8006a8c:	1a59      	subs	r1, r3, r1
        if (next_timeout > timeout) {
 8006a8e:	428f      	cmp	r7, r1
 8006a90:	d2f1      	bcs.n	8006a76 <oqWriteTimeout+0x7a>
        osalSysUnlock();
 8006a92:	f7fe f86b 	bl	8004b6c <osalSysUnlock.lto_priv.0>
  }
}
 8006a96:	4640      	mov	r0, r8
 8006a98:	b003      	add	sp, #12
 8006a9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a9e:	bf00      	nop
 8006aa0:	20001648 	.word	0x20001648

08006aa4 <_write.lto_priv.0>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp,
 8006aa4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006aa8:	303c      	adds	r0, #60	; 0x3c
 8006aaa:	f7ff bfa7 	b.w	80069fc <oqWriteTimeout>

08006aae <_writet.lto_priv.0>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp, n, timeout);
 8006aae:	303c      	adds	r0, #60	; 0x3c
 8006ab0:	f7ff bfa4 	b.w	80069fc <oqWriteTimeout>

08006ab4 <long_to_string_with_divisor.constprop.0>:
#include "memstreams.h"

#define MAX_FILLER 11
#define FLOAT_PRECISION 9

static char *long_to_string_with_divisor(char *p,
 8006ab4:	b5f0      	push	{r4, r5, r6, r7, lr}
    ll = num;
  } else {
    ll = divisor;
  }

  q = p + MAX_FILLER;
 8006ab6:	f100 040b 	add.w	r4, r0, #11
 8006aba:	4623      	mov	r3, r4
  do {
    i = (int)(l % radix);
 8006abc:	460d      	mov	r5, r1
 8006abe:	fbb1 f1f2 	udiv	r1, r1, r2
 8006ac2:	fb02 5711 	mls	r7, r2, r1, r5
    i += '0';
 8006ac6:	f107 0630 	add.w	r6, r7, #48	; 0x30
    if (i > '9')
 8006aca:	2e39      	cmp	r6, #57	; 0x39
      i += 'A' - '0' - 10;
 8006acc:	bfc8      	it	gt
 8006ace:	f107 0637 	addgt.w	r6, r7, #55	; 0x37
    *--q = i;
    l /= radix;
  } while ((ll /= radix) != 0);
 8006ad2:	4295      	cmp	r5, r2
    *--q = i;
 8006ad4:	f803 6d01 	strb.w	r6, [r3, #-1]!
  } while ((ll /= radix) != 0);
 8006ad8:	d2f0      	bcs.n	8006abc <long_to_string_with_divisor.constprop.0+0x8>
 8006ada:	1e42      	subs	r2, r0, #1

  i = (int)(p + MAX_FILLER - q);
 8006adc:	1ae1      	subs	r1, r4, r3
  do
    *p++ = *q++;
 8006ade:	f813 5b01 	ldrb.w	r5, [r3], #1
  while (--i);
 8006ae2:	429c      	cmp	r4, r3
    *p++ = *q++;
 8006ae4:	f802 5f01 	strb.w	r5, [r2, #1]!
  while (--i);
 8006ae8:	d1f9      	bne.n	8006ade <long_to_string_with_divisor.constprop.0+0x2a>

  return p;
}
 8006aea:	4408      	add	r0, r1
 8006aec:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08006af0 <chvprintf>:
 * @return              The number of bytes that would have been
 *                      written to @p chp if no stream error occurs
 *
 * @api
 */
int chvprintf(BaseSequentialStream *chp, const char *fmt, va_list ap) {
 8006af0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006af4:	460b      	mov	r3, r1
 8006af6:	4680      	mov	r8, r0
 8006af8:	4614      	mov	r4, r2
  char *p, *s, c, filler;
  int i, precision, width;
  int n = 0;
 8006afa:	f04f 0900 	mov.w	r9, #0
int chvprintf(BaseSequentialStream *chp, const char *fmt, va_list ap) {
 8006afe:	b087      	sub	sp, #28
#else
  char tmpbuf[MAX_FILLER + 1];
#endif

  while (true) {
    c = *fmt++;
 8006b00:	461f      	mov	r7, r3
 8006b02:	f817 1b01 	ldrb.w	r1, [r7], #1
    if (c == 0)
 8006b06:	2900      	cmp	r1, #0
 8006b08:	f000 8152 	beq.w	8006db0 <chvprintf+0x2c0>
      return n;
    if (c != '%') {
 8006b0c:	2925      	cmp	r1, #37	; 0x25
 8006b0e:	d007      	beq.n	8006b20 <chvprintf+0x30>
      streamPut(chp, (uint8_t)c);
 8006b10:	f8d8 3000 	ldr.w	r3, [r8]
 8006b14:	4640      	mov	r0, r8
 8006b16:	689b      	ldr	r3, [r3, #8]
 8006b18:	4798      	blx	r3
      n++;
 8006b1a:	f109 0901 	add.w	r9, r9, #1
      continue;
 8006b1e:	e112      	b.n	8006d46 <chvprintf+0x256>
    }
    p = tmpbuf;
    s = tmpbuf;
    left_align = FALSE;
    if (*fmt == '-') {
 8006b20:	785a      	ldrb	r2, [r3, #1]
    filler = ' ';
    if (*fmt == '0') {
      fmt++;
      filler = '0';
    }
    width = 0;
 8006b22:	f04f 0b00 	mov.w	fp, #0
    if (*fmt == '-') {
 8006b26:	2a2d      	cmp	r2, #45	; 0x2d
      fmt++;
 8006b28:	bf08      	it	eq
 8006b2a:	1c9f      	addeq	r7, r3, #2
    if (*fmt == '0') {
 8006b2c:	f897 a000 	ldrb.w	sl, [r7]
      left_align = TRUE;
 8006b30:	bf0c      	ite	eq
 8006b32:	2301      	moveq	r3, #1
    left_align = FALSE;
 8006b34:	2300      	movne	r3, #0
    if (*fmt == '0') {
 8006b36:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
    filler = ' ';
 8006b3a:	bf18      	it	ne
 8006b3c:	f04f 0a20 	movne.w	sl, #32
    left_align = FALSE;
 8006b40:	9301      	str	r3, [sp, #4]
      fmt++;
 8006b42:	bf08      	it	eq
 8006b44:	3701      	addeq	r7, #1
    while (TRUE) {
      c = *fmt++;
 8006b46:	f817 2b01 	ldrb.w	r2, [r7], #1
      if (c >= '0' && c <= '9')
 8006b4a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8006b4e:	b2c9      	uxtb	r1, r1
 8006b50:	2909      	cmp	r1, #9
 8006b52:	d904      	bls.n	8006b5e <chvprintf+0x6e>
        c -= '0';
      else if (c == '*')
 8006b54:	2a2a      	cmp	r2, #42	; 0x2a
 8006b56:	d106      	bne.n	8006b66 <chvprintf+0x76>
        c = va_arg(ap, int);
 8006b58:	f854 1b04 	ldr.w	r1, [r4], #4
 8006b5c:	b2c9      	uxtb	r1, r1
      else
        break;
      width = width * 10 + c;
 8006b5e:	230a      	movs	r3, #10
 8006b60:	fb03 1b0b 	mla	fp, r3, fp, r1
    while (TRUE) {
 8006b64:	e7ef      	b.n	8006b46 <chvprintf+0x56>
    }
    precision = 0;
    if (c == '.') {
 8006b66:	2a2e      	cmp	r2, #46	; 0x2e
    precision = 0;
 8006b68:	f04f 0100 	mov.w	r1, #0
    if (c == '.') {
 8006b6c:	d10f      	bne.n	8006b8e <chvprintf+0x9e>
      while (TRUE) {
        c = *fmt++;
 8006b6e:	f817 2b01 	ldrb.w	r2, [r7], #1
        if (c >= '0' && c <= '9')
 8006b72:	f1a2 0030 	sub.w	r0, r2, #48	; 0x30
 8006b76:	b2c0      	uxtb	r0, r0
 8006b78:	2809      	cmp	r0, #9
 8006b7a:	d904      	bls.n	8006b86 <chvprintf+0x96>
          c -= '0';
        else if (c == '*')
 8006b7c:	2a2a      	cmp	r2, #42	; 0x2a
 8006b7e:	d106      	bne.n	8006b8e <chvprintf+0x9e>
          c = va_arg(ap, int);
 8006b80:	f854 0b04 	ldr.w	r0, [r4], #4
 8006b84:	b2c0      	uxtb	r0, r0
        else
          break;
        precision *= 10;
        precision += c;
 8006b86:	230a      	movs	r3, #10
 8006b88:	fb03 0101 	mla	r1, r3, r1, r0
      while (TRUE) {
 8006b8c:	e7ef      	b.n	8006b6e <chvprintf+0x7e>
      }
    }
    /* Long modifier.*/
    if (c == 'l' || c == 'L') {
 8006b8e:	f002 00df 	and.w	r0, r2, #223	; 0xdf
 8006b92:	284c      	cmp	r0, #76	; 0x4c
 8006b94:	d115      	bne.n	8006bc2 <chvprintf+0xd2>
      is_long = TRUE;
      if (*fmt)
 8006b96:	7838      	ldrb	r0, [r7, #0]
 8006b98:	b108      	cbz	r0, 8006b9e <chvprintf+0xae>
        c = *fmt++;
 8006b9a:	4602      	mov	r2, r0
 8006b9c:	3701      	adds	r7, #1
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
 8006b9e:	2a64      	cmp	r2, #100	; 0x64
 8006ba0:	d06f      	beq.n	8006c82 <chvprintf+0x192>
 8006ba2:	f200 80e3 	bhi.w	8006d6c <chvprintf+0x27c>
 8006ba6:	2a58      	cmp	r2, #88	; 0x58
 8006ba8:	f000 80d9 	beq.w	8006d5e <chvprintf+0x26e>
 8006bac:	d821      	bhi.n	8006bf2 <chvprintf+0x102>
 8006bae:	2a4f      	cmp	r2, #79	; 0x4f
 8006bb0:	f000 80b5 	beq.w	8006d1e <chvprintf+0x22e>
 8006bb4:	f200 80d5 	bhi.w	8006d62 <chvprintf+0x272>
 8006bb8:	2a44      	cmp	r2, #68	; 0x44
 8006bba:	d062      	beq.n	8006c82 <chvprintf+0x192>
 8006bbc:	2a49      	cmp	r2, #73	; 0x49
 8006bbe:	d060      	beq.n	8006c82 <chvprintf+0x192>
 8006bc0:	e010      	b.n	8006be4 <chvprintf+0xf4>
      is_long = (c >= 'A') && (c <= 'Z');
 8006bc2:	f1a2 0041 	sub.w	r0, r2, #65	; 0x41
    switch (c) {
 8006bc6:	2a64      	cmp	r2, #100	; 0x64
      is_long = (c >= 'A') && (c <= 'Z');
 8006bc8:	b2c0      	uxtb	r0, r0
    switch (c) {
 8006bca:	d056      	beq.n	8006c7a <chvprintf+0x18a>
 8006bcc:	d81e      	bhi.n	8006c0c <chvprintf+0x11c>
 8006bce:	2a55      	cmp	r2, #85	; 0x55
 8006bd0:	f000 8096 	beq.w	8006d00 <chvprintf+0x210>
 8006bd4:	d80a      	bhi.n	8006bec <chvprintf+0xfc>
 8006bd6:	2a49      	cmp	r2, #73	; 0x49
 8006bd8:	d04f      	beq.n	8006c7a <chvprintf+0x18a>
 8006bda:	2a4f      	cmp	r2, #79	; 0x4f
 8006bdc:	f000 809b 	beq.w	8006d16 <chvprintf+0x226>
 8006be0:	2a44      	cmp	r2, #68	; 0x44
 8006be2:	d04a      	beq.n	8006c7a <chvprintf+0x18a>
      else
        l = va_arg(ap, unsigned int);
      p = ch_ltoa(p, l, c);
      break;
    default:
      *p++ = c;
 8006be4:	4626      	mov	r6, r4
 8006be6:	f88d 200c 	strb.w	r2, [sp, #12]
      break;
 8006bea:	e00b      	b.n	8006c04 <chvprintf+0x114>
    switch (c) {
 8006bec:	2a58      	cmp	r2, #88	; 0x58
 8006bee:	f000 8094 	beq.w	8006d1a <chvprintf+0x22a>
 8006bf2:	2a63      	cmp	r2, #99	; 0x63
 8006bf4:	d1f6      	bne.n	8006be4 <chvprintf+0xf4>
      *p++ = va_arg(ap, int);
 8006bf6:	4626      	mov	r6, r4
      filler = ' ';
 8006bf8:	f04f 0a20 	mov.w	sl, #32
      *p++ = va_arg(ap, int);
 8006bfc:	f856 2b04 	ldr.w	r2, [r6], #4
 8006c00:	f88d 200c 	strb.w	r2, [sp, #12]
    s = tmpbuf;
 8006c04:	ac03      	add	r4, sp, #12
      *p++ = c;
 8006c06:	f10d 000d 	add.w	r0, sp, #13
 8006c0a:	e04c      	b.n	8006ca6 <chvprintf+0x1b6>
    switch (c) {
 8006c0c:	2a69      	cmp	r2, #105	; 0x69
 8006c0e:	d034      	beq.n	8006c7a <chvprintf+0x18a>
 8006c10:	f1a2 056f 	sub.w	r5, r2, #111	; 0x6f
 8006c14:	b2ee      	uxtb	r6, r5
 8006c16:	2e09      	cmp	r6, #9
 8006c18:	d8e4      	bhi.n	8006be4 <chvprintf+0xf4>
 8006c1a:	2d09      	cmp	r5, #9
 8006c1c:	d8e2      	bhi.n	8006be4 <chvprintf+0xf4>
 8006c1e:	a301      	add	r3, pc, #4	; (adr r3, 8006c24 <chvprintf+0x134>)
 8006c20:	f853 f025 	ldr.w	pc, [r3, r5, lsl #2]
 8006c24:	08006d17 	.word	0x08006d17
 8006c28:	08006be5 	.word	0x08006be5
 8006c2c:	08006be5 	.word	0x08006be5
 8006c30:	08006be5 	.word	0x08006be5
 8006c34:	08006c4d 	.word	0x08006c4d
 8006c38:	08006be5 	.word	0x08006be5
 8006c3c:	08006d01 	.word	0x08006d01
 8006c40:	08006be5 	.word	0x08006be5
 8006c44:	08006be5 	.word	0x08006be5
 8006c48:	08006d1b 	.word	0x08006d1b
      if ((s = va_arg(ap, char *)) == 0)
 8006c4c:	4626      	mov	r6, r4
        s = "(null)";
 8006c4e:	4b5a      	ldr	r3, [pc, #360]	; (8006db8 <chvprintf+0x2c8>)
      if ((s = va_arg(ap, char *)) == 0)
 8006c50:	f856 4b04 	ldr.w	r4, [r6], #4
        precision = 32767;
 8006c54:	f647 72ff 	movw	r2, #32767	; 0x7fff
        s = "(null)";
 8006c58:	2c00      	cmp	r4, #0
 8006c5a:	bf08      	it	eq
 8006c5c:	461c      	moveq	r4, r3
        precision = 32767;
 8006c5e:	2900      	cmp	r1, #0
 8006c60:	bf08      	it	eq
 8006c62:	4611      	moveq	r1, r2
 8006c64:	4620      	mov	r0, r4
 8006c66:	4421      	add	r1, r4
      for (p = s; *p && (--precision >= 0); p++)
 8006c68:	7802      	ldrb	r2, [r0, #0]
 8006c6a:	b10a      	cbz	r2, 8006c70 <chvprintf+0x180>
 8006c6c:	4288      	cmp	r0, r1
 8006c6e:	d102      	bne.n	8006c76 <chvprintf+0x186>
      filler = ' ';
 8006c70:	f04f 0a20 	mov.w	sl, #32
 8006c74:	e017      	b.n	8006ca6 <chvprintf+0x1b6>
      for (p = s; *p && (--precision >= 0); p++)
 8006c76:	3001      	adds	r0, #1
 8006c78:	e7f6      	b.n	8006c68 <chvprintf+0x178>
      if (is_long)
 8006c7a:	2819      	cmp	r0, #25
        l = va_arg(ap, int);
 8006c7c:	f104 0604 	add.w	r6, r4, #4
      if (is_long)
 8006c80:	d83c      	bhi.n	8006cfc <chvprintf+0x20c>
        l = va_arg(ap, long);
 8006c82:	4626      	mov	r6, r4
 8006c84:	f856 1b04 	ldr.w	r1, [r6], #4
      if (l < 0) {
 8006c88:	2900      	cmp	r1, #0
        *p++ = '-';
 8006c8a:	bfbc      	itt	lt
 8006c8c:	222d      	movlt	r2, #45	; 0x2d
 8006c8e:	f88d 200c 	strblt.w	r2, [sp, #12]
  return long_to_string_with_divisor(p, num, radix, 0);
 8006c92:	f04f 020a 	mov.w	r2, #10
        l = -l;
 8006c96:	bfba      	itte	lt
 8006c98:	4249      	neglt	r1, r1
        *p++ = '-';
 8006c9a:	f10d 000d 	addlt.w	r0, sp, #13
    p = tmpbuf;
 8006c9e:	a803      	addge	r0, sp, #12
  return long_to_string_with_divisor(p, num, radix, 0);
 8006ca0:	f7ff ff08 	bl	8006ab4 <long_to_string_with_divisor.constprop.0>
    s = tmpbuf;
 8006ca4:	ac03      	add	r4, sp, #12
    }
    i = (int)(p - s);
 8006ca6:	1b05      	subs	r5, r0, r4
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
 8006ca8:	9901      	ldr	r1, [sp, #4]
    if ((width -= i) < 0)
 8006caa:	ebab 0305 	sub.w	r3, fp, r5
 8006cae:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
    if (left_align == FALSE)
 8006cb2:	2900      	cmp	r1, #0
 8006cb4:	d149      	bne.n	8006d4a <chvprintf+0x25a>
      width = -width;
    if (width < 0) {
 8006cb6:	2b00      	cmp	r3, #0
      width = -width;
 8006cb8:	f1c2 0b00 	rsb	fp, r2, #0
    if (width < 0) {
 8006cbc:	dd1c      	ble.n	8006cf8 <chvprintf+0x208>
      if (*s == '-' && filler == '0') {
 8006cbe:	7821      	ldrb	r1, [r4, #0]
 8006cc0:	292d      	cmp	r1, #45	; 0x2d
 8006cc2:	d10d      	bne.n	8006ce0 <chvprintf+0x1f0>
 8006cc4:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
 8006cc8:	d10a      	bne.n	8006ce0 <chvprintf+0x1f0>
        streamPut(chp, (uint8_t)*s++);
 8006cca:	f8d8 3000 	ldr.w	r3, [r8]
 8006cce:	4640      	mov	r0, r8
 8006cd0:	689b      	ldr	r3, [r3, #8]
 8006cd2:	9201      	str	r2, [sp, #4]
 8006cd4:	4798      	blx	r3
 8006cd6:	9a01      	ldr	r2, [sp, #4]
        n++;
        i--;
 8006cd8:	3d01      	subs	r5, #1
      n++;
 8006cda:	f109 0901 	add.w	r9, r9, #1
        streamPut(chp, (uint8_t)*s++);
 8006cde:	3401      	adds	r4, #1
      }
      do {
        streamPut(chp, (uint8_t)filler);
 8006ce0:	f8d8 3000 	ldr.w	r3, [r8]
 8006ce4:	4651      	mov	r1, sl
 8006ce6:	4640      	mov	r0, r8
 8006ce8:	689b      	ldr	r3, [r3, #8]
 8006cea:	9201      	str	r2, [sp, #4]
 8006cec:	4798      	blx	r3
        n++;
      } while (++width != 0);
 8006cee:	f11b 0b01 	adds.w	fp, fp, #1
 8006cf2:	9a01      	ldr	r2, [sp, #4]
 8006cf4:	d1f4      	bne.n	8006ce0 <chvprintf+0x1f0>
 8006cf6:	4491      	add	r9, r2
    if (left_align == FALSE)
 8006cf8:	462b      	mov	r3, r5
 8006cfa:	e01b      	b.n	8006d34 <chvprintf+0x244>
        l = va_arg(ap, int);
 8006cfc:	6821      	ldr	r1, [r4, #0]
 8006cfe:	e7c3      	b.n	8006c88 <chvprintf+0x198>
      c = 10;
 8006d00:	220a      	movs	r2, #10
        l = va_arg(ap, unsigned int);
 8006d02:	4626      	mov	r6, r4
      if (is_long)
 8006d04:	2819      	cmp	r0, #25
        l = va_arg(ap, unsigned int);
 8006d06:	f856 1b04 	ldr.w	r1, [r6], #4
      if (is_long)
 8006d0a:	d802      	bhi.n	8006d12 <chvprintf+0x222>
        l = va_arg(ap, unsigned long);
 8006d0c:	4626      	mov	r6, r4
 8006d0e:	f856 1b04 	ldr.w	r1, [r6], #4
  return long_to_string_with_divisor(p, num, radix, 0);
 8006d12:	a803      	add	r0, sp, #12
 8006d14:	e7c4      	b.n	8006ca0 <chvprintf+0x1b0>
      c = 8;
 8006d16:	2208      	movs	r2, #8
 8006d18:	e7f3      	b.n	8006d02 <chvprintf+0x212>
    switch (c) {
 8006d1a:	2210      	movs	r2, #16
 8006d1c:	e7f1      	b.n	8006d02 <chvprintf+0x212>
 8006d1e:	2208      	movs	r2, #8
 8006d20:	e7f4      	b.n	8006d0c <chvprintf+0x21c>
    }
    while (--i >= 0) {
      streamPut(chp, (uint8_t)*s++);
 8006d22:	f8d8 2000 	ldr.w	r2, [r8]
 8006d26:	4640      	mov	r0, r8
 8006d28:	6892      	ldr	r2, [r2, #8]
 8006d2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d2e:	9301      	str	r3, [sp, #4]
 8006d30:	4790      	blx	r2
      n++;
 8006d32:	9b01      	ldr	r3, [sp, #4]
    while (--i >= 0) {
 8006d34:	3b01      	subs	r3, #1
 8006d36:	d5f4      	bpl.n	8006d22 <chvprintf+0x232>
 8006d38:	2d00      	cmp	r5, #0
 8006d3a:	bfa8      	it	ge
 8006d3c:	44a9      	addge	r9, r5
 8006d3e:	465c      	mov	r4, fp
    }

    while (width) {
 8006d40:	b92c      	cbnz	r4, 8006d4e <chvprintf+0x25e>
 8006d42:	4634      	mov	r4, r6
 8006d44:	44d9      	add	r9, fp
 8006d46:	463b      	mov	r3, r7
 8006d48:	e6da      	b.n	8006b00 <chvprintf+0x10>
    if (left_align == FALSE)
 8006d4a:	4693      	mov	fp, r2
 8006d4c:	e7d4      	b.n	8006cf8 <chvprintf+0x208>
      streamPut(chp, (uint8_t)filler);
 8006d4e:	f8d8 3000 	ldr.w	r3, [r8]
 8006d52:	4651      	mov	r1, sl
 8006d54:	4640      	mov	r0, r8
 8006d56:	689b      	ldr	r3, [r3, #8]
 8006d58:	4798      	blx	r3
      n++;
      width--;
 8006d5a:	3c01      	subs	r4, #1
 8006d5c:	e7f0      	b.n	8006d40 <chvprintf+0x250>
    switch (c) {
 8006d5e:	2210      	movs	r2, #16
 8006d60:	e7d4      	b.n	8006d0c <chvprintf+0x21c>
 8006d62:	2a55      	cmp	r2, #85	; 0x55
 8006d64:	f47f af3e 	bne.w	8006be4 <chvprintf+0xf4>
      c = 10;
 8006d68:	220a      	movs	r2, #10
      if (is_long)
 8006d6a:	e7cf      	b.n	8006d0c <chvprintf+0x21c>
    switch (c) {
 8006d6c:	2a69      	cmp	r2, #105	; 0x69
 8006d6e:	d088      	beq.n	8006c82 <chvprintf+0x192>
 8006d70:	f1a2 006f 	sub.w	r0, r2, #111	; 0x6f
 8006d74:	b2c5      	uxtb	r5, r0
 8006d76:	2d09      	cmp	r5, #9
 8006d78:	f63f af34 	bhi.w	8006be4 <chvprintf+0xf4>
 8006d7c:	2809      	cmp	r0, #9
 8006d7e:	f63f af31 	bhi.w	8006be4 <chvprintf+0xf4>
 8006d82:	a301      	add	r3, pc, #4	; (adr r3, 8006d88 <chvprintf+0x298>)
 8006d84:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
 8006d88:	08006d1f 	.word	0x08006d1f
 8006d8c:	08006be5 	.word	0x08006be5
 8006d90:	08006be5 	.word	0x08006be5
 8006d94:	08006be5 	.word	0x08006be5
 8006d98:	08006c4d 	.word	0x08006c4d
 8006d9c:	08006be5 	.word	0x08006be5
 8006da0:	08006d69 	.word	0x08006d69
 8006da4:	08006be5 	.word	0x08006be5
 8006da8:	08006be5 	.word	0x08006be5
 8006dac:	08006d5f 	.word	0x08006d5f
    }
  }
}
 8006db0:	4648      	mov	r0, r9
 8006db2:	b007      	add	sp, #28
 8006db4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006db8:	0800baca 	.word	0x0800baca

08006dbc <xTaskGenericNotifyFromISR.constprop.0.isra.0>:
 8006dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dbe:	4604      	mov	r4, r0
 8006dc0:	b900      	cbnz	r0, 8006dc4 <xTaskGenericNotifyFromISR.constprop.0.isra.0+0x8>
 8006dc2:	e7fe      	b.n	8006dc2 <xTaskGenericNotifyFromISR.constprop.0.isra.0+0x6>
 8006dc4:	f7fe fa9c 	bl	8005300 <vPortValidateInterruptPriority>
 8006dc8:	f7fd ff30 	bl	8004c2c <ulPortEnterCriticalFromISR>
 8006dcc:	2202      	movs	r2, #2
 8006dce:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
 8006dd2:	4606      	mov	r6, r0
 8006dd4:	2b01      	cmp	r3, #1
 8006dd6:	f884 2064 	strb.w	r2, [r4, #100]	; 0x64
 8006dda:	b2dd      	uxtb	r5, r3
 8006ddc:	6621      	str	r1, [r4, #96]	; 0x60
 8006dde:	d11f      	bne.n	8006e20 <xTaskGenericNotifyFromISR.constprop.0.isra.0+0x64>
 8006de0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006de2:	b103      	cbz	r3, 8006de6 <xTaskGenericNotifyFromISR.constprop.0.isra.0+0x2a>
 8006de4:	e7fe      	b.n	8006de4 <xTaskGenericNotifyFromISR.constprop.0.isra.0+0x28>
 8006de6:	4b13      	ldr	r3, [pc, #76]	; (8006e34 <xTaskGenericNotifyFromISR.constprop.0.isra.0+0x78>)
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	b9f3      	cbnz	r3, 8006e2a <xTaskGenericNotifyFromISR.constprop.0.isra.0+0x6e>
 8006dec:	1d27      	adds	r7, r4, #4
 8006dee:	4638      	mov	r0, r7
 8006df0:	f7fe fb83 	bl	80054fa <uxListRemove>
 8006df4:	4a10      	ldr	r2, [pc, #64]	; (8006e38 <xTaskGenericNotifyFromISR.constprop.0.isra.0+0x7c>)
 8006df6:	2014      	movs	r0, #20
 8006df8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006dfa:	6811      	ldr	r1, [r2, #0]
 8006dfc:	409d      	lsls	r5, r3
 8006dfe:	430d      	orrs	r5, r1
 8006e00:	4639      	mov	r1, r7
 8006e02:	6015      	str	r5, [r2, #0]
 8006e04:	4a0d      	ldr	r2, [pc, #52]	; (8006e3c <xTaskGenericNotifyFromISR.constprop.0.isra.0+0x80>)
 8006e06:	fb00 2003 	mla	r0, r0, r3, r2
 8006e0a:	f7fe fa9e 	bl	800534a <vListInsertEnd>
 8006e0e:	4b0c      	ldr	r3, [pc, #48]	; (8006e40 <xTaskGenericNotifyFromISR.constprop.0.isra.0+0x84>)
 8006e10:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e16:	429a      	cmp	r2, r3
 8006e18:	bf82      	ittt	hi
 8006e1a:	2201      	movhi	r2, #1
 8006e1c:	4b09      	ldrhi	r3, [pc, #36]	; (8006e44 <xTaskGenericNotifyFromISR.constprop.0.isra.0+0x88>)
 8006e1e:	601a      	strhi	r2, [r3, #0]
 8006e20:	4630      	mov	r0, r6
 8006e22:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006e26:	f7fd bf1b 	b.w	8004c60 <vPortExitCriticalFromISR>
 8006e2a:	4807      	ldr	r0, [pc, #28]	; (8006e48 <xTaskGenericNotifyFromISR.constprop.0.isra.0+0x8c>)
 8006e2c:	f104 0118 	add.w	r1, r4, #24
 8006e30:	e7eb      	b.n	8006e0a <xTaskGenericNotifyFromISR.constprop.0.isra.0+0x4e>
 8006e32:	bf00      	nop
 8006e34:	2000136c 	.word	0x2000136c
 8006e38:	20001374 	.word	0x20001374
 8006e3c:	200011b8 	.word	0x200011b8
 8006e40:	200011a8 	.word	0x200011a8
 8006e44:	2000164c 	.word	0x2000164c
 8006e48:	20001600 	.word	0x20001600

08006e4c <osalThreadResumeI.part.0.lto_priv.0>:
{
    osalDbgCheck(mutex != NULL);
    xSemaphoreGive(mutex->handle);
}

static inline void osalThreadResumeI(thread_reference_t* thread_reference, msg_t msg)
 8006e4c:	b510      	push	{r4, lr}
 8006e4e:	4604      	mov	r4, r0
{
    osalDbgCheckClassI();
    if(*thread_reference) {
 8006e50:	6800      	ldr	r0, [r0, #0]
 8006e52:	b118      	cbz	r0, 8006e5c <osalThreadResumeI.part.0.lto_priv.0+0x10>
        xTaskNotifyFromISR( *thread_reference, msg, eSetValueWithOverwrite, NULL );
 8006e54:	f7ff ffb2 	bl	8006dbc <xTaskGenericNotifyFromISR.constprop.0.isra.0>
        *thread_reference = NULL;
 8006e58:	2300      	movs	r3, #0
 8006e5a:	6023      	str	r3, [r4, #0]
    }
}
 8006e5c:	bd10      	pop	{r4, pc}

08006e5e <osalThreadDequeueI>:
 8006e5e:	4603      	mov	r3, r0
 8006e60:	b507      	push	{r0, r1, r2, lr}
 8006e62:	6840      	ldr	r0, [r0, #4]
 8006e64:	b160      	cbz	r0, 8006e80 <osalThreadDequeueI+0x22>
 8006e66:	6d82      	ldr	r2, [r0, #88]	; 0x58
 8006e68:	9001      	str	r0, [sp, #4]
 8006e6a:	b162      	cbz	r2, 8006e86 <osalThreadDequeueI+0x28>
 8006e6c:	2000      	movs	r0, #0
 8006e6e:	6550      	str	r0, [r2, #84]	; 0x54
 8006e70:	605a      	str	r2, [r3, #4]
 8006e72:	f3ef 8311 	mrs	r3, BASEPRI
 8006e76:	b143      	cbz	r3, 8006e8a <osalThreadDequeueI+0x2c>
 8006e78:	a801      	add	r0, sp, #4
 8006e7a:	f7ff ffe7 	bl	8006e4c <osalThreadResumeI.part.0.lto_priv.0>
 8006e7e:	2001      	movs	r0, #1
 8006e80:	b003      	add	sp, #12
 8006e82:	f85d fb04 	ldr.w	pc, [sp], #4
 8006e86:	601a      	str	r2, [r3, #0]
 8006e88:	e7f2      	b.n	8006e70 <osalThreadDequeueI+0x12>
 8006e8a:	f7fd fc5b 	bl	8004744 <vTaskEndScheduler>
 8006e8e:	e7fe      	b.n	8006e8e <osalThreadDequeueI+0x30>

08006e90 <osalThreadDequeueNextI.constprop.0>:
 8006e90:	b508      	push	{r3, lr}
 8006e92:	b910      	cbnz	r0, 8006e9a <osalThreadDequeueNextI.constprop.0+0xa>
 8006e94:	f7fd fc56 	bl	8004744 <vTaskEndScheduler>
 8006e98:	e7fe      	b.n	8006e98 <osalThreadDequeueNextI.constprop.0+0x8>
 8006e9a:	f3ef 8311 	mrs	r3, BASEPRI
 8006e9e:	b123      	cbz	r3, 8006eaa <osalThreadDequeueNextI.constprop.0+0x1a>
 8006ea0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8006ea4:	2100      	movs	r1, #0
 8006ea6:	f7ff bfda 	b.w	8006e5e <osalThreadDequeueI>
 8006eaa:	f7fd fc4b 	bl	8004744 <vTaskEndScheduler>
 8006eae:	e7fe      	b.n	8006eae <osalThreadDequeueNextI.constprop.0+0x1e>

08006eb0 <osalThreadDequeueAllI.constprop.0>:
 8006eb0:	b510      	push	{r4, lr}
 8006eb2:	4604      	mov	r4, r0
 8006eb4:	b910      	cbnz	r0, 8006ebc <osalThreadDequeueAllI.constprop.0+0xc>
 8006eb6:	f7fd fc45 	bl	8004744 <vTaskEndScheduler>
 8006eba:	e7fe      	b.n	8006eba <osalThreadDequeueAllI.constprop.0+0xa>
 8006ebc:	f3ef 8311 	mrs	r3, BASEPRI
 8006ec0:	b913      	cbnz	r3, 8006ec8 <osalThreadDequeueAllI.constprop.0+0x18>
 8006ec2:	f7fd fc3f 	bl	8004744 <vTaskEndScheduler>
 8006ec6:	e7fe      	b.n	8006ec6 <osalThreadDequeueAllI.constprop.0+0x16>
 8006ec8:	f06f 0101 	mvn.w	r1, #1
 8006ecc:	4620      	mov	r0, r4
 8006ece:	f7ff ffc6 	bl	8006e5e <osalThreadDequeueI>
 8006ed2:	2800      	cmp	r0, #0
 8006ed4:	d1f8      	bne.n	8006ec8 <osalThreadDequeueAllI.constprop.0+0x18>
 8006ed6:	bd10      	pop	{r4, pc}

08006ed8 <osalEventBroadcastFlagsI>:
 8006ed8:	b570      	push	{r4, r5, r6, lr}
 8006eda:	4604      	mov	r4, r0
 8006edc:	b910      	cbnz	r0, 8006ee4 <osalEventBroadcastFlagsI+0xc>
 8006ede:	f7fd fc31 	bl	8004744 <vTaskEndScheduler>
 8006ee2:	e7fe      	b.n	8006ee2 <osalEventBroadcastFlagsI+0xa>
 8006ee4:	f3ef 8311 	mrs	r3, BASEPRI
 8006ee8:	b34b      	cbz	r3, 8006f3e <osalEventBroadcastFlagsI+0x66>
 8006eea:	6846      	ldr	r6, [r0, #4]
 8006eec:	68c3      	ldr	r3, [r0, #12]
 8006eee:	430e      	orrs	r6, r1
 8006ef0:	6046      	str	r6, [r0, #4]
 8006ef2:	b10b      	cbz	r3, 8006ef8 <osalEventBroadcastFlagsI+0x20>
 8006ef4:	4631      	mov	r1, r6
 8006ef6:	4798      	blx	r3
 8006ef8:	6825      	ldr	r5, [r4, #0]
 8006efa:	b965      	cbnz	r5, 8006f16 <osalEventBroadcastFlagsI+0x3e>
 8006efc:	6863      	ldr	r3, [r4, #4]
 8006efe:	b30b      	cbz	r3, 8006f44 <osalEventBroadcastFlagsI+0x6c>
 8006f00:	f3ef 8311 	mrs	r3, BASEPRI
 8006f04:	b1c3      	cbz	r3, 8006f38 <osalEventBroadcastFlagsI+0x60>
 8006f06:	f104 0008 	add.w	r0, r4, #8
 8006f0a:	f06f 0102 	mvn.w	r1, #2
 8006f0e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006f12:	f7ff bf9b 	b.w	8006e4c <osalThreadResumeI.part.0.lto_priv.0>
 8006f16:	692b      	ldr	r3, [r5, #16]
 8006f18:	421e      	tst	r6, r3
 8006f1a:	d006      	beq.n	8006f2a <osalEventBroadcastFlagsI+0x52>
 8006f1c:	696b      	ldr	r3, [r5, #20]
 8006f1e:	69a9      	ldr	r1, [r5, #24]
 8006f20:	4333      	orrs	r3, r6
 8006f22:	68e8      	ldr	r0, [r5, #12]
 8006f24:	616b      	str	r3, [r5, #20]
 8006f26:	f7ff ffd7 	bl	8006ed8 <osalEventBroadcastFlagsI>
 8006f2a:	692a      	ldr	r2, [r5, #16]
 8006f2c:	6863      	ldr	r3, [r4, #4]
 8006f2e:	682d      	ldr	r5, [r5, #0]
 8006f30:	ea23 0302 	bic.w	r3, r3, r2
 8006f34:	6063      	str	r3, [r4, #4]
 8006f36:	e7e0      	b.n	8006efa <osalEventBroadcastFlagsI+0x22>
 8006f38:	f7fd fc04 	bl	8004744 <vTaskEndScheduler>
 8006f3c:	e7fe      	b.n	8006f3c <osalEventBroadcastFlagsI+0x64>
 8006f3e:	f7fd fc01 	bl	8004744 <vTaskEndScheduler>
 8006f42:	e7fe      	b.n	8006f42 <osalEventBroadcastFlagsI+0x6a>
 8006f44:	bd70      	pop	{r4, r5, r6, pc}

08006f46 <sduDataTransmitted>:
  SerialUSBDriver *sdup = usbp->in_params[ep - 1U];
 8006f46:	eb00 0381 	add.w	r3, r0, r1, lsl #2
void sduDataTransmitted(USBDriver *usbp, usbep_t ep) {
 8006f4a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  SerialUSBDriver *sdup = usbp->in_params[ep - 1U];
 8006f4e:	6a9c      	ldr	r4, [r3, #40]	; 0x28
void sduDataTransmitted(USBDriver *usbp, usbep_t ep) {
 8006f50:	4605      	mov	r5, r0
 8006f52:	460e      	mov	r6, r1
  if (sdup == NULL) {
 8006f54:	b394      	cbz	r4, 8006fbc <sduDataTransmitted+0x76>
  osalSysLockFromISR();
 8006f56:	f7fd fe7b 	bl	8004c50 <osalSysLockFromISR.lto_priv.0>
  chnAddFlagsI(sdup, CHN_OUTPUT_EMPTY);
 8006f5a:	2108      	movs	r1, #8
 8006f5c:	1d20      	adds	r0, r4, #4
 8006f5e:	eb05 0786 	add.w	r7, r5, r6, lsl #2
 8006f62:	f7ff ffb9 	bl	8006ed8 <osalEventBroadcastFlagsI>
  if (usbp->epc[ep]->in_state->txsize > 0U) {
 8006f66:	68fb      	ldr	r3, [r7, #12]
    obqReleaseEmptyBufferI(&sdup->obqueue);
 8006f68:	f104 0850 	add.w	r8, r4, #80	; 0x50
  if (usbp->epc[ep]->in_state->txsize > 0U) {
 8006f6c:	695b      	ldr	r3, [r3, #20]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	b1bb      	cbz	r3, 8006fa2 <sduDataTransmitted+0x5c>
	__asm volatile( "mrs %0, basepri" : "=r"( ulBasePri ) );
 8006f72:	f3ef 8311 	mrs	r3, BASEPRI
	return (ulBasePri > 0)? pdTRUE : pdFALSE;
 8006f76:	b33b      	cbz	r3, 8006fc8 <sduDataTransmitted+0x82>
  osalDbgAssert(!obqIsEmptyI(obqp), "buffers queue empty");
 8006f78:	e9d4 2318 	ldrd	r2, r3, [r4, #96]	; 0x60
 8006f7c:	429a      	cmp	r2, r3
 8006f7e:	d104      	bne.n	8006f8a <sduDataTransmitted+0x44>
 8006f80:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8006f82:	b112      	cbz	r2, 8006f8a <sduDataTransmitted+0x44>
 8006f84:	f7fd fbde 	bl	8004744 <vTaskEndScheduler>
 8006f88:	e7fe      	b.n	8006f88 <sduDataTransmitted+0x42>
  obqp->bcounter++;
 8006f8a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8006f8c:	3201      	adds	r2, #1
 8006f8e:	65e2      	str	r2, [r4, #92]	; 0x5c
  obqp->brdptr += obqp->bsize;
 8006f90:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8006f92:	4413      	add	r3, r2
  if (obqp->brdptr >= obqp->btop) {
 8006f94:	6ea2      	ldr	r2, [r4, #104]	; 0x68
  obqp->brdptr += obqp->bsize;
 8006f96:	6663      	str	r3, [r4, #100]	; 0x64
  if (obqp->brdptr >= obqp->btop) {
 8006f98:	4293      	cmp	r3, r2
 8006f9a:	d212      	bcs.n	8006fc2 <sduDataTransmitted+0x7c>
  osalThreadDequeueNextI(&obqp->waiting, MSG_OK);
 8006f9c:	4640      	mov	r0, r8
 8006f9e:	f7ff ff77 	bl	8006e90 <osalThreadDequeueNextI.constprop.0>
  buf = obqGetFullBufferI(&sdup->obqueue, &n);
 8006fa2:	4640      	mov	r0, r8
 8006fa4:	a901      	add	r1, sp, #4
 8006fa6:	f7fd fbff 	bl	80047a8 <obqGetFullBufferI>
  if (buf != NULL) {
 8006faa:	4602      	mov	r2, r0
 8006fac:	b178      	cbz	r0, 8006fce <sduDataTransmitted+0x88>
    usbStartTransmitI(usbp, ep, buf, n);
 8006fae:	9b01      	ldr	r3, [sp, #4]
    usbStartTransmitI(usbp, ep, usbp->setup, 0);
 8006fb0:	4631      	mov	r1, r6
 8006fb2:	4628      	mov	r0, r5
 8006fb4:	f7fd fc90 	bl	80048d8 <usbStartTransmitI>
  osalSysUnlockFromISR();
 8006fb8:	f7fd fe5e 	bl	8004c78 <osalSysUnlockFromISR.lto_priv.0>
}
 8006fbc:	b002      	add	sp, #8
 8006fbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    obqp->brdptr = obqp->buffers;
 8006fc2:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8006fc4:	6663      	str	r3, [r4, #100]	; 0x64
 8006fc6:	e7e9      	b.n	8006f9c <sduDataTransmitted+0x56>
  osalDbgCheckClassI();
 8006fc8:	f7fd fbbc 	bl	8004744 <vTaskEndScheduler>
 8006fcc:	e7fe      	b.n	8006fcc <sduDataTransmitted+0x86>
  else if ((usbp->epc[ep]->in_state->txsize > 0U) &&
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	695a      	ldr	r2, [r3, #20]
 8006fd2:	6812      	ldr	r2, [r2, #0]
 8006fd4:	b132      	cbz	r2, 8006fe4 <sduDataTransmitted+0x9e>
            ((size_t)usbp->epc[ep]->in_maxsize - 1U)) == 0U)) {
 8006fd6:	8a1b      	ldrh	r3, [r3, #16]
 8006fd8:	3b01      	subs	r3, #1
  else if ((usbp->epc[ep]->in_state->txsize > 0U) &&
 8006fda:	4013      	ands	r3, r2
 8006fdc:	d102      	bne.n	8006fe4 <sduDataTransmitted+0x9e>
    usbStartTransmitI(usbp, ep, usbp->setup, 0);
 8006fde:	f105 0274 	add.w	r2, r5, #116	; 0x74
 8006fe2:	e7e5      	b.n	8006fb0 <sduDataTransmitted+0x6a>
    if(sdup->config->sofCallback) sdup->config->sofCallback(sdup->config->usbp, true);
 8006fe4:	f8d4 2498 	ldr.w	r2, [r4, #1176]	; 0x498
 8006fe8:	6893      	ldr	r3, [r2, #8]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d0e4      	beq.n	8006fb8 <sduDataTransmitted+0x72>
 8006fee:	2101      	movs	r1, #1
 8006ff0:	6810      	ldr	r0, [r2, #0]
 8006ff2:	4798      	blx	r3
 8006ff4:	e7e0      	b.n	8006fb8 <sduDataTransmitted+0x72>

08006ff6 <osalThreadResumeI.lto_priv.0>:
{
 8006ff6:	b508      	push	{r3, lr}
	__asm volatile( "mrs %0, basepri" : "=r"( ulBasePri ) );
 8006ff8:	f3ef 8311 	mrs	r3, BASEPRI
	return (ulBasePri > 0)? pdTRUE : pdFALSE;
 8006ffc:	b11b      	cbz	r3, 8007006 <osalThreadResumeI.lto_priv.0+0x10>
}
 8006ffe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8007002:	f7ff bf23 	b.w	8006e4c <osalThreadResumeI.part.0.lto_priv.0>
    osalDbgCheckClassI();
 8007006:	f7fd fb9d 	bl	8004744 <vTaskEndScheduler>
 800700a:	e7fe      	b.n	800700a <osalThreadResumeI.lto_priv.0+0x14>

0800700c <i2c_lld_serve_rx_end_irq>:
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 800700c:	f011 0108 	ands.w	r1, r1, #8
static void i2c_lld_serve_rx_end_irq(I2CDriver *i2cp, uint32_t flags) {
 8007010:	b538      	push	{r3, r4, r5, lr}
 8007012:	4604      	mov	r4, r0
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8007014:	d002      	beq.n	800701c <i2c_lld_serve_rx_end_irq+0x10>
    STM32_I2C_DMA_ERROR_HOOK(i2cp);
 8007016:	f7fd fb95 	bl	8004744 <vTaskEndScheduler>
 800701a:	e7fe      	b.n	800701a <i2c_lld_serve_rx_end_irq+0xe>
  dmaStreamDisable(i2cp->dmarx);
 800701c:	6f02      	ldr	r2, [r0, #112]	; 0x70
  I2C_TypeDef *dp = i2cp->i2c;
 800701e:	6f83      	ldr	r3, [r0, #120]	; 0x78
  dmaStreamDisable(i2cp->dmarx);
 8007020:	6855      	ldr	r5, [r2, #4]
 8007022:	6828      	ldr	r0, [r5, #0]
 8007024:	f020 000f 	bic.w	r0, r0, #15
 8007028:	6028      	str	r0, [r5, #0]
 800702a:	7c15      	ldrb	r5, [r2, #16]
 800702c:	6810      	ldr	r0, [r2, #0]
 800702e:	220e      	movs	r2, #14
 8007030:	40aa      	lsls	r2, r5
 8007032:	6042      	str	r2, [r0, #4]
  dp->CR2 &= ~I2C_CR2_LAST;
 8007034:	685a      	ldr	r2, [r3, #4]
 8007036:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800703a:	605a      	str	r2, [r3, #4]
  dp->CR1 &= ~I2C_CR1_ACK;
 800703c:	681a      	ldr	r2, [r3, #0]
 800703e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007042:	601a      	str	r2, [r3, #0]
  dp->CR1 |= I2C_CR1_STOP;
 8007044:	681a      	ldr	r2, [r3, #0]
 8007046:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800704a:	601a      	str	r2, [r3, #0]
  _i2c_wakeup_isr(i2cp);
 800704c:	f7fd fe00 	bl	8004c50 <osalSysLockFromISR.lto_priv.0>
 8007050:	f104 0060 	add.w	r0, r4, #96	; 0x60
 8007054:	f7ff ffcf 	bl	8006ff6 <osalThreadResumeI.lto_priv.0>
}
 8007058:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  _i2c_wakeup_isr(i2cp);
 800705c:	f7fd be0c 	b.w	8004c78 <osalSysUnlockFromISR.lto_priv.0>

08007060 <VectorBC>:
/**
 * @brief   I2C1 event interrupt handler.
 *
 * @notapi
 */
OSAL_IRQ_HANDLER(STM32_I2C1_EVENT_HANDLER) {
 8007060:	b570      	push	{r4, r5, r6, lr}
  I2C_TypeDef *dp = i2cp->i2c;
 8007062:	4d4d      	ldr	r5, [pc, #308]	; (8007198 <VectorBC+0x138>)
 8007064:	6fac      	ldr	r4, [r5, #120]	; 0x78
  i2cp->numInterrupts++;
 8007066:	f8d5 2080 	ldr.w	r2, [r5, #128]	; 0x80
  uint32_t regSR2 = dp->SR2;
 800706a:	69a3      	ldr	r3, [r4, #24]
  uint32_t event = dp->SR1;
 800706c:	6966      	ldr	r6, [r4, #20]
  i2cp->numInterrupts++;
 800706e:	3201      	adds	r2, #1
  if ((event & I2C_SR1_BERR) || (i2cp->numInterrupts>=30)) {
 8007070:	05f1      	lsls	r1, r6, #23
  i2cp->numInterrupts++;
 8007072:	f8c5 2080 	str.w	r2, [r5, #128]	; 0x80
  if ((event & I2C_SR1_BERR) || (i2cp->numInterrupts>=30)) {
 8007076:	d401      	bmi.n	800707c <VectorBC+0x1c>
 8007078:	2a1d      	cmp	r2, #29
 800707a:	d91c      	bls.n	80070b6 <VectorBC+0x56>
    dp->SR1 &= ~I2C_SR1_BERR;
 800707c:	6963      	ldr	r3, [r4, #20]
    _i2c_wakeup_error_isr(i2cp);
 800707e:	f06f 0101 	mvn.w	r1, #1
    dp->SR1 &= ~I2C_SR1_BERR;
 8007082:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007086:	6163      	str	r3, [r4, #20]
    dp->CR2 &=~ I2C_CR2_ITEVTEN | I2C_CR2_ITERREN | I2C_CR2_ITBUFEN;
 8007088:	6863      	ldr	r3, [r4, #4]
 800708a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800708e:	6063      	str	r3, [r4, #4]
    i2cp->errors = I2C_BUS_ERROR;
 8007090:	2301      	movs	r3, #1
 8007092:	60ab      	str	r3, [r5, #8]
    _i2c_wakeup_error_isr(i2cp);
 8007094:	f7fd fddc 	bl	8004c50 <osalSysLockFromISR.lto_priv.0>
 8007098:	4840      	ldr	r0, [pc, #256]	; (800719c <VectorBC+0x13c>)
 800709a:	f7ff ffac 	bl	8006ff6 <osalThreadResumeI.lto_priv.0>
 800709e:	f7fd fdeb 	bl	8004c78 <osalSysUnlockFromISR.lto_priv.0>
 80070a2:	2100      	movs	r1, #0
 80070a4:	4b3e      	ldr	r3, [pc, #248]	; (80071a0 <VectorBC+0x140>)
 80070a6:	681a      	ldr	r2, [r3, #0]
 80070a8:	6019      	str	r1, [r3, #0]

  OSAL_IRQ_PROLOGUE();

  i2c_lld_serve_event_interrupt(&I2CD1);

  OSAL_IRQ_EPILOGUE();
 80070aa:	2a00      	cmp	r2, #0
 80070ac:	d072      	beq.n	8007194 <VectorBC+0x134>
}
 80070ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80070b2:	f7fc be67 	b.w	8003d84 <Vector6C.part.0>
  switch (I2C_EV_MASK & (event | (regSR2 << 16))) {
 80070b6:	4a3b      	ldr	r2, [pc, #236]	; (80071a4 <VectorBC+0x144>)
 80070b8:	ea46 4303 	orr.w	r3, r6, r3, lsl #16
 80070bc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80070c0:	4293      	cmp	r3, r2
 80070c2:	d030      	beq.n	8007126 <VectorBC+0xc6>
 80070c4:	d80a      	bhi.n	80070dc <VectorBC+0x7c>
 80070c6:	3a07      	subs	r2, #7
 80070c8:	4293      	cmp	r3, r2
 80070ca:	d01d      	beq.n	8007108 <VectorBC+0xa8>
 80070cc:	3201      	adds	r2, #1
 80070ce:	4293      	cmp	r3, r2
 80070d0:	d02e      	beq.n	8007130 <VectorBC+0xd0>
  if (event & (I2C_SR1_ADDR | I2C_SR1_ADD10))
 80070d2:	f016 0f0a 	tst.w	r6, #10
    (void)dp->SR2;
 80070d6:	bf18      	it	ne
 80070d8:	69a3      	ldrne	r3, [r4, #24]
 80070da:	e7e2      	b.n	80070a2 <VectorBC+0x42>
  switch (I2C_EV_MASK & (event | (regSR2 << 16))) {
 80070dc:	4a32      	ldr	r2, [pc, #200]	; (80071a8 <VectorBC+0x148>)
 80070de:	4293      	cmp	r3, r2
 80070e0:	d03c      	beq.n	800715c <VectorBC+0xfc>
 80070e2:	3202      	adds	r2, #2
 80070e4:	4293      	cmp	r3, r2
 80070e6:	d1f4      	bne.n	80070d2 <VectorBC+0x72>
    if (dmaStreamGetTransactionSize(i2cp->dmarx) > 0) {
 80070e8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80070ea:	685b      	ldr	r3, [r3, #4]
 80070ec:	6859      	ldr	r1, [r3, #4]
 80070ee:	2900      	cmp	r1, #0
 80070f0:	d03f      	beq.n	8007172 <VectorBC+0x112>
      i2cp->addr |= 0x01;
 80070f2:	f8b5 3064 	ldrh.w	r3, [r5, #100]	; 0x64
 80070f6:	f043 0301 	orr.w	r3, r3, #1
 80070fa:	f8a5 3064 	strh.w	r3, [r5, #100]	; 0x64
      dp->CR1 |= I2C_CR1_START | I2C_CR1_ACK;
 80070fe:	6823      	ldr	r3, [r4, #0]
 8007100:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
 8007104:	6023      	str	r3, [r4, #0]
 8007106:	e7cc      	b.n	80070a2 <VectorBC+0x42>
    if ((i2cp->addr >> 8) > 0) { 
 8007108:	f8b5 2064 	ldrh.w	r2, [r5, #100]	; 0x64
 800710c:	0a13      	lsrs	r3, r2, #8
 800710e:	d008      	beq.n	8007122 <VectorBC+0xc2>
      dp->DR = 0xF0 | (0x6 & (i2cp->addr >> 8)) | (0x1 & i2cp->addr);
 8007110:	f003 0306 	and.w	r3, r3, #6
 8007114:	f002 0201 	and.w	r2, r2, #1
 8007118:	4313      	orrs	r3, r2
 800711a:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
    dp->DR = (0xFF & (i2cp->addr >> 1));
 800711e:	6123      	str	r3, [r4, #16]
 8007120:	e7d7      	b.n	80070d2 <VectorBC+0x72>
      dp->DR = i2cp->addr;
 8007122:	6122      	str	r2, [r4, #16]
 8007124:	e7d5      	b.n	80070d2 <VectorBC+0x72>
    dp->DR = (0xFF & (i2cp->addr >> 1));
 8007126:	f8b5 3064 	ldrh.w	r3, [r5, #100]	; 0x64
 800712a:	f3c3 0347 	ubfx	r3, r3, #1, #8
 800712e:	e7f6      	b.n	800711e <VectorBC+0xbe>
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 8007130:	6863      	ldr	r3, [r4, #4]
 8007132:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007136:	6063      	str	r3, [r4, #4]
    dmaStreamEnable(i2cp->dmarx);
 8007138:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800713a:	685b      	ldr	r3, [r3, #4]
 800713c:	681a      	ldr	r2, [r3, #0]
 800713e:	f042 0201 	orr.w	r2, r2, #1
 8007142:	601a      	str	r2, [r3, #0]
    dp->CR2 |= I2C_CR2_LAST;                 /* Needed in receiver mode. */
 8007144:	6862      	ldr	r2, [r4, #4]
 8007146:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800714a:	6062      	str	r2, [r4, #4]
    if (dmaStreamGetTransactionSize(i2cp->dmarx) < 2)
 800714c:	685b      	ldr	r3, [r3, #4]
 800714e:	2b01      	cmp	r3, #1
 8007150:	d8bf      	bhi.n	80070d2 <VectorBC+0x72>
      dp->CR1 &= ~I2C_CR1_ACK;
 8007152:	6823      	ldr	r3, [r4, #0]
 8007154:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007158:	6023      	str	r3, [r4, #0]
 800715a:	e7ba      	b.n	80070d2 <VectorBC+0x72>
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 800715c:	6863      	ldr	r3, [r4, #4]
 800715e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007162:	6063      	str	r3, [r4, #4]
    dmaStreamEnable(i2cp->dmatx);
 8007164:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8007166:	685a      	ldr	r2, [r3, #4]
 8007168:	6813      	ldr	r3, [r2, #0]
 800716a:	f043 0301 	orr.w	r3, r3, #1
 800716e:	6013      	str	r3, [r2, #0]
 8007170:	e7af      	b.n	80070d2 <VectorBC+0x72>
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 8007172:	6863      	ldr	r3, [r4, #4]
 8007174:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007178:	6063      	str	r3, [r4, #4]
    dp->CR1 |= I2C_CR1_STOP;
 800717a:	6823      	ldr	r3, [r4, #0]
 800717c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007180:	6023      	str	r3, [r4, #0]
    _i2c_wakeup_isr(i2cp);
 8007182:	f7fd fd65 	bl	8004c50 <osalSysLockFromISR.lto_priv.0>
 8007186:	f105 0060 	add.w	r0, r5, #96	; 0x60
 800718a:	f7ff ff34 	bl	8006ff6 <osalThreadResumeI.lto_priv.0>
 800718e:	f7fd fd73 	bl	8004c78 <osalSysUnlockFromISR.lto_priv.0>
 8007192:	e79e      	b.n	80070d2 <VectorBC+0x72>
}
 8007194:	bd70      	pop	{r4, r5, r6, pc}
 8007196:	bf00      	nop
 8007198:	20000934 	.word	0x20000934
 800719c:	20000994 	.word	0x20000994
 80071a0:	2000164c 	.word	0x2000164c
 80071a4:	00030008 	.word	0x00030008
 80071a8:	00070082 	.word	0x00070082

080071ac <VectorC0>:

/**
 * @brief   I2C1 error interrupt handler.
 */
OSAL_IRQ_HANDLER(STM32_I2C1_ERROR_HANDLER) {
 80071ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint16_t sr = I2CD1.i2c->SR1;
 80071ae:	4b35      	ldr	r3, [pc, #212]	; (8007284 <VectorC0+0xd8>)
 80071b0:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80071b2:	6951      	ldr	r1, [r2, #20]

  OSAL_IRQ_PROLOGUE();

  I2CD1.i2c->SR1 = ~(sr & I2C_ERROR_MASK);
 80071b4:	f401 445f 	and.w	r4, r1, #57088	; 0xdf00
 80071b8:	43e4      	mvns	r4, r4
 80071ba:	6154      	str	r4, [r2, #20]
  dmaStreamDisable(i2cp->dmatx);
 80071bc:	6f5c      	ldr	r4, [r3, #116]	; 0x74
  uint16_t sr = I2CD1.i2c->SR1;
 80071be:	b288      	uxth	r0, r1
  dmaStreamDisable(i2cp->dmatx);
 80071c0:	6866      	ldr	r6, [r4, #4]
 80071c2:	6835      	ldr	r5, [r6, #0]
 80071c4:	f025 050f 	bic.w	r5, r5, #15
 80071c8:	6035      	str	r5, [r6, #0]
 80071ca:	7c25      	ldrb	r5, [r4, #16]
 80071cc:	6826      	ldr	r6, [r4, #0]
 80071ce:	240e      	movs	r4, #14
 80071d0:	fa04 f505 	lsl.w	r5, r4, r5
 80071d4:	6075      	str	r5, [r6, #4]
  dmaStreamDisable(i2cp->dmarx);
 80071d6:	6f1d      	ldr	r5, [r3, #112]	; 0x70
 80071d8:	686f      	ldr	r7, [r5, #4]
 80071da:	683e      	ldr	r6, [r7, #0]
 80071dc:	f026 060f 	bic.w	r6, r6, #15
 80071e0:	603e      	str	r6, [r7, #0]
 80071e2:	682e      	ldr	r6, [r5, #0]
 80071e4:	7c2d      	ldrb	r5, [r5, #16]
 80071e6:	40ac      	lsls	r4, r5
 80071e8:	6074      	str	r4, [r6, #4]
  i2cp->numInterrupts++;
 80071ea:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 80071ee:	3401      	adds	r4, #1
 80071f0:	f8c3 4080 	str.w	r4, [r3, #128]	; 0x80
  if (sr & I2C_SR1_BERR)                            /* Bus error.           */
 80071f4:	f411 7480 	ands.w	r4, r1, #256	; 0x100
    i2cp->errors |= I2C_BUS_ERROR;
 80071f8:	bf18      	it	ne
 80071fa:	2401      	movne	r4, #1
  if (sr & I2C_SR1_ARLO)                            /* Arbitration lost.    */
 80071fc:	0587      	lsls	r7, r0, #22
    i2cp->errors |= I2C_BUS_ERROR;
 80071fe:	609c      	str	r4, [r3, #8]
    i2cp->errors |= I2C_ARBITRATION_LOST;
 8007200:	bf42      	ittt	mi
 8007202:	689c      	ldrmi	r4, [r3, #8]
 8007204:	f044 0402 	orrmi.w	r4, r4, #2
 8007208:	609c      	strmi	r4, [r3, #8]
  if (sr & I2C_SR1_AF) {                            /* Acknowledge fail.    */
 800720a:	0546      	lsls	r6, r0, #21
 800720c:	d50b      	bpl.n	8007226 <VectorC0+0x7a>
    i2cp->i2c->CR2 &= ~I2C_CR2_ITEVTEN;
 800720e:	6855      	ldr	r5, [r2, #4]
    i2cp->errors |= I2C_ACK_FAILURE;
 8007210:	689c      	ldr	r4, [r3, #8]
    i2cp->i2c->CR2 &= ~I2C_CR2_ITEVTEN;
 8007212:	f425 7500 	bic.w	r5, r5, #512	; 0x200
 8007216:	6055      	str	r5, [r2, #4]
    i2cp->i2c->CR1 |= I2C_CR1_STOP;                 /* Setting stop bit.    */
 8007218:	6815      	ldr	r5, [r2, #0]
    i2cp->errors |= I2C_ACK_FAILURE;
 800721a:	f044 0404 	orr.w	r4, r4, #4
    i2cp->i2c->CR1 |= I2C_CR1_STOP;                 /* Setting stop bit.    */
 800721e:	f445 7500 	orr.w	r5, r5, #512	; 0x200
 8007222:	6015      	str	r5, [r2, #0]
    i2cp->errors |= I2C_ACK_FAILURE;
 8007224:	609c      	str	r4, [r3, #8]
  if (sr & I2C_SR1_OVR)                             /* Overrun.             */
 8007226:	0505      	lsls	r5, r0, #20
    i2cp->errors |= I2C_OVERRUN;
 8007228:	bf42      	ittt	mi
 800722a:	689a      	ldrmi	r2, [r3, #8]
 800722c:	f042 0208 	orrmi.w	r2, r2, #8
 8007230:	609a      	strmi	r2, [r3, #8]
  if (sr & I2C_SR1_TIMEOUT)                         /* SMBus Timeout.       */
 8007232:	0444      	lsls	r4, r0, #17
    i2cp->errors |= I2C_TIMEOUT;
 8007234:	bf42      	ittt	mi
 8007236:	689a      	ldrmi	r2, [r3, #8]
 8007238:	f042 0220 	orrmi.w	r2, r2, #32
 800723c:	609a      	strmi	r2, [r3, #8]
  if (sr & I2C_SR1_PECERR)                          /* PEC error.           */
 800723e:	04c0      	lsls	r0, r0, #19
    i2cp->errors |= I2C_PEC_ERROR;
 8007240:	bf42      	ittt	mi
 8007242:	689a      	ldrmi	r2, [r3, #8]
 8007244:	f042 0210 	orrmi.w	r2, r2, #16
 8007248:	609a      	strmi	r2, [r3, #8]
  if (sr & I2C_SR1_SMBALERT)                        /* SMBus alert.         */
 800724a:	0409      	lsls	r1, r1, #16
    i2cp->errors |= I2C_SMB_ALERT;
 800724c:	689a      	ldr	r2, [r3, #8]
  if (sr & I2C_SR1_SMBALERT)                        /* SMBus alert.         */
 800724e:	d50c      	bpl.n	800726a <VectorC0+0xbe>
    i2cp->errors |= I2C_SMB_ALERT;
 8007250:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007254:	609a      	str	r2, [r3, #8]
    _i2c_wakeup_error_isr(i2cp);
 8007256:	f7fd fcfb 	bl	8004c50 <osalSysLockFromISR.lto_priv.0>
 800725a:	f06f 0101 	mvn.w	r1, #1
 800725e:	480a      	ldr	r0, [pc, #40]	; (8007288 <VectorC0+0xdc>)
 8007260:	f7ff fec9 	bl	8006ff6 <osalThreadResumeI.lto_priv.0>
 8007264:	f7fd fd08 	bl	8004c78 <osalSysUnlockFromISR.lto_priv.0>
 8007268:	e001      	b.n	800726e <VectorC0+0xc2>
  if (i2cp->errors != I2C_NO_ERROR)
 800726a:	2a00      	cmp	r2, #0
 800726c:	d1f3      	bne.n	8007256 <VectorC0+0xaa>
 800726e:	2100      	movs	r1, #0
 8007270:	4b06      	ldr	r3, [pc, #24]	; (800728c <VectorC0+0xe0>)
 8007272:	681a      	ldr	r2, [r3, #0]
 8007274:	6019      	str	r1, [r3, #0]
  i2c_lld_serve_error_interrupt(&I2CD1, sr);

  OSAL_IRQ_EPILOGUE();
 8007276:	b11a      	cbz	r2, 8007280 <VectorC0+0xd4>
}
 8007278:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800727c:	f7fc bd82 	b.w	8003d84 <Vector6C.part.0>
 8007280:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007282:	bf00      	nop
 8007284:	20000934 	.word	0x20000934
 8007288:	20000994 	.word	0x20000994
 800728c:	2000164c 	.word	0x2000164c

08007290 <spi_lld_serve_rx_interrupt>:
static void spi_lld_serve_rx_interrupt(SPIDriver *spip, uint32_t flags) {
 8007290:	b538      	push	{r3, r4, r5, lr}
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8007292:	070b      	lsls	r3, r1, #28
static void spi_lld_serve_rx_interrupt(SPIDriver *spip, uint32_t flags) {
 8007294:	4604      	mov	r4, r0
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8007296:	d502      	bpl.n	800729e <spi_lld_serve_rx_interrupt+0xe>
    STM32_SPI_DMA_ERROR_HOOK(spip);
 8007298:	f7fd fa54 	bl	8004744 <vTaskEndScheduler>
 800729c:	e7fe      	b.n	800729c <spi_lld_serve_rx_interrupt+0xc>
  dmaStreamDisable(spip->dmatx);
 800729e:	6e83      	ldr	r3, [r0, #104]	; 0x68
 80072a0:	6859      	ldr	r1, [r3, #4]
 80072a2:	680a      	ldr	r2, [r1, #0]
 80072a4:	f022 020f 	bic.w	r2, r2, #15
 80072a8:	600a      	str	r2, [r1, #0]
 80072aa:	7c1a      	ldrb	r2, [r3, #16]
 80072ac:	6819      	ldr	r1, [r3, #0]
 80072ae:	230e      	movs	r3, #14
 80072b0:	fa03 f202 	lsl.w	r2, r3, r2
 80072b4:	604a      	str	r2, [r1, #4]
  dmaStreamDisable(spip->dmarx);
 80072b6:	6e42      	ldr	r2, [r0, #100]	; 0x64
 80072b8:	6855      	ldr	r5, [r2, #4]
 80072ba:	6829      	ldr	r1, [r5, #0]
 80072bc:	f021 010f 	bic.w	r1, r1, #15
 80072c0:	6029      	str	r1, [r5, #0]
 80072c2:	6811      	ldr	r1, [r2, #0]
 80072c4:	7c12      	ldrb	r2, [r2, #16]
 80072c6:	4093      	lsls	r3, r2
 80072c8:	604b      	str	r3, [r1, #4]
  _spi_isr_code(spip);
 80072ca:	6843      	ldr	r3, [r0, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	b12b      	cbz	r3, 80072dc <spi_lld_serve_rx_interrupt+0x4c>
 80072d0:	2204      	movs	r2, #4
 80072d2:	7002      	strb	r2, [r0, #0]
 80072d4:	4798      	blx	r3
 80072d6:	7823      	ldrb	r3, [r4, #0]
 80072d8:	2b04      	cmp	r3, #4
 80072da:	d101      	bne.n	80072e0 <spi_lld_serve_rx_interrupt+0x50>
 80072dc:	2302      	movs	r3, #2
 80072de:	7023      	strb	r3, [r4, #0]
 80072e0:	f7fd fcb6 	bl	8004c50 <osalSysLockFromISR.lto_priv.0>
	__asm volatile( "mrs %0, basepri" : "=r"( ulBasePri ) );
 80072e4:	f3ef 8311 	mrs	r3, BASEPRI
	return (ulBasePri > 0)? pdTRUE : pdFALSE;
 80072e8:	b12b      	cbz	r3, 80072f6 <spi_lld_serve_rx_interrupt+0x66>
    if(*thread_reference) {
 80072ea:	68a0      	ldr	r0, [r4, #8]
 80072ec:	b930      	cbnz	r0, 80072fc <spi_lld_serve_rx_interrupt+0x6c>
}
 80072ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  _spi_isr_code(spip);
 80072f2:	f7fd bcc1 	b.w	8004c78 <osalSysUnlockFromISR.lto_priv.0>
    osalDbgCheckClassI();
 80072f6:	f7fd fa25 	bl	8004744 <vTaskEndScheduler>
 80072fa:	e7fe      	b.n	80072fa <spi_lld_serve_rx_interrupt+0x6a>
        xTaskNotifyFromISR( *thread_reference, msg, eSetValueWithOverwrite, NULL );
 80072fc:	2100      	movs	r1, #0
 80072fe:	f7ff fd5d 	bl	8006dbc <xTaskGenericNotifyFromISR.constprop.0.isra.0>
        *thread_reference = NULL;
 8007302:	2300      	movs	r3, #0
 8007304:	60a3      	str	r3, [r4, #8]
 8007306:	e7f2      	b.n	80072ee <spi_lld_serve_rx_interrupt+0x5e>

08007308 <gpioSetPinMode.isra.0>:
bool gpioSetPinMode(uint16_t pin, uint8_t mode)
 8007308:	b510      	push	{r4, lr}
 800730a:	4604      	mov	r4, r0
    const GPIOPort* port = gpioGetPortDriver(gpioPort);
 800730c:	0a00      	lsrs	r0, r0, #8
 800730e:	f7fd f857 	bl	80043c0 <gpioGetPortDriver>
    return port->functions->setMode(port, gpioPin, mode);
 8007312:	6883      	ldr	r3, [r0, #8]
 8007314:	460a      	mov	r2, r1
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	b2e1      	uxtb	r1, r4
}
 800731a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return port->functions->setMode(port, gpioPin, mode);
 800731e:	4718      	bx	r3

08007320 <i2cSafeRawHardwareControl>:
{
 8007320:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    i2cSafeConfig* config = (i2cSafeConfig*)i2c->i2cSafeConfig;
 8007324:	6fc5      	ldr	r5, [r0, #124]	; 0x7c
{
 8007326:	4604      	mov	r4, r0
  osalDbgCheck((i2cp != NULL) && (config != NULL));
 8007328:	b915      	cbnz	r5, 8007330 <i2cSafeRawHardwareControl+0x10>
 800732a:	f7fd fa0b 	bl	8004744 <vTaskEndScheduler>
 800732e:	e7fe      	b.n	800732e <i2cSafeRawHardwareControl+0xe>
  osalDbgAssert((i2cp->state == I2C_STOP) || (i2cp->state == I2C_READY) ||
 8007330:	7803      	ldrb	r3, [r0, #0]
 8007332:	1e5a      	subs	r2, r3, #1
 8007334:	2a01      	cmp	r2, #1
 8007336:	d904      	bls.n	8007342 <i2cSafeRawHardwareControl+0x22>
 8007338:	2b05      	cmp	r3, #5
 800733a:	d002      	beq.n	8007342 <i2cSafeRawHardwareControl+0x22>
 800733c:	f7fd fa02 	bl	8004744 <vTaskEndScheduler>
 8007340:	e7fe      	b.n	8007340 <i2cSafeRawHardwareControl+0x20>
  osalSysLock();
 8007342:	f7fd f9ef 	bl	8004724 <vPortEnterCritical>
 */
void i2c_lld_start(I2CDriver *i2cp) {
  I2C_TypeDef *dp = i2cp->i2c;

  /* If in stopped state then enables the I2C and DMA clocks.*/
  if (i2cp->state == I2C_STOP) {
 8007346:	f894 8000 	ldrb.w	r8, [r4]
  I2C_TypeDef *dp = i2cp->i2c;
 800734a:	6fa6      	ldr	r6, [r4, #120]	; 0x78
  if (i2cp->state == I2C_STOP) {
 800734c:	f1b8 0f01 	cmp.w	r8, #1
  i2cp->config = config;
 8007350:	6065      	str	r5, [r4, #4]
 8007352:	d13a      	bne.n	80073ca <i2cSafeRawHardwareControl+0xaa>

    i2cp->txdmamode = STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE |
                      STM32_DMA_CR_MINC       | STM32_DMA_CR_DMEIE |
                      STM32_DMA_CR_TEIE       | STM32_DMA_CR_TCIE |
                      STM32_DMA_CR_DIR_M2P;
    i2cp->rxdmamode = STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE |
 8007354:	238a      	movs	r3, #138	; 0x8a
 8007356:	229a      	movs	r2, #154	; 0x9a
 8007358:	e9c4 321a 	strd	r3, r2, [r4, #104]	; 0x68
                      STM32_DMA_CR_MINC       | STM32_DMA_CR_DMEIE |
                      STM32_DMA_CR_TEIE       | STM32_DMA_CR_TCIE |
                      STM32_DMA_CR_DIR_P2M;

#if STM32_I2C_USE_I2C1
    if (&I2CD1 == i2cp) {
 800735c:	4b6b      	ldr	r3, [pc, #428]	; (800750c <i2cSafeRawHardwareControl+0x1ec>)
 800735e:	429c      	cmp	r4, r3
 8007360:	d133      	bne.n	80073ca <i2cSafeRawHardwareControl+0xaa>
      bool b;

      rccResetI2C1();
 8007362:	4f6b      	ldr	r7, [pc, #428]	; (8007510 <i2cSafeRawHardwareControl+0x1f0>)
      b = dmaStreamAllocate(i2cp->dmarx,
 8007364:	4622      	mov	r2, r4
      rccResetI2C1();
 8007366:	693b      	ldr	r3, [r7, #16]
      b = dmaStreamAllocate(i2cp->dmarx,
 8007368:	496a      	ldr	r1, [pc, #424]	; (8007514 <i2cSafeRawHardwareControl+0x1f4>)
      rccResetI2C1();
 800736a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800736e:	613b      	str	r3, [r7, #16]
 8007370:	2300      	movs	r3, #0
      b = dmaStreamAllocate(i2cp->dmarx,
 8007372:	6f20      	ldr	r0, [r4, #112]	; 0x70
      rccResetI2C1();
 8007374:	613b      	str	r3, [r7, #16]
      b = dmaStreamAllocate(i2cp->dmarx,
 8007376:	f7ff f863 	bl	8006440 <dmaStreamAllocate.constprop.0>
                            STM32_I2C_I2C1_IRQ_PRIORITY,
                            (stm32_dmaisr_t)i2c_lld_serve_rx_end_irq,
                            (void *)i2cp);
      osalDbgAssert(!b, "stream already allocated");
 800737a:	b110      	cbz	r0, 8007382 <i2cSafeRawHardwareControl+0x62>
 800737c:	f7fd f9e2 	bl	8004744 <vTaskEndScheduler>
 8007380:	e7fe      	b.n	8007380 <i2cSafeRawHardwareControl+0x60>
      b = dmaStreamAllocate(i2cp->dmatx,
 8007382:	4622      	mov	r2, r4
 8007384:	4964      	ldr	r1, [pc, #400]	; (8007518 <i2cSafeRawHardwareControl+0x1f8>)
 8007386:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8007388:	f7ff f85a 	bl	8006440 <dmaStreamAllocate.constprop.0>
                            STM32_I2C_I2C1_IRQ_PRIORITY,
                            (stm32_dmaisr_t)i2c_lld_serve_tx_end_irq,
                            (void *)i2cp);
      osalDbgAssert(!b, "stream already allocated");
 800738c:	b110      	cbz	r0, 8007394 <i2cSafeRawHardwareControl+0x74>
 800738e:	f7fd f9d9 	bl	8004744 <vTaskEndScheduler>
 8007392:	e7fe      	b.n	8007392 <i2cSafeRawHardwareControl+0x72>
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8007394:	22c0      	movs	r2, #192	; 0xc0
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8007396:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
      rccEnableI2C1(FALSE);
 800739a:	69fb      	ldr	r3, [r7, #28]
 800739c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80073a0:	61fb      	str	r3, [r7, #28]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80073a2:	4b5e      	ldr	r3, [pc, #376]	; (800751c <i2cSafeRawHardwareControl+0x1fc>)
 80073a4:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80073a8:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 80073ac:	6019      	str	r1, [r3, #0]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80073ae:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80073b2:	f8c3 8184 	str.w	r8, [r3, #388]	; 0x184
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 80073b6:	f8c3 8004 	str.w	r8, [r3, #4]
      nvicEnableVector(I2C1_EV_IRQn, STM32_I2C_I2C1_IRQ_PRIORITY);
      nvicEnableVector(I2C1_ER_IRQn, STM32_I2C_I2C1_IRQ_PRIORITY);

      i2cp->rxdmamode |= STM32_DMA_CR_CHSEL(I2C1_RX_DMA_CHANNEL) |
 80073ba:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 80073bc:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 80073c0:	66a3      	str	r3, [r4, #104]	; 0x68
                       STM32_DMA_CR_PL(STM32_I2C_I2C1_DMA_PRIORITY);
      i2cp->txdmamode |= STM32_DMA_CR_CHSEL(I2C1_TX_DMA_CHANNEL) |
 80073c2:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80073c4:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 80073c8:	66e3      	str	r3, [r4, #108]	; 0x6c
    }
#endif /* STM32_I2C_USE_I2C3 */
  }

  /* I2C registers pointed by the DMA.*/
  dmaStreamSetPeripheral(i2cp->dmarx, &dp->DR);
 80073ca:	6f23      	ldr	r3, [r4, #112]	; 0x70
  int32_t clock_speed = i2cp->config->clock_speed;
 80073cc:	6867      	ldr	r7, [r4, #4]
  dmaStreamSetPeripheral(i2cp->dmarx, &dp->DR);
 80073ce:	685a      	ldr	r2, [r3, #4]
 80073d0:	f106 0310 	add.w	r3, r6, #16
 80073d4:	6093      	str	r3, [r2, #8]
  dmaStreamSetPeripheral(i2cp->dmatx, &dp->DR);
 80073d6:	6f62      	ldr	r2, [r4, #116]	; 0x74
  int32_t clock_speed = i2cp->config->clock_speed;
 80073d8:	6879      	ldr	r1, [r7, #4]
  dmaStreamSetPeripheral(i2cp->dmatx, &dp->DR);
 80073da:	6852      	ldr	r2, [r2, #4]
  osalDbgCheck((i2cp != NULL) &&
 80073dc:	1e48      	subs	r0, r1, #1
  dmaStreamSetPeripheral(i2cp->dmatx, &dp->DR);
 80073de:	6093      	str	r3, [r2, #8]

  /* Reset i2c peripheral.*/
  dp->CR1 = I2C_CR1_SWRST;
 80073e0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  dp->CR1 = 0;
  dp->CR2 = I2C_CR2_ITERREN | I2C_CR2_DMAEN;
 80073e4:	f44f 6210 	mov.w	r2, #2304	; 0x900
  dp->CR1 = I2C_CR1_SWRST;
 80073e8:	6033      	str	r3, [r6, #0]
  dp->CR1 = 0;
 80073ea:	2300      	movs	r3, #0
 80073ec:	6033      	str	r3, [r6, #0]
  dp->CR2 = I2C_CR2_ITERREN | I2C_CR2_DMAEN;
 80073ee:	6072      	str	r2, [r6, #4]
  osalDbgCheck((i2cp != NULL) &&
 80073f0:	4a4b      	ldr	r2, [pc, #300]	; (8007520 <i2cSafeRawHardwareControl+0x200>)
 80073f2:	4290      	cmp	r0, r2
 80073f4:	d902      	bls.n	80073fc <i2cSafeRawHardwareControl+0xdc>
 80073f6:	f7fd f9a5 	bl	8004744 <vTaskEndScheduler>
 80073fa:	e7fe      	b.n	80073fa <i2cSafeRawHardwareControl+0xda>
  I2C_TypeDef *dp = i2cp->i2c;
 80073fc:	6fa0      	ldr	r0, [r4, #120]	; 0x78
  i2cdutycycle_t duty = i2cp->config->duty_cycle;
 80073fe:	7a3a      	ldrb	r2, [r7, #8]
  dp->CR2 &= (uint16_t)~I2C_CR2_FREQ;
 8007400:	f8d0 c004 	ldr.w	ip, [r0, #4]
 8007404:	f02c 0c3f 	bic.w	ip, ip, #63	; 0x3f
 8007408:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
 800740c:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8007410:	f8c0 c004 	str.w	ip, [r0, #4]
  dp->CR2 |= (uint16_t)I2C_CLK_FREQ;
 8007414:	f8d0 c004 	ldr.w	ip, [r0, #4]
 8007418:	f04c 0c24 	orr.w	ip, ip, #36	; 0x24
 800741c:	f8c0 c004 	str.w	ip, [r0, #4]
  if (clock_speed <= 100000) {
 8007420:	f8df c100 	ldr.w	ip, [pc, #256]	; 8007524 <i2cSafeRawHardwareControl+0x204>
 8007424:	4561      	cmp	r1, ip
 8007426:	d839      	bhi.n	800749c <i2cSafeRawHardwareControl+0x17c>
    osalDbgAssert(duty == STD_DUTY_CYCLE, "invalid standard mode duty cycle");
 8007428:	2a01      	cmp	r2, #1
 800742a:	d002      	beq.n	8007432 <i2cSafeRawHardwareControl+0x112>
 800742c:	f7fd f98a 	bl	8004744 <vTaskEndScheduler>
 8007430:	e7fe      	b.n	8007430 <i2cSafeRawHardwareControl+0x110>
    osalDbgAssert((STM32_PCLK1 % (clock_speed * 2)) == 0,
 8007432:	4a3d      	ldr	r2, [pc, #244]	; (8007528 <i2cSafeRawHardwareControl+0x208>)
 8007434:	0049      	lsls	r1, r1, #1
 8007436:	fbb2 f3f1 	udiv	r3, r2, r1
 800743a:	fb01 2213 	mls	r2, r1, r3, r2
 800743e:	b112      	cbz	r2, 8007446 <i2cSafeRawHardwareControl+0x126>
 8007440:	f7fd f980 	bl	8004744 <vTaskEndScheduler>
 8007444:	e7fe      	b.n	8007444 <i2cSafeRawHardwareControl+0x124>
    clock_div = (uint16_t)(STM32_PCLK1 / (clock_speed * 2));
 8007446:	b29b      	uxth	r3, r3
    osalDbgAssert(clock_div >= 0x04,
 8007448:	2b03      	cmp	r3, #3
 800744a:	d802      	bhi.n	8007452 <i2cSafeRawHardwareControl+0x132>
 800744c:	f7fd f97a 	bl	8004744 <vTaskEndScheduler>
 8007450:	e7fe      	b.n	8007450 <i2cSafeRawHardwareControl+0x130>
    dp->TRISE = I2C_CLK_FREQ + 1;
 8007452:	2225      	movs	r2, #37	; 0x25
  osalDbgAssert((clock_div <= I2C_CCR_CCR), "the selected clock is too low");
 8007454:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    dp->TRISE = I2C_CLK_FREQ + 1;
 8007458:	6202      	str	r2, [r0, #32]
  osalDbgAssert((clock_div <= I2C_CCR_CCR), "the selected clock is too low");
 800745a:	d24b      	bcs.n	80074f4 <i2cSafeRawHardwareControl+0x1d4>
  dp->CCR = regCCR;
 800745c:	61c3      	str	r3, [r0, #28]
  i2copmode_t opmode = i2cp->config->op_mode;
 800745e:	783a      	ldrb	r2, [r7, #0]
  regCR1 = dp->CR1;
 8007460:	6803      	ldr	r3, [r0, #0]
  switch (opmode) {
 8007462:	2a02      	cmp	r2, #2
  regCR1 = dp->CR1;
 8007464:	b29b      	uxth	r3, r3
  switch (opmode) {
 8007466:	d048      	beq.n	80074fa <i2cSafeRawHardwareControl+0x1da>
 8007468:	2a03      	cmp	r2, #3
 800746a:	d04c      	beq.n	8007506 <i2cSafeRawHardwareControl+0x1e6>
 800746c:	2a01      	cmp	r2, #1
 800746e:	d102      	bne.n	8007476 <i2cSafeRawHardwareControl+0x156>
    regCR1 &= (uint16_t)~(I2C_CR1_SMBUS|I2C_CR1_SMBTYPE);
 8007470:	f023 030a 	bic.w	r3, r3, #10
 8007474:	b29b      	uxth	r3, r3
  dp->CR1 = regCR1;
 8007476:	6003      	str	r3, [r0, #0]
  /* Setup I2C parameters.*/
  i2c_lld_set_clock(i2cp);
  i2c_lld_set_opmode(i2cp);

  /* Ready to go.*/
  dp->CR1 |= I2C_CR1_PE;
 8007478:	6833      	ldr	r3, [r6, #0]
 800747a:	f043 0301 	orr.w	r3, r3, #1
 800747e:	6033      	str	r3, [r6, #0]
  i2cp->state = I2C_READY;
 8007480:	2302      	movs	r3, #2
 8007482:	7023      	strb	r3, [r4, #0]
  osalSysUnlock();
 8007484:	f7fd fb72 	bl	8004b6c <osalSysUnlock.lto_priv.0>
    gpioSetPinMode(config->sclPin, config->peripheralMode);
 8007488:	7c29      	ldrb	r1, [r5, #16]
 800748a:	89a8      	ldrh	r0, [r5, #12]
 800748c:	f7ff ff3c 	bl	8007308 <gpioSetPinMode.isra.0>
    gpioSetPinMode(config->sdaPin, config->peripheralMode);
 8007490:	7c29      	ldrb	r1, [r5, #16]
 8007492:	89e8      	ldrh	r0, [r5, #14]
}
 8007494:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    gpioSetPinMode(config->sdaPin, config->peripheralMode);
 8007498:	f7ff bf36 	b.w	8007308 <gpioSetPinMode.isra.0>
  else if (clock_speed <= 400000) {
 800749c:	f8df c08c 	ldr.w	ip, [pc, #140]	; 800752c <i2cSafeRawHardwareControl+0x20c>
 80074a0:	4561      	cmp	r1, ip
 80074a2:	dcdb      	bgt.n	800745c <i2cSafeRawHardwareControl+0x13c>
    osalDbgAssert((duty == FAST_DUTY_CYCLE_2) ||
 80074a4:	1e93      	subs	r3, r2, #2
 80074a6:	2b01      	cmp	r3, #1
 80074a8:	d902      	bls.n	80074b0 <i2cSafeRawHardwareControl+0x190>
 80074aa:	f7fd f94b 	bl	8004744 <vTaskEndScheduler>
 80074ae:	e7fe      	b.n	80074ae <i2cSafeRawHardwareControl+0x18e>
    if (duty == FAST_DUTY_CYCLE_2) {
 80074b0:	2a02      	cmp	r2, #2
 80074b2:	4b1d      	ldr	r3, [pc, #116]	; (8007528 <i2cSafeRawHardwareControl+0x208>)
 80074b4:	d110      	bne.n	80074d8 <i2cSafeRawHardwareControl+0x1b8>
      osalDbgAssert((STM32_PCLK1 % (clock_speed * 3)) == 0,
 80074b6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80074ba:	fbb3 f2f1 	udiv	r2, r3, r1
 80074be:	fb01 3312 	mls	r3, r1, r2, r3
 80074c2:	b113      	cbz	r3, 80074ca <i2cSafeRawHardwareControl+0x1aa>
 80074c4:	f7fd f93e 	bl	8004744 <vTaskEndScheduler>
 80074c8:	e7fe      	b.n	80074c8 <i2cSafeRawHardwareControl+0x1a8>
      clock_div = (uint16_t)(STM32_PCLK1 / (clock_speed * 3));
 80074ca:	b292      	uxth	r2, r2
    regCCR |= (I2C_CCR_FS | (clock_div & I2C_CCR_CCR));
 80074cc:	4313      	orrs	r3, r2
    dp->TRISE = (I2C_CLK_FREQ * 300 / 1000) + 1;
 80074ce:	220b      	movs	r2, #11
    regCCR |= (I2C_CCR_FS | (clock_div & I2C_CCR_CCR));
 80074d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    dp->TRISE = (I2C_CLK_FREQ * 300 / 1000) + 1;
 80074d4:	6202      	str	r2, [r0, #32]
  osalDbgAssert((clock_div <= I2C_CCR_CCR), "the selected clock is too low");
 80074d6:	e7c1      	b.n	800745c <i2cSafeRawHardwareControl+0x13c>
      osalDbgAssert((STM32_PCLK1 % (clock_speed * 25)) == 0,
 80074d8:	2219      	movs	r2, #25
 80074da:	4351      	muls	r1, r2
 80074dc:	fbb3 f2f1 	udiv	r2, r3, r1
 80074e0:	fb01 3312 	mls	r3, r1, r2, r3
 80074e4:	b113      	cbz	r3, 80074ec <i2cSafeRawHardwareControl+0x1cc>
 80074e6:	f7fd f92d 	bl	8004744 <vTaskEndScheduler>
 80074ea:	e7fe      	b.n	80074ea <i2cSafeRawHardwareControl+0x1ca>
      regCCR |= I2C_CCR_DUTY;
 80074ec:	f44f 4380 	mov.w	r3, #16384	; 0x4000
      clock_div = (uint16_t)(STM32_PCLK1 / (clock_speed * 25));
 80074f0:	b292      	uxth	r2, r2
      regCCR |= I2C_CCR_DUTY;
 80074f2:	e7eb      	b.n	80074cc <i2cSafeRawHardwareControl+0x1ac>
  osalDbgAssert((clock_div <= I2C_CCR_CCR), "the selected clock is too low");
 80074f4:	f7fd f926 	bl	8004744 <vTaskEndScheduler>
 80074f8:	e7fe      	b.n	80074f8 <i2cSafeRawHardwareControl+0x1d8>
    regCR1 &= (uint16_t)~(I2C_CR1_SMBTYPE);
 80074fa:	f023 0308 	bic.w	r3, r3, #8
 80074fe:	b29b      	uxth	r3, r3
 8007500:	f043 0302 	orr.w	r3, r3, #2
    break;
 8007504:	e7b7      	b.n	8007476 <i2cSafeRawHardwareControl+0x156>
    regCR1 |= (I2C_CR1_SMBUS|I2C_CR1_SMBTYPE);
 8007506:	f043 030a 	orr.w	r3, r3, #10
    break;
 800750a:	e7b4      	b.n	8007476 <i2cSafeRawHardwareControl+0x156>
 800750c:	20000934 	.word	0x20000934
 8007510:	40021000 	.word	0x40021000
 8007514:	0800700d 	.word	0x0800700d
 8007518:	08004a09 	.word	0x08004a09
 800751c:	e000e100 	.word	0xe000e100
 8007520:	003d08ff 	.word	0x003d08ff
 8007524:	000186a0 	.word	0x000186a0
 8007528:	02255100 	.word	0x02255100
 800752c:	00061a80 	.word	0x00061a80

08007530 <gpioSetPin.isra.0>:
bool gpioSetPin(uint16_t pin, bool on)
 8007530:	b510      	push	{r4, lr}
 8007532:	4604      	mov	r4, r0
    const GPIOPort* port = gpioGetPortDriver(gpioPort);
 8007534:	0a00      	lsrs	r0, r0, #8
 8007536:	f7fc ff43 	bl	80043c0 <gpioGetPortDriver>
    return port->functions->setValue(port, 1<<gpioPin, on<<gpioPin);
 800753a:	b2e4      	uxtb	r4, r4
 800753c:	fa01 f204 	lsl.w	r2, r1, r4
 8007540:	2101      	movs	r1, #1
 8007542:	6883      	ldr	r3, [r0, #8]
 8007544:	40a1      	lsls	r1, r4
 8007546:	689b      	ldr	r3, [r3, #8]
}
 8007548:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return port->functions->setValue(port, 1<<gpioPin, on<<gpioPin);
 800754c:	4718      	bx	r3
	...

08007550 <converterSetGpio>:

static xTaskHandle mixLedTaskHandle;
static volatile uint32_t mixLedDelay = 0;

static void converterSetGpio(const ConverterManager* converter, uint32_t gpioValues)
{
 8007550:	b570      	push	{r4, r5, r6, lr}
    /* We need to set some IO depending on the active band */

    gpioValues |= bandSpecificGpioSettings[converter->activeBand];
 8007552:	4b69      	ldr	r3, [pc, #420]	; (80076f8 <converterSetGpio+0x1a8>)
 8007554:	7e05      	ldrb	r5, [r0, #24]
 8007556:	f853 4025 	ldr.w	r4, [r3, r5, lsl #2]

    /* The lowest 8 bits are all connected over I2C */
    //Not anymore! Changed in hardware V2
    
    uint8_t gpioVals = gpioValues;// & 0xFF;
    switch(converter->activeBand){
 800755a:	2d04      	cmp	r5, #4
    gpioValues |= bandSpecificGpioSettings[converter->activeBand];
 800755c:	ea44 0401 	orr.w	r4, r4, r1
    switch(converter->activeBand){
 8007560:	d86c      	bhi.n	800763c <converterSetGpio+0xec>
 8007562:	2d01      	cmp	r5, #1
 8007564:	d84f      	bhi.n	8007606 <converterSetGpio+0xb6>
 8007566:	bb95      	cbnz	r5, 80075ce <converterSetGpio+0x7e>
        case 0:
            gpioSetPin(GPIO_SW_SW,0);//PB 0
 8007568:	4629      	mov	r1, r5
 800756a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800756e:	f7ff ffdf 	bl	8007530 <gpioSetPin.isra.0>
            gpioSetPin(GPIO_SW_BYPASS,0);//PB 12
 8007572:	4629      	mov	r1, r5
 8007574:	f44f 7086 	mov.w	r0, #268	; 0x10c
 8007578:	f7ff ffda 	bl	8007530 <gpioSetPin.isra.0>
            gpioSetPin(GPIO_SW_MIX, 1);//PB 13
 800757c:	2101      	movs	r1, #1
 800757e:	f240 100d 	movw	r0, #269	; 0x10d
 8007582:	f7ff ffd5 	bl	8007530 <gpioSetPin.isra.0>
            gpioSetPin(GPIO_MIX_X2, 0);//PB 14
 8007586:	4629      	mov	r1, r5
 8007588:	f44f 7087 	mov.w	r0, #270	; 0x10e
 800758c:	f7ff ffd0 	bl	8007530 <gpioSetPin.isra.0>
            gpioSetPin(GPIO_MIX_EN, 0);//PB 15
 8007590:	4629      	mov	r1, r5
 8007592:	f240 100f 	movw	r0, #271	; 0x10f
 8007596:	f7ff ffcb 	bl	8007530 <gpioSetPin.isra.0>
            gpioSetPin(GPIO_MIX_SW_EN,1);
 800759a:	2101      	movs	r1, #1
 800759c:	f44f 7084 	mov.w	r0, #264	; 0x108
            gpioSetPin(GPIO_SW_SW,0);//PB 0
            gpioSetPin(GPIO_SW_BYPASS,1);//PB 12
            gpioSetPin(GPIO_SW_MIX, 0);//PB 13
            gpioSetPin(GPIO_MIX_X2, 0);//PB 14
            gpioSetPin(GPIO_MIX_EN, 0);//PB 15
            gpioSetPin(GPIO_LOWBAND, 0);//PA 2
 80075a0:	f7ff ffc6 	bl	8007530 <gpioSetPin.isra.0>

void systemEnableMCO(bool enable)
{
    if(enable) {
        //RCC->CFGR |= STM32_MCOSEL_SYSCLK;
        RCC->CFGR |=STM32_MCOSEL_PLLDIV2;
 80075a4:	4a55      	ldr	r2, [pc, #340]	; (80076fc <converterSetGpio+0x1ac>)
 80075a6:	6853      	ldr	r3, [r2, #4]
 80075a8:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80075ac:	6053      	str	r3, [r2, #4]
    mixBlinkDelay += (gpioValues & _BV(CONVERTER_IO_PIN_LED1))? 100:0;
 80075ae:	f414 6380 	ands.w	r3, r4, #1024	; 0x400
 80075b2:	bf18      	it	ne
 80075b4:	2364      	movne	r3, #100	; 0x64
    mixBlinkDelay += (gpioValues & _BV(CONVERTER_IO_PIN_LED2))? 200:0;
 80075b6:	f414 6400 	ands.w	r4, r4, #2048	; 0x800
 80075ba:	bf18      	it	ne
 80075bc:	24c8      	movne	r4, #200	; 0xc8
 80075be:	441c      	add	r4, r3
    mixLedDelay = mixBlinkDelay;
 80075c0:	4b4f      	ldr	r3, [pc, #316]	; (8007700 <converterSetGpio+0x1b0>)
 80075c2:	601c      	str	r4, [r3, #0]
    vTaskResume(mixLedTaskHandle);
 80075c4:	4b4f      	ldr	r3, [pc, #316]	; (8007704 <converterSetGpio+0x1b4>)
 80075c6:	681c      	ldr	r4, [r3, #0]
 80075c8:	2c00      	cmp	r4, #0
 80075ca:	d14d      	bne.n	8007668 <converterSetGpio+0x118>
 80075cc:	e7fe      	b.n	80075cc <converterSetGpio+0x7c>
            gpioSetPin(GPIO_SW_SW,1);//PB 0
 80075ce:	2101      	movs	r1, #1
 80075d0:	f44f 7080 	mov.w	r0, #256	; 0x100
 80075d4:	f7ff ffac 	bl	8007530 <gpioSetPin.isra.0>
            gpioSetPin(GPIO_SW_BYPASS,0);//PB 12
 80075d8:	2100      	movs	r1, #0
 80075da:	f44f 7086 	mov.w	r0, #268	; 0x10c
 80075de:	f7ff ffa7 	bl	8007530 <gpioSetPin.isra.0>
            gpioSetPin(GPIO_SW_MIX, 0);//PB 13
 80075e2:	2100      	movs	r1, #0
 80075e4:	f240 100d 	movw	r0, #269	; 0x10d
 80075e8:	f7ff ffa2 	bl	8007530 <gpioSetPin.isra.0>
            gpioSetPin(GPIO_MIX_X2, 0);//PB 14
 80075ec:	2100      	movs	r1, #0
 80075ee:	f44f 7087 	mov.w	r0, #270	; 0x10e
 80075f2:	f7ff ff9d 	bl	8007530 <gpioSetPin.isra.0>
            gpioSetPin(GPIO_MIX_EN, 1);//PB 15
 80075f6:	2101      	movs	r1, #1
 80075f8:	f240 100f 	movw	r0, #271	; 0x10f
 80075fc:	f7ff ff98 	bl	8007530 <gpioSetPin.isra.0>
            gpioSetPin(GPIO_LOWBAND, 1);//PA 2
 8007600:	2101      	movs	r1, #1
            gpioSetPin(GPIO_LOWBAND, 0);//PA 2
 8007602:	2002      	movs	r0, #2
 8007604:	e7cc      	b.n	80075a0 <converterSetGpio+0x50>
            gpioSetPin(GPIO_SW_SW,1);//PB 0
 8007606:	2101      	movs	r1, #1
 8007608:	f44f 7080 	mov.w	r0, #256	; 0x100
 800760c:	f7ff ff90 	bl	8007530 <gpioSetPin.isra.0>
            gpioSetPin(GPIO_SW_BYPASS,0);//PB 12
 8007610:	2100      	movs	r1, #0
 8007612:	f44f 7086 	mov.w	r0, #268	; 0x10c
 8007616:	f7ff ff8b 	bl	8007530 <gpioSetPin.isra.0>
            gpioSetPin(GPIO_SW_MIX, 1);//PB 13
 800761a:	2101      	movs	r1, #1
 800761c:	f240 100d 	movw	r0, #269	; 0x10d
 8007620:	f7ff ff86 	bl	8007530 <gpioSetPin.isra.0>
            gpioSetPin(GPIO_MIX_X2, 1);//PB 14
 8007624:	2101      	movs	r1, #1
 8007626:	f44f 7087 	mov.w	r0, #270	; 0x10e
 800762a:	f7ff ff81 	bl	8007530 <gpioSetPin.isra.0>
            gpioSetPin(GPIO_MIX_EN, 1);//PB 15
 800762e:	2101      	movs	r1, #1
            gpioSetPin(GPIO_MIX_EN, 0);//PB 15
 8007630:	f240 100f 	movw	r0, #271	; 0x10f
 8007634:	f7ff ff7c 	bl	8007530 <gpioSetPin.isra.0>
            gpioSetPin(GPIO_LOWBAND, 0);//PA 2
 8007638:	2100      	movs	r1, #0
 800763a:	e7e2      	b.n	8007602 <converterSetGpio+0xb2>
            gpioSetPin(GPIO_SW_SW,0);//PB 0
 800763c:	2100      	movs	r1, #0
 800763e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8007642:	f7ff ff75 	bl	8007530 <gpioSetPin.isra.0>
            gpioSetPin(GPIO_SW_BYPASS,1);//PB 12
 8007646:	2101      	movs	r1, #1
 8007648:	f44f 7086 	mov.w	r0, #268	; 0x10c
 800764c:	f7ff ff70 	bl	8007530 <gpioSetPin.isra.0>
            gpioSetPin(GPIO_SW_MIX, 0);//PB 13
 8007650:	2100      	movs	r1, #0
 8007652:	f240 100d 	movw	r0, #269	; 0x10d
 8007656:	f7ff ff6b 	bl	8007530 <gpioSetPin.isra.0>
            gpioSetPin(GPIO_MIX_X2, 0);//PB 14
 800765a:	2100      	movs	r1, #0
 800765c:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8007660:	f7ff ff66 	bl	8007530 <gpioSetPin.isra.0>
            gpioSetPin(GPIO_MIX_EN, 0);//PB 15
 8007664:	2100      	movs	r1, #0
 8007666:	e7e3      	b.n	8007630 <converterSetGpio+0xe0>
 8007668:	4d27      	ldr	r5, [pc, #156]	; (8007708 <converterSetGpio+0x1b8>)
 800766a:	682b      	ldr	r3, [r5, #0]
 800766c:	429c      	cmp	r4, r3
 800766e:	d042      	beq.n	80076f6 <converterSetGpio+0x1a6>
 8007670:	f7fd f858 	bl	8004724 <vPortEnterCritical>
 8007674:	6962      	ldr	r2, [r4, #20]
 8007676:	4b25      	ldr	r3, [pc, #148]	; (800770c <converterSetGpio+0x1bc>)
 8007678:	429a      	cmp	r2, r3
 800767a:	d138      	bne.n	80076ee <converterSetGpio+0x19e>
 800767c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800767e:	4a24      	ldr	r2, [pc, #144]	; (8007710 <converterSetGpio+0x1c0>)
 8007680:	4293      	cmp	r3, r2
 8007682:	d034      	beq.n	80076ee <converterSetGpio+0x19e>
 8007684:	bb9b      	cbnz	r3, 80076ee <converterSetGpio+0x19e>
 8007686:	1d26      	adds	r6, r4, #4
 8007688:	4630      	mov	r0, r6
 800768a:	f7fd ff36 	bl	80054fa <uxListRemove>
 800768e:	2301      	movs	r3, #1
 8007690:	4920      	ldr	r1, [pc, #128]	; (8007714 <converterSetGpio+0x1c4>)
 8007692:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8007694:	6808      	ldr	r0, [r1, #0]
 8007696:	4093      	lsls	r3, r2
 8007698:	4303      	orrs	r3, r0
 800769a:	2014      	movs	r0, #20
 800769c:	600b      	str	r3, [r1, #0]
 800769e:	4b1e      	ldr	r3, [pc, #120]	; (8007718 <converterSetGpio+0x1c8>)
 80076a0:	4631      	mov	r1, r6
 80076a2:	fb00 3002 	mla	r0, r0, r2, r3
 80076a6:	f7fd fe50 	bl	800534a <vListInsertEnd>
 80076aa:	682b      	ldr	r3, [r5, #0]
 80076ac:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80076ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076b0:	429a      	cmp	r2, r3
 80076b2:	d31c      	bcc.n	80076ee <converterSetGpio+0x19e>
 80076b4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80076b8:	4a18      	ldr	r2, [pc, #96]	; (800771c <converterSetGpio+0x1cc>)
 80076ba:	f8d3 1d20 	ldr.w	r1, [r3, #3360]	; 0xd20
 80076be:	6011      	str	r1, [r2, #0]
 80076c0:	4a17      	ldr	r2, [pc, #92]	; (8007720 <converterSetGpio+0x1d0>)
 80076c2:	6812      	ldr	r2, [r2, #0]
 80076c4:	b14a      	cbz	r2, 80076da <converterSetGpio+0x18a>
 80076c6:	f8d3 2d20 	ldr.w	r2, [r3, #3360]	; 0xd20
 80076ca:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
 80076ce:	f8c3 2d20 	str.w	r2, [r3, #3360]	; 0xd20
 80076d2:	f8d3 2d20 	ldr.w	r2, [r3, #3360]	; 0xd20
 80076d6:	f8c3 2d20 	str.w	r2, [r3, #3360]	; 0xd20
 80076da:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80076de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80076e2:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80076e6:	f3bf 8f4f 	dsb	sy
 80076ea:	f3bf 8f6f 	isb	sy
}
 80076ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80076f2:	f7fd ba2f 	b.w	8004b54 <vPortExitCritical>
 80076f6:	bd70      	pop	{r4, r5, r6, pc}
 80076f8:	0800c8f0 	.word	0x0800c8f0
 80076fc:	40021000 	.word	0x40021000
 8007700:	20001198 	.word	0x20001198
 8007704:	2000119c 	.word	0x2000119c
 8007708:	200011a8 	.word	0x200011a8
 800770c:	20001620 	.word	0x20001620
 8007710:	20001600 	.word	0x20001600
 8007714:	20001374 	.word	0x20001374
 8007718:	200011b8 	.word	0x200011b8
 800771c:	2000134c 	.word	0x2000134c
 8007720:	20001358 	.word	0x20001358

08007724 <usbShellTerminated>:
    shellStart((BaseSequentialStream*)&SD3, 128, "ShellTTL", NULL, NULL);
}

static volatile bool usbShellIsUp = false;
static void usbShellTerminated(void* param)
{
 8007724:	b508      	push	{r3, lr}
    (void)param;

    gpioSetPin(GPIO_LED_USB, true);
 8007726:	2101      	movs	r1, #1
 8007728:	f240 1003 	movw	r0, #259	; 0x103
 800772c:	f7ff ff00 	bl	8007530 <gpioSetPin.isra.0>
    osalThreadSleepSeconds(1);
 8007730:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007734:	f7fe fbde 	bl	8005ef4 <vTaskDelay>
    usbShellIsUp = false;
 8007738:	2200      	movs	r2, #0
 800773a:	4b01      	ldr	r3, [pc, #4]	; (8007740 <usbShellTerminated+0x1c>)
 800773c:	701a      	strb	r2, [r3, #0]
}
 800773e:	bd08      	pop	{r3, pc}
 8007740:	20001355 	.word	0x20001355

08007744 <mac2870LockCallback>:
    if(locked) {
 8007744:	b120      	cbz	r0, 8007750 <mac2870LockCallback+0xc>
        gpioSetPin(GPIO_LED_LOCK, false);
 8007746:	2100      	movs	r1, #0
        gpioSetPin(GPIO_LED_LOCK, true);
 8007748:	f44f 7082 	mov.w	r0, #260	; 0x104
 800774c:	f7ff bef0 	b.w	8007530 <gpioSetPin.isra.0>
 8007750:	2101      	movs	r1, #1
 8007752:	e7f9      	b.n	8007748 <mac2870LockCallback+0x4>

08007754 <i2cSafeClockGoHigh>:
{
 8007754:	b538      	push	{r3, r4, r5, lr}
    gpioSetPin(config->sclPin, level);
 8007756:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
{
 8007758:	4605      	mov	r5, r0
    gpioSetPin(config->sclPin, level);
 800775a:	2101      	movs	r1, #1
 800775c:	8998      	ldrh	r0, [r3, #12]
 800775e:	f7ff fee7 	bl	8007530 <gpioSetPin.isra.0>
    vPortBusyDelay(i2cSafe_CYCLE_DELAY);
 8007762:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8007766:	f7fd fde9 	bl	800533c <vPortBusyDelay>
 800776a:	2406      	movs	r4, #6
    return gpioGetPin(config->sclPin);
 800776c:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 800776e:	8998      	ldrh	r0, [r3, #12]
 8007770:	f7fc fe34 	bl	80043dc <gpioGetPin>
    for(j=5; !i2cSafeRawGetClock(i2c); j--) {
 8007774:	b108      	cbz	r0, 800777a <i2cSafeClockGoHigh+0x26>
    return I2C_BUS_OK;
 8007776:	2000      	movs	r0, #0
}
 8007778:	bd38      	pop	{r3, r4, r5, pc}
        osalThreadSleepMilliseconds(1);
 800777a:	2001      	movs	r0, #1
        if(j == 0) {
 800777c:	3c01      	subs	r4, #1
        osalThreadSleepMilliseconds(1);
 800777e:	f7fe fbb9 	bl	8005ef4 <vTaskDelay>
        if(j == 0) {
 8007782:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 8007786:	d1f1      	bne.n	800776c <i2cSafeClockGoHigh+0x18>
            return I2C_BUS_STUCK_SCL_PULLED_LOW;
 8007788:	2001      	movs	r0, #1
 800778a:	e7f5      	b.n	8007778 <i2cSafeClockGoHigh+0x24>

0800778c <i2cSafeClockGoLow>:
{
 800778c:	b510      	push	{r4, lr}
 800778e:	4604      	mov	r4, r0
    gpioSetPin(config->sclPin, level);
 8007790:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 8007792:	2100      	movs	r1, #0
 8007794:	8998      	ldrh	r0, [r3, #12]
 8007796:	f7ff fecb 	bl	8007530 <gpioSetPin.isra.0>
    vPortBusyDelay(i2cSafe_CYCLE_DELAY);
 800779a:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800779e:	f7fd fdcd 	bl	800533c <vPortBusyDelay>
    return gpioGetPin(config->sclPin);
 80077a2:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 80077a4:	8998      	ldrh	r0, [r3, #12]
 80077a6:	f7fc fe19 	bl	80043dc <gpioGetPin>
        return I2C_BUS_STUCK_SCL_PULLED_HIGH;
 80077aa:	2800      	cmp	r0, #0
}
 80077ac:	bf14      	ite	ne
 80077ae:	2003      	movne	r0, #3
 80077b0:	2000      	moveq	r0, #0
 80077b2:	bd10      	pop	{r4, pc}

080077b4 <i2cSafeDataGoHigh>:
{
 80077b4:	b510      	push	{r4, lr}
 80077b6:	4604      	mov	r4, r0
    gpioSetPin(config->sdaPin, level);
 80077b8:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 80077ba:	2101      	movs	r1, #1
 80077bc:	89d8      	ldrh	r0, [r3, #14]
 80077be:	f7ff feb7 	bl	8007530 <gpioSetPin.isra.0>
    vPortBusyDelay(i2cSafe_CYCLE_DELAY);
 80077c2:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80077c6:	f7fd fdb9 	bl	800533c <vPortBusyDelay>
    return gpioGetPin(config->sdaPin);
 80077ca:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 80077cc:	89d8      	ldrh	r0, [r3, #14]
 80077ce:	f7fc fe05 	bl	80043dc <gpioGetPin>
        return I2C_BUS_STUCK_SDA_PULLED_LOW;
 80077d2:	2800      	cmp	r0, #0
}
 80077d4:	bf0c      	ite	eq
 80077d6:	2002      	moveq	r0, #2
 80077d8:	2000      	movne	r0, #0
 80077da:	bd10      	pop	{r4, pc}

080077dc <i2cSafeDataGoLow>:
{
 80077dc:	b510      	push	{r4, lr}
 80077de:	4604      	mov	r4, r0
    gpioSetPin(config->sdaPin, level);
 80077e0:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 80077e2:	2100      	movs	r1, #0
 80077e4:	89d8      	ldrh	r0, [r3, #14]
 80077e6:	f7ff fea3 	bl	8007530 <gpioSetPin.isra.0>
    vPortBusyDelay(i2cSafe_CYCLE_DELAY);
 80077ea:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80077ee:	f7fd fda5 	bl	800533c <vPortBusyDelay>
    return gpioGetPin(config->sdaPin);
 80077f2:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 80077f4:	89d8      	ldrh	r0, [r3, #14]
 80077f6:	f7fc fdf1 	bl	80043dc <gpioGetPin>
        return I2C_BUS_STUCK_SDA_PULLED_HIGH;
 80077fa:	2800      	cmp	r0, #0
}
 80077fc:	bf14      	ite	ne
 80077fe:	2004      	movne	r0, #4
 8007800:	2000      	moveq	r0, #0
 8007802:	bd10      	pop	{r4, pc}

08007804 <sdu_start_receive.isra.0>:
static bool sdu_start_receive(SerialUSBDriver *sdup) {
 8007804:	b510      	push	{r4, lr}
  if ((usbGetDriverStateI(sdup->config->usbp) != USB_ACTIVE) ||
 8007806:	f8d0 1498 	ldr.w	r1, [r0, #1176]	; 0x498
static bool sdu_start_receive(SerialUSBDriver *sdup) {
 800780a:	4603      	mov	r3, r0
  if ((usbGetDriverStateI(sdup->config->usbp) != USB_ACTIVE) ||
 800780c:	6808      	ldr	r0, [r1, #0]
 800780e:	7802      	ldrb	r2, [r0, #0]
 8007810:	2a04      	cmp	r2, #4
 8007812:	d11c      	bne.n	800784e <sdu_start_receive.isra.0+0x4a>
 8007814:	7d1a      	ldrb	r2, [r3, #20]
 8007816:	2a02      	cmp	r2, #2
 8007818:	d119      	bne.n	800784e <sdu_start_receive.isra.0+0x4a>
  if (usbGetReceiveStatusI(sdup->config->usbp, sdup->config->bulk_in)) {
 800781a:	2201      	movs	r2, #1
 800781c:	790c      	ldrb	r4, [r1, #4]
 800781e:	40a2      	lsls	r2, r4
 8007820:	8944      	ldrh	r4, [r0, #10]
 8007822:	4222      	tst	r2, r4
 8007824:	d113      	bne.n	800784e <sdu_start_receive.isra.0+0x4a>
	__asm volatile( "mrs %0, basepri" : "=r"( ulBasePri ) );
 8007826:	f3ef 8211 	mrs	r2, BASEPRI
	return (ulBasePri > 0)? pdTRUE : pdFALSE;
 800782a:	b16a      	cbz	r2, 8007848 <sdu_start_receive.isra.0+0x44>
  if (ibqIsFullI(ibqp)) {
 800782c:	e9d3 240a 	ldrd	r2, r4, [r3, #40]	; 0x28
 8007830:	42a2      	cmp	r2, r4
 8007832:	d101      	bne.n	8007838 <sdu_start_receive.isra.0+0x34>
 8007834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007836:	b953      	cbnz	r3, 800784e <sdu_start_receive.isra.0+0x4a>
}
 8007838:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  usbStartReceiveI(sdup->config->usbp, sdup->config->bulk_out,
 800783c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007840:	7949      	ldrb	r1, [r1, #5]
 8007842:	3204      	adds	r2, #4
 8007844:	f7fd b80c 	b.w	8004860 <usbStartReceiveI>
  osalDbgCheckClassI();
 8007848:	f7fc ff7c 	bl	8004744 <vTaskEndScheduler>
 800784c:	e7fe      	b.n	800784c <sdu_start_receive.isra.0+0x48>
}
 800784e:	bd10      	pop	{r4, pc}

08007850 <ibnotify>:
  (void) sdu_start_receive(sdup);
 8007850:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8007852:	f7ff bfd7 	b.w	8007804 <sdu_start_receive.isra.0>

08007856 <sduDataReceived>:
  SerialUSBDriver *sdup = usbp->out_params[ep - 1U];
 8007856:	3111      	adds	r1, #17
void sduDataReceived(USBDriver *usbp, usbep_t ep) {
 8007858:	b510      	push	{r4, lr}
  SerialUSBDriver *sdup = usbp->out_params[ep - 1U];
 800785a:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
  if (sdup == NULL) {
 800785e:	2c00      	cmp	r4, #0
 8007860:	d03d      	beq.n	80078de <sduDataReceived+0x88>
  chnAddFlagsI(sdup, CHN_INPUT_AVAILABLE);
 8007862:	2104      	movs	r1, #4
  osalSysLockFromISR();
 8007864:	f7fd f9f4 	bl	8004c50 <osalSysLockFromISR.lto_priv.0>
  chnAddFlagsI(sdup, CHN_INPUT_AVAILABLE);
 8007868:	1860      	adds	r0, r4, r1
 800786a:	f7ff fb35 	bl	8006ed8 <osalEventBroadcastFlagsI>
	__asm volatile( "mrs %0, basepri" : "=r"( ulBasePri ) );
 800786e:	f3ef 8311 	mrs	r3, BASEPRI
	return (ulBasePri > 0)? pdTRUE : pdFALSE;
 8007872:	b163      	cbz	r3, 800788e <sduDataReceived+0x38>
                     usbGetReceiveTransactionSizeX(sdup->config->usbp,
 8007874:	f8d4 2498 	ldr.w	r2, [r4, #1176]	; 0x498
 8007878:	6813      	ldr	r3, [r2, #0]
 800787a:	7952      	ldrb	r2, [r2, #5]
 800787c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8007880:	68db      	ldr	r3, [r3, #12]
  ibqPostFullBufferI(&sdup->ibqueue,
 8007882:	699b      	ldr	r3, [r3, #24]
 8007884:	685a      	ldr	r2, [r3, #4]
  osalDbgCheck((size > 0U) && (size <= (ibqp->bsize - sizeof (size_t))));
 8007886:	b92a      	cbnz	r2, 8007894 <sduDataReceived+0x3e>
 8007888:	f7fc ff5c 	bl	8004744 <vTaskEndScheduler>
 800788c:	e7fe      	b.n	800788c <sduDataReceived+0x36>
  osalDbgCheckClassI();
 800788e:	f7fc ff59 	bl	8004744 <vTaskEndScheduler>
 8007892:	e7fe      	b.n	8007892 <sduDataReceived+0x3c>
  osalDbgCheck((size > 0U) && (size <= (ibqp->bsize - sizeof (size_t))));
 8007894:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007896:	3b04      	subs	r3, #4
 8007898:	429a      	cmp	r2, r3
 800789a:	d8f5      	bhi.n	8007888 <sduDataReceived+0x32>
  osalDbgAssert(!ibqIsFullI(ibqp), "buffers queue full");
 800789c:	e9d4 310a 	ldrd	r3, r1, [r4, #40]	; 0x28
 80078a0:	428b      	cmp	r3, r1
 80078a2:	d104      	bne.n	80078ae <sduDataReceived+0x58>
 80078a4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80078a6:	b111      	cbz	r1, 80078ae <sduDataReceived+0x58>
 80078a8:	f7fc ff4c 	bl	8004744 <vTaskEndScheduler>
 80078ac:	e7fe      	b.n	80078ac <sduDataReceived+0x56>
  *((size_t *)ibqp->bwrptr) = size;
 80078ae:	601a      	str	r2, [r3, #0]
  ibqp->bcounter++;
 80078b0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80078b2:	3201      	adds	r2, #1
 80078b4:	6262      	str	r2, [r4, #36]	; 0x24
  ibqp->bwrptr += ibqp->bsize;
 80078b6:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80078b8:	4413      	add	r3, r2
  if (ibqp->bwrptr >= ibqp->btop) {
 80078ba:	6b22      	ldr	r2, [r4, #48]	; 0x30
  ibqp->bwrptr += ibqp->bsize;
 80078bc:	62a3      	str	r3, [r4, #40]	; 0x28
  if (ibqp->bwrptr >= ibqp->btop) {
 80078be:	4293      	cmp	r3, r2
 80078c0:	d20a      	bcs.n	80078d8 <sduDataReceived+0x82>
  osalThreadDequeueNextI(&ibqp->waiting, MSG_OK);
 80078c2:	f104 0018 	add.w	r0, r4, #24
 80078c6:	f7ff fae3 	bl	8006e90 <osalThreadDequeueNextI.constprop.0>
  (void) sdu_start_receive(sdup);
 80078ca:	4620      	mov	r0, r4
 80078cc:	f7ff ff9a 	bl	8007804 <sdu_start_receive.isra.0>
}
 80078d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  osalSysUnlockFromISR();
 80078d4:	f7fd b9d0 	b.w	8004c78 <osalSysUnlockFromISR.lto_priv.0>
    ibqp->bwrptr = ibqp->buffers;
 80078d8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80078da:	62a3      	str	r3, [r4, #40]	; 0x28
 80078dc:	e7f1      	b.n	80078c2 <sduDataReceived+0x6c>
}
 80078de:	bd10      	pop	{r4, pc}

080078e0 <ibqReadTimeout.part.0>:
size_t ibqReadTimeout(input_buffers_queue_t *ibqp, uint8_t *bp,
 80078e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078e4:	461f      	mov	r7, r3
 80078e6:	4604      	mov	r4, r0
  size_t r = 0;
 80078e8:	2600      	movs	r6, #0
 80078ea:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8007998 <ibqReadTimeout.part.0+0xb8>
size_t ibqReadTimeout(input_buffers_queue_t *ibqp, uint8_t *bp,
 80078ee:	4690      	mov	r8, r2
 80078f0:	460d      	mov	r5, r1
  osalSysLock();
 80078f2:	f7fc ff17 	bl	8004724 <vPortEnterCritical>
 80078f6:	f7fd fd03 	bl	8005300 <vPortValidateInterruptPriority>
 80078fa:	f8da 3000 	ldr.w	r3, [sl]
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
 80078fe:	f107 3bff 	add.w	fp, r7, #4294967295	; 0xffffffff
  deadline = osalOsGetSystemTimeX() + timeout;
 8007902:	eb07 0903 	add.w	r9, r7, r3
    if (ibqp->ptr == NULL) {
 8007906:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007908:	b93b      	cbnz	r3, 800791a <ibqReadTimeout.part.0+0x3a>
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
 800790a:	f11b 0f03 	cmn.w	fp, #3
 800790e:	d92a      	bls.n	8007966 <ibqReadTimeout.part.0+0x86>
        msg = ibqGetFullBufferTimeoutS(ibqp, timeout);
 8007910:	4639      	mov	r1, r7
        msg = ibqGetFullBufferTimeoutS(ibqp, next_timeout);
 8007912:	4620      	mov	r0, r4
 8007914:	f7fe fefe 	bl	8006714 <ibqGetFullBufferTimeoutS>
      if (msg != MSG_OK) {
 8007918:	bb68      	cbnz	r0, 8007976 <ibqReadTimeout.part.0+0x96>
    size = (size_t)ibqp->top - (size_t)ibqp->ptr;
 800791a:	e9d4 120a 	ldrd	r1, r2, [r4, #40]	; 0x28
    if (size > (n - r)) {
 800791e:	eba8 0306 	sub.w	r3, r8, r6
    size = (size_t)ibqp->top - (size_t)ibqp->ptr;
 8007922:	1a52      	subs	r2, r2, r1
    if (size > (n - r)) {
 8007924:	429a      	cmp	r2, r3
 8007926:	bf28      	it	cs
 8007928:	461a      	movcs	r2, r3
    if (size > 64U) {
 800792a:	2a40      	cmp	r2, #64	; 0x40
 800792c:	d929      	bls.n	8007982 <ibqReadTimeout.part.0+0xa2>
      memcpy(bp, ibqp->ptr, 64U);
 800792e:	462b      	mov	r3, r5
 8007930:	f101 0240 	add.w	r2, r1, #64	; 0x40
 8007934:	f851 0b04 	ldr.w	r0, [r1], #4
 8007938:	4291      	cmp	r1, r2
 800793a:	f843 0b04 	str.w	r0, [r3], #4
 800793e:	d1f9      	bne.n	8007934 <ibqReadTimeout.part.0+0x54>
      ibqp->ptr += 64U;
 8007940:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      bp        += 64U;
 8007942:	3540      	adds	r5, #64	; 0x40
      ibqp->ptr += 64U;
 8007944:	3340      	adds	r3, #64	; 0x40
 8007946:	62a3      	str	r3, [r4, #40]	; 0x28
      r         += 64U;
 8007948:	3640      	adds	r6, #64	; 0x40
    if (ibqp->ptr >= ibqp->top) {
 800794a:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
 800794e:	429a      	cmp	r2, r3
 8007950:	d302      	bcc.n	8007958 <ibqReadTimeout.part.0+0x78>
      ibqReleaseEmptyBufferS(ibqp);
 8007952:	4620      	mov	r0, r4
 8007954:	f7fc ff02 	bl	800475c <ibqReleaseEmptyBufferS>
    osalSysUnlock();
 8007958:	f7fd f908 	bl	8004b6c <osalSysUnlock.lto_priv.0>
    if (r >= n) {
 800795c:	45b0      	cmp	r8, r6
 800795e:	d90c      	bls.n	800797a <ibqReadTimeout.part.0+0x9a>
    osalSysLock();
 8007960:	f7fc fee0 	bl	8004724 <vPortEnterCritical>
  while (true) {
 8007964:	e7cf      	b.n	8007906 <ibqReadTimeout.part.0+0x26>
 8007966:	f7fd fccb 	bl	8005300 <vPortValidateInterruptPriority>
 800796a:	f8da 1000 	ldr.w	r1, [sl]
        systime_t next_timeout = deadline - osalOsGetSystemTimeX();
 800796e:	eba9 0101 	sub.w	r1, r9, r1
        if (next_timeout > timeout) {
 8007972:	428f      	cmp	r7, r1
 8007974:	d2cd      	bcs.n	8007912 <ibqReadTimeout.part.0+0x32>
        osalSysUnlock();
 8007976:	f7fd f8f9 	bl	8004b6c <osalSysUnlock.lto_priv.0>
}
 800797a:	4630      	mov	r0, r6
 800797c:	b003      	add	sp, #12
 800797e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      memcpy(bp, ibqp->ptr, size);
 8007982:	4628      	mov	r0, r5
 8007984:	9201      	str	r2, [sp, #4]
 8007986:	f7fc f8a9 	bl	8003adc <memcpy>
      bp        += size;
 800798a:	9a01      	ldr	r2, [sp, #4]
      ibqp->ptr += size;
 800798c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      bp        += size;
 800798e:	4415      	add	r5, r2
      ibqp->ptr += size;
 8007990:	4413      	add	r3, r2
 8007992:	62a3      	str	r3, [r4, #40]	; 0x28
      r         += size;
 8007994:	4416      	add	r6, r2
 8007996:	e7d8      	b.n	800794a <ibqReadTimeout.part.0+0x6a>
 8007998:	20001648 	.word	0x20001648

0800799c <_readt.lto_priv.1>:
static size_t _readt(void *ip, uint8_t *bp, size_t n, systime_t timeout) {
 800799c:	b510      	push	{r4, lr}
  osalDbgCheck(n > 0U);
 800799e:	b912      	cbnz	r2, 80079a6 <_readt.lto_priv.1+0xa>
 80079a0:	f7fc fed0 	bl	8004744 <vTaskEndScheduler>
 80079a4:	e7fe      	b.n	80079a4 <_readt.lto_priv.1+0x8>
 80079a6:	3018      	adds	r0, #24
}
 80079a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80079ac:	f7ff bf98 	b.w	80078e0 <ibqReadTimeout.part.0>

080079b0 <_read.lto_priv.1>:
static size_t _read(void *ip, uint8_t *bp, size_t n) {
 80079b0:	b510      	push	{r4, lr}
 80079b2:	b912      	cbnz	r2, 80079ba <_read.lto_priv.1+0xa>
 80079b4:	f7fc fec6 	bl	8004744 <vTaskEndScheduler>
 80079b8:	e7fe      	b.n	80079b8 <_read.lto_priv.1+0x8>
 80079ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80079be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80079c2:	3018      	adds	r0, #24
 80079c4:	f7ff bf8c 	b.w	80078e0 <ibqReadTimeout.part.0>

080079c8 <obqWriteTimeout.part.0>:
size_t obqWriteTimeout(output_buffers_queue_t *obqp, const uint8_t *bp,
 80079c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079cc:	461f      	mov	r7, r3
 80079ce:	4604      	mov	r4, r0
  size_t w = 0;
 80079d0:	2600      	movs	r6, #0
 80079d2:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8007a80 <obqWriteTimeout.part.0+0xb8>
size_t obqWriteTimeout(output_buffers_queue_t *obqp, const uint8_t *bp,
 80079d6:	4690      	mov	r8, r2
 80079d8:	460d      	mov	r5, r1
  osalSysLock();
 80079da:	f7fc fea3 	bl	8004724 <vPortEnterCritical>
 80079de:	f7fd fc8f 	bl	8005300 <vPortValidateInterruptPriority>
 80079e2:	f8da 3000 	ldr.w	r3, [sl]
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
 80079e6:	f107 3bff 	add.w	fp, r7, #4294967295	; 0xffffffff
  deadline = osalOsGetSystemTimeX() + timeout;
 80079ea:	eb07 0903 	add.w	r9, r7, r3
    if (obqp->ptr == NULL) {
 80079ee:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80079f0:	b93b      	cbnz	r3, 8007a02 <obqWriteTimeout.part.0+0x3a>
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
 80079f2:	f11b 0f03 	cmn.w	fp, #3
 80079f6:	d92a      	bls.n	8007a4e <obqWriteTimeout.part.0+0x86>
        msg = obqGetEmptyBufferTimeoutS(obqp, timeout);
 80079f8:	4639      	mov	r1, r7
        msg = obqGetEmptyBufferTimeoutS(obqp, next_timeout);
 80079fa:	4620      	mov	r0, r4
 80079fc:	f7fe fed7 	bl	80067ae <obqGetEmptyBufferTimeoutS>
      if (msg != MSG_OK) {
 8007a00:	bb68      	cbnz	r0, 8007a5e <obqWriteTimeout.part.0+0x96>
    size = (size_t)obqp->top - (size_t)obqp->ptr;
 8007a02:	e9d4 020a 	ldrd	r0, r2, [r4, #40]	; 0x28
    if (size > (n - w)) {
 8007a06:	eba8 0306 	sub.w	r3, r8, r6
    size = (size_t)obqp->top - (size_t)obqp->ptr;
 8007a0a:	1a12      	subs	r2, r2, r0
    if (size > (n - w)) {
 8007a0c:	429a      	cmp	r2, r3
 8007a0e:	bf28      	it	cs
 8007a10:	461a      	movcs	r2, r3
    if (size > 64U) {
 8007a12:	2a40      	cmp	r2, #64	; 0x40
 8007a14:	d929      	bls.n	8007a6a <obqWriteTimeout.part.0+0xa2>
      memcpy(obqp->ptr, bp, 64U);
 8007a16:	f105 0340 	add.w	r3, r5, #64	; 0x40
 8007a1a:	f855 2b04 	ldr.w	r2, [r5], #4
 8007a1e:	429d      	cmp	r5, r3
 8007a20:	f840 2b04 	str.w	r2, [r0], #4
 8007a24:	d1f9      	bne.n	8007a1a <obqWriteTimeout.part.0+0x52>
      obqp->ptr += 64U;
 8007a26:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      w         += 64U;
 8007a28:	3640      	adds	r6, #64	; 0x40
      obqp->ptr += 64U;
 8007a2a:	3340      	adds	r3, #64	; 0x40
 8007a2c:	62a3      	str	r3, [r4, #40]	; 0x28
    if (obqp->ptr >= obqp->top) {
 8007a2e:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
 8007a32:	429a      	cmp	r2, r3
 8007a34:	d304      	bcc.n	8007a40 <obqWriteTimeout.part.0+0x78>
      obqPostFullBufferS(obqp, obqp->bsize - sizeof (size_t));
 8007a36:	69e1      	ldr	r1, [r4, #28]
 8007a38:	4620      	mov	r0, r4
 8007a3a:	3904      	subs	r1, #4
 8007a3c:	f7fc fec8 	bl	80047d0 <obqPostFullBufferS>
    osalSysUnlock();
 8007a40:	f7fd f894 	bl	8004b6c <osalSysUnlock.lto_priv.0>
    if (w >= n) {
 8007a44:	45b0      	cmp	r8, r6
 8007a46:	d90c      	bls.n	8007a62 <obqWriteTimeout.part.0+0x9a>
    osalSysLock();
 8007a48:	f7fc fe6c 	bl	8004724 <vPortEnterCritical>
  while (true) {
 8007a4c:	e7cf      	b.n	80079ee <obqWriteTimeout.part.0+0x26>
 8007a4e:	f7fd fc57 	bl	8005300 <vPortValidateInterruptPriority>
 8007a52:	f8da 1000 	ldr.w	r1, [sl]
        systime_t next_timeout = deadline - osalOsGetSystemTimeX();
 8007a56:	eba9 0101 	sub.w	r1, r9, r1
        if (next_timeout > timeout) {
 8007a5a:	428f      	cmp	r7, r1
 8007a5c:	d2cd      	bcs.n	80079fa <obqWriteTimeout.part.0+0x32>
        osalSysUnlock();
 8007a5e:	f7fd f885 	bl	8004b6c <osalSysUnlock.lto_priv.0>
}
 8007a62:	4630      	mov	r0, r6
 8007a64:	b003      	add	sp, #12
 8007a66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      memcpy(obqp->ptr, bp, size);
 8007a6a:	4629      	mov	r1, r5
 8007a6c:	9201      	str	r2, [sp, #4]
 8007a6e:	f7fc f835 	bl	8003adc <memcpy>
      bp        += size;
 8007a72:	9a01      	ldr	r2, [sp, #4]
      obqp->ptr += size;
 8007a74:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      bp        += size;
 8007a76:	4415      	add	r5, r2
      obqp->ptr += size;
 8007a78:	4413      	add	r3, r2
 8007a7a:	62a3      	str	r3, [r4, #40]	; 0x28
      w         += size;
 8007a7c:	4416      	add	r6, r2
 8007a7e:	e7d6      	b.n	8007a2e <obqWriteTimeout.part.0+0x66>
 8007a80:	20001648 	.word	0x20001648

08007a84 <_write.lto_priv.1>:
static size_t _write(void *ip, const uint8_t *bp, size_t n) {
 8007a84:	b570      	push	{r4, r5, r6, lr}
 8007a86:	4615      	mov	r5, r2
  if(sdup->config->sofCallback) sdup->config->sofCallback(sdup->config->usbp, true);
 8007a88:	f8d0 2498 	ldr.w	r2, [r0, #1176]	; 0x498
static size_t _write(void *ip, const uint8_t *bp, size_t n) {
 8007a8c:	4604      	mov	r4, r0
  if(sdup->config->sofCallback) sdup->config->sofCallback(sdup->config->usbp, true);
 8007a8e:	6893      	ldr	r3, [r2, #8]
static size_t _write(void *ip, const uint8_t *bp, size_t n) {
 8007a90:	460e      	mov	r6, r1
  if(sdup->config->sofCallback) sdup->config->sofCallback(sdup->config->usbp, true);
 8007a92:	b113      	cbz	r3, 8007a9a <_write.lto_priv.1+0x16>
 8007a94:	2101      	movs	r1, #1
 8007a96:	6810      	ldr	r0, [r2, #0]
 8007a98:	4798      	blx	r3
  osalDbgCheck(n > 0U);
 8007a9a:	b915      	cbnz	r5, 8007aa2 <_write.lto_priv.1+0x1e>
 8007a9c:	f7fc fe52 	bl	8004744 <vTaskEndScheduler>
 8007aa0:	e7fe      	b.n	8007aa0 <_write.lto_priv.1+0x1c>
 8007aa2:	462a      	mov	r2, r5
 8007aa4:	4631      	mov	r1, r6
 8007aa6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007aaa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8007aae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007ab2:	f7ff bf89 	b.w	80079c8 <obqWriteTimeout.part.0>

08007ab6 <_writet.lto_priv.1>:
static size_t _writet(void *ip, const uint8_t *bp, size_t n, systime_t timeout) {
 8007ab6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007aba:	4615      	mov	r5, r2
  if(sdup->config->sofCallback) sdup->config->sofCallback(sdup->config->usbp, true);
 8007abc:	f8d0 2498 	ldr.w	r2, [r0, #1176]	; 0x498
static size_t _writet(void *ip, const uint8_t *bp, size_t n, systime_t timeout) {
 8007ac0:	461f      	mov	r7, r3
  if(sdup->config->sofCallback) sdup->config->sofCallback(sdup->config->usbp, true);
 8007ac2:	6893      	ldr	r3, [r2, #8]
static size_t _writet(void *ip, const uint8_t *bp, size_t n, systime_t timeout) {
 8007ac4:	4604      	mov	r4, r0
 8007ac6:	460e      	mov	r6, r1
  if(sdup->config->sofCallback) sdup->config->sofCallback(sdup->config->usbp, true);
 8007ac8:	b113      	cbz	r3, 8007ad0 <_writet.lto_priv.1+0x1a>
 8007aca:	2101      	movs	r1, #1
 8007acc:	6810      	ldr	r0, [r2, #0]
 8007ace:	4798      	blx	r3
 8007ad0:	b915      	cbnz	r5, 8007ad8 <_writet.lto_priv.1+0x22>
 8007ad2:	f7fc fe37 	bl	8004744 <vTaskEndScheduler>
 8007ad6:	e7fe      	b.n	8007ad6 <_writet.lto_priv.1+0x20>
 8007ad8:	463b      	mov	r3, r7
 8007ada:	462a      	mov	r2, r5
 8007adc:	4631      	mov	r1, r6
 8007ade:	f104 0050 	add.w	r0, r4, #80	; 0x50
}
 8007ae2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007ae6:	f7ff bf6f 	b.w	80079c8 <obqWriteTimeout.part.0>

08007aea <_writes>:
static size_t _writes(void *ip, const uint8_t *bp, size_t n) {
 8007aea:	b538      	push	{r3, r4, r5, lr}
 8007aec:	4605      	mov	r5, r0
  if (msp->size - msp->eos < n)
 8007aee:	e9d0 3002 	ldrd	r3, r0, [r0, #8]
 8007af2:	1a1c      	subs	r4, r3, r0
 8007af4:	4294      	cmp	r4, r2
 8007af6:	bf28      	it	cs
 8007af8:	4614      	movcs	r4, r2
  memcpy(msp->buffer + msp->eos, bp, n);
 8007afa:	686b      	ldr	r3, [r5, #4]
 8007afc:	4622      	mov	r2, r4
 8007afe:	4418      	add	r0, r3
 8007b00:	f7fb ffec 	bl	8003adc <memcpy>
  msp->eos += n;
 8007b04:	68eb      	ldr	r3, [r5, #12]
}
 8007b06:	4620      	mov	r0, r4
  msp->eos += n;
 8007b08:	4423      	add	r3, r4
 8007b0a:	60eb      	str	r3, [r5, #12]
}
 8007b0c:	bd38      	pop	{r3, r4, r5, pc}

08007b0e <_reads>:
static size_t _reads(void *ip, uint8_t *bp, size_t n) {
 8007b0e:	b538      	push	{r3, r4, r5, lr}
 8007b10:	4605      	mov	r5, r0
 8007b12:	4608      	mov	r0, r1
  if (msp->eos - msp->offset < n)
 8007b14:	e9d5 3103 	ldrd	r3, r1, [r5, #12]
 8007b18:	1a5c      	subs	r4, r3, r1
 8007b1a:	4294      	cmp	r4, r2
 8007b1c:	bf28      	it	cs
 8007b1e:	4614      	movcs	r4, r2
  memcpy(bp, msp->buffer + msp->offset, n);
 8007b20:	686b      	ldr	r3, [r5, #4]
 8007b22:	4622      	mov	r2, r4
 8007b24:	4419      	add	r1, r3
 8007b26:	f7fb ffd9 	bl	8003adc <memcpy>
  msp->offset += n;
 8007b2a:	692b      	ldr	r3, [r5, #16]
}
 8007b2c:	4620      	mov	r0, r4
  msp->offset += n;
 8007b2e:	4423      	add	r3, r4
 8007b30:	612b      	str	r3, [r5, #16]
}
 8007b32:	bd38      	pop	{r3, r4, r5, pc}

08007b34 <usbInitEndpointI>:
                      const USBEndpointConfig *epcp) {
 8007b34:	b570      	push	{r4, r5, r6, lr}
 8007b36:	4604      	mov	r4, r0
 8007b38:	460e      	mov	r6, r1
 8007b3a:	4615      	mov	r5, r2
	__asm volatile( "mrs %0, basepri" : "=r"( ulBasePri ) );
 8007b3c:	f3ef 8311 	mrs	r3, BASEPRI
	return (ulBasePri > 0)? pdTRUE : pdFALSE;
 8007b40:	b11b      	cbz	r3, 8007b4a <usbInitEndpointI+0x16>
  osalDbgCheck((usbp != NULL) && (epcp != NULL));
 8007b42:	b928      	cbnz	r0, 8007b50 <usbInitEndpointI+0x1c>
 8007b44:	f7fc fdfe 	bl	8004744 <vTaskEndScheduler>
 8007b48:	e7fe      	b.n	8007b48 <usbInitEndpointI+0x14>
  osalDbgCheckClassI();
 8007b4a:	f7fc fdfb 	bl	8004744 <vTaskEndScheduler>
 8007b4e:	e7fe      	b.n	8007b4e <usbInitEndpointI+0x1a>
  osalDbgAssert(usbp->state == USB_ACTIVE,
 8007b50:	7803      	ldrb	r3, [r0, #0]
 8007b52:	2b04      	cmp	r3, #4
 8007b54:	d002      	beq.n	8007b5c <usbInitEndpointI+0x28>
 8007b56:	f7fc fdf5 	bl	8004744 <vTaskEndScheduler>
 8007b5a:	e7fe      	b.n	8007b5a <usbInitEndpointI+0x26>
  osalDbgAssert(usbp->epc[ep] == NULL, "already initialized");
 8007b5c:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 8007b60:	68d9      	ldr	r1, [r3, #12]
 8007b62:	b111      	cbz	r1, 8007b6a <usbInitEndpointI+0x36>
 8007b64:	f7fc fdee 	bl	8004744 <vTaskEndScheduler>
 8007b68:	e7fe      	b.n	8007b68 <usbInitEndpointI+0x34>
  if (epcp->in_state != NULL) {
 8007b6a:	6950      	ldr	r0, [r2, #20]
  usbp->epc[ep] = epcp;
 8007b6c:	60da      	str	r2, [r3, #12]
  if (epcp->in_state != NULL) {
 8007b6e:	b110      	cbz	r0, 8007b76 <usbInitEndpointI+0x42>
    memset(epcp->in_state, 0, sizeof(USBInEndpointState));
 8007b70:	2210      	movs	r2, #16
 8007b72:	f003 fe4f 	bl	800b814 <memset>
  if (epcp->out_state != NULL) {
 8007b76:	69a8      	ldr	r0, [r5, #24]
 8007b78:	b118      	cbz	r0, 8007b82 <usbInitEndpointI+0x4e>
    memset(epcp->out_state, 0, sizeof(USBOutEndpointState));
 8007b7a:	2210      	movs	r2, #16
 8007b7c:	2100      	movs	r1, #0
 8007b7e:	f003 fe49 	bl	800b814 <memset>
  usb_lld_init_endpoint(usbp, ep);
 8007b82:	4631      	mov	r1, r6
 8007b84:	4620      	mov	r0, r4
}
 8007b86:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  usb_lld_init_endpoint(usbp, ep);
 8007b8a:	f7fc bf5b 	b.w	8004a44 <usb_lld_init_endpoint>

08007b8e <get_history>:
    shp->sh_end -= shp->sh_size;
  *(shp->sh_buffer + shp->sh_end) = 0;
  shp->sh_cur = 0;
}

static int get_history(ShellHistory *shp, char *line, int dir) {
 8007b8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (shp == NULL)
    return -1;

  /* Count the number of lines saved in the buffer */
  int idx = shp->sh_beg;
  while (idx != shp->sh_end) {
 8007b92:	e9d0 5602 	ldrd	r5, r6, [r0, #8]
static int get_history(ShellHistory *shp, char *line, int dir) {
 8007b96:	4604      	mov	r4, r0
 8007b98:	4688      	mov	r8, r1
  int idx = shp->sh_beg;
 8007b9a:	4628      	mov	r0, r5
  int count=0;
 8007b9c:	2100      	movs	r1, #0
  while (idx != shp->sh_end) {
 8007b9e:	4286      	cmp	r6, r0
 8007ba0:	d12a      	bne.n	8007bf8 <get_history+0x6a>
    if (idx >= shp->sh_size)
      idx -= shp->sh_size;
    count++;
  }

  if (dir == SHELL_HIST_DIR_FW) {
 8007ba2:	2a01      	cmp	r2, #1
 8007ba4:	d104      	bne.n	8007bb0 <get_history+0x22>
    if (shp->sh_cur > 0)
 8007ba6:	6923      	ldr	r3, [r4, #16]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	dd48      	ble.n	8007c3e <get_history+0xb0>
      shp->sh_cur -= 2;
 8007bac:	3b02      	subs	r3, #2
 8007bae:	6123      	str	r3, [r4, #16]
    else
      return 0;
  }

  if (count >= shp->sh_cur) {
 8007bb0:	6923      	ldr	r3, [r4, #16]
 8007bb2:	428b      	cmp	r3, r1
 8007bb4:	dc45      	bgt.n	8007c42 <get_history+0xb4>
    idx += *(shp->sh_buffer + idx) + 1;
 8007bb6:	f8d4 c000 	ldr.w	ip, [r4]
 8007bba:	3901      	subs	r1, #1
    idx = shp->sh_beg;
    int i = 0;
    while (idx != shp->sh_end && shp->sh_cur != (count - i - 1)) {
      idx += *(shp->sh_buffer + idx) + 1;
 8007bbc:	f81c 7005 	ldrb.w	r7, [ip, r5]
    while (idx != shp->sh_end && shp->sh_cur != (count - i - 1)) {
 8007bc0:	42a8      	cmp	r0, r5
      idx += *(shp->sh_buffer + idx) + 1;
 8007bc2:	463e      	mov	r6, r7
    while (idx != shp->sh_end && shp->sh_cur != (count - i - 1)) {
 8007bc4:	d001      	beq.n	8007bca <get_history+0x3c>
 8007bc6:	428b      	cmp	r3, r1
 8007bc8:	d120      	bne.n	8007c0c <get_history+0x7e>
      i++;
    }

    int length = *(shp->sh_buffer + idx);

    if (length > 0) {
 8007bca:	b39f      	cbz	r7, 8007c34 <get_history+0xa6>
      shp->sh_cur++;
 8007bcc:	3301      	adds	r3, #1

      memset(line, 0, SHELL_MAX_LINE_LENGTH);
 8007bce:	2240      	movs	r2, #64	; 0x40
 8007bd0:	2100      	movs	r1, #0
      shp->sh_cur++;
 8007bd2:	6123      	str	r3, [r4, #16]
      memset(line, 0, SHELL_MAX_LINE_LENGTH);
 8007bd4:	4640      	mov	r0, r8
 8007bd6:	f003 fe1d 	bl	800b814 <memset>
      if ((idx + length) < shp->sh_size) {
 8007bda:	6863      	ldr	r3, [r4, #4]
 8007bdc:	19ea      	adds	r2, r5, r7
 8007bde:	429a      	cmp	r2, r3
 8007be0:	6820      	ldr	r0, [r4, #0]
        memcpy(line, (shp->sh_buffer + idx + 1), length);
 8007be2:	f105 0101 	add.w	r1, r5, #1
      if ((idx + length) < shp->sh_size) {
 8007be6:	da19      	bge.n	8007c1c <get_history+0x8e>
        memcpy(line, (shp->sh_buffer + idx + 1), length);
 8007be8:	4401      	add	r1, r0
 8007bea:	463a      	mov	r2, r7
 8007bec:	4640      	mov	r0, r8
         * Since the saved line was split at the end of the buffer,
         * get the line in two parts.
         */
        int part_len = shp->sh_size - idx - 1;
        memcpy(line, shp->sh_buffer + idx + 1, part_len);
        memcpy(line + part_len, shp->sh_buffer, length - part_len);
 8007bee:	f7fb ff75 	bl	8003adc <memcpy>
      shp->sh_cur++;
      return 0;
    }
  }
  return -1;
}
 8007bf2:	4630      	mov	r0, r6
 8007bf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    idx += *(shp->sh_buffer + idx) + 1;
 8007bf8:	6823      	ldr	r3, [r4, #0]
    count++;
 8007bfa:	3101      	adds	r1, #1
    idx += *(shp->sh_buffer + idx) + 1;
 8007bfc:	5c1b      	ldrb	r3, [r3, r0]
 8007bfe:	3301      	adds	r3, #1
 8007c00:	4418      	add	r0, r3
    if (idx >= shp->sh_size)
 8007c02:	6863      	ldr	r3, [r4, #4]
 8007c04:	4283      	cmp	r3, r0
      idx -= shp->sh_size;
 8007c06:	bfd8      	it	le
 8007c08:	1ac0      	suble	r0, r0, r3
    count++;
 8007c0a:	e7c8      	b.n	8007b9e <get_history+0x10>
      if (idx >= shp->sh_size)
 8007c0c:	6866      	ldr	r6, [r4, #4]
      idx += *(shp->sh_buffer + idx) + 1;
 8007c0e:	3701      	adds	r7, #1
 8007c10:	443d      	add	r5, r7
      if (idx >= shp->sh_size)
 8007c12:	42ae      	cmp	r6, r5
        idx -= shp->sh_size;
 8007c14:	bfd8      	it	le
 8007c16:	1bad      	suble	r5, r5, r6
      i++;
 8007c18:	3901      	subs	r1, #1
 8007c1a:	e7cf      	b.n	8007bbc <get_history+0x2e>
        int part_len = shp->sh_size - idx - 1;
 8007c1c:	1b5d      	subs	r5, r3, r5
 8007c1e:	3d01      	subs	r5, #1
        memcpy(line, shp->sh_buffer + idx + 1, part_len);
 8007c20:	4401      	add	r1, r0
 8007c22:	462a      	mov	r2, r5
 8007c24:	4640      	mov	r0, r8
 8007c26:	f7fb ff59 	bl	8003adc <memcpy>
        memcpy(line + part_len, shp->sh_buffer, length - part_len);
 8007c2a:	6821      	ldr	r1, [r4, #0]
 8007c2c:	1b7a      	subs	r2, r7, r5
 8007c2e:	eb08 0005 	add.w	r0, r8, r5
 8007c32:	e7dc      	b.n	8007bee <get_history+0x60>
    else if (dir == SHELL_HIST_DIR_FW) {
 8007c34:	2a01      	cmp	r2, #1
 8007c36:	d104      	bne.n	8007c42 <get_history+0xb4>
      shp->sh_cur++;
 8007c38:	3301      	adds	r3, #1
 8007c3a:	6123      	str	r3, [r4, #16]
      return 0;
 8007c3c:	e7d9      	b.n	8007bf2 <get_history+0x64>
      return 0;
 8007c3e:	2600      	movs	r6, #0
 8007c40:	e7d7      	b.n	8007bf2 <get_history+0x64>
  return -1;
 8007c42:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8007c46:	e7d4      	b.n	8007bf2 <get_history+0x64>

08007c48 <prvInitialiseNewTask.constprop.0>:
 8007c48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c4c:	460d      	mov	r5, r1
 8007c4e:	e9dd 9808 	ldrd	r9, r8, [sp, #32]
 8007c52:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007c54:	0096      	lsls	r6, r2, #2
 8007c56:	4632      	mov	r2, r6
 8007c58:	21a5      	movs	r1, #165	; 0xa5
 8007c5a:	4607      	mov	r7, r0
 8007c5c:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8007c5e:	469a      	mov	sl, r3
 8007c60:	f003 fdd8 	bl	800b814 <memset>
 8007c64:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8007c66:	3e04      	subs	r6, #4
 8007c68:	4432      	add	r2, r6
 8007c6a:	1e6b      	subs	r3, r5, #1
 8007c6c:	f022 0207 	bic.w	r2, r2, #7
 8007c70:	f104 0134 	add.w	r1, r4, #52	; 0x34
 8007c74:	350f      	adds	r5, #15
 8007c76:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 8007c7a:	f801 0b01 	strb.w	r0, [r1], #1
 8007c7e:	b108      	cbz	r0, 8007c84 <prvInitialiseNewTask.constprop.0+0x3c>
 8007c80:	42ab      	cmp	r3, r5
 8007c82:	d1f8      	bne.n	8007c76 <prvInitialiseNewTask.constprop.0+0x2e>
 8007c84:	f1c9 0305 	rsb	r3, r9, #5
 8007c88:	2100      	movs	r1, #0
 8007c8a:	61a3      	str	r3, [r4, #24]
 8007c8c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007c90:	6621      	str	r1, [r4, #96]	; 0x60
 8007c92:	e9c4 9113 	strd	r9, r1, [r4, #76]	; 0x4c
 8007c96:	e9c4 1115 	strd	r1, r1, [r4, #84]	; 0x54
 8007c9a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007c9e:	f8c4 902c 	str.w	r9, [r4, #44]	; 0x2c
 8007ca2:	6161      	str	r1, [r4, #20]
 8007ca4:	62a1      	str	r1, [r4, #40]	; 0x28
 8007ca6:	6124      	str	r4, [r4, #16]
 8007ca8:	6264      	str	r4, [r4, #36]	; 0x24
 8007caa:	65e1      	str	r1, [r4, #92]	; 0x5c
 8007cac:	f884 1064 	strb.w	r1, [r4, #100]	; 0x64
 8007cb0:	f842 3c04 	str.w	r3, [r2, #-4]
 8007cb4:	4b0a      	ldr	r3, [pc, #40]	; (8007ce0 <prvInitialiseNewTask.constprop.0+0x98>)
 8007cb6:	f027 0701 	bic.w	r7, r7, #1
 8007cba:	f842 7c08 	str.w	r7, [r2, #-8]
 8007cbe:	f842 3c0c 	str.w	r3, [r2, #-12]
 8007cc2:	f842 ac20 	str.w	sl, [r2, #-32]
 8007cc6:	f842 1c44 	str.w	r1, [r2, #-68]
 8007cca:	f842 1d48 	str.w	r1, [r2, #-72]!
 8007cce:	6022      	str	r2, [r4, #0]
 8007cd0:	f1b8 0f00 	cmp.w	r8, #0
 8007cd4:	d001      	beq.n	8007cda <prvInitialiseNewTask.constprop.0+0x92>
 8007cd6:	f8c8 4000 	str.w	r4, [r8]
 8007cda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007cde:	bf00      	nop
 8007ce0:	08004b3d 	.word	0x08004b3d

08007ce4 <xTaskCreate.isra.0>:
 8007ce4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ce8:	4606      	mov	r6, r0
 8007cea:	b085      	sub	sp, #20
 8007cec:	0090      	lsls	r0, r2, #2
 8007cee:	460f      	mov	r7, r1
 8007cf0:	e9dd 9a0e 	ldrd	r9, sl, [sp, #56]	; 0x38
 8007cf4:	4693      	mov	fp, r2
 8007cf6:	4698      	mov	r8, r3
 8007cf8:	f7fd fd80 	bl	80057fc <pvPortMalloc>
 8007cfc:	4605      	mov	r5, r0
 8007cfe:	b1f0      	cbz	r0, 8007d3e <xTaskCreate.isra.0+0x5a>
 8007d00:	2068      	movs	r0, #104	; 0x68
 8007d02:	f7fd fd7b 	bl	80057fc <pvPortMalloc>
 8007d06:	4604      	mov	r4, r0
 8007d08:	b198      	cbz	r0, 8007d32 <xTaskCreate.isra.0+0x4e>
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	6305      	str	r5, [r0, #48]	; 0x30
 8007d0e:	f880 3065 	strb.w	r3, [r0, #101]	; 0x65
 8007d12:	465a      	mov	r2, fp
 8007d14:	e9cd a001 	strd	sl, r0, [sp, #4]
 8007d18:	4643      	mov	r3, r8
 8007d1a:	4630      	mov	r0, r6
 8007d1c:	4639      	mov	r1, r7
 8007d1e:	f8cd 9000 	str.w	r9, [sp]
 8007d22:	f7ff ff91 	bl	8007c48 <prvInitialiseNewTask.constprop.0>
 8007d26:	4620      	mov	r0, r4
 8007d28:	b005      	add	sp, #20
 8007d2a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d2e:	f7fd bb19 	b.w	8005364 <prvAddNewTaskToReadyList>
 8007d32:	4628      	mov	r0, r5
 8007d34:	b005      	add	sp, #20
 8007d36:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d3a:	f7fd bddf 	b.w	80058fc <vPortFree>
 8007d3e:	b005      	add	sp, #20
 8007d40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007d44 <shellStart.constprop.0>:
    syslog("Shell 0x%08x started (%s).", activeShell, activeShell->taskName);

    shellThread(&activeShell->shellCfg);
}

bool shellStart(BaseSequentialStream* stream,
 8007d44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007d46:	4606      	mov	r6, r0
                unsigned int histSize, const char* taskName,
                void(*terminateCallback)(void* param), void* param)
{
    ActiveShell* activeShell = pvPortMalloc(sizeof(ActiveShell));
 8007d48:	2020      	movs	r0, #32
bool shellStart(BaseSequentialStream* stream,
 8007d4a:	460d      	mov	r5, r1
 8007d4c:	4617      	mov	r7, r2
    ActiveShell* activeShell = pvPortMalloc(sizeof(ActiveShell));
 8007d4e:	f7fd fd55 	bl	80057fc <pvPortMalloc>
    if(!activeShell) {
 8007d52:	4604      	mov	r4, r0
 8007d54:	b300      	cbz	r0, 8007d98 <shellStart.constprop.0+0x54>
        return false;
    }

    memset(activeShell, 0, sizeof(*activeShell));
 8007d56:	2220      	movs	r2, #32
 8007d58:	2100      	movs	r1, #0
 8007d5a:	f003 fd5b 	bl	800b814 <memset>

    activeShell->param = param;
    activeShell->terminateCallback = terminateCallback;

    activeShell->shellCfg.sc_channel = stream;
    activeShell->shellCfg.sc_commands = shellCommands;
 8007d5e:	4b0f      	ldr	r3, [pc, #60]	; (8007d9c <shellStart.constprop.0+0x58>)

    if(histSize) {
        activeShell->shellCfg.sc_histbuf = pvPortMalloc(histSize);
 8007d60:	2080      	movs	r0, #128	; 0x80
    activeShell->terminateCallback = terminateCallback;
 8007d62:	61a7      	str	r7, [r4, #24]
    activeShell->shellCfg.sc_channel = stream;
 8007d64:	6066      	str	r6, [r4, #4]
    activeShell->shellCfg.sc_commands = shellCommands;
 8007d66:	60a3      	str	r3, [r4, #8]
        activeShell->shellCfg.sc_histbuf = pvPortMalloc(histSize);
 8007d68:	f7fd fd48 	bl	80057fc <pvPortMalloc>
 8007d6c:	60e0      	str	r0, [r4, #12]
        if(activeShell->shellCfg.sc_histbuf) {
 8007d6e:	b128      	cbz	r0, 8007d7c <shellStart.constprop.0+0x38>
            memset(activeShell->shellCfg.sc_histbuf, 0, histSize);
 8007d70:	2780      	movs	r7, #128	; 0x80
 8007d72:	2100      	movs	r1, #0
 8007d74:	463a      	mov	r2, r7
 8007d76:	f003 fd4d 	bl	800b814 <memset>
            activeShell->shellCfg.sc_histsize = histSize;
 8007d7a:	6127      	str	r7, [r4, #16]
        }
    }

    activeShell->stream = stream;
    activeShell->taskName = taskName;
    xTaskCreate(shellStartThread, taskName, 256, activeShell, 2, NULL);
 8007d7c:	2302      	movs	r3, #2
 8007d7e:	2200      	movs	r2, #0
 8007d80:	4807      	ldr	r0, [pc, #28]	; (8007da0 <shellStart.constprop.0+0x5c>)
    activeShell->stream = stream;
 8007d82:	6166      	str	r6, [r4, #20]
    activeShell->taskName = taskName;
 8007d84:	6025      	str	r5, [r4, #0]
    xTaskCreate(shellStartThread, taskName, 256, activeShell, 2, NULL);
 8007d86:	4629      	mov	r1, r5
 8007d88:	e9cd 3200 	strd	r3, r2, [sp]
 8007d8c:	4623      	mov	r3, r4
 8007d8e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007d92:	f7ff ffa7 	bl	8007ce4 <xTaskCreate.isra.0>

    return true;
 8007d96:	2001      	movs	r0, #1
}
 8007d98:	b003      	add	sp, #12
 8007d9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d9c:	2000085c 	.word	0x2000085c
 8007da0:	08009bed 	.word	0x08009bed

08007da4 <VectorDC>:
/**
 * @brief   USART3 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_USART3_HANDLER) {
 8007da4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  USART_TypeDef *u = sdp->usart;
 8007da8:	4c62      	ldr	r4, [pc, #392]	; (8007f34 <VectorDC+0x190>)
 8007daa:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
  uint16_t cr1 = u->CR1;
 8007dae:	68f7      	ldr	r7, [r6, #12]
  uint16_t sr = u->SR;
 8007db0:	6833      	ldr	r3, [r6, #0]
  if (sr & USART_SR_LBD) {
 8007db2:	05da      	lsls	r2, r3, #23
  uint16_t sr = u->SR;
 8007db4:	b29d      	uxth	r5, r3
  if (sr & USART_SR_LBD) {
 8007db6:	d50b      	bpl.n	8007dd0 <VectorDC+0x2c>
    osalSysLockFromISR();
 8007db8:	f7fc ff4a 	bl	8004c50 <osalSysLockFromISR.lto_priv.0>
    chnAddFlagsI(sdp, SD_BREAK_DETECTED);
 8007dbc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007dc0:	1d20      	adds	r0, r4, #4
 8007dc2:	f7ff f889 	bl	8006ed8 <osalEventBroadcastFlagsI>
    u->SR = ~USART_SR_LBD;
 8007dc6:	f46f 7380 	mvn.w	r3, #256	; 0x100
 8007dca:	6033      	str	r3, [r6, #0]
    osalSysUnlockFromISR();
 8007dcc:	f7fc ff54 	bl	8004c78 <osalSysUnlockFromISR.lto_priv.0>
  osalSysLockFromISR();
 8007dd0:	f7fc ff3e 	bl	8004c50 <osalSysLockFromISR.lto_priv.0>
  chnAddFlagsI(sdp, sts);
 8007dd4:	f8df 8160 	ldr.w	r8, [pc, #352]	; 8007f38 <VectorDC+0x194>
  osalThreadDequeueNextI(&iqp->q_waiting, MSG_OK);
 8007dd8:	f108 0914 	add.w	r9, r8, #20
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 8007ddc:	f015 0f2f 	tst.w	r5, #47	; 0x2f
 8007de0:	d124      	bne.n	8007e2c <VectorDC+0x88>
  osalSysUnlockFromISR();
 8007de2:	f7fc ff49 	bl	8004c78 <osalSysUnlockFromISR.lto_priv.0>
  if ((cr1 & USART_CR1_TXEIE) && (sr & USART_SR_TXE)) {
 8007de6:	0639      	lsls	r1, r7, #24
 8007de8:	d57b      	bpl.n	8007ee2 <VectorDC+0x13e>
 8007dea:	062a      	lsls	r2, r5, #24
 8007dec:	d579      	bpl.n	8007ee2 <VectorDC+0x13e>
    osalSysLockFromISR();
 8007dee:	f7fc ff2f 	bl	8004c50 <osalSysLockFromISR.lto_priv.0>
	__asm volatile( "mrs %0, basepri" : "=r"( ulBasePri ) );
 8007df2:	f3ef 8311 	mrs	r3, BASEPRI
	return (ulBasePri > 0)? pdTRUE : pdFALSE;
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	f000 8097 	beq.w	8007f2a <VectorDC+0x186>
  if (oqIsEmptyI(oqp)) {
 8007dfc:	e9d4 2314 	ldrd	r2, r3, [r4, #80]	; 0x50
 8007e00:	429a      	cmp	r2, r3
 8007e02:	d102      	bne.n	8007e0a <VectorDC+0x66>
 8007e04:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8007e06:	2a00      	cmp	r2, #0
 8007e08:	d15f      	bne.n	8007eca <VectorDC+0x126>
  oqp->q_counter++;
 8007e0a:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8007e0c:	3201      	adds	r2, #1
 8007e0e:	6462      	str	r2, [r4, #68]	; 0x44
  b = *oqp->q_rdptr++;
 8007e10:	1c5a      	adds	r2, r3, #1
 8007e12:	6562      	str	r2, [r4, #84]	; 0x54
 8007e14:	f893 8000 	ldrb.w	r8, [r3]
  if (oqp->q_rdptr >= oqp->q_top) {
 8007e18:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8007e1a:	429a      	cmp	r2, r3
 8007e1c:	f080 8082 	bcs.w	8007f24 <VectorDC+0x180>
  osalThreadDequeueNextI(&oqp->q_waiting, MSG_OK);
 8007e20:	4846      	ldr	r0, [pc, #280]	; (8007f3c <VectorDC+0x198>)
 8007e22:	f7ff f835 	bl	8006e90 <osalThreadDequeueNextI.constprop.0>
      u->DR = b;
 8007e26:	f8c6 8004 	str.w	r8, [r6, #4]
 8007e2a:	e058      	b.n	8007ede <VectorDC+0x13a>
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
 8007e2c:	072b      	lsls	r3, r5, #28
 8007e2e:	d013      	beq.n	8007e58 <VectorDC+0xb4>
    sts |= SD_OVERRUN_ERROR;
 8007e30:	f015 0f08 	tst.w	r5, #8
 8007e34:	bf0c      	ite	eq
 8007e36:	2100      	moveq	r1, #0
 8007e38:	2180      	movne	r1, #128	; 0x80
  if (sr & USART_SR_PE)
 8007e3a:	07e8      	lsls	r0, r5, #31
    sts |= SD_PARITY_ERROR;
 8007e3c:	bf48      	it	mi
 8007e3e:	f041 0120 	orrmi.w	r1, r1, #32
  if (sr & USART_SR_FE)
 8007e42:	07aa      	lsls	r2, r5, #30
    sts |= SD_FRAMING_ERROR;
 8007e44:	bf48      	it	mi
 8007e46:	f041 0140 	orrmi.w	r1, r1, #64	; 0x40
  if (sr & USART_SR_NE)
 8007e4a:	076b      	lsls	r3, r5, #29
  chnAddFlagsI(sdp, sts);
 8007e4c:	4640      	mov	r0, r8
    sts |= SD_NOISE_ERROR;
 8007e4e:	bf48      	it	mi
 8007e50:	f441 7180 	orrmi.w	r1, r1, #256	; 0x100
  chnAddFlagsI(sdp, sts);
 8007e54:	f7ff f840 	bl	8006ed8 <osalEventBroadcastFlagsI>
    if (sr & USART_SR_RXNE)
 8007e58:	06a8      	lsls	r0, r5, #26
    b = (uint8_t)u->DR & sdp->rxmask;
 8007e5a:	f8d6 a004 	ldr.w	sl, [r6, #4]
    if (sr & USART_SR_RXNE)
 8007e5e:	d51b      	bpl.n	8007e98 <VectorDC+0xf4>
	__asm volatile( "mrs %0, basepri" : "=r"( ulBasePri ) );
 8007e60:	f3ef 8311 	mrs	r3, BASEPRI
	return (ulBasePri > 0)? pdTRUE : pdFALSE;
 8007e64:	b913      	cbnz	r3, 8007e6c <VectorDC+0xc8>
 *
 * @iclass
 */
void sdIncomingDataI(SerialDriver *sdp, uint8_t b) {

  osalDbgCheckClassI();
 8007e66:	f7fc fc6d 	bl	8004744 <vTaskEndScheduler>
 8007e6a:	e7fe      	b.n	8007e6a <VectorDC+0xc6>
  osalDbgCheck(sdp != NULL);

  if (iqIsEmptyI(&sdp->iqueue))
 8007e6c:	6a23      	ldr	r3, [r4, #32]
    b = (uint8_t)u->DR & sdp->rxmask;
 8007e6e:	f894 5084 	ldrb.w	r5, [r4, #132]	; 0x84
 8007e72:	b91b      	cbnz	r3, 8007e7c <VectorDC+0xd8>
    chnAddFlagsI(sdp, CHN_INPUT_AVAILABLE);
 8007e74:	2104      	movs	r1, #4
 8007e76:	4640      	mov	r0, r8
 8007e78:	f7ff f82e 	bl	8006ed8 <osalEventBroadcastFlagsI>
	__asm volatile( "mrs %0, basepri" : "=r"( ulBasePri ) );
 8007e7c:	f3ef 8311 	mrs	r3, BASEPRI
	return (ulBasePri > 0)? pdTRUE : pdFALSE;
 8007e80:	b303      	cbz	r3, 8007ec4 <VectorDC+0x120>
  if (iqIsFullI(iqp)) {
 8007e82:	e9d4 320b 	ldrd	r3, r2, [r4, #44]	; 0x2c
 8007e86:	4293      	cmp	r3, r2
 8007e88:	d109      	bne.n	8007e9e <VectorDC+0xfa>
 8007e8a:	6a22      	ldr	r2, [r4, #32]
 8007e8c:	b13a      	cbz	r2, 8007e9e <VectorDC+0xfa>
  if (iqPutI(&sdp->iqueue, b) < MSG_OK)
    chnAddFlagsI(sdp, SD_QUEUE_FULL_ERROR);
 8007e8e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007e92:	4640      	mov	r0, r8
 8007e94:	f7ff f820 	bl	8006ed8 <osalEventBroadcastFlagsI>
    sr = u->SR;
 8007e98:	6835      	ldr	r5, [r6, #0]
 8007e9a:	b2ad      	uxth	r5, r5
 8007e9c:	e79e      	b.n	8007ddc <VectorDC+0x38>
  iqp->q_counter++;
 8007e9e:	6a22      	ldr	r2, [r4, #32]
    b = (uint8_t)u->DR & sdp->rxmask;
 8007ea0:	ea05 050a 	and.w	r5, r5, sl
 8007ea4:	3201      	adds	r2, #1
 8007ea6:	6222      	str	r2, [r4, #32]
  *iqp->q_wrptr++ = b;
 8007ea8:	1c5a      	adds	r2, r3, #1
 8007eaa:	62e2      	str	r2, [r4, #44]	; 0x2c
 8007eac:	701d      	strb	r5, [r3, #0]
  if (iqp->q_wrptr >= iqp->q_top) {
 8007eae:	e9d4 320a 	ldrd	r3, r2, [r4, #40]	; 0x28
 8007eb2:	429a      	cmp	r2, r3
    iqp->q_wrptr = iqp->q_buffer;
 8007eb4:	bf28      	it	cs
 8007eb6:	6a63      	ldrcs	r3, [r4, #36]	; 0x24
  osalThreadDequeueNextI(&iqp->q_waiting, MSG_OK);
 8007eb8:	4648      	mov	r0, r9
    iqp->q_wrptr = iqp->q_buffer;
 8007eba:	bf28      	it	cs
 8007ebc:	62e3      	strcs	r3, [r4, #44]	; 0x2c
  osalThreadDequeueNextI(&iqp->q_waiting, MSG_OK);
 8007ebe:	f7fe ffe7 	bl	8006e90 <osalThreadDequeueNextI.constprop.0>
 8007ec2:	e7e9      	b.n	8007e98 <VectorDC+0xf4>
  osalDbgCheckClassI();
 8007ec4:	f7fc fc3e 	bl	8004744 <vTaskEndScheduler>
 8007ec8:	e7fe      	b.n	8007ec8 <VectorDC+0x124>
      chnAddFlagsI(sdp, CHN_OUTPUT_EMPTY);
 8007eca:	2108      	movs	r1, #8
 8007ecc:	481a      	ldr	r0, [pc, #104]	; (8007f38 <VectorDC+0x194>)
 8007ece:	f7ff f803 	bl	8006ed8 <osalEventBroadcastFlagsI>
      u->CR1 = (cr1 & ~USART_CR1_TXEIE) | USART_CR1_TCIE;
 8007ed2:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8007ed6:	403b      	ands	r3, r7
 8007ed8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007edc:	60f3      	str	r3, [r6, #12]
    osalSysUnlockFromISR();
 8007ede:	f7fc fecb 	bl	8004c78 <osalSysUnlockFromISR.lto_priv.0>
  if (sr & USART_SR_TC) {
 8007ee2:	066b      	lsls	r3, r5, #25
 8007ee4:	d515      	bpl.n	8007f12 <VectorDC+0x16e>
    osalSysLockFromISR();
 8007ee6:	f7fc feb3 	bl	8004c50 <osalSysLockFromISR.lto_priv.0>
    if (oqIsEmptyI(&sdp->oqueue))
 8007eea:	e9d4 2314 	ldrd	r2, r3, [r4, #80]	; 0x50
 8007eee:	429a      	cmp	r2, r3
 8007ef0:	d105      	bne.n	8007efe <VectorDC+0x15a>
 8007ef2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8007ef4:	b11b      	cbz	r3, 8007efe <VectorDC+0x15a>
      chnAddFlagsI(sdp, CHN_TRANSMISSION_END);
 8007ef6:	2110      	movs	r1, #16
 8007ef8:	480f      	ldr	r0, [pc, #60]	; (8007f38 <VectorDC+0x194>)
 8007efa:	f7fe ffed 	bl	8006ed8 <osalEventBroadcastFlagsI>
    u->SR = ~USART_SR_TC;
 8007efe:	f06f 0340 	mvn.w	r3, #64	; 0x40
    u->CR1 = cr1 & ~USART_CR1_TCIE;
 8007f02:	f027 0740 	bic.w	r7, r7, #64	; 0x40
 8007f06:	043f      	lsls	r7, r7, #16
 8007f08:	0c3f      	lsrs	r7, r7, #16
 8007f0a:	60f7      	str	r7, [r6, #12]
    u->SR = ~USART_SR_TC;
 8007f0c:	6033      	str	r3, [r6, #0]
    osalSysUnlockFromISR();
 8007f0e:	f7fc feb3 	bl	8004c78 <osalSysUnlockFromISR.lto_priv.0>
 8007f12:	2100      	movs	r1, #0
 8007f14:	4b0a      	ldr	r3, [pc, #40]	; (8007f40 <VectorDC+0x19c>)
 8007f16:	681a      	ldr	r2, [r3, #0]
 8007f18:	6019      	str	r1, [r3, #0]

  OSAL_IRQ_PROLOGUE();

  serve_interrupt(&SD3);

  OSAL_IRQ_EPILOGUE();
 8007f1a:	b14a      	cbz	r2, 8007f30 <VectorDC+0x18c>
}
 8007f1c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f20:	f7fb bf30 	b.w	8003d84 <Vector6C.part.0>
    oqp->q_rdptr = oqp->q_buffer;
 8007f24:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8007f26:	6563      	str	r3, [r4, #84]	; 0x54
 8007f28:	e77a      	b.n	8007e20 <VectorDC+0x7c>
  osalDbgCheckClassI();
 8007f2a:	f7fc fc0b 	bl	8004744 <vTaskEndScheduler>
 8007f2e:	e7fe      	b.n	8007f2e <VectorDC+0x18a>
 8007f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f34:	200009bc 	.word	0x200009bc
 8007f38:	200009c0 	.word	0x200009c0
 8007f3c:	200009f8 	.word	0x200009f8
 8007f40:	2000164c 	.word	0x2000164c

08007f44 <sanityRebootMonitorTask>:
{
 8007f44:	b508      	push	{r3, lr}
    uint32_t numberOfSeconds = sanityRebootSeconds;
 8007f46:	4b14      	ldr	r3, [pc, #80]	; (8007f98 <sanityRebootMonitorTask+0x54>)
 8007f48:	6819      	ldr	r1, [r3, #0]
    if(numberOfSeconds &&
 8007f4a:	b199      	cbz	r1, 8007f74 <sanityRebootMonitorTask+0x30>
 8007f4c:	f7fd f9d8 	bl	8005300 <vPortValidateInterruptPriority>
            osalOsGetSystemTimeX() >= OSAL_S2ST(numberOfSeconds)) {
 8007f50:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007f54:	4b11      	ldr	r3, [pc, #68]	; (8007f9c <sanityRebootMonitorTask+0x58>)
 8007f56:	4351      	muls	r1, r2
 8007f58:	681b      	ldr	r3, [r3, #0]
    if(numberOfSeconds &&
 8007f5a:	4299      	cmp	r1, r3
 8007f5c:	d80a      	bhi.n	8007f74 <sanityRebootMonitorTask+0x30>
        RCC->APB1ENR |= (RCC_APB1ENR_PWREN | RCC_APB1ENR_BKPEN);
 8007f5e:	4a10      	ldr	r2, [pc, #64]	; (8007fa0 <sanityRebootMonitorTask+0x5c>)
 8007f60:	69d3      	ldr	r3, [r2, #28]
 8007f62:	f043 53c0 	orr.w	r3, r3, #402653184	; 0x18000000
 8007f66:	61d3      	str	r3, [r2, #28]
        BKP->DR10 = 0x424D;
 8007f68:	f244 224d 	movw	r2, #16973	; 0x424d
 8007f6c:	4b0d      	ldr	r3, [pc, #52]	; (8007fa4 <sanityRebootMonitorTask+0x60>)
 8007f6e:	629a      	str	r2, [r3, #40]	; 0x28
        NVIC_SystemReset();
 8007f70:	f7fc f962 	bl	8004238 <NVIC_SystemReset.lto_priv.0>
 */
void wdgReset(WDGDriver *wdgp) {

  osalDbgCheck(wdgp != NULL);

  osalSysLock();
 8007f74:	f7fc fbd6 	bl	8004724 <vPortEnterCritical>
  osalDbgAssert(wdgp->state == WDG_READY, "not ready");
 8007f78:	4b0b      	ldr	r3, [pc, #44]	; (8007fa8 <sanityRebootMonitorTask+0x64>)
 8007f7a:	781a      	ldrb	r2, [r3, #0]
 8007f7c:	2a02      	cmp	r2, #2
 8007f7e:	d002      	beq.n	8007f86 <sanityRebootMonitorTask+0x42>
 8007f80:	f7fc fbe0 	bl	8004744 <vTaskEndScheduler>
 8007f84:	e7fe      	b.n	8007f84 <sanityRebootMonitorTask+0x40>
 *
 * @notapi
 */
void wdg_lld_reset(WDGDriver * wdgp) {

  wdgp->wdg->KR = KR_KEY_RELOAD;
 8007f86:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8007f8a:	689b      	ldr	r3, [r3, #8]
}
 8007f8c:	2001      	movs	r0, #1
 8007f8e:	601a      	str	r2, [r3, #0]
  wdgResetI(wdgp);
  osalSysUnlock();
 8007f90:	f7fc fdec 	bl	8004b6c <osalSysUnlock.lto_priv.0>
 8007f94:	bd08      	pop	{r3, pc}
 8007f96:	bf00      	nop
 8007f98:	20000858 	.word	0x20000858
 8007f9c:	20001648 	.word	0x20001648
 8007fa0:	40021000 	.word	0x40021000
 8007fa4:	40006c00 	.word	0x40006c00
 8007fa8:	20000fdc 	.word	0x20000fdc

08007fac <i2cSafeRawUnclogBus>:
{
 8007fac:	b570      	push	{r4, r5, r6, lr}
 8007fae:	4605      	mov	r5, r0
    gpioSetPin(config->sclPin, level);
 8007fb0:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 8007fb2:	2101      	movs	r1, #1
 8007fb4:	8998      	ldrh	r0, [r3, #12]
 8007fb6:	f7ff fabb 	bl	8007530 <gpioSetPin.isra.0>
    gpioSetPin(config->sdaPin, level);
 8007fba:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 8007fbc:	2101      	movs	r1, #1
 8007fbe:	89d8      	ldrh	r0, [r3, #14]
 8007fc0:	f7ff fab6 	bl	8007530 <gpioSetPin.isra.0>
    i2cSafeConfig* config = (i2cSafeConfig*)i2c->i2cSafeConfig;
 8007fc4:	6fec      	ldr	r4, [r5, #124]	; 0x7c
    gpioSetPinMode(config->sdaPin, PAL_MODE_OUTPUT_OPENDRAIN);
 8007fc6:	2107      	movs	r1, #7
 8007fc8:	89e0      	ldrh	r0, [r4, #14]
 8007fca:	f7ff f99d 	bl	8007308 <gpioSetPinMode.isra.0>
    gpioSetPinMode(config->sclPin, PAL_MODE_OUTPUT_OPENDRAIN);
 8007fce:	2107      	movs	r1, #7
 8007fd0:	89a0      	ldrh	r0, [r4, #12]
 8007fd2:	f7ff f999 	bl	8007308 <gpioSetPinMode.isra.0>
  osalSysLock();
 8007fd6:	f7fc fba5 	bl	8004724 <vPortEnterCritical>
  osalDbgAssert((i2cp->state == I2C_STOP) || (i2cp->state == I2C_READY) ||
 8007fda:	782b      	ldrb	r3, [r5, #0]
 8007fdc:	1e5a      	subs	r2, r3, #1
 8007fde:	2a01      	cmp	r2, #1
 8007fe0:	d904      	bls.n	8007fec <i2cSafeRawUnclogBus+0x40>
 8007fe2:	2b05      	cmp	r3, #5
 8007fe4:	d004      	beq.n	8007ff0 <i2cSafeRawUnclogBus+0x44>
 8007fe6:	f7fc fbad 	bl	8004744 <vTaskEndScheduler>
 8007fea:	e7fe      	b.n	8007fea <i2cSafeRawUnclogBus+0x3e>
 * @notapi
 */
void i2c_lld_stop(I2CDriver *i2cp) {

  /* If not in stopped state then disables the I2C clock.*/
  if (i2cp->state != I2C_STOP) {
 8007fec:	2b01      	cmp	r3, #1
 8007fee:	d036      	beq.n	800805e <i2cSafeRawUnclogBus+0xb2>
  dp->CR1 = I2C_CR1_SWRST;
 8007ff0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  dp->CR1 = 0;
 8007ff4:	2400      	movs	r4, #0
  I2C_TypeDef *dp = i2cp->i2c;
 8007ff6:	6fab      	ldr	r3, [r5, #120]	; 0x78
  dmaStreamDisable(i2cp->dmatx);
 8007ff8:	6f68      	ldr	r0, [r5, #116]	; 0x74
  dp->CR1 = I2C_CR1_SWRST;
 8007ffa:	601a      	str	r2, [r3, #0]
  dmaStreamDisable(i2cp->dmatx);
 8007ffc:	6842      	ldr	r2, [r0, #4]
  dp->CR1 = 0;
 8007ffe:	601c      	str	r4, [r3, #0]
  dp->CR2 = 0;
 8008000:	605c      	str	r4, [r3, #4]
  dp->SR1 = 0;
 8008002:	615c      	str	r4, [r3, #20]
  dmaStreamDisable(i2cp->dmatx);
 8008004:	6813      	ldr	r3, [r2, #0]
 8008006:	6801      	ldr	r1, [r0, #0]
 8008008:	f023 030f 	bic.w	r3, r3, #15
 800800c:	6013      	str	r3, [r2, #0]
 800800e:	230e      	movs	r3, #14
 8008010:	7c02      	ldrb	r2, [r0, #16]
 8008012:	fa03 f202 	lsl.w	r2, r3, r2
 8008016:	604a      	str	r2, [r1, #4]
  dmaStreamDisable(i2cp->dmarx);
 8008018:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 800801a:	6856      	ldr	r6, [r2, #4]
 800801c:	6831      	ldr	r1, [r6, #0]
 800801e:	f021 010f 	bic.w	r1, r1, #15
 8008022:	6031      	str	r1, [r6, #0]
 8008024:	6811      	ldr	r1, [r2, #0]
 8008026:	7c12      	ldrb	r2, [r2, #16]
 8008028:	4093      	lsls	r3, r2
 800802a:	604b      	str	r3, [r1, #4]

    /* I2C disable.*/
    i2c_lld_abort_operation(i2cp);
    dmaStreamRelease(i2cp->dmatx);
 800802c:	f7fc fcb2 	bl	8004994 <dmaStreamRelease>
    dmaStreamRelease(i2cp->dmarx);
 8008030:	6f28      	ldr	r0, [r5, #112]	; 0x70
 8008032:	f7fc fcaf 	bl	8004994 <dmaStreamRelease>

#if STM32_I2C_USE_I2C1
    if (&I2CD1 == i2cp) {
 8008036:	4b3a      	ldr	r3, [pc, #232]	; (8008120 <i2cSafeRawUnclogBus+0x174>)
 8008038:	429d      	cmp	r5, r3
 800803a:	d110      	bne.n	800805e <i2cSafeRawUnclogBus+0xb2>
  NVIC->ICER[n >> 5U] = 1U << (n & 0x1FU);
 800803c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008040:	4b38      	ldr	r3, [pc, #224]	; (8008124 <i2cSafeRawUnclogBus+0x178>)
 8008042:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8008046:	2201      	movs	r2, #1
  NVIC->IP[n] = 0U;
 8008048:	f883 431f 	strb.w	r4, [r3, #799]	; 0x31f
  NVIC->ICER[n >> 5U] = 1U << (n & 0x1FU);
 800804c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      nvicDisableVector(I2C1_EV_IRQn);
      nvicDisableVector(I2C1_ER_IRQn);
      rccDisableI2C1(FALSE);
 8008050:	4a35      	ldr	r2, [pc, #212]	; (8008128 <i2cSafeRawUnclogBus+0x17c>)
  NVIC->IP[n] = 0U;
 8008052:	f883 4320 	strb.w	r4, [r3, #800]	; 0x320
 8008056:	69d3      	ldr	r3, [r2, #28]
 8008058:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800805c:	61d3      	str	r3, [r2, #28]
  i2cp->config = NULL;
 800805e:	2300      	movs	r3, #0
 8008060:	606b      	str	r3, [r5, #4]
  i2cp->state  = I2C_STOP;
 8008062:	2301      	movs	r3, #1
    vPortBusyDelay(i2cSafe_CYCLE_DELAY);
 8008064:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8008068:	702b      	strb	r3, [r5, #0]
  osalSysUnlock();
 800806a:	f7fc fd7f 	bl	8004b6c <osalSysUnlock.lto_priv.0>
 800806e:	f7fd f965 	bl	800533c <vPortBusyDelay>
    i2cSafeDataGoHigh(i2c);
 8008072:	4628      	mov	r0, r5
 8008074:	f7ff fb9e 	bl	80077b4 <i2cSafeDataGoHigh>
 8008078:	2648      	movs	r6, #72	; 0x48
        if((retVal = i2cSafeClockGoHigh(i2c)) != I2C_BUS_OK) goto done;        
 800807a:	4628      	mov	r0, r5
 800807c:	f7ff fb6a 	bl	8007754 <i2cSafeClockGoHigh>
 8008080:	4604      	mov	r4, r0
 8008082:	2800      	cmp	r0, #0
 8008084:	d142      	bne.n	800810c <i2cSafeRawUnclogBus+0x160>
        if((retVal = i2cSafeClockGoLow(i2c)) != I2C_BUS_OK) goto done;
 8008086:	4628      	mov	r0, r5
 8008088:	f7ff fb80 	bl	800778c <i2cSafeClockGoLow>
 800808c:	4604      	mov	r4, r0
 800808e:	2800      	cmp	r0, #0
 8008090:	d13c      	bne.n	800810c <i2cSafeRawUnclogBus+0x160>
    for(i=0; i<clocks; i++) {
 8008092:	3e01      	subs	r6, #1
 8008094:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
 8008098:	d1ef      	bne.n	800807a <i2cSafeRawUnclogBus+0xce>
    if((retVal = i2cSafeClockGoHigh(i2c)) != I2C_BUS_OK) goto done;        
 800809a:	4628      	mov	r0, r5
 800809c:	f7ff fb5a 	bl	8007754 <i2cSafeClockGoHigh>
 80080a0:	4604      	mov	r4, r0
 80080a2:	bb98      	cbnz	r0, 800810c <i2cSafeRawUnclogBus+0x160>
    return gpioGetPin(config->sdaPin);
 80080a4:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 80080a6:	89d8      	ldrh	r0, [r3, #14]
 80080a8:	f7fc f998 	bl	80043dc <gpioGetPin>
    if(!i2cSafeRawGetData(i2c)){
 80080ac:	b398      	cbz	r0, 8008116 <i2cSafeRawUnclogBus+0x16a>
    if((retVal = i2cSafeDataGoLow(i2c)) != I2C_BUS_OK) goto done;        
 80080ae:	4628      	mov	r0, r5
 80080b0:	f7ff fb94 	bl	80077dc <i2cSafeDataGoLow>
 80080b4:	4604      	mov	r4, r0
 80080b6:	bb48      	cbnz	r0, 800810c <i2cSafeRawUnclogBus+0x160>
    if((retVal = i2cSafeClockGoLow(i2c)) != I2C_BUS_OK) goto done;        
 80080b8:	4628      	mov	r0, r5
 80080ba:	f7ff fb67 	bl	800778c <i2cSafeClockGoLow>
 80080be:	4604      	mov	r4, r0
 80080c0:	bb20      	cbnz	r0, 800810c <i2cSafeRawUnclogBus+0x160>
    i2cSafeDataGoHigh(i2c);
 80080c2:	4628      	mov	r0, r5
 80080c4:	f7ff fb76 	bl	80077b4 <i2cSafeDataGoHigh>
 80080c8:	2609      	movs	r6, #9
        if((retVal = i2cSafeClockGoHigh(i2c)) != I2C_BUS_OK) goto done;        
 80080ca:	4628      	mov	r0, r5
 80080cc:	f7ff fb42 	bl	8007754 <i2cSafeClockGoHigh>
 80080d0:	4604      	mov	r4, r0
 80080d2:	b9d8      	cbnz	r0, 800810c <i2cSafeRawUnclogBus+0x160>
        if((retVal = i2cSafeClockGoLow(i2c)) != I2C_BUS_OK) goto done;
 80080d4:	4628      	mov	r0, r5
 80080d6:	f7ff fb59 	bl	800778c <i2cSafeClockGoLow>
 80080da:	4604      	mov	r4, r0
 80080dc:	b9b0      	cbnz	r0, 800810c <i2cSafeRawUnclogBus+0x160>
    return gpioGetPin(config->sdaPin);
 80080de:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 80080e0:	89d8      	ldrh	r0, [r3, #14]
 80080e2:	f7fc f97b 	bl	80043dc <gpioGetPin>
        if(checkData && !i2cSafeRawGetData(i2c)){
 80080e6:	b1c0      	cbz	r0, 800811a <i2cSafeRawUnclogBus+0x16e>
    for(i=0; i<clocks; i++) {
 80080e8:	3e01      	subs	r6, #1
 80080ea:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
 80080ee:	d1ec      	bne.n	80080ca <i2cSafeRawUnclogBus+0x11e>
    if((retVal = i2cSafeDataGoLow(i2c)) != I2C_BUS_OK) goto done;        
 80080f0:	4628      	mov	r0, r5
 80080f2:	f7ff fb73 	bl	80077dc <i2cSafeDataGoLow>
 80080f6:	4604      	mov	r4, r0
 80080f8:	b940      	cbnz	r0, 800810c <i2cSafeRawUnclogBus+0x160>
    if((retVal = i2cSafeClockGoHigh(i2c)) != I2C_BUS_OK) goto done;        
 80080fa:	4628      	mov	r0, r5
 80080fc:	f7ff fb2a 	bl	8007754 <i2cSafeClockGoHigh>
 8008100:	4604      	mov	r4, r0
 8008102:	b918      	cbnz	r0, 800810c <i2cSafeRawUnclogBus+0x160>
    if((retVal = i2cSafeDataGoHigh(i2c)) != I2C_BUS_OK) goto done;        
 8008104:	4628      	mov	r0, r5
 8008106:	f7ff fb55 	bl	80077b4 <i2cSafeDataGoHigh>
 800810a:	4604      	mov	r4, r0
    i2cSafeRawHardwareControl(i2c);
 800810c:	4628      	mov	r0, r5
 800810e:	f7ff f907 	bl	8007320 <i2cSafeRawHardwareControl>
}
 8008112:	4620      	mov	r0, r4
 8008114:	bd70      	pop	{r4, r5, r6, pc}
        retVal = I2C_BUS_STUCK_SDA_PULLED_LOW;
 8008116:	2402      	movs	r4, #2
 8008118:	e7f8      	b.n	800810c <i2cSafeRawUnclogBus+0x160>
            return I2C_BUS_STUCK_SHORTED_TOGETHER;
 800811a:	2405      	movs	r4, #5
 800811c:	e7f6      	b.n	800810c <i2cSafeRawUnclogBus+0x160>
 800811e:	bf00      	nop
 8008120:	20000934 	.word	0x20000934
 8008124:	e000e100 	.word	0xe000e100
 8008128:	40021000 	.word	0x40021000

0800812c <max2870SpiState.constprop.0>:
static void max2870SetMUXOut(MAX2870Driver* driver, uint8_t muxOut);

static void max2870SpiState(MAX2870Driver* driver, bool enable)
{
    if(enable) {
        spiAcquireBus(driver->config->spiPort);
 800812c:	6803      	ldr	r3, [r0, #0]
static void max2870SpiState(MAX2870Driver* driver, bool enable)
 800812e:	b510      	push	{r4, lr}
        spiAcquireBus(driver->config->spiPort);
 8008130:	681b      	ldr	r3, [r3, #0]
static void max2870SpiState(MAX2870Driver* driver, bool enable)
 8008132:	4604      	mov	r4, r0
 *
 * @api
 */
void spiAcquireBus(SPIDriver *spip) {

  osalDbgCheck(spip != NULL);
 8008134:	b913      	cbnz	r3, 800813c <max2870SpiState.constprop.0+0x10>
 8008136:	f7fc fb05 	bl	8004744 <vTaskEndScheduler>
 800813a:	e7fe      	b.n	800813a <max2870SpiState.constprop.0+0xe>
    xSemaphoreTake(mutex->handle, portMAX_DELAY);
 800813c:	68d8      	ldr	r0, [r3, #12]
 800813e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8008142:	f7fd fd4f 	bl	8005be4 <xQueueSemaphoreTake>
        spiStart(driver->config->spiPort, driver->config->spiConfig);
 8008146:	6823      	ldr	r3, [r4, #0]
 8008148:	681c      	ldr	r4, [r3, #0]
  osalDbgCheck((spip != NULL) && (config != NULL));
 800814a:	b10c      	cbz	r4, 8008150 <max2870SpiState.constprop.0+0x24>
 800814c:	6858      	ldr	r0, [r3, #4]
 800814e:	b910      	cbnz	r0, 8008156 <max2870SpiState.constprop.0+0x2a>
 8008150:	f7fc faf8 	bl	8004744 <vTaskEndScheduler>
 8008154:	e7fe      	b.n	8008154 <max2870SpiState.constprop.0+0x28>
  osalSysLock();
 8008156:	f7fc fae5 	bl	8004724 <vPortEnterCritical>
  osalDbgAssert((spip->state == SPI_STOP) || (spip->state == SPI_READY),
 800815a:	7823      	ldrb	r3, [r4, #0]
 800815c:	1e5a      	subs	r2, r3, #1
 800815e:	2a01      	cmp	r2, #1
 8008160:	d902      	bls.n	8008168 <max2870SpiState.constprop.0+0x3c>
 8008162:	f7fc faef 	bl	8004744 <vTaskEndScheduler>
 8008166:	e7fe      	b.n	8008166 <max2870SpiState.constprop.0+0x3a>
  if (spip->state == SPI_STOP) {
 8008168:	2b01      	cmp	r3, #1
  spip->config = config;
 800816a:	6060      	str	r0, [r4, #4]
 800816c:	d121      	bne.n	80081b2 <max2870SpiState.constprop.0+0x86>
    if (&SPID1 == spip) {
 800816e:	4b25      	ldr	r3, [pc, #148]	; (8008204 <max2870SpiState.constprop.0+0xd8>)
 8008170:	429c      	cmp	r4, r3
 8008172:	d116      	bne.n	80081a2 <max2870SpiState.constprop.0+0x76>
      b = dmaStreamAllocate(spip->dmarx,
 8008174:	4622      	mov	r2, r4
 8008176:	4924      	ldr	r1, [pc, #144]	; (8008208 <max2870SpiState.constprop.0+0xdc>)
 8008178:	6e60      	ldr	r0, [r4, #100]	; 0x64
 800817a:	f7fe f961 	bl	8006440 <dmaStreamAllocate.constprop.0>
      osalDbgAssert(!b, "stream already allocated");
 800817e:	b110      	cbz	r0, 8008186 <max2870SpiState.constprop.0+0x5a>
 8008180:	f7fc fae0 	bl	8004744 <vTaskEndScheduler>
 8008184:	e7fe      	b.n	8008184 <max2870SpiState.constprop.0+0x58>
      b = dmaStreamAllocate(spip->dmatx,
 8008186:	4622      	mov	r2, r4
 8008188:	4920      	ldr	r1, [pc, #128]	; (800820c <max2870SpiState.constprop.0+0xe0>)
 800818a:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 800818c:	f7fe f958 	bl	8006440 <dmaStreamAllocate.constprop.0>
      osalDbgAssert(!b, "stream already allocated");
 8008190:	b110      	cbz	r0, 8008198 <max2870SpiState.constprop.0+0x6c>
 8008192:	f7fc fad7 	bl	8004744 <vTaskEndScheduler>
 8008196:	e7fe      	b.n	8008196 <max2870SpiState.constprop.0+0x6a>
      rccEnableSPI1(FALSE);
 8008198:	4a1d      	ldr	r2, [pc, #116]	; (8008210 <max2870SpiState.constprop.0+0xe4>)
 800819a:	6993      	ldr	r3, [r2, #24]
 800819c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80081a0:	6193      	str	r3, [r2, #24]
    dmaStreamSetPeripheral(spip->dmarx, &spip->spi->DR);
 80081a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80081a4:	685a      	ldr	r2, [r3, #4]
 80081a6:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80081a8:	330c      	adds	r3, #12
 80081aa:	6093      	str	r3, [r2, #8]
    dmaStreamSetPeripheral(spip->dmatx, &spip->spi->DR);
 80081ac:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 80081ae:	6852      	ldr	r2, [r2, #4]
 80081b0:	6093      	str	r3, [r2, #8]
  if ((spip->config->cr1 & SPI_CR1_DFF) == 0) {
 80081b2:	6860      	ldr	r0, [r4, #4]
                      STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE;
 80081b4:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
  if ((spip->config->cr1 & SPI_CR1_DFF) == 0) {
 80081b6:	8941      	ldrh	r1, [r0, #10]
                      STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE;
 80081b8:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
  if ((spip->config->cr1 & SPI_CR1_DFF) == 0) {
 80081bc:	f411 6f00 	tst.w	r1, #2048	; 0x800
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
 80081c0:	bf16      	itet	ne
 80081c2:	f442 62a0 	orrne.w	r2, r2, #1280	; 0x500
    spip->rxdmamode = (spip->rxdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 80081c6:	66e2      	streq	r2, [r4, #108]	; 0x6c
    spip->rxdmamode = (spip->rxdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 80081c8:	66e2      	strne	r2, [r4, #108]	; 0x6c
  spip->spi->CR1  = 0;
 80081ca:	f04f 0200 	mov.w	r2, #0
                      STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE;
 80081ce:	6f23      	ldr	r3, [r4, #112]	; 0x70
  spip->spi->CR1  = spip->config->cr1 | SPI_CR1_MSTR | SPI_CR1_SSM |
 80081d0:	f441 7141 	orr.w	r1, r1, #772	; 0x304
                      STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE;
 80081d4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
 80081d8:	bf18      	it	ne
 80081da:	f443 63a0 	orrne.w	r3, r3, #1280	; 0x500
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 80081de:	6723      	str	r3, [r4, #112]	; 0x70
  spip->spi->CR1  = 0;
 80081e0:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80081e2:	601a      	str	r2, [r3, #0]
  spip->spi->CR2  = spip->config->cr2 | SPI_CR2_SSOE | SPI_CR2_RXDMAEN |
 80081e4:	8982      	ldrh	r2, [r0, #12]
  spip->spi->CR1  = spip->config->cr1 | SPI_CR1_MSTR | SPI_CR1_SSM |
 80081e6:	6019      	str	r1, [r3, #0]
  spip->spi->CR2  = spip->config->cr2 | SPI_CR2_SSOE | SPI_CR2_RXDMAEN |
 80081e8:	f042 0207 	orr.w	r2, r2, #7
 80081ec:	605a      	str	r2, [r3, #4]
  spip->spi->CR1 |= SPI_CR1_SPE;
 80081ee:	681a      	ldr	r2, [r3, #0]
 80081f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80081f4:	601a      	str	r2, [r3, #0]
  spip->state = SPI_READY;
 80081f6:	2302      	movs	r3, #2
 80081f8:	7023      	strb	r3, [r4, #0]
        /* Update monitor state */
        monitorKick(&driver->pllMon, driver->enabled);

        spiReleaseBus(driver->config->spiPort);
    }
}
 80081fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  osalSysUnlock();
 80081fe:	f7fc bcb5 	b.w	8004b6c <osalSysUnlock.lto_priv.0>
 8008202:	bf00      	nop
 8008204:	20000ee0 	.word	0x20000ee0
 8008208:	08007291 	.word	0x08007291
 800820c:	08004a37 	.word	0x08004a37
 8008210:	40021000 	.word	0x40021000

08008214 <spiUnselect.constprop.0>:
void spiUnselect(SPIDriver *spip) {
 8008214:	b508      	push	{r3, lr}
  osalSysLock();
 8008216:	f7fc fa85 	bl	8004724 <vPortEnterCritical>
  osalDbgAssert(spip->state == SPI_READY, "not ready");
 800821a:	4b08      	ldr	r3, [pc, #32]	; (800823c <spiUnselect.constprop.0+0x28>)
 800821c:	781a      	ldrb	r2, [r3, #0]
 800821e:	2a02      	cmp	r2, #2
 8008220:	d002      	beq.n	8008228 <spiUnselect.constprop.0+0x14>
 8008222:	f7fc fa8f 	bl	8004744 <vTaskEndScheduler>
 8008226:	e7fe      	b.n	8008226 <spiUnselect.constprop.0+0x12>
  palSetPad(spip->config->ssport, spip->config->sspad);
 8008228:	685b      	ldr	r3, [r3, #4]
 800822a:	8919      	ldrh	r1, [r3, #8]
 800822c:	685a      	ldr	r2, [r3, #4]
 800822e:	2301      	movs	r3, #1
 8008230:	408b      	lsls	r3, r1
 8008232:	6113      	str	r3, [r2, #16]
}
 8008234:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  osalSysUnlock();
 8008238:	f7fc bc98 	b.w	8004b6c <osalSysUnlock.lto_priv.0>
 800823c:	20000ee0 	.word	0x20000ee0

08008240 <spiSelect.constprop.0>:
void spiSelect(SPIDriver *spip) {
 8008240:	b508      	push	{r3, lr}
  osalSysLock();
 8008242:	f7fc fa6f 	bl	8004724 <vPortEnterCritical>
  osalDbgAssert(spip->state == SPI_READY, "not ready");
 8008246:	4b08      	ldr	r3, [pc, #32]	; (8008268 <spiSelect.constprop.0+0x28>)
 8008248:	781a      	ldrb	r2, [r3, #0]
 800824a:	2a02      	cmp	r2, #2
 800824c:	d002      	beq.n	8008254 <spiSelect.constprop.0+0x14>
 800824e:	f7fc fa79 	bl	8004744 <vTaskEndScheduler>
 8008252:	e7fe      	b.n	8008252 <spiSelect.constprop.0+0x12>
  palClearPad(spip->config->ssport, spip->config->sspad);
 8008254:	685b      	ldr	r3, [r3, #4]
 8008256:	8919      	ldrh	r1, [r3, #8]
 8008258:	685a      	ldr	r2, [r3, #4]
 800825a:	2301      	movs	r3, #1
 800825c:	408b      	lsls	r3, r1
 800825e:	6153      	str	r3, [r2, #20]
}
 8008260:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  osalSysUnlock();
 8008264:	f7fc bc82 	b.w	8004b6c <osalSysUnlock.lto_priv.0>
 8008268:	20000ee0 	.word	0x20000ee0

0800826c <spiSend.part.0.constprop.0>:
void spiSend(SPIDriver *spip, size_t n, const void *txbuf) {
 800826c:	b510      	push	{r4, lr}
  osalSysLock();
 800826e:	f7fc fa59 	bl	8004724 <vPortEnterCritical>
  osalDbgAssert(spip->state == SPI_READY, "not ready");
 8008272:	4b18      	ldr	r3, [pc, #96]	; (80082d4 <spiSend.part.0.constprop.0+0x68>)
 8008274:	781a      	ldrb	r2, [r3, #0]
 8008276:	2a02      	cmp	r2, #2
 8008278:	d002      	beq.n	8008280 <spiSend.part.0.constprop.0+0x14>
 800827a:	f7fc fa63 	bl	8004744 <vTaskEndScheduler>
 800827e:	e7fe      	b.n	800827e <spiSend.part.0.constprop.0+0x12>
  osalDbgAssert(spip->config->end_cb == NULL, "has callback");
 8008280:	685a      	ldr	r2, [r3, #4]
 8008282:	6812      	ldr	r2, [r2, #0]
 8008284:	b112      	cbz	r2, 800828c <spiSend.part.0.constprop.0+0x20>
 8008286:	f7fc fa5d 	bl	8004744 <vTaskEndScheduler>
 800828a:	e7fe      	b.n	800828a <spiSend.part.0.constprop.0+0x1e>
  spiStartSendI(spip, n, txbuf);
 800828c:	2203      	movs	r2, #3
  dmaStreamSetTransactionSize(spip->dmarx, n);
 800828e:	2404      	movs	r4, #4
 8008290:	701a      	strb	r2, [r3, #0]
  dmaStreamSetMemory0(spip->dmarx, &dummyrx);
 8008292:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8008294:	6851      	ldr	r1, [r2, #4]
 8008296:	4a10      	ldr	r2, [pc, #64]	; (80082d8 <spiSend.part.0.constprop.0+0x6c>)
 8008298:	60ca      	str	r2, [r1, #12]
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode);
 800829a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
  dmaStreamSetTransactionSize(spip->dmarx, n);
 800829c:	604c      	str	r4, [r1, #4]
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode);
 800829e:	600a      	str	r2, [r1, #0]
  dmaStreamSetMemory0(spip->dmatx, txbuf);
 80082a0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80082a2:	6852      	ldr	r2, [r2, #4]
 80082a4:	60d0      	str	r0, [r2, #12]
  dmaStreamSetMode(spip->dmatx, spip->txdmamode | STM32_DMA_CR_MINC);
 80082a6:	6f18      	ldr	r0, [r3, #112]	; 0x70
  dmaStreamSetTransactionSize(spip->dmatx, n);
 80082a8:	6054      	str	r4, [r2, #4]
  dmaStreamSetMode(spip->dmatx, spip->txdmamode | STM32_DMA_CR_MINC);
 80082aa:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 80082ae:	6010      	str	r0, [r2, #0]
  dmaStreamEnable(spip->dmarx);
 80082b0:	6808      	ldr	r0, [r1, #0]
 80082b2:	f040 0001 	orr.w	r0, r0, #1
 80082b6:	6008      	str	r0, [r1, #0]
  dmaStreamEnable(spip->dmatx);
 80082b8:	6811      	ldr	r1, [r2, #0]
 80082ba:	f103 0008 	add.w	r0, r3, #8
 80082be:	f041 0101 	orr.w	r1, r1, #1
 80082c2:	6011      	str	r1, [r2, #0]
 80082c4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80082c8:	f7fe f97a 	bl	80065c0 <osalThreadSuspendTimeoutS>
}
 80082cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  osalSysUnlock();
 80082d0:	f7fc bc4c 	b.w	8004b6c <osalSysUnlock.lto_priv.0>
 80082d4:	20000ee0 	.word	0x20000ee0
 80082d8:	20001048 	.word	0x20001048

080082dc <max2870WriteRegister>:

static bool max2870WriteRegister(MAX2870Driver* driver, const uint32_t addr, uint32_t value, bool force)
{
 80082dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80082de:	4604      	mov	r4, r0
 80082e0:	4618      	mov	r0, r3
    osalDbgCheck(addr < 0x6);
    osalDbgCheck((value & 0x7) == 0);
 80082e2:	0753      	lsls	r3, r2, #29
 80082e4:	d002      	beq.n	80082ec <max2870WriteRegister+0x10>
 80082e6:	f7fc fa2d 	bl	8004744 <vTaskEndScheduler>
 80082ea:	e7fe      	b.n	80082ea <max2870WriteRegister+0xe>

    if(!force && driver->registers[addr] == value) {
 80082ec:	f101 0332 	add.w	r3, r1, #50	; 0x32
 80082f0:	b918      	cbnz	r0, 80082fa <max2870WriteRegister+0x1e>
 80082f2:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 80082f6:	42aa      	cmp	r2, r5
 80082f8:	d018      	beq.n	800832c <max2870WriteRegister+0x50>
        return false;
    }
    driver->registers[addr] = value;
 80082fa:	f844 2023 	str.w	r2, [r4, r3, lsl #2]

    value |= addr;
 80082fe:	430a      	orrs	r2, r1

    uint8_t data[4] = {value>>24, (value >> 16) & 0xFF, (value >> 8) & 0xFF,  (value >> 0) & 0xFF};
 8008300:	0e13      	lsrs	r3, r2, #24
 8008302:	f88d 3004 	strb.w	r3, [sp, #4]
 8008306:	0c13      	lsrs	r3, r2, #16
 8008308:	f88d 3005 	strb.w	r3, [sp, #5]
 800830c:	a801      	add	r0, sp, #4
 800830e:	0a13      	lsrs	r3, r2, #8
 8008310:	f88d 3006 	strb.w	r3, [sp, #6]
 8008314:	f88d 2007 	strb.w	r2, [sp, #7]


    spiSelect(&SPID1);
 8008318:	f7ff ff92 	bl	8008240 <spiSelect.constprop.0>
void spiSend(SPIDriver *spip, size_t n, const void *txbuf) {
 800831c:	f7ff ffa6 	bl	800826c <spiSend.part.0.constprop.0>
    }
}

static inline void osalSysPolledDelayX(rtcnt_t cycles)
{
    vPortBusyDelay(cycles);
 8008320:	2032      	movs	r0, #50	; 0x32
    spiSend(&SPID1, 4, data);
    spiUnselect(&SPID1);
 8008322:	f7ff ff77 	bl	8008214 <spiUnselect.constprop.0>
 8008326:	f7fd f809 	bl	800533c <vPortBusyDelay>
    osalSysPolledDelayX(50);


    return true;
 800832a:	2001      	movs	r0, #1
}
 800832c:	b003      	add	sp, #12
 800832e:	bd30      	pop	{r4, r5, pc}

08008330 <max2870SetMUXOut>:

    return true;
}

static void max2870SetMUXOut(MAX2870Driver* driver, uint8_t muxOut)
{
 8008330:	b570      	push	{r4, r5, r6, lr}
    uint32_t register2 = driver->registers[2] & ~ (0x7 <<  MAX2870_REG2_MUX_OFFSET);
 8008332:	f8d0 50d0 	ldr.w	r5, [r0, #208]	; 0xd0
    register2 |= (muxOut & 0x7) << MAX2870_REG2_MUX_OFFSET;
    uint32_t register5 = driver->registers[5] & ~ _BV(MAX2870_REG5_MUX_OFFSET);
 8008336:	f8d0 20dc 	ldr.w	r2, [r0, #220]	; 0xdc
    uint32_t register2 = driver->registers[2] & ~ (0x7 <<  MAX2870_REG2_MUX_OFFSET);
 800833a:	f025 53e0 	bic.w	r3, r5, #469762048	; 0x1c000000
    register2 |= (muxOut & 0x7) << MAX2870_REG2_MUX_OFFSET;
 800833e:	068d      	lsls	r5, r1, #26
 8008340:	f005 55e0 	and.w	r5, r5, #469762048	; 0x1c000000
 8008344:	431d      	orrs	r5, r3
    uint32_t register5 = driver->registers[5] & ~ _BV(MAX2870_REG5_MUX_OFFSET);
 8008346:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
    if(muxOut & 0x8) {
 800834a:	070b      	lsls	r3, r1, #28
        register5 |= _BV(MAX2870_REG5_MUX_OFFSET);
 800834c:	bf48      	it	mi
 800834e:	f442 2280 	orrmi.w	r2, r2, #262144	; 0x40000
    }

    /* It seems reg 5 should be written before reg 2 to update the MUX value */
    bool mustUpdateOther = max2870WriteRegister(driver, 5, register5, false);
 8008352:	2300      	movs	r3, #0
 8008354:	2105      	movs	r1, #5
{
 8008356:	4604      	mov	r4, r0
    bool mustUpdateOther = max2870WriteRegister(driver, 5, register5, false);
 8008358:	f7ff ffc0 	bl	80082dc <max2870WriteRegister>
    max2870WriteRegister(driver, 2, register2, mustUpdateOther);
 800835c:	462a      	mov	r2, r5
    bool mustUpdateOther = max2870WriteRegister(driver, 5, register5, false);
 800835e:	4603      	mov	r3, r0
    max2870WriteRegister(driver, 2, register2, mustUpdateOther);
 8008360:	2102      	movs	r1, #2
 8008362:	4620      	mov	r0, r4
}
 8008364:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    max2870WriteRegister(driver, 2, register2, mustUpdateOther);
 8008368:	f7ff bfb8 	b.w	80082dc <max2870WriteRegister>

0800836c <max2870ReadRegister6>:

static uint32_t max2870ReadRegister6(MAX2870Driver* driver)
{
 800836c:	b513      	push	{r0, r1, r4, lr}
    /* Step 1: Set MUX OUT to readback mode */
    max2870SetMUXOut(driver, 0xC);
 800836e:	210c      	movs	r1, #12
{
 8008370:	4604      	mov	r4, r0
    max2870SetMUXOut(driver, 0xC);
 8008372:	f7ff ffdd 	bl	8008330 <max2870SetMUXOut>

    /* Step 2: Ask to read the register */
    uint8_t data[5]= {0, 0, 0, 0x6};
 8008376:	4b25      	ldr	r3, [pc, #148]	; (800840c <max2870ReadRegister6+0xa0>)
 8008378:	6818      	ldr	r0, [r3, #0]
 800837a:	791b      	ldrb	r3, [r3, #4]
 800837c:	9000      	str	r0, [sp, #0]
 800837e:	4668      	mov	r0, sp
 8008380:	f88d 3004 	strb.w	r3, [sp, #4]
    spiSelect(&SPID1);
 8008384:	f7ff ff5c 	bl	8008240 <spiSelect.constprop.0>
 8008388:	f7ff ff70 	bl	800826c <spiSend.part.0.constprop.0>
    spiSend(&SPID1, 4, data);
    spiUnselect(&SPID1);
 800838c:	f7ff ff42 	bl	8008214 <spiUnselect.constprop.0>

    /* Step 3: Read in the data, note that the device should be unselected(!) */
    data[3] = 0;
 8008390:	2300      	movs	r3, #0
 8008392:	f88d 3003 	strb.w	r3, [sp, #3]
  osalSysLock();
 8008396:	f7fc f9c5 	bl	8004724 <vPortEnterCritical>
  osalDbgAssert(spip->state == SPI_READY, "not ready");
 800839a:	4b1d      	ldr	r3, [pc, #116]	; (8008410 <max2870ReadRegister6+0xa4>)
 800839c:	781a      	ldrb	r2, [r3, #0]
 800839e:	2a02      	cmp	r2, #2
 80083a0:	d002      	beq.n	80083a8 <max2870ReadRegister6+0x3c>
 80083a2:	f7fc f9cf 	bl	8004744 <vTaskEndScheduler>
 80083a6:	e7fe      	b.n	80083a6 <max2870ReadRegister6+0x3a>
  osalDbgAssert(spip->config->end_cb == NULL, "has callback");
 80083a8:	685a      	ldr	r2, [r3, #4]
 80083aa:	6812      	ldr	r2, [r2, #0]
 80083ac:	b112      	cbz	r2, 80083b4 <max2870ReadRegister6+0x48>
 80083ae:	f7fc f9c9 	bl	8004744 <vTaskEndScheduler>
 80083b2:	e7fe      	b.n	80083b2 <max2870ReadRegister6+0x46>
  spiStartExchangeI(spip, n, txbuf, rxbuf);
 80083b4:	2203      	movs	r2, #3
  dmaStreamSetTransactionSize(spip->dmarx, n);
 80083b6:	2004      	movs	r0, #4
 80083b8:	701a      	strb	r2, [r3, #0]
  dmaStreamSetMemory0(spip->dmarx, rxbuf);
 80083ba:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80083bc:	6851      	ldr	r1, [r2, #4]
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode| STM32_DMA_CR_MINC);
 80083be:	6eda      	ldr	r2, [r3, #108]	; 0x6c
  dmaStreamSetMemory0(spip->dmarx, rxbuf);
 80083c0:	f8c1 d00c 	str.w	sp, [r1, #12]
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode| STM32_DMA_CR_MINC);
 80083c4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  dmaStreamSetTransactionSize(spip->dmarx, n);
 80083c8:	6048      	str	r0, [r1, #4]
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode| STM32_DMA_CR_MINC);
 80083ca:	600a      	str	r2, [r1, #0]
  dmaStreamSetMemory0(spip->dmatx, txbuf);
 80083cc:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80083ce:	6852      	ldr	r2, [r2, #4]
 80083d0:	f8c2 d00c 	str.w	sp, [r2, #12]
  dmaStreamSetTransactionSize(spip->dmatx, n);
 80083d4:	6050      	str	r0, [r2, #4]
  dmaStreamSetMode(spip->dmatx, spip->txdmamode | STM32_DMA_CR_MINC);
 80083d6:	6f18      	ldr	r0, [r3, #112]	; 0x70
 80083d8:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 80083dc:	6010      	str	r0, [r2, #0]
  dmaStreamEnable(spip->dmarx);
 80083de:	6808      	ldr	r0, [r1, #0]
 80083e0:	f040 0001 	orr.w	r0, r0, #1
 80083e4:	6008      	str	r0, [r1, #0]
  dmaStreamEnable(spip->dmatx);
 80083e6:	6811      	ldr	r1, [r2, #0]
 80083e8:	f103 0008 	add.w	r0, r3, #8
 80083ec:	f041 0101 	orr.w	r1, r1, #1
 80083f0:	6011      	str	r1, [r2, #0]
 80083f2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80083f6:	f7fe f8e3 	bl	80065c0 <osalThreadSuspendTimeoutS>
  osalSysUnlock();
 80083fa:	f7fc fbb7 	bl	8004b6c <osalSysUnlock.lto_priv.0>
    spiExchange(&SPID1, 4, data, data);

    driver->registers[6] = (data[0] << 24) | (data[1] << 16) | (data[2] << 8) | data[3];
 80083fe:	9800      	ldr	r0, [sp, #0]
 8008400:	ba00      	rev	r0, r0
 8008402:	f8c4 00e0 	str.w	r0, [r4, #224]	; 0xe0
    return driver->registers[6];
}
 8008406:	b002      	add	sp, #8
 8008408:	bd10      	pop	{r4, pc}
 800840a:	bf00      	nop
 800840c:	0800ba50 	.word	0x0800ba50
 8008410:	20000ee0 	.word	0x20000ee0

08008414 <max2870Disable>:

static void max2870Disable(MAX2870Driver* driver)
{
    if(driver->config->gpioChipEnable != 0xffff) {
 8008414:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008418:	6803      	ldr	r3, [r0, #0]
{
 800841a:	b510      	push	{r4, lr}
    if(driver->config->gpioChipEnable != 0xffff) {
 800841c:	891b      	ldrh	r3, [r3, #8]
{
 800841e:	4604      	mov	r4, r0
    if(driver->config->gpioChipEnable != 0xffff) {
 8008420:	4293      	cmp	r3, r2
 8008422:	d00b      	beq.n	800843c <max2870Disable+0x28>
        gpioSetPin(driver->config->gpioChipEnable, false);
 8008424:	2100      	movs	r1, #0
 8008426:	4618      	mov	r0, r3
 8008428:	f7ff f882 	bl	8007530 <gpioSetPin.isra.0>
    } else {
        max2870WriteRegister(driver, 2, _BV(MAX2870_REG2_SHDN_OFFSET), true);
    }

    if(driver->config->lockStatus) {
 800842c:	6823      	ldr	r3, [r4, #0]
 800842e:	69db      	ldr	r3, [r3, #28]
 8008430:	b10b      	cbz	r3, 8008436 <max2870Disable+0x22>
        driver->config->lockStatus(false);
 8008432:	2000      	movs	r0, #0
 8008434:	4798      	blx	r3
    }
    driver->enabled = false;
 8008436:	2300      	movs	r3, #0
 8008438:	7123      	strb	r3, [r4, #4]
}
 800843a:	bd10      	pop	{r4, pc}
        max2870WriteRegister(driver, 2, _BV(MAX2870_REG2_SHDN_OFFSET), true);
 800843c:	2301      	movs	r3, #1
 800843e:	2220      	movs	r2, #32
 8008440:	2102      	movs	r1, #2
 8008442:	f7ff ff4b 	bl	80082dc <max2870WriteRegister>
 8008446:	e7f1      	b.n	800842c <max2870Disable+0x18>

08008448 <max2870WriteAllRegisters.isra.0>:
static bool max2870WriteAllRegisters(MAX2870Driver* driver, uint32_t* registers, bool force)
 8008448:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800844c:	4606      	mov	r6, r0
 800844e:	460f      	mov	r7, r1
 8008450:	4690      	mov	r8, r2
    bool anyChanged = false;
 8008452:	2500      	movs	r5, #0
    for(int i = 5; i>=0; i--) {
 8008454:	2405      	movs	r4, #5
        anyChanged |= max2870WriteRegister(driver, i, registers[i], force || (i==0 && anyChanged));
 8008456:	f857 2024 	ldr.w	r2, [r7, r4, lsl #2]
 800845a:	f1b8 0f00 	cmp.w	r8, #0
 800845e:	d110      	bne.n	8008482 <max2870WriteAllRegisters.isra.0+0x3a>
 8008460:	2c00      	cmp	r4, #0
 8008462:	bf0c      	ite	eq
 8008464:	462b      	moveq	r3, r5
 8008466:	2300      	movne	r3, #0
 8008468:	4621      	mov	r1, r4
 800846a:	4630      	mov	r0, r6
 800846c:	f003 0301 	and.w	r3, r3, #1
 8008470:	f7ff ff34 	bl	80082dc <max2870WriteRegister>
    for(int i = 5; i>=0; i--) {
 8008474:	3c01      	subs	r4, #1
        anyChanged |= max2870WriteRegister(driver, i, registers[i], force || (i==0 && anyChanged));
 8008476:	ea45 0500 	orr.w	r5, r5, r0
 800847a:	b2ed      	uxtb	r5, r5
    for(int i = 5; i>=0; i--) {
 800847c:	d2eb      	bcs.n	8008456 <max2870WriteAllRegisters.isra.0+0xe>
}
 800847e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        anyChanged |= max2870WriteRegister(driver, i, registers[i], force || (i==0 && anyChanged));
 8008482:	2301      	movs	r3, #1
 8008484:	e7f0      	b.n	8008468 <max2870WriteAllRegisters.isra.0+0x20>
	...

08008488 <xQueueGenericSend.constprop.0>:
 8008488:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800848c:	2300      	movs	r3, #0
 800848e:	4604      	mov	r4, r0
 8008490:	9301      	str	r3, [sp, #4]
 8008492:	b900      	cbnz	r0, 8008496 <xQueueGenericSend.constprop.0+0xe>
 8008494:	e7fe      	b.n	8008494 <xQueueGenericSend.constprop.0+0xc>
 8008496:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8008498:	b105      	cbz	r5, 800849c <xQueueGenericSend.constprop.0+0x14>
 800849a:	e7fe      	b.n	800849a <xQueueGenericSend.constprop.0+0x12>
 800849c:	4e7e      	ldr	r6, [pc, #504]	; (8008698 <xQueueGenericSend.constprop.0+0x210>)
 800849e:	4f7f      	ldr	r7, [pc, #508]	; (800869c <xQueueGenericSend.constprop.0+0x214>)
 80084a0:	f8df 81fc 	ldr.w	r8, [pc, #508]	; 80086a0 <xQueueGenericSend.constprop.0+0x218>
 80084a4:	e0bb      	b.n	800861e <xQueueGenericSend.constprop.0+0x196>
 80084a6:	6865      	ldr	r5, [r4, #4]
 80084a8:	bb5d      	cbnz	r5, 8008502 <xQueueGenericSend.constprop.0+0x7a>
 80084aa:	2500      	movs	r5, #0
 80084ac:	2200      	movs	r2, #0
 80084ae:	6062      	str	r2, [r4, #4]
 80084b0:	3601      	adds	r6, #1
 80084b2:	63a6      	str	r6, [r4, #56]	; 0x38
 80084b4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80084b6:	2a00      	cmp	r2, #0
 80084b8:	d068      	beq.n	800858c <xQueueGenericSend.constprop.0+0x104>
 80084ba:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80084be:	f7fd facf 	bl	8005a60 <xTaskRemoveFromEventList>
 80084c2:	2800      	cmp	r0, #0
 80084c4:	d064      	beq.n	8008590 <xQueueGenericSend.constprop.0+0x108>
 80084c6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80084ca:	4a76      	ldr	r2, [pc, #472]	; (80086a4 <xQueueGenericSend.constprop.0+0x21c>)
 80084cc:	f8d3 1d20 	ldr.w	r1, [r3, #3360]	; 0xd20
 80084d0:	6011      	str	r1, [r2, #0]
 80084d2:	4a75      	ldr	r2, [pc, #468]	; (80086a8 <xQueueGenericSend.constprop.0+0x220>)
 80084d4:	6812      	ldr	r2, [r2, #0]
 80084d6:	b14a      	cbz	r2, 80084ec <xQueueGenericSend.constprop.0+0x64>
 80084d8:	f8d3 2d20 	ldr.w	r2, [r3, #3360]	; 0xd20
 80084dc:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
 80084e0:	f8c3 2d20 	str.w	r2, [r3, #3360]	; 0xd20
 80084e4:	f8d3 2d20 	ldr.w	r2, [r3, #3360]	; 0xd20
 80084e8:	f8c3 2d20 	str.w	r2, [r3, #3360]	; 0xd20
 80084ec:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80084f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80084f4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80084f8:	f3bf 8f4f 	dsb	sy
 80084fc:	f3bf 8f6f 	isb	sy
 8008500:	e046      	b.n	8008590 <xQueueGenericSend.constprop.0+0x108>
 8008502:	4b67      	ldr	r3, [pc, #412]	; (80086a0 <xQueueGenericSend.constprop.0+0x218>)
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	429d      	cmp	r5, r3
 8008508:	d000      	beq.n	800850c <xQueueGenericSend.constprop.0+0x84>
 800850a:	e7fe      	b.n	800850a <xQueueGenericSend.constprop.0+0x82>
 800850c:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800850e:	b903      	cbnz	r3, 8008512 <xQueueGenericSend.constprop.0+0x8a>
 8008510:	e7fe      	b.n	8008510 <xQueueGenericSend.constprop.0+0x88>
 8008512:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 8008514:	6cea      	ldr	r2, [r5, #76]	; 0x4c
 8008516:	3b01      	subs	r3, #1
 8008518:	4291      	cmp	r1, r2
 800851a:	652b      	str	r3, [r5, #80]	; 0x50
 800851c:	d0c5      	beq.n	80084aa <xQueueGenericSend.constprop.0+0x22>
 800851e:	2b00      	cmp	r3, #0
 8008520:	d1c3      	bne.n	80084aa <xQueueGenericSend.constprop.0+0x22>
 8008522:	f105 0804 	add.w	r8, r5, #4
 8008526:	4640      	mov	r0, r8
 8008528:	f7fc ffe7 	bl	80054fa <uxListRemove>
 800852c:	f8df c17c 	ldr.w	ip, [pc, #380]	; 80086ac <xQueueGenericSend.constprop.0+0x224>
 8008530:	4a5f      	ldr	r2, [pc, #380]	; (80086b0 <xQueueGenericSend.constprop.0+0x228>)
 8008532:	b958      	cbnz	r0, 800854c <xQueueGenericSend.constprop.0+0xc4>
 8008534:	2014      	movs	r0, #20
 8008536:	6aef      	ldr	r7, [r5, #44]	; 0x2c
 8008538:	4378      	muls	r0, r7
 800853a:	f85c 3000 	ldr.w	r3, [ip, r0]
 800853e:	b92b      	cbnz	r3, 800854c <xQueueGenericSend.constprop.0+0xc4>
 8008540:	2101      	movs	r1, #1
 8008542:	6813      	ldr	r3, [r2, #0]
 8008544:	40b9      	lsls	r1, r7
 8008546:	ea23 0301 	bic.w	r3, r3, r1
 800854a:	6013      	str	r3, [r2, #0]
 800854c:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800854e:	2014      	movs	r0, #20
 8008550:	f1c3 0105 	rsb	r1, r3, #5
 8008554:	62eb      	str	r3, [r5, #44]	; 0x2c
 8008556:	61a9      	str	r1, [r5, #24]
 8008558:	2501      	movs	r5, #1
 800855a:	6811      	ldr	r1, [r2, #0]
 800855c:	fa05 f703 	lsl.w	r7, r5, r3
 8008560:	430f      	orrs	r7, r1
 8008562:	fb00 c003 	mla	r0, r0, r3, ip
 8008566:	4641      	mov	r1, r8
 8008568:	6017      	str	r7, [r2, #0]
 800856a:	f7fc feee 	bl	800534a <vListInsertEnd>
 800856e:	e79d      	b.n	80084ac <xQueueGenericSend.constprop.0+0x24>
 8008570:	2100      	movs	r1, #0
 8008572:	68a0      	ldr	r0, [r4, #8]
 8008574:	f7fb fab2 	bl	8003adc <memcpy>
 8008578:	68a3      	ldr	r3, [r4, #8]
 800857a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800857c:	4413      	add	r3, r2
 800857e:	6862      	ldr	r2, [r4, #4]
 8008580:	60a3      	str	r3, [r4, #8]
 8008582:	4293      	cmp	r3, r2
 8008584:	bf24      	itt	cs
 8008586:	6823      	ldrcs	r3, [r4, #0]
 8008588:	60a3      	strcs	r3, [r4, #8]
 800858a:	e056      	b.n	800863a <xQueueGenericSend.constprop.0+0x1b2>
 800858c:	2d00      	cmp	r5, #0
 800858e:	d19a      	bne.n	80084c6 <xQueueGenericSend.constprop.0+0x3e>
 8008590:	f7fc fae0 	bl	8004b54 <vPortExitCritical>
 8008594:	2001      	movs	r0, #1
 8008596:	b004      	add	sp, #16
 8008598:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800859c:	9801      	ldr	r0, [sp, #4]
 800859e:	b910      	cbnz	r0, 80085a6 <xQueueGenericSend.constprop.0+0x11e>
 80085a0:	f7fc fad8 	bl	8004b54 <vPortExitCritical>
 80085a4:	e7f7      	b.n	8008596 <xQueueGenericSend.constprop.0+0x10e>
 80085a6:	b91d      	cbnz	r5, 80085b0 <xQueueGenericSend.constprop.0+0x128>
 80085a8:	6833      	ldr	r3, [r6, #0]
 80085aa:	9302      	str	r3, [sp, #8]
 80085ac:	683b      	ldr	r3, [r7, #0]
 80085ae:	9303      	str	r3, [sp, #12]
 80085b0:	f7fc fad0 	bl	8004b54 <vPortExitCritical>
 80085b4:	f7fc f850 	bl	8004658 <vTaskSuspendAll>
 80085b8:	f7fc f8b4 	bl	8004724 <vPortEnterCritical>
 80085bc:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80085c0:	a901      	add	r1, sp, #4
 80085c2:	2bff      	cmp	r3, #255	; 0xff
 80085c4:	bf04      	itt	eq
 80085c6:	2300      	moveq	r3, #0
 80085c8:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
 80085cc:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80085d0:	a802      	add	r0, sp, #8
 80085d2:	2bff      	cmp	r3, #255	; 0xff
 80085d4:	bf04      	itt	eq
 80085d6:	2300      	moveq	r3, #0
 80085d8:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
 80085dc:	f7fc faba 	bl	8004b54 <vPortExitCritical>
 80085e0:	f7fc fafc 	bl	8004bdc <xTaskCheckForTimeOut>
 80085e4:	2800      	cmp	r0, #0
 80085e6:	d150      	bne.n	800868a <xQueueGenericSend.constprop.0+0x202>
 80085e8:	f7fc f89c 	bl	8004724 <vPortEnterCritical>
 80085ec:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80085ee:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80085f0:	429a      	cmp	r2, r3
 80085f2:	d124      	bne.n	800863e <xQueueGenericSend.constprop.0+0x1b6>
 80085f4:	f7fc faae 	bl	8004b54 <vPortExitCritical>
 80085f8:	f8d8 1000 	ldr.w	r1, [r8]
 80085fc:	9d01      	ldr	r5, [sp, #4]
 80085fe:	3118      	adds	r1, #24
 8008600:	f104 0010 	add.w	r0, r4, #16
 8008604:	f7fc ff62 	bl	80054cc <vListInsert>
 8008608:	2101      	movs	r1, #1
 800860a:	4628      	mov	r0, r5
 800860c:	f7fd faa6 	bl	8005b5c <prvAddCurrentTaskToDelayedList>
 8008610:	4620      	mov	r0, r4
 8008612:	f7fd fa61 	bl	8005ad8 <prvUnlockQueue>
 8008616:	f7fd f86d 	bl	80056f4 <xTaskResumeAll>
 800861a:	b1c0      	cbz	r0, 800864e <xQueueGenericSend.constprop.0+0x1c6>
 800861c:	2501      	movs	r5, #1
 800861e:	f7fc f881 	bl	8004724 <vPortEnterCritical>
 8008622:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8008624:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008626:	429a      	cmp	r2, r3
 8008628:	d2b8      	bcs.n	800859c <xQueueGenericSend.constprop.0+0x114>
 800862a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800862c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800862e:	2a00      	cmp	r2, #0
 8008630:	d19e      	bne.n	8008570 <xQueueGenericSend.constprop.0+0xe8>
 8008632:	6823      	ldr	r3, [r4, #0]
 8008634:	2b00      	cmp	r3, #0
 8008636:	f43f af36 	beq.w	80084a6 <xQueueGenericSend.constprop.0+0x1e>
 800863a:	2500      	movs	r5, #0
 800863c:	e738      	b.n	80084b0 <xQueueGenericSend.constprop.0+0x28>
 800863e:	4620      	mov	r0, r4
 8008640:	f7fc fa88 	bl	8004b54 <vPortExitCritical>
 8008644:	f7fd fa48 	bl	8005ad8 <prvUnlockQueue>
 8008648:	f7fd f854 	bl	80056f4 <xTaskResumeAll>
 800864c:	e7e6      	b.n	800861c <xQueueGenericSend.constprop.0+0x194>
 800864e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008652:	4a14      	ldr	r2, [pc, #80]	; (80086a4 <xQueueGenericSend.constprop.0+0x21c>)
 8008654:	f8d3 1d20 	ldr.w	r1, [r3, #3360]	; 0xd20
 8008658:	6011      	str	r1, [r2, #0]
 800865a:	4a13      	ldr	r2, [pc, #76]	; (80086a8 <xQueueGenericSend.constprop.0+0x220>)
 800865c:	6812      	ldr	r2, [r2, #0]
 800865e:	b14a      	cbz	r2, 8008674 <xQueueGenericSend.constprop.0+0x1ec>
 8008660:	f8d3 2d20 	ldr.w	r2, [r3, #3360]	; 0xd20
 8008664:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
 8008668:	f8c3 2d20 	str.w	r2, [r3, #3360]	; 0xd20
 800866c:	f8d3 2d20 	ldr.w	r2, [r3, #3360]	; 0xd20
 8008670:	f8c3 2d20 	str.w	r2, [r3, #3360]	; 0xd20
 8008674:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008678:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800867c:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8008680:	f3bf 8f4f 	dsb	sy
 8008684:	f3bf 8f6f 	isb	sy
 8008688:	e7c8      	b.n	800861c <xQueueGenericSend.constprop.0+0x194>
 800868a:	4620      	mov	r0, r4
 800868c:	f7fd fa24 	bl	8005ad8 <prvUnlockQueue>
 8008690:	f7fd f830 	bl	80056f4 <xTaskResumeAll>
 8008694:	2000      	movs	r0, #0
 8008696:	e77e      	b.n	8008596 <xQueueGenericSend.constprop.0+0x10e>
 8008698:	200015fc 	.word	0x200015fc
 800869c:	20001648 	.word	0x20001648
 80086a0:	200011a8 	.word	0x200011a8
 80086a4:	2000134c 	.word	0x2000134c
 80086a8:	20001358 	.word	0x20001358
 80086ac:	200011b8 	.word	0x200011b8
 80086b0:	20001374 	.word	0x20001374

080086b4 <i2cReleaseBus>:
 *
 * @param[in] i2cp      pointer to the @p I2CDriver object
 *
 * @api
 */
void i2cReleaseBus(I2CDriver *i2cp) {
 80086b4:	b508      	push	{r3, lr}

  osalDbgCheck(i2cp != NULL);
 80086b6:	b910      	cbnz	r0, 80086be <i2cReleaseBus+0xa>
 80086b8:	f7fc f844 	bl	8004744 <vTaskEndScheduler>
 80086bc:	e7fe      	b.n	80086bc <i2cReleaseBus+0x8>
    xSemaphoreGive(mutex->handle);
 80086be:	68c0      	ldr	r0, [r0, #12]

  osalMutexUnlock(&i2cp->mutex);
}
 80086c0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80086c4:	f7ff bee0 	b.w	8008488 <xQueueGenericSend.constprop.0>

080086c8 <max2870SpiState.part.0>:
static void max2870SpiState(MAX2870Driver* driver, bool enable)
 80086c8:	b510      	push	{r4, lr}
 80086ca:	4604      	mov	r4, r0
        max2870SetMUXOut(driver, 0x0);
 80086cc:	2100      	movs	r1, #0
 80086ce:	f7ff fe2f 	bl	8008330 <max2870SetMUXOut>
        monitorKick(&driver->pllMon, driver->enabled);
 80086d2:	7921      	ldrb	r1, [r4, #4]
 80086d4:	f104 00e8 	add.w	r0, r4, #232	; 0xe8
 80086d8:	f7fc ff20 	bl	800551c <monitorKick>
        spiReleaseBus(driver->config->spiPort);
 80086dc:	6823      	ldr	r3, [r4, #0]
 80086de:	681b      	ldr	r3, [r3, #0]
 *
 * @api
 */
void spiReleaseBus(SPIDriver *spip) {

  osalDbgCheck(spip != NULL);
 80086e0:	b913      	cbnz	r3, 80086e8 <max2870SpiState.part.0+0x20>
 80086e2:	f7fc f82f 	bl	8004744 <vTaskEndScheduler>
 80086e6:	e7fe      	b.n	80086e6 <max2870SpiState.part.0+0x1e>
 80086e8:	68d8      	ldr	r0, [r3, #12]
}
 80086ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80086ee:	f7ff becb 	b.w	8008488 <xQueueGenericSend.constprop.0>

080086f2 <prvInitialiseMutex.part.0>:
 80086f2:	2200      	movs	r2, #0
 80086f4:	e9c0 2200 	strd	r2, r2, [r0]
 80086f8:	60c2      	str	r2, [r0, #12]
 80086fa:	f7ff bec5 	b.w	8008488 <xQueueGenericSend.constprop.0>

080086fe <xQueueGenericReset.constprop.0.isra.0>:
 80086fe:	b510      	push	{r4, lr}
 8008700:	b900      	cbnz	r0, 8008704 <xQueueGenericReset.constprop.0.isra.0+0x6>
 8008702:	e7fe      	b.n	8008702 <xQueueGenericReset.constprop.0.isra.0+0x4>
 8008704:	f7fc f80e 	bl	8004724 <vPortEnterCritical>
 8008708:	e9d0 340f 	ldrd	r3, r4, [r0, #60]	; 0x3c
 800870c:	4363      	muls	r3, r4
 800870e:	6802      	ldr	r2, [r0, #0]
 8008710:	18d1      	adds	r1, r2, r3
 8008712:	1b1b      	subs	r3, r3, r4
 8008714:	4413      	add	r3, r2
 8008716:	6041      	str	r1, [r0, #4]
 8008718:	60c3      	str	r3, [r0, #12]
 800871a:	2100      	movs	r1, #0
 800871c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008720:	23ff      	movs	r3, #255	; 0xff
 8008722:	6082      	str	r2, [r0, #8]
 8008724:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008728:	6381      	str	r1, [r0, #56]	; 0x38
 800872a:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
 800872e:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
 8008732:	f100 0318 	add.w	r3, r0, #24
 8008736:	e9c0 2306 	strd	r2, r3, [r0, #24]
 800873a:	6143      	str	r3, [r0, #20]
 800873c:	6203      	str	r3, [r0, #32]
 800873e:	f100 032c 	add.w	r3, r0, #44	; 0x2c
 8008742:	6101      	str	r1, [r0, #16]
 8008744:	e9c0 320a 	strd	r3, r2, [r0, #40]	; 0x28
 8008748:	e9c0 330c 	strd	r3, r3, [r0, #48]	; 0x30
 800874c:	6241      	str	r1, [r0, #36]	; 0x24
 800874e:	f7fc ba01 	b.w	8004b54 <vPortExitCritical>

08008752 <chprintf>:
 * @param[in] chp       pointer to a @p BaseSequentialStream implementing object
 * @param[in] fmt       formatting string
 *
 * @api
 */
int chprintf(BaseSequentialStream *chp, const char *fmt, ...) {
 8008752:	b40e      	push	{r1, r2, r3}
 8008754:	b503      	push	{r0, r1, lr}
 8008756:	aa03      	add	r2, sp, #12
 8008758:	f852 1b04 	ldr.w	r1, [r2], #4
  va_list ap;
  int formatted_bytes;

  va_start(ap, fmt);
 800875c:	9201      	str	r2, [sp, #4]
  formatted_bytes = chvprintf(chp, fmt, ap);
 800875e:	f7fe f9c7 	bl	8006af0 <chvprintf>
  va_end(ap);

  return formatted_bytes;
}
 8008762:	b002      	add	sp, #8
 8008764:	f85d eb04 	ldr.w	lr, [sp], #4
 8008768:	b003      	add	sp, #12
 800876a:	4770      	bx	lr

0800876c <cmd_exit>:
#if ((SHELL_CMD_EXIT_ENABLED == TRUE) && !defined(_CHIBIOS_NIL_)) ||        \
    defined(__DOXYGEN__)
static void cmd_exit(void* user, BaseSequentialStream *chp, int argc, char *argv[]) {
  (void)user;
  (void)argv;
  if (argc > 0) {
 800876c:	2a00      	cmp	r2, #0
static void cmd_exit(void* user, BaseSequentialStream *chp, int argc, char *argv[]) {
 800876e:	4608      	mov	r0, r1
 8008770:	b508      	push	{r3, lr}
  if (argc > 0) {
 8008772:	dd05      	ble.n	8008780 <cmd_exit+0x14>
    shellUsage(chp, "exit");
    return;
  }

  shellExit(MSG_OK);
}
 8008774:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    shellUsage(chp, "exit");
 8008778:	4a06      	ldr	r2, [pc, #24]	; (8008794 <cmd_exit+0x28>)
 800877a:	4907      	ldr	r1, [pc, #28]	; (8008798 <cmd_exit+0x2c>)
 800877c:	f7ff bfe9 	b.w	8008752 <chprintf>
 */
void shellExit(msg_t msg) {

  /* Atomically broadcasting the event source and terminating the thread,
     there is not a chSysUnlock() because the thread terminates upon return.*/
  chSysLock();
 8008780:	f7fb ffd0 	bl	8004724 <vPortEnterCritical>
}
static inline void chEvtBroadcast(event_source_t* event_source){
    osalEventBroadcastFlags(event_source, 1);
}
static inline void chEvtBroadcastI(event_source_t* event_source){
    osalEventBroadcastFlagsI(event_source, 1);
 8008784:	4805      	ldr	r0, [pc, #20]	; (800879c <cmd_exit+0x30>)
 8008786:	2101      	movs	r1, #1
 8008788:	f7fe fba6 	bl	8006ed8 <osalEventBroadcastFlagsI>
}
 800878c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    vTaskDelete(NULL);
 8008790:	f7fd bc70 	b.w	8006074 <vTaskDelete.constprop.0>
 8008794:	0800bad1 	.word	0x0800bad1
 8008798:	0800bad6 	.word	0x0800bad6
 800879c:	200012b8 	.word	0x200012b8

080087a0 <cmd_info>:

#if (SHELL_CMD_INFO_ENABLED == TRUE) || defined(__DOXYGEN__)
static void cmd_info(void* user, BaseSequentialStream *chp, int argc, char *argv[]) {
  (void)user;
  (void)argv;
  if (argc > 0) {
 80087a0:	2a00      	cmp	r2, #0
static void cmd_info(void* user, BaseSequentialStream *chp, int argc, char *argv[]) {
 80087a2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80087a4:	460c      	mov	r4, r1
  if (argc > 0) {
 80087a6:	dd07      	ble.n	80087b8 <cmd_info+0x18>
    shellUsage(chp, "info");
 80087a8:	4620      	mov	r0, r4
 80087aa:	4a1d      	ldr	r2, [pc, #116]	; (8008820 <cmd_info+0x80>)
 80087ac:	491d      	ldr	r1, [pc, #116]	; (8008824 <cmd_info+0x84>)
  for(uint8_t* i=&__buildid_base__+16; i<&__buildid_end__; i++){
    chprintf(chp, "%02x", *i);
  }
  chprintf(chp, SHELL_NEWLINE_STR);
#endif
}
 80087ae:	b003      	add	sp, #12
 80087b0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    shellUsage(chp, "info");
 80087b4:	f7ff bfcd 	b.w	8008752 <chprintf>
  chprintf(chp, "Kernel:       %s"SHELL_NEWLINE_STR, CH_KERNEL_VERSION);
 80087b8:	4a1b      	ldr	r2, [pc, #108]	; (8008828 <cmd_info+0x88>)
 80087ba:	491c      	ldr	r1, [pc, #112]	; (800882c <cmd_info+0x8c>)
 80087bc:	4620      	mov	r0, r4
 80087be:	f7ff ffc8 	bl	8008752 <chprintf>
  chprintf(chp, "Architecture: %s"SHELL_NEWLINE_STR, PORT_ARCHITECTURE_NAME);
 80087c2:	4a1b      	ldr	r2, [pc, #108]	; (8008830 <cmd_info+0x90>)
 80087c4:	491b      	ldr	r1, [pc, #108]	; (8008834 <cmd_info+0x94>)
 80087c6:	4620      	mov	r0, r4
 80087c8:	f7ff ffc3 	bl	8008752 <chprintf>
  chprintf(chp, "Platform:     %s"SHELL_NEWLINE_STR, PLATFORM_NAME);
 80087cc:	4a1a      	ldr	r2, [pc, #104]	; (8008838 <cmd_info+0x98>)
 80087ce:	491b      	ldr	r1, [pc, #108]	; (800883c <cmd_info+0x9c>)
 80087d0:	4620      	mov	r0, r4
 80087d2:	f7ff ffbe 	bl	8008752 <chprintf>
  chprintf(chp, "Board:        %s"SHELL_NEWLINE_STR, BOARD_NAME);
 80087d6:	4a1a      	ldr	r2, [pc, #104]	; (8008840 <cmd_info+0xa0>)
 80087d8:	491a      	ldr	r1, [pc, #104]	; (8008844 <cmd_info+0xa4>)
 80087da:	4620      	mov	r0, r4
 80087dc:	f7ff ffb9 	bl	8008752 <chprintf>
  chprintf(chp, "Build time:   %s%s%s"SHELL_NEWLINE_STR, __DATE__, " - ", __TIME__);
 80087e0:	4b19      	ldr	r3, [pc, #100]	; (8008848 <cmd_info+0xa8>)
 80087e2:	4a1a      	ldr	r2, [pc, #104]	; (800884c <cmd_info+0xac>)
 80087e4:	491a      	ldr	r1, [pc, #104]	; (8008850 <cmd_info+0xb0>)
 80087e6:	9300      	str	r3, [sp, #0]
 80087e8:	4620      	mov	r0, r4
 80087ea:	4b1a      	ldr	r3, [pc, #104]	; (8008854 <cmd_info+0xb4>)
 80087ec:	f7ff ffb1 	bl	8008752 <chprintf>
  chprintf(chp, "Build ID:     ");
 80087f0:	4620      	mov	r0, r4
 80087f2:	4919      	ldr	r1, [pc, #100]	; (8008858 <cmd_info+0xb8>)
 80087f4:	f7ff ffad 	bl	8008752 <chprintf>
  for(uint8_t* i=&__buildid_base__+16; i<&__buildid_end__; i++){
 80087f8:	4d18      	ldr	r5, [pc, #96]	; (800885c <cmd_info+0xbc>)
 80087fa:	4e19      	ldr	r6, [pc, #100]	; (8008860 <cmd_info+0xc0>)
    chprintf(chp, "%02x", *i);
 80087fc:	4f19      	ldr	r7, [pc, #100]	; (8008864 <cmd_info+0xc4>)
  for(uint8_t* i=&__buildid_base__+16; i<&__buildid_end__; i++){
 80087fe:	42b5      	cmp	r5, r6
 8008800:	d306      	bcc.n	8008810 <cmd_info+0x70>
  chprintf(chp, SHELL_NEWLINE_STR);
 8008802:	4620      	mov	r0, r4
 8008804:	4918      	ldr	r1, [pc, #96]	; (8008868 <cmd_info+0xc8>)
}
 8008806:	b003      	add	sp, #12
 8008808:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  chprintf(chp, SHELL_NEWLINE_STR);
 800880c:	f7ff bfa1 	b.w	8008752 <chprintf>
    chprintf(chp, "%02x", *i);
 8008810:	4639      	mov	r1, r7
 8008812:	4620      	mov	r0, r4
 8008814:	f815 2b01 	ldrb.w	r2, [r5], #1
 8008818:	f7ff ff9b 	bl	8008752 <chprintf>
  for(uint8_t* i=&__buildid_base__+16; i<&__buildid_end__; i++){
 800881c:	e7ef      	b.n	80087fe <cmd_info+0x5e>
 800881e:	bf00      	nop
 8008820:	0800bae2 	.word	0x0800bae2
 8008824:	0800bad6 	.word	0x0800bad6
 8008828:	0800bae7 	.word	0x0800bae7
 800882c:	0800baf4 	.word	0x0800baf4
 8008830:	0800bb07 	.word	0x0800bb07
 8008834:	0800bb14 	.word	0x0800bb14
 8008838:	0800bb27 	.word	0x0800bb27
 800883c:	0800bb51 	.word	0x0800bb51
 8008840:	0800bb64 	.word	0x0800bb64
 8008844:	0800bb8b 	.word	0x0800bb8b
 8008848:	0800bbc5 	.word	0x0800bbc5
 800884c:	0800bba2 	.word	0x0800bba2
 8008850:	0800bbae 	.word	0x0800bbae
 8008854:	0800bb9e 	.word	0x0800bb9e
 8008858:	0800bbce 	.word	0x0800bbce
 800885c:	0800cd74 	.word	0x0800cd74
 8008860:	0800cd88 	.word	0x0800cd88
 8008864:	0800bbdd 	.word	0x0800bbdd
 8008868:	0800be6c 	.word	0x0800be6c

0800886c <cmd_echo>:

#if (SHELL_CMD_ECHO_ENABLED == TRUE) || defined(__DOXYGEN__)
static void cmd_echo(void* user, BaseSequentialStream *chp, int argc, char *argv[]) {
  (void)argv;
  (void)user;
  if (argc != 1) {
 800886c:	2a01      	cmp	r2, #1
static void cmd_echo(void* user, BaseSequentialStream *chp, int argc, char *argv[]) {
 800886e:	4608      	mov	r0, r1
    shellUsage(chp, "echo \"message\"");
 8008870:	bf19      	ittee	ne
 8008872:	4a03      	ldrne	r2, [pc, #12]	; (8008880 <cmd_echo+0x14>)
 8008874:	4903      	ldrne	r1, [pc, #12]	; (8008884 <cmd_echo+0x18>)
    return;
  }
  chprintf(chp, "%s"SHELL_NEWLINE_STR, argv[0]);
 8008876:	681a      	ldreq	r2, [r3, #0]
 8008878:	4903      	ldreq	r1, [pc, #12]	; (8008888 <cmd_echo+0x1c>)
 800887a:	f7ff bf6a 	b.w	8008752 <chprintf>
 800887e:	bf00      	nop
 8008880:	0800bbe2 	.word	0x0800bbe2
 8008884:	0800bad6 	.word	0x0800bad6
 8008888:	0800bb99 	.word	0x0800bb99

0800888c <cmd_systime>:

#if (SHELL_CMD_SYSTIME_ENABLED == TRUE) || defined(__DOXYGEN__)
static void cmd_systime(void* user, BaseSequentialStream *chp, int argc, char *argv[]) {
  (void)argv;
  (void)user;
  if (argc > 0) {
 800888c:	2a00      	cmp	r2, #0
static void cmd_systime(void* user, BaseSequentialStream *chp, int argc, char *argv[]) {
 800888e:	4608      	mov	r0, r1
 8008890:	b508      	push	{r3, lr}
  if (argc > 0) {
 8008892:	dd05      	ble.n	80088a0 <cmd_systime+0x14>
    shellUsage(chp, "systime");
 8008894:	4a05      	ldr	r2, [pc, #20]	; (80088ac <cmd_systime+0x20>)
 8008896:	4906      	ldr	r1, [pc, #24]	; (80088b0 <cmd_systime+0x24>)
    return;
  }
  chprintf(chp, "%lu"SHELL_NEWLINE_STR, (unsigned long)chVTGetSystemTime());
}
 8008898:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  chprintf(chp, "%lu"SHELL_NEWLINE_STR, (unsigned long)chVTGetSystemTime());
 800889c:	f7ff bf59 	b.w	8008752 <chprintf>
 80088a0:	f7fc fd2e 	bl	8005300 <vPortValidateInterruptPriority>
 80088a4:	4b03      	ldr	r3, [pc, #12]	; (80088b4 <cmd_systime+0x28>)
 80088a6:	4904      	ldr	r1, [pc, #16]	; (80088b8 <cmd_systime+0x2c>)
 80088a8:	681a      	ldr	r2, [r3, #0]
 80088aa:	e7f5      	b.n	8008898 <cmd_systime+0xc>
 80088ac:	0800bbf1 	.word	0x0800bbf1
 80088b0:	0800bad6 	.word	0x0800bad6
 80088b4:	20001648 	.word	0x20001648
 80088b8:	0800bbf9 	.word	0x0800bbf9

080088bc <cmd_mem>:
#if (SHELL_CMD_MEM_ENABLED == TRUE) || defined(__DOXYGEN__)
static void cmd_mem(void* user, BaseSequentialStream *chp, int argc, char *argv[]) {
  size_t n, total, largest;
  (void)argv;
  (void)user;
  if (argc > 0) {
 80088bc:	2a00      	cmp	r2, #0
static void cmd_mem(void* user, BaseSequentialStream *chp, int argc, char *argv[]) {
 80088be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088c0:	460c      	mov	r4, r1
  if (argc > 0) {
 80088c2:	dd06      	ble.n	80088d2 <cmd_mem+0x16>
    shellUsage(chp, "mem");
 80088c4:	4a14      	ldr	r2, [pc, #80]	; (8008918 <cmd_mem+0x5c>)
 80088c6:	4915      	ldr	r1, [pc, #84]	; (800891c <cmd_mem+0x60>)
  }
  n = chHeapStatus(NULL, &total, &largest);
  chprintf(chp, "core free memory : %u bytes"SHELL_NEWLINE_STR, chCoreGetStatusX());
  chprintf(chp, "heap fragments   : %u"SHELL_NEWLINE_STR, n);
  chprintf(chp, "heap free total  : %u bytes"SHELL_NEWLINE_STR, total);
  chprintf(chp, "heap free largest: %u bytes"SHELL_NEWLINE_STR, largest);
 80088c8:	4620      	mov	r0, r4
}
 80088ca:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  chprintf(chp, "heap free largest: %u bytes"SHELL_NEWLINE_STR, largest);
 80088ce:	f7ff bf40 	b.w	8008752 <chprintf>
 80088d2:	2500      	movs	r5, #0
 80088d4:	462e      	mov	r6, r5
 80088d6:	4b12      	ldr	r3, [pc, #72]	; (8008920 <cmd_mem+0x64>)
 80088d8:	681f      	ldr	r7, [r3, #0]
 80088da:	4b12      	ldr	r3, [pc, #72]	; (8008924 <cmd_mem+0x68>)
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	681a      	ldr	r2, [r3, #0]
 80088e0:	b98a      	cbnz	r2, 8008906 <cmd_mem+0x4a>
  chprintf(chp, "core free memory : %u bytes"SHELL_NEWLINE_STR, chCoreGetStatusX());
 80088e2:	463a      	mov	r2, r7
 80088e4:	4910      	ldr	r1, [pc, #64]	; (8008928 <cmd_mem+0x6c>)
 80088e6:	4620      	mov	r0, r4
 80088e8:	f7ff ff33 	bl	8008752 <chprintf>
  chprintf(chp, "heap fragments   : %u"SHELL_NEWLINE_STR, n);
 80088ec:	4632      	mov	r2, r6
 80088ee:	490f      	ldr	r1, [pc, #60]	; (800892c <cmd_mem+0x70>)
 80088f0:	4620      	mov	r0, r4
 80088f2:	f7ff ff2e 	bl	8008752 <chprintf>
  chprintf(chp, "heap free total  : %u bytes"SHELL_NEWLINE_STR, total);
 80088f6:	463a      	mov	r2, r7
 80088f8:	490d      	ldr	r1, [pc, #52]	; (8008930 <cmd_mem+0x74>)
 80088fa:	4620      	mov	r0, r4
 80088fc:	f7ff ff29 	bl	8008752 <chprintf>
  chprintf(chp, "heap free largest: %u bytes"SHELL_NEWLINE_STR, largest);
 8008900:	462a      	mov	r2, r5
 8008902:	490c      	ldr	r1, [pc, #48]	; (8008934 <cmd_mem+0x78>)
 8008904:	e7e0      	b.n	80088c8 <cmd_mem+0xc>
 8008906:	685b      	ldr	r3, [r3, #4]
 8008908:	b103      	cbz	r3, 800890c <cmd_mem+0x50>
 800890a:	3601      	adds	r6, #1
 800890c:	429d      	cmp	r5, r3
 800890e:	bf38      	it	cc
 8008910:	461d      	movcc	r5, r3
static void cmd_mem(void* user, BaseSequentialStream *chp, int argc, char *argv[]) {
 8008912:	4613      	mov	r3, r2
 8008914:	e7e3      	b.n	80088de <cmd_mem+0x22>
 8008916:	bf00      	nop
 8008918:	0800bbff 	.word	0x0800bbff
 800891c:	0800bad6 	.word	0x0800bad6
 8008920:	200013a4 	.word	0x200013a4
 8008924:	20001618 	.word	0x20001618
 8008928:	0800bc03 	.word	0x0800bc03
 800892c:	0800bc21 	.word	0x0800bc21
 8008930:	0800bc39 	.word	0x0800bc39
 8008934:	0800bc57 	.word	0x0800bc57

08008938 <cmdMco>:
    if(argc != 1) {
 8008938:	2a01      	cmp	r2, #1
{
 800893a:	b510      	push	{r4, lr}
 800893c:	460c      	mov	r4, r1
    if(argc != 1) {
 800893e:	d009      	beq.n	8008954 <cmdMco+0x1c>
        chprintf(chp,"Usage:"SHELL_NEWLINE_STR);
 8008940:	4620      	mov	r0, r4
 8008942:	490a      	ldr	r1, [pc, #40]	; (800896c <cmdMco+0x34>)
 8008944:	f7ff ff05 	bl	8008752 <chprintf>
        chprintf(chp,"\t mco [1/0]"SHELL_NEWLINE_STR);
 8008948:	4620      	mov	r0, r4
}
 800894a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        chprintf(chp,"\t mco [1/0]"SHELL_NEWLINE_STR);
 800894e:	4908      	ldr	r1, [pc, #32]	; (8008970 <cmdMco+0x38>)
 8008950:	f7ff beff 	b.w	8008752 <chprintf>
        systemEnableMCO(argv[0][0] == '1');
 8008954:	681b      	ldr	r3, [r3, #0]
    if(enable) {
 8008956:	781b      	ldrb	r3, [r3, #0]
 8008958:	2b31      	cmp	r3, #49	; 0x31
 800895a:	4b06      	ldr	r3, [pc, #24]	; (8008974 <cmdMco+0x3c>)
        RCC->CFGR |=STM32_MCOSEL_PLLDIV2;
 800895c:	685a      	ldr	r2, [r3, #4]
 800895e:	bf0c      	ite	eq
 8008960:	f042 62e0 	orreq.w	r2, r2, #117440512	; 0x7000000
    } else {
        //RCC->CFGR &=~ STM32_MCOSEL_SYSCLK;
        RCC->CFGR &=~STM32_MCOSEL_PLLDIV2;
 8008964:	f022 62e0 	bicne.w	r2, r2, #117440512	; 0x7000000
 8008968:	605a      	str	r2, [r3, #4]
}
 800896a:	bd10      	pop	{r4, pc}
 800896c:	0800bc75 	.word	0x0800bc75
 8008970:	0800bc7e 	.word	0x0800bc7e
 8008974:	40021000 	.word	0x40021000

08008978 <cmdLicense>:
{
 8008978:	4608      	mov	r0, r1
    chprintf(chp,"%s", &_binary_data_license_bin_start);
 800897a:	4a02      	ldr	r2, [pc, #8]	; (8008984 <cmdLicense+0xc>)
 800897c:	4902      	ldr	r1, [pc, #8]	; (8008988 <cmdLicense+0x10>)
 800897e:	f7ff bee8 	b.w	8008752 <chprintf>
 8008982:	bf00      	nop
 8008984:	08002234 	.word	0x08002234
 8008988:	0800bc8c 	.word	0x0800bc8c

0800898c <cmdMaxUsage>:
#include <string.h>
#include <stdlib.h>


static void cmdMaxUsage(BaseSequentialStream* chp)
{
 800898c:	b510      	push	{r4, lr}
 800898e:	4604      	mov	r4, r0
    chprintf(chp, "Usage:"SHELL_NEWLINE_STR);
 8008990:	490e      	ldr	r1, [pc, #56]	; (80089cc <cmdMaxUsage+0x40>)
 8008992:	f7ff fede 	bl	8008752 <chprintf>
    chprintf(chp, "\tmax tune [freqkHz] [power] [forceVAS]"SHELL_NEWLINE_STR);
 8008996:	4620      	mov	r0, r4
 8008998:	490d      	ldr	r1, [pc, #52]	; (80089d0 <cmdMaxUsage+0x44>)
 800899a:	f7ff feda 	bl	8008752 <chprintf>
    chprintf(chp, "\tmax status"SHELL_NEWLINE_STR);
 800899e:	4620      	mov	r0, r4
 80089a0:	490c      	ldr	r1, [pc, #48]	; (80089d4 <cmdMaxUsage+0x48>)
 80089a2:	f7ff fed6 	bl	8008752 <chprintf>
    chprintf(chp, "\tmax vcocache"SHELL_NEWLINE_STR);
 80089a6:	4620      	mov	r0, r4
 80089a8:	490b      	ldr	r1, [pc, #44]	; (80089d8 <cmdMaxUsage+0x4c>)
 80089aa:	f7ff fed2 	bl	8008752 <chprintf>
    chprintf(chp, "\tmax vcocache calibrate"SHELL_NEWLINE_STR);
 80089ae:	4620      	mov	r0, r4
 80089b0:	490a      	ldr	r1, [pc, #40]	; (80089dc <cmdMaxUsage+0x50>)
 80089b2:	f7ff fece 	bl	8008752 <chprintf>
    chprintf(chp, "\tmax vcocache set index value"SHELL_NEWLINE_STR);
 80089b6:	4620      	mov	r0, r4
 80089b8:	4909      	ldr	r1, [pc, #36]	; (80089e0 <cmdMaxUsage+0x54>)
 80089ba:	f7ff feca 	bl	8008752 <chprintf>
    chprintf(chp, "\tmax dld"SHELL_NEWLINE_STR);
 80089be:	4620      	mov	r0, r4
}
 80089c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    chprintf(chp, "\tmax dld"SHELL_NEWLINE_STR);
 80089c4:	4907      	ldr	r1, [pc, #28]	; (80089e4 <cmdMaxUsage+0x58>)
 80089c6:	f7ff bec4 	b.w	8008752 <chprintf>
 80089ca:	bf00      	nop
 80089cc:	0800bc75 	.word	0x0800bc75
 80089d0:	0800bc8f 	.word	0x0800bc8f
 80089d4:	0800bcb8 	.word	0x0800bcb8
 80089d8:	0800bcc6 	.word	0x0800bcc6
 80089dc:	0800bcd6 	.word	0x0800bcd6
 80089e0:	0800bcf0 	.word	0x0800bcf0
 80089e4:	0800bd10 	.word	0x0800bd10

080089e8 <cmdI2CUsage>:

#include <string.h>
#include <stdlib.h>

static void cmdI2CUsage(BaseSequentialStream *chp)
{
 80089e8:	b510      	push	{r4, lr}
 80089ea:	4604      	mov	r4, r0
    chprintf(chp, "Usage:"SHELL_NEWLINE_STR);
 80089ec:	490c      	ldr	r1, [pc, #48]	; (8008a20 <cmdI2CUsage+0x38>)
 80089ee:	f7ff feb0 	bl	8008752 <chprintf>
    chprintf(chp, "\ti2c test"SHELL_NEWLINE_STR);
 80089f2:	4620      	mov	r0, r4
 80089f4:	490b      	ldr	r1, [pc, #44]	; (8008a24 <cmdI2CUsage+0x3c>)
 80089f6:	f7ff feac 	bl	8008752 <chprintf>
    chprintf(chp, "\ti2c scan"SHELL_NEWLINE_STR);
 80089fa:	4620      	mov	r0, r4
 80089fc:	490a      	ldr	r1, [pc, #40]	; (8008a28 <cmdI2CUsage+0x40>)
 80089fe:	f7ff fea8 	bl	8008752 <chprintf>
    chprintf(chp, "\ti2c errors"SHELL_NEWLINE_STR);
 8008a02:	4620      	mov	r0, r4
 8008a04:	4909      	ldr	r1, [pc, #36]	; (8008a2c <cmdI2CUsage+0x44>)
 8008a06:	f7ff fea4 	bl	8008752 <chprintf>
    chprintf(chp, "\ti2c get devAddr regAddr [stress]"SHELL_NEWLINE_STR);
 8008a0a:	4620      	mov	r0, r4
 8008a0c:	4908      	ldr	r1, [pc, #32]	; (8008a30 <cmdI2CUsage+0x48>)
 8008a0e:	f7ff fea0 	bl	8008752 <chprintf>
    chprintf(chp, "\ti2c set devAddr regAddr regValue [stress]"SHELL_NEWLINE_STR);
 8008a12:	4620      	mov	r0, r4
}
 8008a14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    chprintf(chp, "\ti2c set devAddr regAddr regValue [stress]"SHELL_NEWLINE_STR);
 8008a18:	4906      	ldr	r1, [pc, #24]	; (8008a34 <cmdI2CUsage+0x4c>)
 8008a1a:	f7ff be9a 	b.w	8008752 <chprintf>
 8008a1e:	bf00      	nop
 8008a20:	0800bc75 	.word	0x0800bc75
 8008a24:	0800bd1b 	.word	0x0800bd1b
 8008a28:	0800bd27 	.word	0x0800bd27
 8008a2c:	0800bd33 	.word	0x0800bd33
 8008a30:	0800bd41 	.word	0x0800bd41
 8008a34:	0800bd65 	.word	0x0800bd65

08008a38 <cmdGPIOUsage>:

#include <string.h>
#include <stdlib.h>

static void cmdGPIOUsage(BaseSequentialStream *chp)
{
 8008a38:	b510      	push	{r4, lr}
 8008a3a:	4604      	mov	r4, r0
    chprintf(chp, "Usage:"SHELL_NEWLINE_STR);
 8008a3c:	4910      	ldr	r1, [pc, #64]	; (8008a80 <cmdGPIOUsage+0x48>)
 8008a3e:	f7ff fe88 	bl	8008752 <chprintf>
    chprintf(chp, "\tgpio status"SHELL_NEWLINE_STR);
 8008a42:	4620      	mov	r0, r4
 8008a44:	490f      	ldr	r1, [pc, #60]	; (8008a84 <cmdGPIOUsage+0x4c>)
 8008a46:	f7ff fe84 	bl	8008752 <chprintf>
    chprintf(chp, "\tgpio [port] [pin] output"SHELL_NEWLINE_STR);
 8008a4a:	4620      	mov	r0, r4
 8008a4c:	490e      	ldr	r1, [pc, #56]	; (8008a88 <cmdGPIOUsage+0x50>)
 8008a4e:	f7ff fe80 	bl	8008752 <chprintf>
    chprintf(chp, "\tgpio [port] [pin] input"SHELL_NEWLINE_STR);
 8008a52:	4620      	mov	r0, r4
 8008a54:	490d      	ldr	r1, [pc, #52]	; (8008a8c <cmdGPIOUsage+0x54>)
 8008a56:	f7ff fe7c 	bl	8008752 <chprintf>
    chprintf(chp, "\tgpio [port] [pin] set"SHELL_NEWLINE_STR);
 8008a5a:	4620      	mov	r0, r4
 8008a5c:	490c      	ldr	r1, [pc, #48]	; (8008a90 <cmdGPIOUsage+0x58>)
 8008a5e:	f7ff fe78 	bl	8008752 <chprintf>
    chprintf(chp, "\tgpio [port] [pin] clear"SHELL_NEWLINE_STR);
 8008a62:	4620      	mov	r0, r4
 8008a64:	490b      	ldr	r1, [pc, #44]	; (8008a94 <cmdGPIOUsage+0x5c>)
 8008a66:	f7ff fe74 	bl	8008752 <chprintf>
    chprintf(chp, "\tgpio [port] [pin] get"SHELL_NEWLINE_STR);
 8008a6a:	4620      	mov	r0, r4
 8008a6c:	490a      	ldr	r1, [pc, #40]	; (8008a98 <cmdGPIOUsage+0x60>)
 8008a6e:	f7ff fe70 	bl	8008752 <chprintf>
    chprintf(chp, "\tgpio [port] bus [on/off]"SHELL_NEWLINE_STR);
 8008a72:	4620      	mov	r0, r4

}
 8008a74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    chprintf(chp, "\tgpio [port] bus [on/off]"SHELL_NEWLINE_STR);
 8008a78:	4908      	ldr	r1, [pc, #32]	; (8008a9c <cmdGPIOUsage+0x64>)
 8008a7a:	f7ff be6a 	b.w	8008752 <chprintf>
 8008a7e:	bf00      	nop
 8008a80:	0800bc75 	.word	0x0800bc75
 8008a84:	0800bd92 	.word	0x0800bd92
 8008a88:	0800bda1 	.word	0x0800bda1
 8008a8c:	0800bdbd 	.word	0x0800bdbd
 8008a90:	0800bdd8 	.word	0x0800bdd8
 8008a94:	0800bdf1 	.word	0x0800bdf1
 8008a98:	0800be0c 	.word	0x0800be0c
 8008a9c:	0800be25 	.word	0x0800be25

08008aa0 <gpioDummyStatus>:

    return false;
}

void gpioDummyStatus(const GPIOPort* driver, BaseSequentialStream* chp)
{
 8008aa0:	4608      	mov	r0, r1
    (void)driver;

    chprintf(chp, "\tDriver: Dummy"SHELL_NEWLINE_STR);
 8008aa2:	4901      	ldr	r1, [pc, #4]	; (8008aa8 <gpioDummyStatus+0x8>)
 8008aa4:	f7ff be55 	b.w	8008752 <chprintf>
 8008aa8:	0800be41 	.word	0x0800be41

08008aac <printfFixed>:
{
 8008aac:	b40c      	push	{r2, r3}
 8008aae:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8008ab2:	aa08      	add	r2, sp, #32
 8008ab4:	460d      	mov	r5, r1
 8008ab6:	f852 1b04 	ldr.w	r1, [r2], #4
 8008aba:	4606      	mov	r6, r0
    va_start(args, format);
 8008abc:	9201      	str	r2, [sp, #4]
    int result = chvprintf(chn, format, args);
 8008abe:	f7fe f817 	bl	8006af0 <chvprintf>
 8008ac2:	4604      	mov	r4, r0
 8008ac4:	4607      	mov	r7, r0
        chnWrite(chn, (unsigned char*)" ", 1);
 8008ac6:	f8df 802c 	ldr.w	r8, [pc, #44]	; 8008af4 <printfFixed+0x48>
    for(; result<minLength; result++) {
 8008aca:	42af      	cmp	r7, r5
 8008acc:	db09      	blt.n	8008ae2 <printfFixed+0x36>
 8008ace:	1b28      	subs	r0, r5, r4
 8008ad0:	42ac      	cmp	r4, r5
 8008ad2:	bfc8      	it	gt
 8008ad4:	2000      	movgt	r0, #0
}
 8008ad6:	4420      	add	r0, r4
 8008ad8:	b002      	add	sp, #8
 8008ada:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008ade:	b002      	add	sp, #8
 8008ae0:	4770      	bx	lr
        chnWrite(chn, (unsigned char*)" ", 1);
 8008ae2:	6833      	ldr	r3, [r6, #0]
 8008ae4:	2201      	movs	r2, #1
 8008ae6:	4641      	mov	r1, r8
 8008ae8:	4630      	mov	r0, r6
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	4798      	blx	r3
    for(; result<minLength; result++) {
 8008aee:	3701      	adds	r7, #1
 8008af0:	e7eb      	b.n	8008aca <printfFixed+0x1e>
 8008af2:	bf00      	nop
 8008af4:	0800bbdb 	.word	0x0800bbdb

08008af8 <max2870StatusPrint>:

    return allGood;
}

void max2870StatusPrint(MAX2870Driver* driver, BaseSequentialStream* stdout)
{
 8008af8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008afc:	4605      	mov	r5, r0
 8008afe:	460c      	mov	r4, r1
    max2870SpiState(driver, true);
 8008b00:	f7ff fb14 	bl	800812c <max2870SpiState.constprop.0>
    if(driver->enabled) {
 8008b04:	792b      	ldrb	r3, [r5, #4]
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	f000 80c8 	beq.w	8008c9c <max2870StatusPrint+0x1a4>
        if(driver->currentTune.isLocked) {
 8008b0c:	7f2b      	ldrb	r3, [r5, #28]
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	f000 8092 	beq.w	8008c38 <max2870StatusPrint+0x140>
            chprintf(stdout, "PLL Locked"SHELL_NEWLINE_STR);
 8008b14:	4964      	ldr	r1, [pc, #400]	; (8008ca8 <max2870StatusPrint+0x1b0>)
        } else {
            chprintf(stdout, "PLL UNLOCK!!!"SHELL_NEWLINE_STR);
 8008b16:	4620      	mov	r0, r4
 8008b18:	f7ff fe1b 	bl	8008752 <chprintf>
        }

        printfFixed(stdout, 30, "Divided VCO Frequency:");
 8008b1c:	211e      	movs	r1, #30
 8008b1e:	4a63      	ldr	r2, [pc, #396]	; (8008cac <max2870StatusPrint+0x1b4>)
 8008b20:	4620      	mov	r0, r4
 8008b22:	f7ff ffc3 	bl	8008aac <printfFixed>
        chprintf(stdout, "%u kHz"SHELL_NEWLINE_STR, driver->currentTune.frequency/1000);
 8008b26:	e9d5 0102 	ldrd	r0, r1, [r5, #8]
 8008b2a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008b2e:	2300      	movs	r3, #0
 8008b30:	f7fa fe4c 	bl	80037cc <__aeabi_uldivmod>
 8008b34:	4602      	mov	r2, r0
 8008b36:	460b      	mov	r3, r1
 8008b38:	4620      	mov	r0, r4
 8008b3a:	495d      	ldr	r1, [pc, #372]	; (8008cb0 <max2870StatusPrint+0x1b8>)
 8008b3c:	f7ff fe09 	bl	8008752 <chprintf>
        printfFixed(stdout, 30, "Output A Power:");
 8008b40:	4a5c      	ldr	r2, [pc, #368]	; (8008cb4 <max2870StatusPrint+0x1bc>)
 8008b42:	211e      	movs	r1, #30
 8008b44:	4620      	mov	r0, r4
 8008b46:	f7ff ffb1 	bl	8008aac <printfFixed>
        if(driver->currentTune.powerA != -127) {
 8008b4a:	f995 2010 	ldrsb.w	r2, [r5, #16]
 8008b4e:	f112 0f7f 	cmn.w	r2, #127	; 0x7f
 8008b52:	d073      	beq.n	8008c3c <max2870StatusPrint+0x144>
            chprintf(stdout, "%d dBm"SHELL_NEWLINE_STR, driver->currentTune.powerA);
 8008b54:	4620      	mov	r0, r4
 8008b56:	4958      	ldr	r1, [pc, #352]	; (8008cb8 <max2870StatusPrint+0x1c0>)
 8008b58:	f7ff fdfb 	bl	8008752 <chprintf>
        } else {
            chprintf(stdout, "Off"SHELL_NEWLINE_STR);
        }
        printfFixed(stdout, 30, "Output B Power:");
 8008b5c:	4a57      	ldr	r2, [pc, #348]	; (8008cbc <max2870StatusPrint+0x1c4>)
 8008b5e:	211e      	movs	r1, #30
 8008b60:	4620      	mov	r0, r4
 8008b62:	f7ff ffa3 	bl	8008aac <printfFixed>
        if(driver->currentTune.powerB != -127) {
 8008b66:	f995 2011 	ldrsb.w	r2, [r5, #17]
 8008b6a:	f112 0f7f 	cmn.w	r2, #127	; 0x7f
 8008b6e:	d06a      	beq.n	8008c46 <max2870StatusPrint+0x14e>
            chprintf(stdout, "%d dBm"SHELL_NEWLINE_STR, driver->currentTune.powerB);
 8008b70:	4620      	mov	r0, r4
 8008b72:	4951      	ldr	r1, [pc, #324]	; (8008cb8 <max2870StatusPrint+0x1c0>)
 8008b74:	f7ff fded 	bl	8008752 <chprintf>
        } else {
            chprintf(stdout, "Off"SHELL_NEWLINE_STR);
        }
        if(driver->currentTune.isLocked) {
 8008b78:	7f2b      	ldrb	r3, [r5, #28]
 8008b7a:	b14b      	cbz	r3, 8008b90 <max2870StatusPrint+0x98>
            printfFixed(stdout, 30, "Lock Time:");
 8008b7c:	211e      	movs	r1, #30
 8008b7e:	4a50      	ldr	r2, [pc, #320]	; (8008cc0 <max2870StatusPrint+0x1c8>)
 8008b80:	4620      	mov	r0, r4
 8008b82:	f7ff ff93 	bl	8008aac <printfFixed>
            chprintf(stdout, "%u cycles"SHELL_NEWLINE_STR, driver->currentTune.lockTime);
 8008b86:	4620      	mov	r0, r4
 8008b88:	7eea      	ldrb	r2, [r5, #27]
 8008b8a:	494e      	ldr	r1, [pc, #312]	; (8008cc4 <max2870StatusPrint+0x1cc>)
 8008b8c:	f7ff fde1 	bl	8008752 <chprintf>
        }
        printfFixed(stdout, 30, "PFD Frequency:");
 8008b90:	211e      	movs	r1, #30
 8008b92:	4a4d      	ldr	r2, [pc, #308]	; (8008cc8 <max2870StatusPrint+0x1d0>)
 8008b94:	4620      	mov	r0, r4
 8008b96:	f7ff ff89 	bl	8008aac <printfFixed>
        chprintf(stdout, "%u kHz"SHELL_NEWLINE_STR, driver->pfdFrequency/1000);
 8008b9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008b9e:	f8d5 20b8 	ldr.w	r2, [r5, #184]	; 0xb8
 8008ba2:	4943      	ldr	r1, [pc, #268]	; (8008cb0 <max2870StatusPrint+0x1b8>)
 8008ba4:	fbb2 f2f3 	udiv	r2, r2, r3
 8008ba8:	4620      	mov	r0, r4
 8008baa:	f7ff fdd2 	bl	8008752 <chprintf>
        printfFixed(stdout, 30, "Step Frequency:");
 8008bae:	211e      	movs	r1, #30
 8008bb0:	4a46      	ldr	r2, [pc, #280]	; (8008ccc <max2870StatusPrint+0x1d4>)
 8008bb2:	4620      	mov	r0, r4
 8008bb4:	f7ff ff7a 	bl	8008aac <printfFixed>
        chprintf(stdout, "%u Hz"SHELL_NEWLINE_STR, driver->config->stepFrequency);
 8008bb8:	682b      	ldr	r3, [r5, #0]
 8008bba:	4945      	ldr	r1, [pc, #276]	; (8008cd0 <max2870StatusPrint+0x1d8>)
 8008bbc:	699a      	ldr	r2, [r3, #24]
 8008bbe:	4620      	mov	r0, r4
 8008bc0:	f7ff fdc7 	bl	8008752 <chprintf>
        printfFixed(stdout, 30, "BS Divider:");
 8008bc4:	211e      	movs	r1, #30
 8008bc6:	4a43      	ldr	r2, [pc, #268]	; (8008cd4 <max2870StatusPrint+0x1dc>)
 8008bc8:	4620      	mov	r0, r4
 8008bca:	f7ff ff6f 	bl	8008aac <printfFixed>
        chprintf(stdout, "%u"SHELL_NEWLINE_STR, driver->bsValue);
 8008bce:	f8b5 20c4 	ldrh.w	r2, [r5, #196]	; 0xc4
 8008bd2:	4941      	ldr	r1, [pc, #260]	; (8008cd8 <max2870StatusPrint+0x1e0>)
 8008bd4:	4620      	mov	r0, r4
 8008bd6:	f7ff fdbc 	bl	8008752 <chprintf>
        printfFixed(stdout, 30, "Reload Counter:");
 8008bda:	211e      	movs	r1, #30
 8008bdc:	4a3f      	ldr	r2, [pc, #252]	; (8008cdc <max2870StatusPrint+0x1e4>)
 8008bde:	4620      	mov	r0, r4
 8008be0:	f7ff ff64 	bl	8008aac <printfFixed>
        chprintf(stdout, "%u"SHELL_NEWLINE_STR, driver->pllMonReloadCounter);
 8008be4:	f895 20e4 	ldrb.w	r2, [r5, #228]	; 0xe4
 8008be8:	493b      	ldr	r1, [pc, #236]	; (8008cd8 <max2870StatusPrint+0x1e0>)
 8008bea:	4620      	mov	r0, r4
 8008bec:	f7ff fdb1 	bl	8008752 <chprintf>

        printfFixed(stdout, 30, "Current VCO Band From Cache:");
 8008bf0:	211e      	movs	r1, #30
 8008bf2:	4a3b      	ldr	r2, [pc, #236]	; (8008ce0 <max2870StatusPrint+0x1e8>)
 8008bf4:	4620      	mov	r0, r4
 8008bf6:	f7ff ff59 	bl	8008aac <printfFixed>
        chprintf(stdout, "%u"SHELL_NEWLINE_STR, !driver->currentTune.usedVCOAutotune);
 8008bfa:	7f6a      	ldrb	r2, [r5, #29]
 8008bfc:	4936      	ldr	r1, [pc, #216]	; (8008cd8 <max2870StatusPrint+0x1e0>)
 8008bfe:	f082 0201 	eor.w	r2, r2, #1
 8008c02:	4620      	mov	r0, r4
 8008c04:	f7ff fda5 	bl	8008752 <chprintf>
        printfFixed(stdout, 30, "Current VCO Band:");
 8008c08:	211e      	movs	r1, #30
 8008c0a:	4a36      	ldr	r2, [pc, #216]	; (8008ce4 <max2870StatusPrint+0x1ec>)
 8008c0c:	4620      	mov	r0, r4
 8008c0e:	f7ff ff4d 	bl	8008aac <printfFixed>
        chprintf(stdout, "%u"SHELL_NEWLINE_STR, driver->currentTune.usedVCO);
 8008c12:	7e6a      	ldrb	r2, [r5, #25]
 8008c14:	4930      	ldr	r1, [pc, #192]	; (8008cd8 <max2870StatusPrint+0x1e0>)
 8008c16:	4620      	mov	r0, r4
 8008c18:	f7ff fd9b 	bl	8008752 <chprintf>

        printfFixed(stdout, 30, "Current VCO Tuning Voltage:");
 8008c1c:	211e      	movs	r1, #30
 8008c1e:	4620      	mov	r0, r4
 8008c20:	4a31      	ldr	r2, [pc, #196]	; (8008ce8 <max2870StatusPrint+0x1f0>)
 8008c22:	f7ff ff43 	bl	8008aac <printfFixed>
        switch(driver->currentTune.adcVoltage) {
 8008c26:	7eab      	ldrb	r3, [r5, #26]
 8008c28:	2b06      	cmp	r3, #6
 8008c2a:	d835      	bhi.n	8008c98 <max2870StatusPrint+0x1a0>
 8008c2c:	e8df f003 	tbb	[pc, r3]
 8008c30:	2e2e2c10 	.word	0x2e2e2c10
 8008c34:	3030      	.short	0x3030
 8008c36:	32          	.byte	0x32
 8008c37:	00          	.byte	0x00
            chprintf(stdout, "PLL UNLOCK!!!"SHELL_NEWLINE_STR);
 8008c38:	492c      	ldr	r1, [pc, #176]	; (8008cec <max2870StatusPrint+0x1f4>)
 8008c3a:	e76c      	b.n	8008b16 <max2870StatusPrint+0x1e>
            chprintf(stdout, "Off"SHELL_NEWLINE_STR);
 8008c3c:	4620      	mov	r0, r4
 8008c3e:	492c      	ldr	r1, [pc, #176]	; (8008cf0 <max2870StatusPrint+0x1f8>)
 8008c40:	f7ff fd87 	bl	8008752 <chprintf>
 8008c44:	e78a      	b.n	8008b5c <max2870StatusPrint+0x64>
            chprintf(stdout, "Off"SHELL_NEWLINE_STR);
 8008c46:	4620      	mov	r0, r4
 8008c48:	4929      	ldr	r1, [pc, #164]	; (8008cf0 <max2870StatusPrint+0x1f8>)
 8008c4a:	f7ff fd82 	bl	8008752 <chprintf>
 8008c4e:	e793      	b.n	8008b78 <max2870StatusPrint+0x80>
            case 0:
                chprintf(stdout, "0.2");
 8008c50:	4928      	ldr	r1, [pc, #160]	; (8008cf4 <max2870StatusPrint+0x1fc>)
                break;
            case 6:
                chprintf(stdout, "2.3");
                break;
            default:
                chprintf(stdout, "3");
 8008c52:	4620      	mov	r0, r4
 8008c54:	f7ff fd7d 	bl	8008752 <chprintf>
                break;
        }
        chprintf(stdout, "V"SHELL_NEWLINE_STR"Registers:"SHELL_NEWLINE_STR);
 8008c58:	4620      	mov	r0, r4
 8008c5a:	4927      	ldr	r1, [pc, #156]	; (8008cf8 <max2870StatusPrint+0x200>)
 8008c5c:	f7ff fd79 	bl	8008752 <chprintf>
        for(int i=0; i<7; i++) {
 8008c60:	2600      	movs	r6, #0
            chprintf(stdout, "\t%u: %08x"SHELL_NEWLINE_STR, i, driver->registers[i]);
 8008c62:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8008cfc <max2870StatusPrint+0x204>
 8008c66:	f105 07c8 	add.w	r7, r5, #200	; 0xc8
 8008c6a:	4632      	mov	r2, r6
 8008c6c:	4641      	mov	r1, r8
 8008c6e:	4620      	mov	r0, r4
 8008c70:	f857 3b04 	ldr.w	r3, [r7], #4
        for(int i=0; i<7; i++) {
 8008c74:	3601      	adds	r6, #1
            chprintf(stdout, "\t%u: %08x"SHELL_NEWLINE_STR, i, driver->registers[i]);
 8008c76:	f7ff fd6c 	bl	8008752 <chprintf>
        for(int i=0; i<7; i++) {
 8008c7a:	2e07      	cmp	r6, #7
 8008c7c:	d1f5      	bne.n	8008c6a <max2870StatusPrint+0x172>
    if(enable) {
 8008c7e:	4628      	mov	r0, r5
        }
    } else {
        chprintf(stdout, "Low power mode"SHELL_NEWLINE_STR);
    }
    max2870SpiState(driver, false);
}
 8008c80:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008c84:	f7ff bd20 	b.w	80086c8 <max2870SpiState.part.0>
                chprintf(stdout, "0.6");
 8008c88:	491d      	ldr	r1, [pc, #116]	; (8008d00 <max2870StatusPrint+0x208>)
 8008c8a:	e7e2      	b.n	8008c52 <max2870StatusPrint+0x15a>
                chprintf(stdout, "1");
 8008c8c:	491d      	ldr	r1, [pc, #116]	; (8008d04 <max2870StatusPrint+0x20c>)
 8008c8e:	e7e0      	b.n	8008c52 <max2870StatusPrint+0x15a>
                chprintf(stdout, "1.7");
 8008c90:	491d      	ldr	r1, [pc, #116]	; (8008d08 <max2870StatusPrint+0x210>)
 8008c92:	e7de      	b.n	8008c52 <max2870StatusPrint+0x15a>
                chprintf(stdout, "2.3");
 8008c94:	491d      	ldr	r1, [pc, #116]	; (8008d0c <max2870StatusPrint+0x214>)
 8008c96:	e7dc      	b.n	8008c52 <max2870StatusPrint+0x15a>
                chprintf(stdout, "3");
 8008c98:	491d      	ldr	r1, [pc, #116]	; (8008d10 <max2870StatusPrint+0x218>)
 8008c9a:	e7da      	b.n	8008c52 <max2870StatusPrint+0x15a>
        chprintf(stdout, "Low power mode"SHELL_NEWLINE_STR);
 8008c9c:	4620      	mov	r0, r4
 8008c9e:	491d      	ldr	r1, [pc, #116]	; (8008d14 <max2870StatusPrint+0x21c>)
 8008ca0:	f7ff fd57 	bl	8008752 <chprintf>
 8008ca4:	e7eb      	b.n	8008c7e <max2870StatusPrint+0x186>
 8008ca6:	bf00      	nop
 8008ca8:	0800be52 	.word	0x0800be52
 8008cac:	0800be6f 	.word	0x0800be6f
 8008cb0:	0800c146 	.word	0x0800c146
 8008cb4:	0800be86 	.word	0x0800be86
 8008cb8:	0800be96 	.word	0x0800be96
 8008cbc:	0800bea5 	.word	0x0800bea5
 8008cc0:	0800beb5 	.word	0x0800beb5
 8008cc4:	0800bec0 	.word	0x0800bec0
 8008cc8:	0800becc 	.word	0x0800becc
 8008ccc:	0800bedb 	.word	0x0800bedb
 8008cd0:	0800beeb 	.word	0x0800beeb
 8008cd4:	0800bef3 	.word	0x0800bef3
 8008cd8:	0800c199 	.word	0x0800c199
 8008cdc:	0800beff 	.word	0x0800beff
 8008ce0:	0800bf0f 	.word	0x0800bf0f
 8008ce4:	0800bf2c 	.word	0x0800bf2c
 8008ce8:	0800bf3e 	.word	0x0800bf3e
 8008cec:	0800be5f 	.word	0x0800be5f
 8008cf0:	0800be9f 	.word	0x0800be9f
 8008cf4:	0800bf5a 	.word	0x0800bf5a
 8008cf8:	0800bf6a 	.word	0x0800bf6a
 8008cfc:	0800bf7a 	.word	0x0800bf7a
 8008d00:	0800bf5e 	.word	0x0800bf5e
 8008d04:	0800bbac 	.word	0x0800bbac
 8008d08:	0800bf62 	.word	0x0800bf62
 8008d0c:	0800bf66 	.word	0x0800bf66
 8008d10:	0800bf68 	.word	0x0800bf68
 8008d14:	0800bf86 	.word	0x0800bf86

08008d18 <gpioCPUStatus>:
{
 8008d18:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008d1c:	460d      	mov	r5, r1
    chprintf(chp, "\tDriver: HAL (MM 0x%08x)"SHELL_NEWLINE_STR, (uint32_t)driver->driver);
 8008d1e:	6802      	ldr	r2, [r0, #0]
{
 8008d20:	4606      	mov	r6, r0
    chprintf(chp, "\tDriver: HAL (MM 0x%08x)"SHELL_NEWLINE_STR, (uint32_t)driver->driver);
 8008d22:	4915      	ldr	r1, [pc, #84]	; (8008d78 <gpioCPUStatus+0x60>)
 8008d24:	4628      	mov	r0, r5
 8008d26:	f7ff fd14 	bl	8008752 <chprintf>
 8008d2a:	2400      	movs	r4, #0
    uint8_t mode = gpioCPUGetPinMode(driver, pin);
 8008d2c:	f8df 804c 	ldr.w	r8, [pc, #76]	; 8008d7c <gpioCPUStatus+0x64>
 8008d30:	f8df 904c 	ldr.w	r9, [pc, #76]	; 8008d80 <gpioCPUStatus+0x68>
        printfFixed(chp, 32, "\tPin %u (%s):",
 8008d34:	4f13      	ldr	r7, [pc, #76]	; (8008d84 <gpioCPUStatus+0x6c>)
    uint8_t mode = gpioCPUGetPinMode(driver, pin);
 8008d36:	4621      	mov	r1, r4
 8008d38:	4630      	mov	r0, r6
 8008d3a:	f7fc fa89 	bl	8005250 <gpioCPUGetPinMode>
    switch(mode) {
 8008d3e:	1e43      	subs	r3, r0, #1
 8008d40:	b2db      	uxtb	r3, r3
 8008d42:	2b10      	cmp	r3, #16
    uint8_t mode = gpioCPUGetPinMode(driver, pin);
 8008d44:	bf8c      	ite	hi
 8008d46:	4643      	movhi	r3, r8
 8008d48:	f859 3023 	ldrls.w	r3, [r9, r3, lsl #2]
        printfFixed(chp, 32, "\tPin %u (%s):",
 8008d4c:	463a      	mov	r2, r7
 8008d4e:	2120      	movs	r1, #32
 8008d50:	9300      	str	r3, [sp, #0]
 8008d52:	4628      	mov	r0, r5
 8008d54:	4623      	mov	r3, r4
 8008d56:	f7ff fea9 	bl	8008aac <printfFixed>
        chprintf(chp,  "%u"SHELL_NEWLINE_STR, palReadPad((ioportid_t)driver->driver, i));
 8008d5a:	6833      	ldr	r3, [r6, #0]
 8008d5c:	4628      	mov	r0, r5
 8008d5e:	689a      	ldr	r2, [r3, #8]
 8008d60:	4909      	ldr	r1, [pc, #36]	; (8008d88 <gpioCPUStatus+0x70>)
 8008d62:	40e2      	lsrs	r2, r4
 8008d64:	f002 0201 	and.w	r2, r2, #1
    for(uint8_t i=0; i<16; i++) {
 8008d68:	3401      	adds	r4, #1
        chprintf(chp,  "%u"SHELL_NEWLINE_STR, palReadPad((ioportid_t)driver->driver, i));
 8008d6a:	f7ff fcf2 	bl	8008752 <chprintf>
    for(uint8_t i=0; i<16; i++) {
 8008d6e:	2c10      	cmp	r4, #16
 8008d70:	d1e1      	bne.n	8008d36 <gpioCPUStatus+0x1e>
}
 8008d72:	b003      	add	sp, #12
 8008d74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008d78:	0800bf97 	.word	0x0800bf97
 8008d7c:	0800bac2 	.word	0x0800bac2
 8008d80:	0800c808 	.word	0x0800c808
 8008d84:	0800bfb2 	.word	0x0800bfb2
 8008d88:	0800c199 	.word	0x0800c199

08008d8c <syslog>:
};
static const BaseSequentialStream syslogStream = {.vmt = &syslogVMT};


void syslog(const char *format, ...)
{
 8008d8c:	b40f      	push	{r0, r1, r2, r3}
 8008d8e:	b573      	push	{r0, r1, r4, r5, r6, lr}
    va_list args;
    va_start(args, format);

    xSemaphoreTake(syslogSemaphore, portMAX_DELAY);
 8008d90:	4d16      	ldr	r5, [pc, #88]	; (8008dec <syslog+0x60>)
{
 8008d92:	ab06      	add	r3, sp, #24
 8008d94:	f853 6b04 	ldr.w	r6, [r3], #4
    queue->lenHeaderStart = queue->writePtr;
 8008d98:	4c15      	ldr	r4, [pc, #84]	; (8008df0 <syslog+0x64>)
    xSemaphoreTake(syslogSemaphore, portMAX_DELAY);
 8008d9a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8008d9e:	6828      	ldr	r0, [r5, #0]
    va_start(args, format);
 8008da0:	9301      	str	r3, [sp, #4]
    xSemaphoreTake(syslogSemaphore, portMAX_DELAY);
 8008da2:	f7fc ff1f 	bl	8005be4 <xQueueSemaphoreTake>
 8008da6:	6923      	ldr	r3, [r4, #16]
    packetQueueWriteByte(queue, 0x00);
 8008da8:	2000      	movs	r0, #0
    queue->lenHeaderStart = queue->writePtr;
 8008daa:	61e3      	str	r3, [r4, #28]
    packetQueueWriteByte(queue, 0x00);
 8008dac:	f7fd f8e4 	bl	8005f78 <packetQueueWriteByte.constprop.0>
    packetQueueWriteByte(queue, 0x00);
 8008db0:	2000      	movs	r0, #0
 8008db2:	f7fd f8e1 	bl	8005f78 <packetQueueWriteByte.constprop.0>
    queue->pktLen = 0;
 8008db6:	2300      	movs	r3, #0
 8008db8:	61a3      	str	r3, [r4, #24]
 8008dba:	f7fc faa1 	bl	8005300 <vPortValidateInterruptPriority>
    packetQueueStartWritePacket(&syslogQueue);
    chprintf((BaseSequentialStream*)&syslogStream, "[%-11u] ", osalOsGetSystemTimeX());
 8008dbe:	4c0d      	ldr	r4, [pc, #52]	; (8008df4 <syslog+0x68>)
 8008dc0:	4b0d      	ldr	r3, [pc, #52]	; (8008df8 <syslog+0x6c>)
 8008dc2:	4620      	mov	r0, r4
 8008dc4:	681a      	ldr	r2, [r3, #0]
 8008dc6:	490d      	ldr	r1, [pc, #52]	; (8008dfc <syslog+0x70>)
 8008dc8:	f7ff fcc3 	bl	8008752 <chprintf>
    chvprintf((BaseSequentialStream*)&syslogStream, format, args);
 8008dcc:	4631      	mov	r1, r6
 8008dce:	9a01      	ldr	r2, [sp, #4]
 8008dd0:	4620      	mov	r0, r4
 8008dd2:	f7fd fe8d 	bl	8006af0 <chvprintf>
    packetQueueEndWritePacket(&syslogQueue);
 8008dd6:	f7fd f923 	bl	8006020 <packetQueueEndWritePacket.constprop.0>
    xSemaphoreGive(syslogSemaphore);
 8008dda:	6828      	ldr	r0, [r5, #0]
 8008ddc:	f7ff fb54 	bl	8008488 <xQueueGenericSend.constprop.0>

    va_end(args);
}
 8008de0:	b002      	add	sp, #8
 8008de2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008de6:	b004      	add	sp, #16
 8008de8:	4770      	bx	lr
 8008dea:	bf00      	nop
 8008dec:	20001334 	.word	0x20001334
 8008df0:	20001310 	.word	0x20001310
 8008df4:	0800cbc8 	.word	0x0800cbc8
 8008df8:	20001648 	.word	0x20001648
 8008dfc:	0800bfc0 	.word	0x0800bfc0

08008e00 <shellTerminationCallback>:
 8008e00:	4b0e      	ldr	r3, [pc, #56]	; (8008e3c <shellTerminationCallback+0x3c>)
{
 8008e02:	b570      	push	{r4, r5, r6, lr}
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	6ddc      	ldr	r4, [r3, #92]	; 0x5c
    if(activeShell) {
 8008e08:	b1bc      	cbz	r4, 8008e3a <shellTerminationCallback+0x3a>
        if(activeShell->shellCfg.sc_histbuf) {
 8008e0a:	68e0      	ldr	r0, [r4, #12]
 8008e0c:	b108      	cbz	r0, 8008e12 <shellTerminationCallback+0x12>
            vPortFree(activeShell->shellCfg.sc_histbuf);
 8008e0e:	f7fc fd75 	bl	80058fc <vPortFree>
        chprintf(activeShell->stream, "Shell 0x%08x closed.", activeShell);
 8008e12:	4622      	mov	r2, r4
 8008e14:	490a      	ldr	r1, [pc, #40]	; (8008e40 <shellTerminationCallback+0x40>)
 8008e16:	6960      	ldr	r0, [r4, #20]
 8008e18:	f7ff fc9b 	bl	8008752 <chprintf>
        syslog("Shell 0x%08x closed.", activeShell);
 8008e1c:	4808      	ldr	r0, [pc, #32]	; (8008e40 <shellTerminationCallback+0x40>)
 8008e1e:	4621      	mov	r1, r4
 8008e20:	f7ff ffb4 	bl	8008d8c <syslog>
        void *param = activeShell->param;
 8008e24:	e9d4 5606 	ldrd	r5, r6, [r4, #24]
        vPortFree(activeShell);
 8008e28:	4620      	mov	r0, r4
 8008e2a:	f7fc fd67 	bl	80058fc <vPortFree>
        if(callback) {
 8008e2e:	b125      	cbz	r5, 8008e3a <shellTerminationCallback+0x3a>
            callback(param);
 8008e30:	4630      	mov	r0, r6
 8008e32:	462b      	mov	r3, r5
}
 8008e34:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            callback(param);
 8008e38:	4718      	bx	r3
}
 8008e3a:	bd70      	pop	{r4, r5, r6, pc}
 8008e3c:	200011a8 	.word	0x200011a8
 8008e40:	0800bfc9 	.word	0x0800bfc9
 8008e44:	00000000 	.word	0x00000000

08008e48 <max2870TuneNoLock>:
{
 8008e48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e4c:	460c      	mov	r4, r1
 8008e4e:	b08b      	sub	sp, #44	; 0x2c
 8008e50:	4605      	mov	r5, r0
    uint32_t registers[6] = {};
 8008e52:	2218      	movs	r2, #24
 8008e54:	2100      	movs	r1, #0
 8008e56:	a804      	add	r0, sp, #16
 8008e58:	f002 fcdc 	bl	800b814 <memset>
    uint64_t frequency = tune->frequency;
 8008e5c:	e9d4 6800 	ldrd	r6, r8, [r4]
    if(frequency == 0) {
 8008e60:	ea56 0308 	orrs.w	r3, r6, r8
 8008e64:	d107      	bne.n	8008e76 <max2870TuneNoLock+0x2e>
        max2870Disable(driver);
 8008e66:	4628      	mov	r0, r5
 8008e68:	f7ff fad4 	bl	8008414 <max2870Disable>
        return TUNE_OK;
 8008e6c:	2700      	movs	r7, #0
}
 8008e6e:	4638      	mov	r0, r7
 8008e70:	b00b      	add	sp, #44	; 0x2c
 8008e72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(frequency > MAX2870_VCO_MAX_FREQUENCY || frequency < MAX2870_VCO_MIN_FREQUENCY/128) {
 8008e76:	4bae      	ldr	r3, [pc, #696]	; (8009130 <max2870TuneNoLock+0x2e8>)
 8008e78:	49ae      	ldr	r1, [pc, #696]	; (8009134 <max2870TuneNoLock+0x2ec>)
 8008e7a:	18f3      	adds	r3, r6, r3
 8008e7c:	f168 0200 	sbc.w	r2, r8, #0
 8008e80:	4299      	cmp	r1, r3
 8008e82:	f04f 0301 	mov.w	r3, #1
 8008e86:	4193      	sbcs	r3, r2
 8008e88:	f0c0 81c5 	bcc.w	8009216 <max2870TuneNoLock+0x3ce>
 8008e8c:	2700      	movs	r7, #0
    while(frequency < MAX2870_VCO_MIN_FREQUENCY) {
 8008e8e:	463b      	mov	r3, r7
 8008e90:	4aa9      	ldr	r2, [pc, #676]	; (8009138 <max2870TuneNoLock+0x2f0>)
 8008e92:	42b2      	cmp	r2, r6
 8008e94:	eb73 0008 	sbcs.w	r0, r3, r8
 8008e98:	f107 0101 	add.w	r1, r7, #1
 8008e9c:	f080 80fd 	bcs.w	800909a <max2870TuneNoLock+0x252>
    uint32_t steps = frequency / driver->config->stepFrequency;
 8008ea0:	f8d5 a000 	ldr.w	sl, [r5]
 8008ea4:	2300      	movs	r3, #0
 8008ea6:	f8da 2018 	ldr.w	r2, [sl, #24]
 8008eaa:	4630      	mov	r0, r6
 8008eac:	4641      	mov	r1, r8
 8008eae:	f7fa fc8d 	bl	80037cc <__aeabi_uldivmod>
    uint32_t pllN = steps / driver->fracDivider;
 8008eb2:	f8b5 90bc 	ldrh.w	r9, [r5, #188]	; 0xbc
    if(pllN < 16 || pllN > 4091) {
 8008eb6:	f640 73eb 	movw	r3, #4075	; 0xfeb
    uint32_t pllN = steps / driver->fracDivider;
 8008eba:	fbb0 f1f9 	udiv	r1, r0, r9
    if(pllN < 16 || pllN > 4091) {
 8008ebe:	f1a1 0c10 	sub.w	ip, r1, #16
 8008ec2:	459c      	cmp	ip, r3
    uint32_t pllN = steps / driver->fracDivider;
 8008ec4:	464a      	mov	r2, r9
    uint32_t steps = frequency / driver->config->stepFrequency;
 8008ec6:	9001      	str	r0, [sp, #4]
    if(pllN < 16 || pllN > 4091) {
 8008ec8:	f200 81a8 	bhi.w	800921c <max2870TuneNoLock+0x3d4>
    uint16_t pllFracF = steps - (pllN * driver->fracDivider);
 8008ecc:	fb01 0019 	mls	r0, r1, r9, r0
 8008ed0:	b280      	uxth	r0, r0
    if(pllFracF) {
 8008ed2:	2800      	cmp	r0, #0
 8008ed4:	f000 80ef 	beq.w	80090b6 <max2870TuneNoLock+0x26e>
        uint16_t pllFracGcd = gcd(pllFracF, pllFracM);
 8008ed8:	4603      	mov	r3, r0
    if (v == 0) return u;
 8008eda:	f1b9 0f00 	cmp.w	r9, #0
 8008ede:	d018      	beq.n	8008f12 <max2870TuneNoLock+0xca>
    for (shift = 0; ((u | v) & 1) == 0; ++shift) {
 8008ee0:	f04f 0c00 	mov.w	ip, #0
 8008ee4:	ea43 0e02 	orr.w	lr, r3, r2
 8008ee8:	f01e 0f01 	tst.w	lr, #1
 8008eec:	f000 80da 	beq.w	80090a4 <max2870TuneNoLock+0x25c>
    while ((u & 1) == 0) {
 8008ef0:	f013 0f01 	tst.w	r3, #1
 8008ef4:	f000 80db 	beq.w	80090ae <max2870TuneNoLock+0x266>
        while ((v & 1) == 0) {
 8008ef8:	f012 0f01 	tst.w	r2, #1
 8008efc:	f000 80d9 	beq.w	80090b2 <max2870TuneNoLock+0x26a>
        if (u > v) {
 8008f00:	429a      	cmp	r2, r3
 8008f02:	bf3e      	ittt	cc
 8008f04:	469e      	movcc	lr, r3
 8008f06:	4613      	movcc	r3, r2
 8008f08:	4672      	movcc	r2, lr
    } while (v != 0);
 8008f0a:	1ad2      	subs	r2, r2, r3
 8008f0c:	d1f4      	bne.n	8008ef8 <max2870TuneNoLock+0xb0>
    return u << shift;
 8008f0e:	fa03 f30c 	lsl.w	r3, r3, ip
 8008f12:	b29b      	uxth	r3, r3
        pllFracM /= pllFracGcd;
 8008f14:	fbb9 f9f3 	udiv	r9, r9, r3
        pllFracF /= pllFracGcd;
 8008f18:	fbb0 f0f3 	udiv	r0, r0, r3
        registers[1] |= _BV(MAX2870_REG1_CPL_OFFSET);
 8008f1c:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8008f20:	9305      	str	r3, [sp, #20]
    registers[0] |= pllN << MAX2870_REG0_N_OFFSET;
 8008f22:	9b04      	ldr	r3, [sp, #16]
    registers[2] |= driver->refDividerRegister2;
 8008f24:	f8d5 20c0 	ldr.w	r2, [r5, #192]	; 0xc0
    registers[0] |= pllN << MAX2870_REG0_N_OFFSET;
 8008f28:	ea43 33c1 	orr.w	r3, r3, r1, lsl #15
    registers[0] |= pllFracF << MAX2870_REG0_FRAC_OFFSET;
 8008f2c:	ea43 00c0 	orr.w	r0, r3, r0, lsl #3
    registers[1] |= pllFracM << MAX2870_REG1_M_OFFSET;
 8008f30:	9b05      	ldr	r3, [sp, #20]
    registers[4] |= outDivide << MAX2870_REG4_DIVA_OFFSET;
 8008f32:	b2ff      	uxtb	r7, r7
    registers[1] |= pllFracM << MAX2870_REG1_M_OFFSET;
 8008f34:	ea43 03c9 	orr.w	r3, r3, r9, lsl #3
 8008f38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008f3c:	9305      	str	r3, [sp, #20]
    registers[2] |= driver->refDividerRegister2;
 8008f3e:	9b06      	ldr	r3, [sp, #24]
    registers[4] |= outDivide << MAX2870_REG4_DIVA_OFFSET;
 8008f40:	ea4f 5b07 	mov.w	fp, r7, lsl #20
    registers[2] |= driver->refDividerRegister2;
 8008f44:	4313      	orrs	r3, r2
    registers[2] |= 0x6 <<  MAX2870_REG2_MUX_OFFSET;
 8008f46:	f043 52c0 	orr.w	r2, r3, #402653184	; 0x18000000
 8008f4a:	9206      	str	r2, [sp, #24]
    if(!driver->config->invertingLoopFilter) {
 8008f4c:	f89a 200a 	ldrb.w	r2, [sl, #10]
    registers[0] |= pllFracF << MAX2870_REG0_FRAC_OFFSET;
 8008f50:	9004      	str	r0, [sp, #16]
    registers[4] |= outDivide << MAX2870_REG4_DIVA_OFFSET;
 8008f52:	f8cd b020 	str.w	fp, [sp, #32]
    if(!driver->config->invertingLoopFilter) {
 8008f56:	b922      	cbnz	r2, 8008f62 <max2870TuneNoLock+0x11a>
        registers[2] |= _BV(MAX2870_REG2_PDP_OFFSET);
 8008f58:	f043 53c0 	orr.w	r3, r3, #402653184	; 0x18000000
 8008f5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f60:	9306      	str	r3, [sp, #24]
    registers[2] |= driver->config->chargePumpCurrent << MAX2870_REG2_CP_OFFSET;
 8008f62:	f89a 200b 	ldrb.w	r2, [sl, #11]
    registers[2] |= driver->config->spurMode << MAX2870_REG2_SDN_OFFSET;
 8008f66:	f89a 100c 	ldrb.w	r1, [sl, #12]
    registers[2] |= driver->config->chargePumpCurrent << MAX2870_REG2_CP_OFFSET;
 8008f6a:	0253      	lsls	r3, r2, #9
    registers[2] |= driver->config->spurMode << MAX2870_REG2_SDN_OFFSET;
 8008f6c:	ea43 7341 	orr.w	r3, r3, r1, lsl #29
 8008f70:	9906      	ldr	r1, [sp, #24]
    if(driver->pfdFrequency > 32000000) {
 8008f72:	4872      	ldr	r0, [pc, #456]	; (800913c <max2870TuneNoLock+0x2f4>)
    registers[2] |= driver->config->spurMode << MAX2870_REG2_SDN_OFFSET;
 8008f74:	430b      	orrs	r3, r1
    if(driver->pfdFrequency > 32000000) {
 8008f76:	f8d5 10b8 	ldr.w	r1, [r5, #184]	; 0xb8
    registers[2] |= driver->config->spurMode << MAX2870_REG2_SDN_OFFSET;
 8008f7a:	9306      	str	r3, [sp, #24]
    if(driver->pfdFrequency > 32000000) {
 8008f7c:	4281      	cmp	r1, r0
    if(tune->fastLockDurationMicroseconds) {
 8008f7e:	68e0      	ldr	r0, [r4, #12]
        registers[2] |= _BV(MAX2870_REG2_LDS_OFFSET);
 8008f80:	bf84      	itt	hi
 8008f82:	f043 4300 	orrhi.w	r3, r3, #2147483648	; 0x80000000
 8008f86:	9306      	strhi	r3, [sp, #24]
    if(tune->fastLockDurationMicroseconds) {
 8008f88:	b1a0      	cbz	r0, 8008fb4 <max2870TuneNoLock+0x16c>
        if(driver->config->chargePumpCurrent) {
 8008f8a:	2a00      	cmp	r2, #0
 8008f8c:	f040 8149 	bne.w	8009222 <max2870TuneNoLock+0x3da>
        uint32_t tmp = (uint64_t)driver->pfdFrequency * (uint64_t)tune->fastLockDurationMicroseconds / 1000000;
 8008f90:	2300      	movs	r3, #0
 8008f92:	fba1 0100 	umull	r0, r1, r1, r0
 8008f96:	4a6a      	ldr	r2, [pc, #424]	; (8009140 <max2870TuneNoLock+0x2f8>)
 8008f98:	f7fa fc18 	bl	80037cc <__aeabi_uldivmod>
        tmp /= pllFracM;
 8008f9c:	fbb0 f3f9 	udiv	r3, r0, r9
        if(tmp>4095) {
 8008fa0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008fa4:	f080 808f 	bcs.w	80090c6 <max2870TuneNoLock+0x27e>
        if(tmp) {
 8008fa8:	4581      	cmp	r9, r0
 8008faa:	d803      	bhi.n	8008fb4 <max2870TuneNoLock+0x16c>
            registers[3] |= tmp << MAX2870_REG3_CDIV_OFFSET;
 8008fac:	00db      	lsls	r3, r3, #3
 8008fae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008fb2:	9307      	str	r3, [sp, #28]
    if(!tune->outBfundamental) {
 8008fb4:	7aa3      	ldrb	r3, [r4, #10]
 8008fb6:	b913      	cbnz	r3, 8008fbe <max2870TuneNoLock+0x176>
        registers[4] |= _BV(MAX2870_REG4_BDIV_OFFSET);
 8008fb8:	f44b 7300 	orr.w	r3, fp, #512	; 0x200
 8008fbc:	9308      	str	r3, [sp, #32]
    registers[4] |= (driver->bsValue & 0xFF) << MAX2870_REG4_BS_OFFSET;
 8008fbe:	f8b5 20c4 	ldrh.w	r2, [r5, #196]	; 0xc4
    uint16_t vcoIndex = (frequency - MAX2870_VCO_MIN_FREQUENCY) / MAX2870_VCO_INCREMENT;
 8008fc2:	4860      	ldr	r0, [pc, #384]	; (8009144 <max2870TuneNoLock+0x2fc>)
    registers[4] |= (driver->bsValue & 0xFF) << MAX2870_REG4_BS_OFFSET;
 8008fc4:	0313      	lsls	r3, r2, #12
 8008fc6:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
    registers[4] |= (driver->bsValue >> 8) << MAX2870_REG4_BS_MSB_OFFSET;
 8008fca:	0a12      	lsrs	r2, r2, #8
 8008fcc:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8008fd0:	9a08      	ldr	r2, [sp, #32]
    uint16_t vcoIndex = (frequency - MAX2870_VCO_MIN_FREQUENCY) / MAX2870_VCO_INCREMENT;
 8008fd2:	1830      	adds	r0, r6, r0
    registers[4] |= (driver->bsValue >> 8) << MAX2870_REG4_BS_MSB_OFFSET;
 8008fd4:	ea43 0302 	orr.w	r3, r3, r2
    registers[4] |= _BV(MAX2870_REG4_FB_OFFSET);
 8008fd8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008fdc:	9308      	str	r3, [sp, #32]
    uint16_t vcoIndex = (frequency - MAX2870_VCO_MIN_FREQUENCY) / MAX2870_VCO_INCREMENT;
 8008fde:	f168 0100 	sbc.w	r1, r8, #0
 8008fe2:	a351      	add	r3, pc, #324	; (adr r3, 8009128 <max2870TuneNoLock+0x2e0>)
 8008fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fe8:	f7fa fbf0 	bl	80037cc <__aeabi_uldivmod>
    if((driver->vcoCache[vcoIndex] & 0x80) && !tune->useVCOAutotune) {
 8008fec:	eb05 0900 	add.w	r9, r5, r0
 8008ff0:	f999 3020 	ldrsb.w	r3, [r9, #32]
 8008ff4:	f899 2020 	ldrb.w	r2, [r9, #32]
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	da67      	bge.n	80090cc <max2870TuneNoLock+0x284>
 8008ffc:	7c26      	ldrb	r6, [r4, #16]
 8008ffe:	b92e      	cbnz	r6, 800900c <max2870TuneNoLock+0x1c4>
        registers[3] |= (driver->vcoCache[vcoIndex] & 0x3F) << MAX2870_REG3_VCO_OFFSET;
 8009000:	9b07      	ldr	r3, [sp, #28]
 8009002:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
        registers[3] |= _BV(MAX2870_REG3_VAS_SHDN_OFFSET);
 8009006:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800900a:	9307      	str	r3, [sp, #28]
    if(!driver->enabled) {
 800900c:	792b      	ldrb	r3, [r5, #4]
 800900e:	b99b      	cbnz	r3, 8009038 <max2870TuneNoLock+0x1f0>
        if(driver->config->gpioChipEnable != 0xffff) {
 8009010:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009014:	f8ba 0008 	ldrh.w	r0, [sl, #8]
 8009018:	4298      	cmp	r0, r3
 800901a:	d005      	beq.n	8009028 <max2870TuneNoLock+0x1e0>
            gpioSetPin(driver->config->gpioChipEnable, true);
 800901c:	2101      	movs	r1, #1
 800901e:	f7fe fa87 	bl	8007530 <gpioSetPin.isra.0>
            osalThreadSleepMilliseconds(20);
 8009022:	2014      	movs	r0, #20
 8009024:	f7fc ff66 	bl	8005ef4 <vTaskDelay>
        max2870WriteAllRegisters(driver, registers, true);
 8009028:	4628      	mov	r0, r5
 800902a:	2201      	movs	r2, #1
 800902c:	a904      	add	r1, sp, #16
 800902e:	f7ff fa0b 	bl	8008448 <max2870WriteAllRegisters.isra.0>
        osalThreadSleepMilliseconds(20);
 8009032:	2014      	movs	r0, #20
 8009034:	f7fc ff5e 	bl	8005ef4 <vTaskDelay>
        *power = -4;
 8009038:	f04f 0afc 	mov.w	sl, #252	; 0xfc
        *power = 2;
 800903c:	f04f 0b02 	mov.w	fp, #2
    if(*power < -4) {
 8009040:	f994 3008 	ldrsb.w	r3, [r4, #8]
 8009044:	1d18      	adds	r0, r3, #4
 8009046:	da43      	bge.n	80090d0 <max2870TuneNoLock+0x288>
        *power = -127;
 8009048:	2381      	movs	r3, #129	; 0x81
        return registerValue;
 800904a:	2200      	movs	r2, #0
        *power = -127;
 800904c:	7223      	strb	r3, [r4, #8]
        registers[4] |= max2870PowerToRegister(&tune->powerA) << MAX2870_REG4_APWR_OFFSET;
 800904e:	9b08      	ldr	r3, [sp, #32]
 8009050:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
    if(*power < -4) {
 8009054:	f994 2009 	ldrsb.w	r2, [r4, #9]
 8009058:	1d11      	adds	r1, r2, #4
 800905a:	da4f      	bge.n	80090fc <max2870TuneNoLock+0x2b4>
        *power = -127;
 800905c:	2281      	movs	r2, #129	; 0x81
 800905e:	7262      	strb	r2, [r4, #9]
        return registerValue;
 8009060:	2200      	movs	r2, #0
        registers[4] |= max2870PowerToRegister(&tune->powerB) << MAX2870_REG4_BPWR_OFFSET;
 8009062:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8009066:	9308      	str	r3, [sp, #32]
        if(driver->pllMonReloadCounter >= 20) {
 8009068:	f895 30e4 	ldrb.w	r3, [r5, #228]	; 0xe4
            max2870WriteAllRegisters(driver, registers, !driver->enabled);
 800906c:	4628      	mov	r0, r5
        if(driver->pllMonReloadCounter >= 20) {
 800906e:	2b13      	cmp	r3, #19
            driver->pllMonReloadCounter = 0;
 8009070:	bf89      	itett	hi
 8009072:	2300      	movhi	r3, #0
            max2870WriteAllRegisters(driver, registers, !driver->enabled);
 8009074:	792a      	ldrbls	r2, [r5, #4]
            max2870WriteAllRegisters(driver, registers, true);
 8009076:	2201      	movhi	r2, #1
            driver->pllMonReloadCounter = 0;
 8009078:	f885 30e4 	strbhi.w	r3, [r5, #228]	; 0xe4
            max2870WriteAllRegisters(driver, registers, !driver->enabled);
 800907c:	bf98      	it	ls
 800907e:	f082 0201 	eorls.w	r2, r2, #1
 8009082:	a904      	add	r1, sp, #16
 8009084:	f7ff f9e0 	bl	8008448 <max2870WriteAllRegisters.isra.0>
    registerValue = _BV(2); /* Output enabled */
 8009088:	f04f 0800 	mov.w	r8, #0
            spiReceive(driver->config->spiPort, sizeof(lock), &lock);
 800908c:	682a      	ldr	r2, [r5, #0]
 800908e:	6810      	ldr	r0, [r2, #0]
  osalDbgCheck((spip != NULL) && (n > 0U) && (rxbuf != NULL));
 8009090:	2800      	cmp	r0, #0
 8009092:	d159      	bne.n	8009148 <max2870TuneNoLock+0x300>
 8009094:	f7fb fb56 	bl	8004744 <vTaskEndScheduler>
 8009098:	e7fe      	b.n	8009098 <max2870TuneNoLock+0x250>
        frequency *= 2;
 800909a:	19b6      	adds	r6, r6, r6
 800909c:	460f      	mov	r7, r1
 800909e:	eb48 0808 	adc.w	r8, r8, r8
        outDivide++;
 80090a2:	e6f6      	b.n	8008e92 <max2870TuneNoLock+0x4a>
        u >>= 1;
 80090a4:	085b      	lsrs	r3, r3, #1
        v >>= 1;
 80090a6:	0852      	lsrs	r2, r2, #1
    for (shift = 0; ((u | v) & 1) == 0; ++shift) {
 80090a8:	f10c 0c01 	add.w	ip, ip, #1
 80090ac:	e71a      	b.n	8008ee4 <max2870TuneNoLock+0x9c>
        u >>= 1;
 80090ae:	085b      	lsrs	r3, r3, #1
 80090b0:	e71e      	b.n	8008ef0 <max2870TuneNoLock+0xa8>
            v >>= 1;
 80090b2:	0852      	lsrs	r2, r2, #1
 80090b4:	e720      	b.n	8008ef8 <max2870TuneNoLock+0xb0>
        registers[0] |= _BV(MAX2870_REG0_INT_OFFSET);
 80090b6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
        registers[1] |= _BV(MAX2870_REG1_CPOC_OFFSET);
 80090ba:	e9cd 3304 	strd	r3, r3, [sp, #16]
        registers[2] |= _BV(MAX2870_REG2_LDF_OFFSET);
 80090be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80090c2:	9306      	str	r3, [sp, #24]
 80090c4:	e72d      	b.n	8008f22 <max2870TuneNoLock+0xda>
            tmp = 4095;
 80090c6:	f640 73ff 	movw	r3, #4095	; 0xfff
 80090ca:	e76f      	b.n	8008fac <max2870TuneNoLock+0x164>
    bool vcoAutoTune = true;
 80090cc:	2601      	movs	r6, #1
 80090ce:	e79d      	b.n	800900c <max2870TuneNoLock+0x1c4>
    if(*power >= 5) {
 80090d0:	2b04      	cmp	r3, #4
 80090d2:	dd03      	ble.n	80090dc <max2870TuneNoLock+0x294>
        *power = 5;
 80090d4:	2305      	movs	r3, #5
        registerValue |= 3;
 80090d6:	2207      	movs	r2, #7
        *power = 5;
 80090d8:	7223      	strb	r3, [r4, #8]
        registerValue |= 3;
 80090da:	e7b8      	b.n	800904e <max2870TuneNoLock+0x206>
    } else if(*power >= 2) {
 80090dc:	2b01      	cmp	r3, #1
 80090de:	dd03      	ble.n	80090e8 <max2870TuneNoLock+0x2a0>
        registerValue |= 2;
 80090e0:	2206      	movs	r2, #6
        *power = 2;
 80090e2:	f884 b008 	strb.w	fp, [r4, #8]
        registerValue |= 2;
 80090e6:	e7b2      	b.n	800904e <max2870TuneNoLock+0x206>
    } else if(*power >= -1) {
 80090e8:	3301      	adds	r3, #1
        *power = -1;
 80090ea:	bfa5      	ittet	ge
 80090ec:	23ff      	movge	r3, #255	; 0xff
        registerValue |= 1;
 80090ee:	2205      	movge	r2, #5
    registerValue = _BV(2); /* Output enabled */
 80090f0:	2204      	movlt	r2, #4
        *power = -1;
 80090f2:	7223      	strbge	r3, [r4, #8]
        *power = -4;
 80090f4:	bfb8      	it	lt
 80090f6:	f884 a008 	strblt.w	sl, [r4, #8]
 80090fa:	e7a8      	b.n	800904e <max2870TuneNoLock+0x206>
    if(*power >= 5) {
 80090fc:	2a04      	cmp	r2, #4
 80090fe:	dd03      	ble.n	8009108 <max2870TuneNoLock+0x2c0>
        *power = 5;
 8009100:	2205      	movs	r2, #5
 8009102:	7262      	strb	r2, [r4, #9]
        registerValue |= 3;
 8009104:	2207      	movs	r2, #7
 8009106:	e7ac      	b.n	8009062 <max2870TuneNoLock+0x21a>
    } else if(*power >= 2) {
 8009108:	2a01      	cmp	r2, #1
 800910a:	dd03      	ble.n	8009114 <max2870TuneNoLock+0x2cc>
        registerValue |= 2;
 800910c:	2206      	movs	r2, #6
        *power = 2;
 800910e:	f884 b009 	strb.w	fp, [r4, #9]
        registerValue |= 2;
 8009112:	e7a6      	b.n	8009062 <max2870TuneNoLock+0x21a>
    } else if(*power >= -1) {
 8009114:	3201      	adds	r2, #1
        *power = -1;
 8009116:	bfab      	itete	ge
 8009118:	22ff      	movge	r2, #255	; 0xff
    registerValue = _BV(2); /* Output enabled */
 800911a:	2204      	movlt	r2, #4
        *power = -1;
 800911c:	7262      	strbge	r2, [r4, #9]
        *power = -4;
 800911e:	f884 a009 	strblt.w	sl, [r4, #9]
        registerValue |= 1;
 8009122:	bfa8      	it	ge
 8009124:	2205      	movge	r2, #5
        *power = -4;
 8009126:	e79c      	b.n	8009062 <max2870TuneNoLock+0x21a>
 8009128:	01312d00 	.word	0x01312d00
 800912c:	00000000 	.word	0x00000000
 8009130:	fe9a5f44 	.word	0xfe9a5f44
 8009134:	643b1b44 	.word	0x643b1b44
 8009138:	b2d05dff 	.word	0xb2d05dff
 800913c:	01e84800 	.word	0x01e84800
 8009140:	000f4240 	.word	0x000f4240
 8009144:	4d2fa200 	.word	0x4d2fa200
 8009148:	2102      	movs	r1, #2
 800914a:	f10d 020e 	add.w	r2, sp, #14
 800914e:	f7fd fa61 	bl	8006614 <spiReceive.part.0>
            if(timeoutCnt == 255) {
 8009152:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8009156:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800915a:	d148      	bne.n	80091ee <max2870TuneNoLock+0x3a6>
                if(!vcoAutoTune) {
 800915c:	b9d6      	cbnz	r6, 8009194 <max2870TuneNoLock+0x34c>
                    registers[3] &=~ _BV(MAX2870_REG3_VAS_SHDN_OFFSET);
 800915e:	9b07      	ldr	r3, [sp, #28]
    } while(lock != 0xFFFF);
 8009160:	f8bd 200e 	ldrh.w	r2, [sp, #14]
                    registers[3] &=~ _BV(MAX2870_REG3_VAS_SHDN_OFFSET);
 8009164:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8009168:	9307      	str	r3, [sp, #28]
    } while(lock != 0xFFFF);
 800916a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800916e:	429a      	cmp	r2, r3
                    driver->vcoCache[vcoIndex] = 0;
 8009170:	f889 6020 	strb.w	r6, [r9, #32]
                    vcoAutoTune = true;
 8009174:	f04f 0601 	mov.w	r6, #1
    } while(lock != 0xFFFF);
 8009178:	f47f af62 	bne.w	8009040 <max2870TuneNoLock+0x1f8>
    for(int i=0; i<outDivide; i++) {
 800917c:	2100      	movs	r1, #0
    tune->frequency = ((uint64_t)steps * (uint64_t)driver->config->stepFrequency);
 800917e:	682b      	ldr	r3, [r5, #0]
 8009180:	9a01      	ldr	r2, [sp, #4]
 8009182:	699b      	ldr	r3, [r3, #24]
 8009184:	fba3 2302 	umull	r2, r3, r3, r2
 8009188:	e9c4 2300 	strd	r2, r3, [r4]
    for(int i=0; i<outDivide; i++) {
 800918c:	428f      	cmp	r7, r1
 800918e:	dc38      	bgt.n	8009202 <max2870TuneNoLock+0x3ba>
    MAX2870TuneResult result = TUNE_OK;
 8009190:	2700      	movs	r7, #0
 8009192:	e004      	b.n	800919e <max2870TuneNoLock+0x356>
                    syslog("MAX2870 Tuning failed.");
 8009194:	4824      	ldr	r0, [pc, #144]	; (8009228 <max2870TuneNoLock+0x3e0>)
 8009196:	f7ff fdf9 	bl	8008d8c <syslog>
                    result = TUNE_NOT_LOCKED;
 800919a:	f06f 0703 	mvn.w	r7, #3
    reg6 = max2870ReadRegister6(driver);
 800919e:	4628      	mov	r0, r5
 80091a0:	f7ff f8e4 	bl	800836c <max2870ReadRegister6>
    if(vcoAutoTune && result==TUNE_OK) {
 80091a4:	0843      	lsrs	r3, r0, #1
 80091a6:	b136      	cbz	r6, 80091b6 <max2870TuneNoLock+0x36e>
 80091a8:	b92f      	cbnz	r7, 80091b6 <max2870TuneNoLock+0x36e>
        driver->vcoCache[vcoIndex] = 0x80 | ((reg6 >> MAX2870_REG6_V_OFFSET) & 0x3F);
 80091aa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80091ae:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80091b2:	f889 2020 	strb.w	r2, [r9, #32]
    tune->adcVoltage = (reg6 >>MAX2870_REG6_ADC_OFFSET) & 7;
 80091b6:	f3c0 4082 	ubfx	r0, r0, #18, #3
 80091ba:	74a0      	strb	r0, [r4, #18]
    tune->isLocked = (result == TUNE_OK);
 80091bc:	fab7 f087 	clz	r0, r7
    tune->usedVCO = (reg6 >> MAX2870_REG6_V_OFFSET) & 0x3F;
 80091c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80091c4:	7463      	strb	r3, [r4, #17]
    tune->lockTime = timeoutCnt;
 80091c6:	f884 8013 	strb.w	r8, [r4, #19]
    if(driver->config->lockStatus) {
 80091ca:	682b      	ldr	r3, [r5, #0]
    tune->isLocked = (result == TUNE_OK);
 80091cc:	0940      	lsrs	r0, r0, #5
    if(driver->config->lockStatus) {
 80091ce:	69db      	ldr	r3, [r3, #28]
    tune->usedVCOAutotune = vcoAutoTune;
 80091d0:	7566      	strb	r6, [r4, #21]
    tune->isLocked = (result == TUNE_OK);
 80091d2:	7520      	strb	r0, [r4, #20]
    if(driver->config->lockStatus) {
 80091d4:	b103      	cbz	r3, 80091d8 <max2870TuneNoLock+0x390>
        driver->config->lockStatus(tune->isLocked);
 80091d6:	4798      	blx	r3
    driver->enabled = true;
 80091d8:	2301      	movs	r3, #1
    driver->currentTune = *tune;
 80091da:	3508      	adds	r5, #8
    driver->enabled = true;
 80091dc:	f805 3c04 	strb.w	r3, [r5, #-4]
    driver->currentTune = *tune;
 80091e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80091e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80091e4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80091e8:	e885 0003 	stmia.w	r5, {r0, r1}
    return result;
 80091ec:	e63f      	b.n	8008e6e <max2870TuneNoLock+0x26>
        } while(lock != 0xFFFF);
 80091ee:	f8bd 200e 	ldrh.w	r2, [sp, #14]
            timeoutCnt++;
 80091f2:	f108 0801 	add.w	r8, r8, #1
        } while(lock != 0xFFFF);
 80091f6:	429a      	cmp	r2, r3
            timeoutCnt++;
 80091f8:	fa5f f888 	uxtb.w	r8, r8
        } while(lock != 0xFFFF);
 80091fc:	f47f af46 	bne.w	800908c <max2870TuneNoLock+0x244>
 8009200:	e7bc      	b.n	800917c <max2870TuneNoLock+0x334>
        tune->frequency /= 2;
 8009202:	e9d4 3200 	ldrd	r3, r2, [r4]
 8009206:	085b      	lsrs	r3, r3, #1
 8009208:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
 800920c:	0852      	lsrs	r2, r2, #1
 800920e:	e9c4 3200 	strd	r3, r2, [r4]
    for(int i=0; i<outDivide; i++) {
 8009212:	3101      	adds	r1, #1
 8009214:	e7ba      	b.n	800918c <max2870TuneNoLock+0x344>
        return TUNE_FREQUENCY_OUT_OF_RANGE;
 8009216:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800921a:	e628      	b.n	8008e6e <max2870TuneNoLock+0x26>
        return TUNE_PLL_N_OUT_OF_RANGE;
 800921c:	f06f 0701 	mvn.w	r7, #1
 8009220:	e625      	b.n	8008e6e <max2870TuneNoLock+0x26>
            return TUNE_CANT_FASTLOCK;
 8009222:	f06f 0702 	mvn.w	r7, #2
 8009226:	e622      	b.n	8008e6e <max2870TuneNoLock+0x26>
 8009228:	0800bfde 	.word	0x0800bfde

0800922c <max2870DoMonitorTask>:
{
 800922c:	b538      	push	{r3, r4, r5, lr}
 800922e:	4604      	mov	r4, r0
    max2870SpiState(driver, true);
 8009230:	f7fe ff7c 	bl	800812c <max2870SpiState.constprop.0>
    if(driver->enabled) {
 8009234:	7925      	ldrb	r5, [r4, #4]
 8009236:	b165      	cbz	r5, 8009252 <max2870DoMonitorTask+0x26>
        if(driver->pllMonReloadCounter >= 29) {
 8009238:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
 800923c:	2b1c      	cmp	r3, #28
 800923e:	d90d      	bls.n	800925c <max2870DoMonitorTask+0x30>
            max2870WriteAllRegisters(driver, driver->registers, true);
 8009240:	2201      	movs	r2, #1
 8009242:	4620      	mov	r0, r4
 8009244:	f104 01c8 	add.w	r1, r4, #200	; 0xc8
 8009248:	f7ff f8fe 	bl	8008448 <max2870WriteAllRegisters.isra.0>
            driver->pllMonReloadCounter = 0;
 800924c:	2300      	movs	r3, #0
 800924e:	f884 30e4 	strb.w	r3, [r4, #228]	; 0xe4
    if(enable) {
 8009252:	4620      	mov	r0, r4
 8009254:	f7ff fa38 	bl	80086c8 <max2870SpiState.part.0>
}
 8009258:	4628      	mov	r0, r5
 800925a:	bd38      	pop	{r3, r4, r5, pc}
            driver->pllMonReloadCounter++;
 800925c:	3301      	adds	r3, #1
 800925e:	f884 30e4 	strb.w	r3, [r4, #228]	; 0xe4
            uint32_t reg6 = max2870ReadRegister6(driver);
 8009262:	4620      	mov	r0, r4
 8009264:	f7ff f882 	bl	800836c <max2870ReadRegister6>
            driver->currentTune.adcVoltage = (reg6 >>MAX2870_REG6_ADC_OFFSET) & 7;
 8009268:	f3c0 4382 	ubfx	r3, r0, #18, #3
            driver->currentTune.usedVCO = (reg6 >> MAX2870_REG6_V_OFFSET) & 0x3F;
 800926c:	f3c0 0045 	ubfx	r0, r0, #1, #6
            driver->currentTune.adcVoltage = (reg6 >>MAX2870_REG6_ADC_OFFSET) & 7;
 8009270:	76a3      	strb	r3, [r4, #26]
            driver->currentTune.usedVCO = (reg6 >> MAX2870_REG6_V_OFFSET) & 0x3F;
 8009272:	7660      	strb	r0, [r4, #25]
            if(driver->currentTune.adcVoltage == 0 ||
 8009274:	b11b      	cbz	r3, 800927e <max2870DoMonitorTask+0x52>
 8009276:	2b07      	cmp	r3, #7
 8009278:	d001      	beq.n	800927e <max2870DoMonitorTask+0x52>
                    !driver->currentTune.isLocked) {
 800927a:	7f23      	ldrb	r3, [r4, #28]
                    driver->currentTune.adcVoltage == 7 ||
 800927c:	b953      	cbnz	r3, 8009294 <max2870DoMonitorTask+0x68>
                syslog("MAX2870 Lost lock, retuning.");
 800927e:	4806      	ldr	r0, [pc, #24]	; (8009298 <max2870DoMonitorTask+0x6c>)
 8009280:	f7ff fd84 	bl	8008d8c <syslog>
                driver->currentTune.useVCOAutotune = true;
 8009284:	2301      	movs	r3, #1
                max2870TuneNoLock(driver, &driver->currentTune);
 8009286:	4620      	mov	r0, r4
                driver->currentTune.useVCOAutotune = true;
 8009288:	7623      	strb	r3, [r4, #24]
                max2870TuneNoLock(driver, &driver->currentTune);
 800928a:	f104 0108 	add.w	r1, r4, #8
 800928e:	f7ff fddb 	bl	8008e48 <max2870TuneNoLock>
 8009292:	e7de      	b.n	8009252 <max2870DoMonitorTask+0x26>
        didWork = true;
 8009294:	461d      	mov	r5, r3
 8009296:	e7dc      	b.n	8009252 <max2870DoMonitorTask+0x26>
 8009298:	0800bff5 	.word	0x0800bff5

0800929c <max2870Tune>:
{
 800929c:	b538      	push	{r3, r4, r5, lr}
 800929e:	4604      	mov	r4, r0
 80092a0:	460d      	mov	r5, r1
    max2870SpiState(driver, true);
 80092a2:	f7fe ff43 	bl	800812c <max2870SpiState.constprop.0>
    MAX2870TuneResult result = max2870TuneNoLock(driver, tune);
 80092a6:	4629      	mov	r1, r5
 80092a8:	4620      	mov	r0, r4
 80092aa:	f7ff fdcd 	bl	8008e48 <max2870TuneNoLock>
 80092ae:	4605      	mov	r5, r0
    if(enable) {
 80092b0:	4620      	mov	r0, r4
 80092b2:	f7ff fa09 	bl	80086c8 <max2870SpiState.part.0>
}
 80092b6:	4628      	mov	r0, r5
 80092b8:	bd38      	pop	{r3, r4, r5, pc}
	...

080092bc <converterSHFLoTune>:
{
 80092bc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    tune.fastLockDurationMicroseconds = 0;
 80092be:	2300      	movs	r3, #0
 80092c0:	9303      	str	r3, [sp, #12]
    tune.useVCOAutotune = false;
 80092c2:	f88d 3010 	strb.w	r3, [sp, #16]
    tune.powerB = -127;
 80092c6:	2381      	movs	r3, #129	; 0x81
 80092c8:	f88d 3009 	strb.w	r3, [sp, #9]
    tune.frequency = (uint64_t)freqKHz * 1000;
 80092cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80092d0:	fba0 0303 	umull	r0, r3, r0, r3
    tune.powerA = power;
 80092d4:	f88d 1008 	strb.w	r1, [sp, #8]
    tune.frequency = (uint64_t)freqKHz * 1000;
 80092d8:	e9cd 0300 	strd	r0, r3, [sp]
    return max2870Tune(&loPLL, &tune) == TUNE_OK;
 80092dc:	4669      	mov	r1, sp
 80092de:	4804      	ldr	r0, [pc, #16]	; (80092f0 <converterSHFLoTune+0x34>)
 80092e0:	f7ff ffdc 	bl	800929c <max2870Tune>
}
 80092e4:	fab0 f080 	clz	r0, r0
 80092e8:	0940      	lsrs	r0, r0, #5
 80092ea:	b007      	add	sp, #28
 80092ec:	f85d fb04 	ldr.w	pc, [sp], #4
 80092f0:	20001098 	.word	0x20001098
 80092f4:	00000000 	.word	0x00000000

080092f8 <max2870VcoPrecal>:
{
 80092f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80092fc:	b08d      	sub	sp, #52	; 0x34
    MAX2870TuneRequest previousTune = driver->currentTune;
 80092fe:	ad06      	add	r5, sp, #24
 8009300:	f100 0608 	add.w	r6, r0, #8
{
 8009304:	4604      	mov	r4, r0
    bool pllWasEnabled = driver->enabled;
 8009306:	7907      	ldrb	r7, [r0, #4]
    MAX2870TuneRequest previousTune = driver->currentTune;
 8009308:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800930a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800930c:	e896 0003 	ldmia.w	r6, {r0, r1}
 8009310:	e885 0003 	stmia.w	r5, {r0, r1}
    tune.useVCOAutotune = true;
 8009314:	2501      	movs	r5, #1
    MAX2870TuneRequest tune = {};
 8009316:	2218      	movs	r2, #24
 8009318:	2100      	movs	r1, #0
 800931a:	4668      	mov	r0, sp
 800931c:	f002 fa7a 	bl	800b814 <memset>
    tune.powerA = -127;
 8009320:	f248 1381 	movw	r3, #33153	; 0x8181
    for(tune.frequency = MAX2870_VCO_MIN_FREQUENCY + MAX2870_VCO_INCREMENT/2;
 8009324:	46a8      	mov	r8, r5
    max2870SpiState(driver, true);
 8009326:	4620      	mov	r0, r4
    tune.powerA = -127;
 8009328:	f8ad 3008 	strh.w	r3, [sp, #8]
    tune.useVCOAutotune = true;
 800932c:	f88d 5010 	strb.w	r5, [sp, #16]
    max2870SpiState(driver, true);
 8009330:	f7fe fefc 	bl	800812c <max2870SpiState.constprop.0>
    for(tune.frequency = MAX2870_VCO_MIN_FREQUENCY + MAX2870_VCO_INCREMENT/2;
 8009334:	a31c      	add	r3, pc, #112	; (adr r3, 80093a8 <max2870VcoPrecal+0xb0>)
 8009336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800933a:	e9cd 2300 	strd	r2, r3, [sp]
            tune.frequency += MAX2870_VCO_INCREMENT) {
 800933e:	4e18      	ldr	r6, [pc, #96]	; (80093a0 <max2870VcoPrecal+0xa8>)
    for(tune.frequency = MAX2870_VCO_MIN_FREQUENCY + MAX2870_VCO_INCREMENT/2;
 8009340:	f8df 9060 	ldr.w	r9, [pc, #96]	; 80093a4 <max2870VcoPrecal+0xac>
        if(max2870TuneNoLock(driver, &tune)) {
 8009344:	4669      	mov	r1, sp
 8009346:	4620      	mov	r0, r4
 8009348:	f7ff fd7e 	bl	8008e48 <max2870TuneNoLock>
            tune.frequency += MAX2870_VCO_INCREMENT) {
 800934c:	9b00      	ldr	r3, [sp, #0]
 800934e:	9a01      	ldr	r2, [sp, #4]
            allGood = false;
 8009350:	2800      	cmp	r0, #0
 8009352:	bf18      	it	ne
 8009354:	2500      	movne	r5, #0
            tune.frequency += MAX2870_VCO_INCREMENT) {
 8009356:	199b      	adds	r3, r3, r6
 8009358:	f142 0200 	adc.w	r2, r2, #0
    for(tune.frequency = MAX2870_VCO_MIN_FREQUENCY + MAX2870_VCO_INCREMENT/2;
 800935c:	4599      	cmp	r9, r3
            tune.frequency += MAX2870_VCO_INCREMENT) {
 800935e:	e9cd 3200 	strd	r3, r2, [sp]
    for(tune.frequency = MAX2870_VCO_MIN_FREQUENCY + MAX2870_VCO_INCREMENT/2;
 8009362:	eb78 0302 	sbcs.w	r3, r8, r2
 8009366:	d2ed      	bcs.n	8009344 <max2870VcoPrecal+0x4c>
    if(!pllWasEnabled) {
 8009368:	b997      	cbnz	r7, 8009390 <max2870VcoPrecal+0x98>
        max2870Disable(driver);
 800936a:	4620      	mov	r0, r4
 800936c:	f7ff f852 	bl	8008414 <max2870Disable>
    if(driver->vcoCache[0] >= 0x9f ||
 8009370:	f894 3020 	ldrb.w	r3, [r4, #32]
 8009374:	2b9e      	cmp	r3, #158	; 0x9e
 8009376:	d810      	bhi.n	800939a <max2870VcoPrecal+0xa2>
 8009378:	f894 30b5 	ldrb.w	r3, [r4, #181]	; 0xb5
    	allGood = false;
 800937c:	2b9f      	cmp	r3, #159	; 0x9f
 800937e:	bf98      	it	ls
 8009380:	2500      	movls	r5, #0
    if(enable) {
 8009382:	4620      	mov	r0, r4
 8009384:	f7ff f9a0 	bl	80086c8 <max2870SpiState.part.0>
}
 8009388:	4628      	mov	r0, r5
 800938a:	b00d      	add	sp, #52	; 0x34
 800938c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        max2870TuneNoLock(driver, &previousTune);
 8009390:	4620      	mov	r0, r4
 8009392:	a906      	add	r1, sp, #24
 8009394:	f7ff fd58 	bl	8008e48 <max2870TuneNoLock>
 8009398:	e7ea      	b.n	8009370 <max2870VcoPrecal+0x78>
    	allGood = false;
 800939a:	2500      	movs	r5, #0
 800939c:	e7f1      	b.n	8009382 <max2870VcoPrecal+0x8a>
 800939e:	bf00      	nop
 80093a0:	01312d00 	.word	0x01312d00
 80093a4:	65a0bbff 	.word	0x65a0bbff
 80093a8:	b368f480 	.word	0xb368f480
 80093ac:	00000000 	.word	0x00000000

080093b0 <gpioDummySetPinMode>:
{
 80093b0:	b508      	push	{r3, lr}
    syslog("Use of dummy GPIO %u!", (uint32_t)driver->driver);
 80093b2:	6801      	ldr	r1, [r0, #0]
 80093b4:	4802      	ldr	r0, [pc, #8]	; (80093c0 <gpioDummySetPinMode+0x10>)
 80093b6:	f7ff fce9 	bl	8008d8c <syslog>
}
 80093ba:	2000      	movs	r0, #0
 80093bc:	bd08      	pop	{r3, pc}
 80093be:	bf00      	nop
 80093c0:	0800c012 	.word	0x0800c012

080093c4 <gpioDummyGetPinMode>:
{
 80093c4:	b508      	push	{r3, lr}
    syslog("Use of dummy GPIO %u!", (uint32_t)driver->driver);
 80093c6:	6801      	ldr	r1, [r0, #0]
 80093c8:	4802      	ldr	r0, [pc, #8]	; (80093d4 <gpioDummyGetPinMode+0x10>)
 80093ca:	f7ff fcdf 	bl	8008d8c <syslog>
}
 80093ce:	2002      	movs	r0, #2
 80093d0:	bd08      	pop	{r3, pc}
 80093d2:	bf00      	nop
 80093d4:	0800c012 	.word	0x0800c012

080093d8 <gpioDummySetValue>:
{
 80093d8:	b508      	push	{r3, lr}
    syslog("Use of dummy GPIO %u!", (uint32_t)driver->driver);
 80093da:	6801      	ldr	r1, [r0, #0]
 80093dc:	4802      	ldr	r0, [pc, #8]	; (80093e8 <gpioDummySetValue+0x10>)
 80093de:	f7ff fcd5 	bl	8008d8c <syslog>
}
 80093e2:	2000      	movs	r0, #0
 80093e4:	bd08      	pop	{r3, pc}
 80093e6:	bf00      	nop
 80093e8:	0800c012 	.word	0x0800c012

080093ec <gpioDummyGetValue>:
{
 80093ec:	b508      	push	{r3, lr}
    syslog("Use of dummy GPIO %u!", (uint32_t)driver->driver);
 80093ee:	6801      	ldr	r1, [r0, #0]
 80093f0:	4802      	ldr	r0, [pc, #8]	; (80093fc <gpioDummyGetValue+0x10>)
 80093f2:	f7ff fccb 	bl	8008d8c <syslog>
}
 80093f6:	2000      	movs	r0, #0
 80093f8:	bd08      	pop	{r3, pc}
 80093fa:	bf00      	nop
 80093fc:	0800c012 	.word	0x0800c012

08009400 <i2cSafeMasterTransmitTimeoutWithRetry.constprop.0>:
i2c_result i2cSafeMasterTransmitTimeoutWithRetry (
 8009400:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009404:	4604      	mov	r4, r0
 8009406:	4617      	mov	r7, r2
    if(!devAddr) return MSG_RESET;
 8009408:	460d      	mov	r5, r1
i2c_result i2cSafeMasterTransmitTimeoutWithRetry (
 800940a:	9301      	str	r3, [sp, #4]
    if(!devAddr) return MSG_RESET;
 800940c:	2900      	cmp	r1, #0
 800940e:	d07f      	beq.n	8009510 <i2cSafeMasterTransmitTimeoutWithRetry.constprop.0+0x110>
    memset(rxbuf, 0xFE, rxbytes);
 8009410:	21fe      	movs	r1, #254	; 0xfe
 8009412:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009414:	980c      	ldr	r0, [sp, #48]	; 0x30
 8009416:	f002 f9fd 	bl	800b814 <memset>

  /* Resetting error flags for this transfer.*/
  i2cp->errors = I2C_NO_ERROR;

  /* Initializes driver fields, LSB = 0 -> transmit.*/
  i2cp->addr = (addr << 1);
 800941a:	2603      	movs	r6, #3
  i2cp->errors = I2C_NO_ERROR;
 800941c:	f04f 0900 	mov.w	r9, #0
 8009420:	006d      	lsls	r5, r5, #1
 8009422:	f8df a0f8 	ldr.w	sl, [pc, #248]	; 800951c <i2cSafeMasterTransmitTimeoutWithRetry.constprop.0+0x11c>
 8009426:	fa1f f885 	uxth.w	r8, r5
  osalDbgCheck((i2cp != NULL) && (addr != 0U) &&
 800942a:	b914      	cbnz	r4, 8009432 <i2cSafeMasterTransmitTimeoutWithRetry.constprop.0+0x32>
 800942c:	f7fb f98a 	bl	8004744 <vTaskEndScheduler>
 8009430:	e7fe      	b.n	8009430 <i2cSafeMasterTransmitTimeoutWithRetry.constprop.0+0x30>
  osalDbgAssert(i2cp->state == I2C_READY, "not ready");
 8009432:	7825      	ldrb	r5, [r4, #0]
 8009434:	2d02      	cmp	r5, #2
 8009436:	d002      	beq.n	800943e <i2cSafeMasterTransmitTimeoutWithRetry.constprop.0+0x3e>
 8009438:	f7fb f984 	bl	8004744 <vTaskEndScheduler>
 800943c:	e7fe      	b.n	800943c <i2cSafeMasterTransmitTimeoutWithRetry.constprop.0+0x3c>
  osalSysLock();
 800943e:	f7fb f971 	bl	8004724 <vPortEnterCritical>
  i2cp->state = I2C_ACTIVE_TX;
 8009442:	2303      	movs	r3, #3
  i2cp->errors = I2C_NO_ERROR;
 8009444:	f8c4 9008 	str.w	r9, [r4, #8]
  i2cp->state = I2C_ACTIVE_TX;
 8009448:	7023      	strb	r3, [r4, #0]
  i2cp->numInterrupts = 0;
 800944a:	f8c4 9080 	str.w	r9, [r4, #128]	; 0x80
  i2cp->addr = (addr << 1);
 800944e:	f8a4 8064 	strh.w	r8, [r4, #100]	; 0x64
  I2C_TypeDef *dp = i2cp->i2c;
 8009452:	6fa0      	ldr	r0, [r4, #120]	; 0x78

  /* Releases the lock from high level driver.*/
  osalSysUnlock();
 8009454:	f7fb fb8a 	bl	8004b6c <osalSysUnlock.lto_priv.0>

  /* TX DMA setup.*/
  dmaStreamSetMode(i2cp->dmatx, i2cp->txdmamode);
 8009458:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800945a:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800945c:	685b      	ldr	r3, [r3, #4]
 800945e:	601a      	str	r2, [r3, #0]
  dmaStreamSetMemory0(i2cp->dmatx, txbuf);
  dmaStreamSetTransactionSize(i2cp->dmatx, txbytes);
 8009460:	9a01      	ldr	r2, [sp, #4]
  dmaStreamSetMemory0(i2cp->dmatx, txbuf);
 8009462:	60df      	str	r7, [r3, #12]
  dmaStreamSetTransactionSize(i2cp->dmatx, txbytes);
 8009464:	605a      	str	r2, [r3, #4]

  /* RX DMA setup.*/
  dmaStreamSetMode(i2cp->dmarx, i2cp->rxdmamode);
 8009466:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8009468:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 800946a:	685b      	ldr	r3, [r3, #4]
 800946c:	601a      	str	r2, [r3, #0]
  dmaStreamSetMemory0(i2cp->dmarx, rxbuf);
 800946e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009470:	60da      	str	r2, [r3, #12]
  dmaStreamSetTransactionSize(i2cp->dmarx, rxbytes);
 8009472:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009474:	605a      	str	r2, [r3, #4]
 8009476:	f7fb ff43 	bl	8005300 <vPortValidateInterruptPriority>
 800947a:	f8da b000 	ldr.w	fp, [sl]
  end = start + OSAL_MS2ST(STM32_I2C_BUSY_TIMEOUT);

  /* Waits until BUSY flag is reset or, alternatively, for a timeout
     condition.*/
  while (true) {
    osalSysLock();
 800947e:	f7fb f951 	bl	8004724 <vPortEnterCritical>

    /* If the bus is not busy then the operation can continue, note, the
       loop is exited in the locked state.*/
    if (!(dp->SR2 & I2C_SR2_BUSY) && !(dp->CR1 & I2C_CR1_STOP))
 8009482:	6983      	ldr	r3, [r0, #24]
 8009484:	0799      	lsls	r1, r3, #30
 8009486:	d402      	bmi.n	800948e <i2cSafeMasterTransmitTimeoutWithRetry.constprop.0+0x8e>
 8009488:	6803      	ldr	r3, [r0, #0]
 800948a:	059a      	lsls	r2, r3, #22
 800948c:	d50a      	bpl.n	80094a4 <i2cSafeMasterTransmitTimeoutWithRetry.constprop.0+0xa4>
 800948e:	f7fb ff37 	bl	8005300 <vPortValidateInterruptPriority>
 8009492:	f8da 3000 	ldr.w	r3, [sl]
    systime_t past = now - begin;
 8009496:	eba3 030b 	sub.w	r3, r3, fp
    if(past < duration) return true;
 800949a:	2b31      	cmp	r3, #49	; 0x31
 800949c:	d82e      	bhi.n	80094fc <i2cSafeMasterTransmitTimeoutWithRetry.constprop.0+0xfc>
    /* If the system time went outside the allowed window then a timeout
       condition is returned.*/
    if (!osalOsIsTimeWithinX(osalOsGetSystemTimeX(), start, end))
      return MSG_TIMEOUT;

    osalSysUnlock();
 800949e:	f7fb fb65 	bl	8004b6c <osalSysUnlock.lto_priv.0>
 80094a2:	e7ec      	b.n	800947e <i2cSafeMasterTransmitTimeoutWithRetry.constprop.0+0x7e>
  }

  /* Starts the operation.*/
  dp->CR2 |= I2C_CR2_ITEVTEN;
 80094a4:	6843      	ldr	r3, [r0, #4]
  dp->CR1 |= I2C_CR1_START;

  /* Waits for the operation completion or a timeout.*/
  return osalThreadSuspendTimeoutS(&i2cp->thread, timeout);
 80094a6:	2105      	movs	r1, #5
  dp->CR2 |= I2C_CR2_ITEVTEN;
 80094a8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80094ac:	6043      	str	r3, [r0, #4]
  dp->CR1 |= I2C_CR1_START;
 80094ae:	6803      	ldr	r3, [r0, #0]
 80094b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80094b4:	6003      	str	r3, [r0, #0]
  return osalThreadSuspendTimeoutS(&i2cp->thread, timeout);
 80094b6:	f104 0060 	add.w	r0, r4, #96	; 0x60
 80094ba:	f7fd f881 	bl	80065c0 <osalThreadSuspendTimeoutS>
    i2cp->state = I2C_LOCKED;
 80094be:	1c43      	adds	r3, r0, #1
 80094c0:	bf08      	it	eq
 80094c2:	2505      	moveq	r5, #5
 80094c4:	7025      	strb	r5, [r4, #0]
  osalSysUnlock();
 80094c6:	f7fb fb51 	bl	8004b6c <osalSysUnlock.lto_priv.0>
        if(status == MSG_OK){
 80094ca:	b320      	cbz	r0, 8009516 <i2cSafeMasterTransmitTimeoutWithRetry.constprop.0+0x116>
        osalSysLock();
 80094cc:	f7fb f92a 	bl	8004724 <vPortEnterCritical>
        i2c->i2cErrors++;
 80094d0:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
        if((retVal = i2cSafeRawUnclogBus(i2c))) {
 80094d4:	4620      	mov	r0, r4
        i2c->i2cErrors++;
 80094d6:	3301      	adds	r3, #1
 80094d8:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        osalSysUnlock();
 80094dc:	f7fb fb46 	bl	8004b6c <osalSysUnlock.lto_priv.0>
        if((retVal = i2cSafeRawUnclogBus(i2c))) {
 80094e0:	f7fe fd64 	bl	8007fac <i2cSafeRawUnclogBus>
 80094e4:	4605      	mov	r5, r0
 80094e6:	b168      	cbz	r0, 8009504 <i2cSafeMasterTransmitTimeoutWithRetry.constprop.0+0x104>
            syslog("I2C error, bus failure: %s.", i2cSafeResultToString(retVal));
 80094e8:	f7fa ff36 	bl	8004358 <i2cSafeResultToString>
 80094ec:	4601      	mov	r1, r0
 80094ee:	480c      	ldr	r0, [pc, #48]	; (8009520 <i2cSafeMasterTransmitTimeoutWithRetry.constprop.0+0x120>)
 80094f0:	f7ff fc4c 	bl	8008d8c <syslog>
}
 80094f4:	4628      	mov	r0, r5
 80094f6:	b003      	add	sp, #12
 80094f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    i2cp->state = I2C_LOCKED;
 80094fc:	2505      	movs	r5, #5
      return MSG_TIMEOUT;
 80094fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009502:	e7df      	b.n	80094c4 <i2cSafeMasterTransmitTimeoutWithRetry.constprop.0+0xc4>
    for(i=0; i<maxTries; i++) {
 8009504:	3e01      	subs	r6, #1
 8009506:	d190      	bne.n	800942a <i2cSafeMasterTransmitTimeoutWithRetry.constprop.0+0x2a>
    syslog("I2C error, %u failed attempts.", maxTries);
 8009508:	2103      	movs	r1, #3
 800950a:	4806      	ldr	r0, [pc, #24]	; (8009524 <i2cSafeMasterTransmitTimeoutWithRetry.constprop.0+0x124>)
 800950c:	f7ff fc3e 	bl	8008d8c <syslog>
    if(!devAddr) return MSG_RESET;
 8009510:	f06f 0501 	mvn.w	r5, #1
 8009514:	e7ee      	b.n	80094f4 <i2cSafeMasterTransmitTimeoutWithRetry.constprop.0+0xf4>
            retVal = status;
 8009516:	4605      	mov	r5, r0
 8009518:	e7ec      	b.n	80094f4 <i2cSafeMasterTransmitTimeoutWithRetry.constprop.0+0xf4>
 800951a:	bf00      	nop
 800951c:	20001648 	.word	0x20001648
 8009520:	0800c028 	.word	0x0800c028
 8009524:	0800c044 	.word	0x0800c044

08009528 <i2cSafeReadRegBulkStandard.constprop.0>:
i2c_result i2cSafeReadRegBulkStandard(I2CDriver* i2c,
 8009528:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800952a:	460d      	mov	r5, r1
 800952c:	461e      	mov	r6, r3
    osalDbgAssert(i2c != NULL, "i2c == NULL");
 800952e:	4604      	mov	r4, r0
 8009530:	b910      	cbnz	r0, 8009538 <i2cSafeReadRegBulkStandard.constprop.0+0x10>
 8009532:	f7fb f907 	bl	8004744 <vTaskEndScheduler>
 8009536:	e7fe      	b.n	8009536 <i2cSafeReadRegBulkStandard.constprop.0+0xe>
    uint8_t txBuf[1] = {addr};
 8009538:	f88d 200c 	strb.w	r2, [sp, #12]
    i2cAcquireBus(i2c);
 800953c:	f7fc fcce 	bl	8005edc <i2cAcquireBus>
    i2c_status = i2cSafeMasterTransmitTimeoutWithRetry(i2c, devAddr, txBuf,
 8009540:	2302      	movs	r3, #2
 8009542:	4629      	mov	r1, r5
 8009544:	e9cd 6300 	strd	r6, r3, [sp]
 8009548:	aa03      	add	r2, sp, #12
 800954a:	2301      	movs	r3, #1
 800954c:	4620      	mov	r0, r4
 800954e:	f7ff ff57 	bl	8009400 <i2cSafeMasterTransmitTimeoutWithRetry.constprop.0>
 8009552:	4605      	mov	r5, r0
    i2cReleaseBus(i2c);
 8009554:	4620      	mov	r0, r4
 8009556:	f7ff f8ad 	bl	80086b4 <i2cReleaseBus>
}
 800955a:	4628      	mov	r0, r5
 800955c:	b004      	add	sp, #16
 800955e:	bd70      	pop	{r4, r5, r6, pc}

08009560 <i2cSafeReadRegStandard>:
{
 8009560:	b513      	push	{r0, r1, r4, lr}
 8009562:	461c      	mov	r4, r3
    osalDbgAssert(i2c != NULL, "i2c == NULL");
 8009564:	b910      	cbnz	r0, 800956c <i2cSafeReadRegStandard+0xc>
 8009566:	f7fb f8ed 	bl	8004744 <vTaskEndScheduler>
 800956a:	e7fe      	b.n	800956a <i2cSafeReadRegStandard+0xa>
    i2c_result result = i2cSafeReadRegBulkStandard(i2c, devAddr, addr, values, sizeof(values));
 800956c:	ab01      	add	r3, sp, #4
 800956e:	f7ff ffdb 	bl	8009528 <i2cSafeReadRegBulkStandard.constprop.0>
    *value=values[0];
 8009572:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8009576:	7023      	strb	r3, [r4, #0]
}
 8009578:	b002      	add	sp, #8
 800957a:	bd10      	pop	{r4, pc}

0800957c <MCP9804MeasureTemperature.part.0>:
#include "mcp9804.h"
#include "../i2csafe/i2csafe.h"
#include <string.h>
#include "../system.h"

int16_t MCP9804MeasureTemperature(MCP9804Driver* driver, bool newMeasurement)
 800957c:	b513      	push	{r0, r1, r4, lr}
 800957e:	4604      	mov	r4, r0
    if(!newMeasurement) {
        return driver->temperature;
    }

    uint8_t data[2];
    i2c_result result = i2cSafeReadRegBulkStandard(driver->config->i2cPort, driver->config->i2cAddr, 0x5, data, 2);
 8009580:	6800      	ldr	r0, [r0, #0]
 8009582:	2205      	movs	r2, #5
 8009584:	7901      	ldrb	r1, [r0, #4]
 8009586:	ab01      	add	r3, sp, #4
 8009588:	6800      	ldr	r0, [r0, #0]
 800958a:	f7ff ffcd 	bl	8009528 <i2cSafeReadRegBulkStandard.constprop.0>

    if(result != I2C_BUS_OK) {
 800958e:	b130      	cbz	r0, 800959e <MCP9804MeasureTemperature.part.0+0x22>
        driver->temperature = 0x7FFF;
 8009590:	f647 73ff 	movw	r3, #32767	; 0x7fff

        driver->temperature = temp;

        /* Check sign */
        if(data[0] & 0x10) {
            driver->temperature = 4096 - temp;
 8009594:	80a3      	strh	r3, [r4, #4]
        }
    }

    return driver->temperature;
}
 8009596:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 800959a:	b002      	add	sp, #8
 800959c:	bd10      	pop	{r4, pc}
        uint16_t temp = ((data[0] & 0xF) << 8) | data[1];
 800959e:	f89d 1004 	ldrb.w	r1, [sp, #4]
 80095a2:	020b      	lsls	r3, r1, #8
 80095a4:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 80095a8:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80095ac:	4313      	orrs	r3, r2
        if(data[0] & 0x10) {
 80095ae:	06ca      	lsls	r2, r1, #27
            driver->temperature = 4096 - temp;
 80095b0:	bf48      	it	mi
 80095b2:	f5c3 5380 	rsbmi	r3, r3, #4096	; 0x1000
 80095b6:	e7ed      	b.n	8009594 <MCP9804MeasureTemperature.part.0+0x18>

080095b8 <cmdTemp>:

#include <string.h>


void cmdTemp(void* user, BaseSequentialStream *chp, int argc, char *argv[])
{
 80095b8:	b510      	push	{r4, lr}
 80095ba:	460c      	mov	r4, r1
 80095bc:	f7ff ffde 	bl	800957c <MCP9804MeasureTemperature.part.0>
    (void)argv;
    MCP9804Driver* tempSens = (MCP9804Driver*)user;

    int32_t temp = MCP9804MeasureTemperature(tempSens, true);

    chprintf(chp, "Temperature: %d mC"SHELL_NEWLINE_STR, temp*1000/16);
 80095c0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80095c4:	4342      	muls	r2, r0
 80095c6:	bf48      	it	mi
 80095c8:	320f      	addmi	r2, #15
 80095ca:	4620      	mov	r0, r4
}
 80095cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    chprintf(chp, "Temperature: %d mC"SHELL_NEWLINE_STR, temp*1000/16);
 80095d0:	4901      	ldr	r1, [pc, #4]	; (80095d8 <cmdTemp+0x20>)
 80095d2:	1112      	asrs	r2, r2, #4
 80095d4:	f7ff b8bd 	b.w	8008752 <chprintf>
 80095d8:	0800c063 	.word	0x0800c063

080095dc <parse_arguments>:
static char *parse_arguments(char *str, char **saveptr) {
 80095dc:	b570      	push	{r4, r5, r6, lr}
 80095de:	460d      	mov	r5, r1
  if (str != NULL)
 80095e0:	b100      	cbz	r0, 80095e4 <parse_arguments+0x8>
    *saveptr = str;
 80095e2:	6008      	str	r0, [r1, #0]
  p = *saveptr;
 80095e4:	682e      	ldr	r6, [r5, #0]
  if (!p) {
 80095e6:	b17e      	cbz	r6, 8009608 <parse_arguments+0x2c>
  p += strspn(p, " \t");
 80095e8:	490e      	ldr	r1, [pc, #56]	; (8009624 <parse_arguments+0x48>)
 80095ea:	4630      	mov	r0, r6
 80095ec:	f002 fa16 	bl	800ba1c <strspn>
  if (*p == '"') {
 80095f0:	5c31      	ldrb	r1, [r6, r0]
  p += strspn(p, " \t");
 80095f2:	1834      	adds	r4, r6, r0
  if (*p == '"') {
 80095f4:	2922      	cmp	r1, #34	; 0x22
 80095f6:	d10a      	bne.n	800960e <parse_arguments+0x32>
    p++;
 80095f8:	3401      	adds	r4, #1
    *saveptr = strpbrk(p, "\"");
 80095fa:	4620      	mov	r0, r4
 80095fc:	f002 f95c 	bl	800b8b8 <strchr>
  if (*saveptr != NULL) {
 8009600:	b950      	cbnz	r0, 8009618 <parse_arguments+0x3c>
 8009602:	6028      	str	r0, [r5, #0]
  return *p != '\0' ? p : NULL;
 8009604:	7823      	ldrb	r3, [r4, #0]
 8009606:	b903      	cbnz	r3, 800960a <parse_arguments+0x2e>
 8009608:	2400      	movs	r4, #0
}
 800960a:	4620      	mov	r0, r4
 800960c:	bd70      	pop	{r4, r5, r6, pc}
    *saveptr = strpbrk(p, " \t");
 800960e:	4620      	mov	r0, r4
 8009610:	4904      	ldr	r1, [pc, #16]	; (8009624 <parse_arguments+0x48>)
 8009612:	f002 f9e7 	bl	800b9e4 <strpbrk>
 8009616:	e7f3      	b.n	8009600 <parse_arguments+0x24>
    *(*saveptr)++ = '\0';
 8009618:	1c43      	adds	r3, r0, #1
 800961a:	602b      	str	r3, [r5, #0]
 800961c:	2300      	movs	r3, #0
 800961e:	7003      	strb	r3, [r0, #0]
 8009620:	e7f0      	b.n	8009604 <parse_arguments+0x28>
 8009622:	bf00      	nop
 8009624:	0800c078 	.word	0x0800c078

08009628 <cmdexec>:
                      char *name, int argc, char *argv[]) {
 8009628:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800962c:	4605      	mov	r5, r0
 800962e:	460e      	mov	r6, r1
 8009630:	4617      	mov	r7, r2
 8009632:	4698      	mov	r8, r3
  while (scp->sc_name != NULL) {
 8009634:	6828      	ldr	r0, [r5, #0]
 8009636:	b908      	cbnz	r0, 800963c <cmdexec+0x14>
  return true;
 8009638:	2001      	movs	r0, #1
 800963a:	e00b      	b.n	8009654 <cmdexec+0x2c>
    if (strcmp(scp->sc_name, name) == 0) {
 800963c:	4639      	mov	r1, r7
 800963e:	f7fa fac3 	bl	8003bc8 <strcmp>
 8009642:	4604      	mov	r4, r0
 8009644:	b940      	cbnz	r0, 8009658 <cmdexec+0x30>
      scp->sc_function(scp->sc_user, chp, argc, argv);
 8009646:	68a8      	ldr	r0, [r5, #8]
 8009648:	4642      	mov	r2, r8
 800964a:	4631      	mov	r1, r6
 800964c:	686f      	ldr	r7, [r5, #4]
 800964e:	9b06      	ldr	r3, [sp, #24]
 8009650:	47b8      	blx	r7
      return false;
 8009652:	4620      	mov	r0, r4
}
 8009654:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    scp++;
 8009658:	350c      	adds	r5, #12
 800965a:	e7eb      	b.n	8009634 <cmdexec+0xc>

0800965c <cmdGPIO>:

void cmdGPIO(void* user, BaseSequentialStream *chp, int argc, char *argv[])
{
 800965c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    (void) user;

    if(argc < 1) {
 8009660:	1e16      	subs	r6, r2, #0
{
 8009662:	460d      	mov	r5, r1
 8009664:	461f      	mov	r7, r3
    if(argc < 1) {
 8009666:	dc04      	bgt.n	8009672 <cmdGPIO+0x16>
        cmdGPIOUsage(chp);
 8009668:	4628      	mov	r0, r5
    } else {
        cmdGPIOUsage(chp);
    }

    //TXA6408PrintStatus(&mixerControllerIO, chp);
}
 800966a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        cmdGPIOUsage(chp);
 800966e:	f7ff b9e3 	b.w	8008a38 <cmdGPIOUsage>
    if(!strcmp(argv[0], "status")) {
 8009672:	f8d3 8000 	ldr.w	r8, [r3]
 8009676:	4944      	ldr	r1, [pc, #272]	; (8009788 <cmdGPIO+0x12c>)
 8009678:	4640      	mov	r0, r8
 800967a:	f7fa faa5 	bl	8003bc8 <strcmp>
 800967e:	4604      	mov	r4, r0
 8009680:	bb78      	cbnz	r0, 80096e2 <cmdGPIO+0x86>

void gpioPrintStatus(BaseSequentialStream* chp)
{
    for(uint8_t i=0; i<GPIODriverData.numPorts; i++) {
 8009682:	f8df 8108 	ldr.w	r8, [pc, #264]	; 800978c <cmdGPIO+0x130>
        const GPIOPort* port = gpioGetPortDriver(i);

        chprintf(chp, "Port %u: ", i);
 8009686:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8009790 <cmdGPIO+0x134>
        if(GPIODriverData.registeredPorts & _BV(i)) {
            chprintf(chp, "(Active, %u pins)", port->numPins);
 800968a:	f8df a108 	ldr.w	sl, [pc, #264]	; 8009794 <cmdGPIO+0x138>
 800968e:	e021      	b.n	80096d4 <cmdGPIO+0x78>
        const GPIOPort* port = gpioGetPortDriver(i);
 8009690:	4630      	mov	r0, r6
 8009692:	f7fa fe95 	bl	80043c0 <gpioGetPortDriver>
        chprintf(chp, "Port %u: ", i);
 8009696:	4649      	mov	r1, r9
        const GPIOPort* port = gpioGetPortDriver(i);
 8009698:	4607      	mov	r7, r0
        chprintf(chp, "Port %u: ", i);
 800969a:	4632      	mov	r2, r6
 800969c:	4628      	mov	r0, r5
 800969e:	f7ff f858 	bl	8008752 <chprintf>
        if(GPIODriverData.registeredPorts & _BV(i)) {
 80096a2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80096a6:	40f3      	lsrs	r3, r6
 80096a8:	07db      	lsls	r3, r3, #31
 80096aa:	d504      	bpl.n	80096b6 <cmdGPIO+0x5a>
            chprintf(chp, "(Active, %u pins)", port->numPins);
 80096ac:	4651      	mov	r1, sl
 80096ae:	4628      	mov	r0, r5
 80096b0:	687a      	ldr	r2, [r7, #4]
 80096b2:	f7ff f84e 	bl	8008752 <chprintf>
        }
        chprintf(chp, SHELL_NEWLINE_STR);
 80096b6:	4628      	mov	r0, r5
 80096b8:	4937      	ldr	r1, [pc, #220]	; (8009798 <cmdGPIO+0x13c>)
 80096ba:	f7ff f84a 	bl	8008752 <chprintf>

        if(port->functions->status) {
 80096be:	68bb      	ldr	r3, [r7, #8]
 80096c0:	695b      	ldr	r3, [r3, #20]
 80096c2:	b113      	cbz	r3, 80096ca <cmdGPIO+0x6e>
            port->functions->status(port, chp);
 80096c4:	4629      	mov	r1, r5
 80096c6:	4638      	mov	r0, r7
 80096c8:	4798      	blx	r3
        }
        chprintf(chp, SHELL_NEWLINE_STR);
 80096ca:	4628      	mov	r0, r5
 80096cc:	4932      	ldr	r1, [pc, #200]	; (8009798 <cmdGPIO+0x13c>)
 80096ce:	f7ff f840 	bl	8008752 <chprintf>
    for(uint8_t i=0; i<GPIODriverData.numPorts; i++) {
 80096d2:	3401      	adds	r4, #1
 80096d4:	f898 3004 	ldrb.w	r3, [r8, #4]
 80096d8:	b2e6      	uxtb	r6, r4
 80096da:	42b3      	cmp	r3, r6
 80096dc:	d8d8      	bhi.n	8009690 <cmdGPIO+0x34>
}
 80096de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if(argc == 3) {
 80096e2:	2e03      	cmp	r6, #3
 80096e4:	d1c0      	bne.n	8009668 <cmdGPIO+0xc>
        uint8_t portId = strToInt(argv[0], 10);
 80096e6:	210a      	movs	r1, #10
 80096e8:	4640      	mov	r0, r8
 80096ea:	f7fa fd76 	bl	80041da <strToInt>
        if(!strcmp(argv[1], "bus")) {
 80096ee:	687c      	ldr	r4, [r7, #4]
        uint8_t portId = strToInt(argv[0], 10);
 80096f0:	4606      	mov	r6, r0
        if(!strcmp(argv[1], "bus")) {
 80096f2:	492a      	ldr	r1, [pc, #168]	; (800979c <cmdGPIO+0x140>)
 80096f4:	4620      	mov	r0, r4
 80096f6:	f7fa fa67 	bl	8003bc8 <strcmp>
 80096fa:	4680      	mov	r8, r0
 80096fc:	b968      	cbnz	r0, 800971a <cmdGPIO+0xbe>
            if(!strcmp(argv[2], "off")) {
 80096fe:	4928      	ldr	r1, [pc, #160]	; (80097a0 <cmdGPIO+0x144>)
 8009700:	68b8      	ldr	r0, [r7, #8]
        uint8_t portId = strToInt(argv[0], 10);
 8009702:	b2f6      	uxtb	r6, r6
            if(!strcmp(argv[2], "off")) {
 8009704:	f7fa fa60 	bl	8003bc8 <strcmp>
 8009708:	b928      	cbnz	r0, 8009716 <cmdGPIO+0xba>
                gpioPortIoDisable(portId, true);
 800970a:	2101      	movs	r1, #1
                gpioPortIoDisable(portId, false);
 800970c:	4630      	mov	r0, r6
}
 800970e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
                gpioPortIoDisable(portId, false);
 8009712:	f7fa be75 	b.w	8004400 <gpioPortIoDisable>
 8009716:	4641      	mov	r1, r8
 8009718:	e7f8      	b.n	800970c <cmdGPIO+0xb0>
            uint8_t pinId = strToInt(argv[1], 10);
 800971a:	210a      	movs	r1, #10
 800971c:	4620      	mov	r0, r4
 800971e:	f7fa fd5c 	bl	80041da <strToInt>
            uint16_t pin = MAKE_GPIO(portId, pinId);
 8009722:	b2c4      	uxtb	r4, r0
 8009724:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
            if(!strcmp(argv[2], "output")) {
 8009728:	68be      	ldr	r6, [r7, #8]
 800972a:	491e      	ldr	r1, [pc, #120]	; (80097a4 <cmdGPIO+0x148>)
 800972c:	4630      	mov	r0, r6
            uint16_t pin = MAKE_GPIO(portId, pinId);
 800972e:	b2a4      	uxth	r4, r4
            if(!strcmp(argv[2], "output")) {
 8009730:	f7fa fa4a 	bl	8003bc8 <strcmp>
 8009734:	b928      	cbnz	r0, 8009742 <cmdGPIO+0xe6>
                gpioSetPinMode(pin, PAL_MODE_OUTPUT_PUSHPULL);
 8009736:	2106      	movs	r1, #6
                gpioSetPinMode(pin, PAL_MODE_INPUT);
 8009738:	4620      	mov	r0, r4
}
 800973a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
                gpioSetPinMode(pin, PAL_MODE_INPUT);
 800973e:	f7fd bde3 	b.w	8007308 <gpioSetPinMode.isra.0>
            } else if(!strcmp(argv[2], "input")) {
 8009742:	4630      	mov	r0, r6
 8009744:	4918      	ldr	r1, [pc, #96]	; (80097a8 <cmdGPIO+0x14c>)
 8009746:	f7fa fa3f 	bl	8003bc8 <strcmp>
 800974a:	b908      	cbnz	r0, 8009750 <cmdGPIO+0xf4>
                gpioSetPinMode(pin, PAL_MODE_INPUT);
 800974c:	2102      	movs	r1, #2
 800974e:	e7f3      	b.n	8009738 <cmdGPIO+0xdc>
            } else if(!strcmp(argv[2], "set")) {
 8009750:	4630      	mov	r0, r6
 8009752:	4916      	ldr	r1, [pc, #88]	; (80097ac <cmdGPIO+0x150>)
 8009754:	f7fa fa38 	bl	8003bc8 <strcmp>
 8009758:	b928      	cbnz	r0, 8009766 <cmdGPIO+0x10a>
                gpioSetPin(pin, true);
 800975a:	2101      	movs	r1, #1
 800975c:	4620      	mov	r0, r4
}
 800975e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
                gpioSetPin(pin, false);
 8009762:	f7fd bee5 	b.w	8007530 <gpioSetPin.isra.0>
            } else if(!strcmp(argv[2], "clear")) {
 8009766:	4912      	ldr	r1, [pc, #72]	; (80097b0 <cmdGPIO+0x154>)
 8009768:	4630      	mov	r0, r6
 800976a:	f7fa fa2d 	bl	8003bc8 <strcmp>
 800976e:	4601      	mov	r1, r0
                gpioSetPin(pin, false);
 8009770:	4620      	mov	r0, r4
            } else if(!strcmp(argv[2], "clear")) {
 8009772:	2900      	cmp	r1, #0
 8009774:	d0f3      	beq.n	800975e <cmdGPIO+0x102>
                chprintf(chp, "Value: %u"SHELL_NEWLINE_STR, gpioGetPin(pin));
 8009776:	f7fa fe31 	bl	80043dc <gpioGetPin>
 800977a:	490e      	ldr	r1, [pc, #56]	; (80097b4 <cmdGPIO+0x158>)
 800977c:	4602      	mov	r2, r0
 800977e:	4628      	mov	r0, r5
}
 8009780:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
                chprintf(chp, "Value: %u"SHELL_NEWLINE_STR, gpioGetPin(pin));
 8009784:	f7fe bfe5 	b.w	8008752 <chprintf>
 8009788:	0800c07b 	.word	0x0800c07b
 800978c:	20000928 	.word	0x20000928
 8009790:	0800c082 	.word	0x0800c082
 8009794:	0800c08c 	.word	0x0800c08c
 8009798:	0800be6c 	.word	0x0800be6c
 800979c:	0800c09e 	.word	0x0800c09e
 80097a0:	0800c0a2 	.word	0x0800c0a2
 80097a4:	0800c0a6 	.word	0x0800c0a6
 80097a8:	0800c0ad 	.word	0x0800c0ad
 80097ac:	0800c0b3 	.word	0x0800c0b3
 80097b0:	0800c0b7 	.word	0x0800c0b7
 80097b4:	0800c0bd 	.word	0x0800c0bd

080097b8 <cmdConvert>:
    chprintf(chp, "\tconvert hs [shfband] [1/0]"SHELL_NEWLINE_STR);
    chprintf(chp, "\tconvert status"SHELL_NEWLINE_STR);
}

void cmdConvert(void* user, BaseSequentialStream *chp, int argc, char *argv[])
{
 80097b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ConverterManager* converter = (ConverterManager*)user;

    if(argc == 1) {
 80097bc:	2a01      	cmp	r2, #1
{
 80097be:	4605      	mov	r5, r0
 80097c0:	460c      	mov	r4, r1
 80097c2:	4690      	mov	r8, r2
 80097c4:	461e      	mov	r6, r3
 80097c6:	b088      	sub	sp, #32
    if(argc == 1) {
 80097c8:	d177      	bne.n	80098ba <cmdConvert+0x102>
        if(!strcmp(argv[0], "status")) {
 80097ca:	4968      	ldr	r1, [pc, #416]	; (800996c <cmdConvert+0x1b4>)
 80097cc:	6818      	ldr	r0, [r3, #0]
 80097ce:	f7fa f9fb 	bl	8003bc8 <strcmp>
 80097d2:	4606      	mov	r6, r0
 80097d4:	2800      	cmp	r0, #0
 80097d6:	f040 80bb 	bne.w	8009950 <cmdConvert+0x198>
    return true;
}

void converterStatus(BaseSequentialStream* chp, ConverterManager* converter)
{
    chprintf(chp, "Bands: [Disable mask: 0x%08x]"SHELL_NEWLINE_STR, converter->disabledBands);
 80097da:	69ea      	ldr	r2, [r5, #28]
 80097dc:	4964      	ldr	r1, [pc, #400]	; (8009970 <cmdConvert+0x1b8>)
 80097de:	4620      	mov	r0, r4
 80097e0:	f7fe ffb7 	bl	8008752 <chprintf>
    printfFixed(chp, 9, "\tBand ID");
 80097e4:	2109      	movs	r1, #9
 80097e6:	4a63      	ldr	r2, [pc, #396]	; (8009974 <cmdConvert+0x1bc>)
 80097e8:	4620      	mov	r0, r4
 80097ea:	f7ff f95f 	bl	8008aac <printfFixed>
    printfFixed(chp, 7, "Name");
 80097ee:	2107      	movs	r1, #7
 80097f0:	4a61      	ldr	r2, [pc, #388]	; (8009978 <cmdConvert+0x1c0>)
 80097f2:	4620      	mov	r0, r4
 80097f4:	f7ff f95a 	bl	8008aac <printfFixed>
    printfFixed(chp, 14, "FreqMin [kHz]");
 80097f8:	210e      	movs	r1, #14
 80097fa:	4a60      	ldr	r2, [pc, #384]	; (800997c <cmdConvert+0x1c4>)
 80097fc:	4620      	mov	r0, r4
 80097fe:	f7ff f955 	bl	8008aac <printfFixed>
    chprintf(chp,	     "FreqMax [kHz]"SHELL_NEWLINE_STR);
 8009802:	4620      	mov	r0, r4
 8009804:	495e      	ldr	r1, [pc, #376]	; (8009980 <cmdConvert+0x1c8>)
 8009806:	f7fe ffa4 	bl	8008752 <chprintf>
        if(i == converter->activeBand) {
            printfFixed(chp, 9, "\t%u [*]", i);
        } else {
            printfFixed(chp, 9, "\t%u", i);
        }
        printfFixed(chp, 7, "%s", converter->bands[i].bandName);
 800980a:	f8df 8178 	ldr.w	r8, [pc, #376]	; 8009984 <cmdConvert+0x1cc>
        printfFixed(chp, 14, "%u", converter->bands[i].minFrequencyKHz);
 800980e:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8009988 <cmdConvert+0x1d0>
        chprintf(chp,	     "%u"SHELL_NEWLINE_STR, converter->bands[i].maxFrequencyKHz);
 8009812:	f8df a178 	ldr.w	sl, [pc, #376]	; 800998c <cmdConvert+0x1d4>
    for(uint8_t i=0; converter->bands[i].functions; i++) {
 8009816:	2714      	movs	r7, #20
 8009818:	b2f3      	uxtb	r3, r6
 800981a:	435f      	muls	r7, r3
 800981c:	696a      	ldr	r2, [r5, #20]
 800981e:	443a      	add	r2, r7
 8009820:	6912      	ldr	r2, [r2, #16]
 8009822:	b96a      	cbnz	r2, 8009840 <cmdConvert+0x88>
    }

    chprintf(chp, SHELL_NEWLINE_STR);
 8009824:	4620      	mov	r0, r4
 8009826:	495a      	ldr	r1, [pc, #360]	; (8009990 <cmdConvert+0x1d8>)
 8009828:	f7fe ff93 	bl	8008752 <chprintf>

    if(converter->activeBand == 0xff) {
 800982c:	7e2b      	ldrb	r3, [r5, #24]
 800982e:	2bff      	cmp	r3, #255	; 0xff
 8009830:	d12c      	bne.n	800988c <cmdConvert+0xd4>
        chprintf(chp, "Converter disabled." SHELL_NEWLINE_STR);
 8009832:	4958      	ldr	r1, [pc, #352]	; (8009994 <cmdConvert+0x1dc>)
    chprintf(chp, "\tconvert status"SHELL_NEWLINE_STR);
 8009834:	4620      	mov	r0, r4
            return;
        }
    }

    cmdConvertUsage(chp);
}
 8009836:	b008      	add	sp, #32
 8009838:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    chprintf(chp, "\tconvert status"SHELL_NEWLINE_STR);
 800983c:	f7fe bf89 	b.w	8008752 <chprintf>
        if(_BV(i) & converter-> disabledBands) {
 8009840:	69ea      	ldr	r2, [r5, #28]
 8009842:	40da      	lsrs	r2, r3
 8009844:	07d1      	lsls	r1, r2, #31
 8009846:	d41f      	bmi.n	8009888 <cmdConvert+0xd0>
        if(i == converter->activeBand) {
 8009848:	7e2a      	ldrb	r2, [r5, #24]
            printfFixed(chp, 9, "\t%u", i);
 800984a:	2109      	movs	r1, #9
        if(i == converter->activeBand) {
 800984c:	429a      	cmp	r2, r3
            printfFixed(chp, 9, "\t%u [*]", i);
 800984e:	bf0a      	itet	eq
 8009850:	4613      	moveq	r3, r2
            printfFixed(chp, 9, "\t%u", i);
 8009852:	4a51      	ldrne	r2, [pc, #324]	; (8009998 <cmdConvert+0x1e0>)
            printfFixed(chp, 9, "\t%u [*]", i);
 8009854:	4a51      	ldreq	r2, [pc, #324]	; (800999c <cmdConvert+0x1e4>)
            printfFixed(chp, 9, "\t%u", i);
 8009856:	4620      	mov	r0, r4
 8009858:	f7ff f928 	bl	8008aac <printfFixed>
        printfFixed(chp, 7, "%s", converter->bands[i].bandName);
 800985c:	696b      	ldr	r3, [r5, #20]
 800985e:	4642      	mov	r2, r8
 8009860:	2107      	movs	r1, #7
 8009862:	59db      	ldr	r3, [r3, r7]
 8009864:	4620      	mov	r0, r4
 8009866:	f7ff f921 	bl	8008aac <printfFixed>
        printfFixed(chp, 14, "%u", converter->bands[i].minFrequencyKHz);
 800986a:	696b      	ldr	r3, [r5, #20]
 800986c:	464a      	mov	r2, r9
 800986e:	443b      	add	r3, r7
 8009870:	210e      	movs	r1, #14
 8009872:	685b      	ldr	r3, [r3, #4]
 8009874:	4620      	mov	r0, r4
 8009876:	f7ff f919 	bl	8008aac <printfFixed>
        chprintf(chp,	     "%u"SHELL_NEWLINE_STR, converter->bands[i].maxFrequencyKHz);
 800987a:	696b      	ldr	r3, [r5, #20]
 800987c:	4651      	mov	r1, sl
 800987e:	443b      	add	r3, r7
 8009880:	4620      	mov	r0, r4
 8009882:	689a      	ldr	r2, [r3, #8]
 8009884:	f7fe ff65 	bl	8008752 <chprintf>
    for(uint8_t i=0; converter->bands[i].functions; i++) {
 8009888:	3601      	adds	r6, #1
 800988a:	e7c4      	b.n	8009816 <cmdConvert+0x5e>
    } else {
        chprintf(chp, "Input Frequency:    %u kHz" SHELL_NEWLINE_STR, converter->currentTune.inputFrequencyKHz);
 800988c:	682a      	ldr	r2, [r5, #0]
 800988e:	4620      	mov	r0, r4
 8009890:	4943      	ldr	r1, [pc, #268]	; (80099a0 <cmdConvert+0x1e8>)
 8009892:	f7fe ff5e 	bl	8008752 <chprintf>
        chprintf(chp, "Output Frequency:   %u kHz" SHELL_NEWLINE_STR, converter->currentTune.outputFrequencyKHz);
 8009896:	68ea      	ldr	r2, [r5, #12]
 8009898:	4620      	mov	r0, r4
 800989a:	4942      	ldr	r1, [pc, #264]	; (80099a4 <cmdConvert+0x1ec>)
 800989c:	f7fe ff59 	bl	8008752 <chprintf>
        chprintf(chp, "Spectral inversion: %u" SHELL_NEWLINE_STR, converter->currentTune.spectrumInversion);
 80098a0:	7c2a      	ldrb	r2, [r5, #16]
 80098a2:	4620      	mov	r0, r4
 80098a4:	4940      	ldr	r1, [pc, #256]	; (80099a8 <cmdConvert+0x1f0>)
 80098a6:	f7fe ff54 	bl	8008752 <chprintf>
        chprintf(chp, "Selected antenna:   %u" SHELL_NEWLINE_STR , converter->currentTune.antennaInput);
 80098aa:	4620      	mov	r0, r4
 80098ac:	686a      	ldr	r2, [r5, #4]
 80098ae:	493f      	ldr	r1, [pc, #252]	; (80099ac <cmdConvert+0x1f4>)
}
 80098b0:	b008      	add	sp, #32
 80098b2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80098b6:	f7fe bf4c 	b.w	8008752 <chprintf>
    } else if (argc >= 2) {
 80098ba:	dd49      	ble.n	8009950 <cmdConvert+0x198>
        if(argc == 3 && !strcmp(argv[0], "hs")) {
 80098bc:	2a03      	cmp	r2, #3
        if(!strcmp(argv[0], "status")) {
 80098be:	681f      	ldr	r7, [r3, #0]
        if(argc == 3 && !strcmp(argv[0], "hs")) {
 80098c0:	d117      	bne.n	80098f2 <cmdConvert+0x13a>
 80098c2:	4638      	mov	r0, r7
 80098c4:	493a      	ldr	r1, [pc, #232]	; (80099b0 <cmdConvert+0x1f8>)
 80098c6:	f7fa f97f 	bl	8003bc8 <strcmp>
 80098ca:	b990      	cbnz	r0, 80098f2 <cmdConvert+0x13a>
            uint32_t band = strToInt(argv[1], 10);
 80098cc:	210a      	movs	r1, #10
 80098ce:	6870      	ldr	r0, [r6, #4]
 80098d0:	f7fa fc83 	bl	80041da <strToInt>
            if(band < sizeof(converterSHFBandConfig)/sizeof(ConverterSHFConfig)) {
 80098d4:	2803      	cmp	r0, #3
 80098d6:	d80c      	bhi.n	80098f2 <cmdConvert+0x13a>
                converterSHFBandConfig[band].useHighSideMixing = (argv[2][0] == '1');
 80098d8:	230c      	movs	r3, #12
 80098da:	4358      	muls	r0, r3
 80098dc:	68b3      	ldr	r3, [r6, #8]
 80098de:	781b      	ldrb	r3, [r3, #0]
 80098e0:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80098e4:	4253      	negs	r3, r2
 80098e6:	4153      	adcs	r3, r2
 80098e8:	4a32      	ldr	r2, [pc, #200]	; (80099b4 <cmdConvert+0x1fc>)
 80098ea:	5413      	strb	r3, [r2, r0]
}
 80098ec:	b008      	add	sp, #32
 80098ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if(!strcmp(argv[0], "setup")) {
 80098f2:	4638      	mov	r0, r7
 80098f4:	4930      	ldr	r1, [pc, #192]	; (80099b8 <cmdConvert+0x200>)
 80098f6:	f7fa f967 	bl	8003bc8 <strcmp>
 80098fa:	4607      	mov	r7, r0
 80098fc:	bb40      	cbnz	r0, 8009950 <cmdConvert+0x198>
            uint32_t frequency = strToInt(argv[1], 10);
 80098fe:	210a      	movs	r1, #10
 8009900:	6870      	ldr	r0, [r6, #4]
 8009902:	f7fa fc6a 	bl	80041da <strToInt>
            if(argc >= 3) {
 8009906:	f1b8 0f02 	cmp.w	r8, #2
            tuneRequest.antennaInput = 0;
 800990a:	e9cd 0703 	strd	r0, r7, [sp, #12]
            if(argc >= 3) {
 800990e:	d111      	bne.n	8009934 <cmdConvert+0x17c>
            tuneRequest.forceBand = false;
 8009910:	f88d 7014 	strb.w	r7, [sp, #20]
            bool result = converterTune(converter, &tuneRequest);
 8009914:	4628      	mov	r0, r5
 8009916:	a903      	add	r1, sp, #12
 8009918:	f7fa fde0 	bl	80044dc <converterTune>
            if(result) {
 800991c:	b198      	cbz	r0, 8009946 <cmdConvert+0x18e>
                chprintf(chp, "IF Frequency: %u kHz, inversion: %u (band %u)"SHELL_NEWLINE_STR, tuneRequest.outputFrequencyKHz, tuneRequest.spectrumInversion, tuneRequest.bandId);
 800991e:	f89d 3015 	ldrb.w	r3, [sp, #21]
 8009922:	4620      	mov	r0, r4
 8009924:	9300      	str	r3, [sp, #0]
 8009926:	9a06      	ldr	r2, [sp, #24]
 8009928:	f89d 301c 	ldrb.w	r3, [sp, #28]
 800992c:	4923      	ldr	r1, [pc, #140]	; (80099bc <cmdConvert+0x204>)
 800992e:	f7fe ff10 	bl	8008752 <chprintf>
 8009932:	e7db      	b.n	80098ec <cmdConvert+0x134>
                tuneRequest.forceBand = true;
 8009934:	2301      	movs	r3, #1
                tuneRequest.bandId = strToInt(argv[2], 10);
 8009936:	68b0      	ldr	r0, [r6, #8]
                tuneRequest.forceBand = true;
 8009938:	f88d 3014 	strb.w	r3, [sp, #20]
                tuneRequest.bandId = strToInt(argv[2], 10);
 800993c:	f7fa fc4d 	bl	80041da <strToInt>
 8009940:	f88d 0015 	strb.w	r0, [sp, #21]
 8009944:	e7e6      	b.n	8009914 <cmdConvert+0x15c>
                chprintf(chp, "Error!"SHELL_NEWLINE_STR);
 8009946:	4620      	mov	r0, r4
 8009948:	491d      	ldr	r1, [pc, #116]	; (80099c0 <cmdConvert+0x208>)
 800994a:	f7fe ff02 	bl	8008752 <chprintf>
            return;
 800994e:	e7cd      	b.n	80098ec <cmdConvert+0x134>
    chprintf(chp, "Usage:"SHELL_NEWLINE_STR);
 8009950:	491c      	ldr	r1, [pc, #112]	; (80099c4 <cmdConvert+0x20c>)
 8009952:	4620      	mov	r0, r4
 8009954:	f7fe fefd 	bl	8008752 <chprintf>
    chprintf(chp, "\tconvert setup [freqkHz] [forceBand]"SHELL_NEWLINE_STR);
 8009958:	491b      	ldr	r1, [pc, #108]	; (80099c8 <cmdConvert+0x210>)
 800995a:	4620      	mov	r0, r4
 800995c:	f7fe fef9 	bl	8008752 <chprintf>
    chprintf(chp, "\tconvert hs [shfband] [1/0]"SHELL_NEWLINE_STR);
 8009960:	491a      	ldr	r1, [pc, #104]	; (80099cc <cmdConvert+0x214>)
 8009962:	4620      	mov	r0, r4
 8009964:	f7fe fef5 	bl	8008752 <chprintf>
    chprintf(chp, "\tconvert status"SHELL_NEWLINE_STR);
 8009968:	4919      	ldr	r1, [pc, #100]	; (80099d0 <cmdConvert+0x218>)
 800996a:	e763      	b.n	8009834 <cmdConvert+0x7c>
 800996c:	0800c07b 	.word	0x0800c07b
 8009970:	0800c0c9 	.word	0x0800c0c9
 8009974:	0800c0e9 	.word	0x0800c0e9
 8009978:	0800c35e 	.word	0x0800c35e
 800997c:	0800c0f2 	.word	0x0800c0f2
 8009980:	0800c100 	.word	0x0800c100
 8009984:	0800bc8c 	.word	0x0800bc8c
 8009988:	0800c119 	.word	0x0800c119
 800998c:	0800c199 	.word	0x0800c199
 8009990:	0800be6c 	.word	0x0800be6c
 8009994:	0800c11c 	.word	0x0800c11c
 8009998:	0800c118 	.word	0x0800c118
 800999c:	0800c110 	.word	0x0800c110
 80099a0:	0800c132 	.word	0x0800c132
 80099a4:	0800c14f 	.word	0x0800c14f
 80099a8:	0800c16c 	.word	0x0800c16c
 80099ac:	0800c185 	.word	0x0800c185
 80099b0:	0800c19e 	.word	0x0800c19e
 80099b4:	2000080c 	.word	0x2000080c
 80099b8:	0800c1a1 	.word	0x0800c1a1
 80099bc:	0800c1a7 	.word	0x0800c1a7
 80099c0:	0800c1d7 	.word	0x0800c1d7
 80099c4:	0800bc75 	.word	0x0800bc75
 80099c8:	0800c1e0 	.word	0x0800c1e0
 80099cc:	0800c207 	.word	0x0800c207
 80099d0:	0800c225 	.word	0x0800c225

080099d4 <cmdReboot>:
{
 80099d4:	b538      	push	{r3, r4, r5, lr}
 80099d6:	460c      	mov	r4, r1
    if(argc == 0) {
 80099d8:	b9ca      	cbnz	r2, 8009a0e <cmdReboot+0x3a>
        chprintf(chp,"Usage:"SHELL_NEWLINE_STR);
 80099da:	4927      	ldr	r1, [pc, #156]	; (8009a78 <cmdReboot+0xa4>)
 80099dc:	4620      	mov	r0, r4
 80099de:	f7fe feb8 	bl	8008752 <chprintf>
        chprintf(chp,"\t reboot nvic"SHELL_NEWLINE_STR);
 80099e2:	4926      	ldr	r1, [pc, #152]	; (8009a7c <cmdReboot+0xa8>)
 80099e4:	4620      	mov	r0, r4
 80099e6:	f7fe feb4 	bl	8008752 <chprintf>
        chprintf(chp,"\t reboot loader"SHELL_NEWLINE_STR);
 80099ea:	4925      	ldr	r1, [pc, #148]	; (8009a80 <cmdReboot+0xac>)
 80099ec:	4620      	mov	r0, r4
 80099ee:	f7fe feb0 	bl	8008752 <chprintf>
        chprintf(chp,"\t reboot loaderp"SHELL_NEWLINE_STR);
 80099f2:	4924      	ldr	r1, [pc, #144]	; (8009a84 <cmdReboot+0xb0>)
 80099f4:	4620      	mov	r0, r4
 80099f6:	f7fe feac 	bl	8008752 <chprintf>
        chprintf(chp,"\t reboot crash"SHELL_NEWLINE_STR);
 80099fa:	4923      	ldr	r1, [pc, #140]	; (8009a88 <cmdReboot+0xb4>)
 80099fc:	4620      	mov	r0, r4
 80099fe:	f7fe fea8 	bl	8008752 <chprintf>
        chprintf(chp,"\t reboot memexec"SHELL_NEWLINE_STR);
 8009a02:	4922      	ldr	r1, [pc, #136]	; (8009a8c <cmdReboot+0xb8>)
            chprintf(chp, "Wrong result!"SHELL_NEWLINE_STR);
 8009a04:	4620      	mov	r0, r4
}
 8009a06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            chprintf(chp, "Wrong result!"SHELL_NEWLINE_STR);
 8009a0a:	f7fe bea2 	b.w	8008752 <chprintf>
    } else if(argc == 1 && !strcmp(argv[0], "loaderp")) {
 8009a0e:	2a01      	cmp	r2, #1
 8009a10:	d12f      	bne.n	8009a72 <cmdReboot+0x9e>
 8009a12:	681d      	ldr	r5, [r3, #0]
 8009a14:	491e      	ldr	r1, [pc, #120]	; (8009a90 <cmdReboot+0xbc>)
 8009a16:	4628      	mov	r0, r5
 8009a18:	f7fa f8d6 	bl	8003bc8 <strcmp>
 8009a1c:	b1f0      	cbz	r0, 8009a5c <cmdReboot+0x88>
    } else if(argc == 1 && !strcmp(argv[0], "loader")) {
 8009a1e:	4628      	mov	r0, r5
 8009a20:	491c      	ldr	r1, [pc, #112]	; (8009a94 <cmdReboot+0xc0>)
 8009a22:	f7fa f8d1 	bl	8003bc8 <strcmp>
 8009a26:	b1d8      	cbz	r0, 8009a60 <cmdReboot+0x8c>
    } else if(argc == 1 && !strcmp(argv[0], "crash")) {
 8009a28:	4628      	mov	r0, r5
 8009a2a:	491b      	ldr	r1, [pc, #108]	; (8009a98 <cmdReboot+0xc4>)
 8009a2c:	f7fa f8cc 	bl	8003bc8 <strcmp>
 8009a30:	b910      	cbnz	r0, 8009a38 <cmdReboot+0x64>
        osalSysHalt("crash");
 8009a32:	f7fa fe87 	bl	8004744 <vTaskEndScheduler>
 8009a36:	e7fe      	b.n	8009a36 <cmdReboot+0x62>
    } else if(argc == 1 && !strcmp(argv[0], "memexec")) {
 8009a38:	4628      	mov	r0, r5
 8009a3a:	4918      	ldr	r1, [pc, #96]	; (8009a9c <cmdReboot+0xc8>)
 8009a3c:	f7fa f8c4 	bl	8003bc8 <strcmp>
 8009a40:	b9b8      	cbnz	r0, 8009a72 <cmdReboot+0x9e>
        if(callIt(4) == 5 && callIt(54) == 55) {
 8009a42:	2004      	movs	r0, #4
        uint32_t (*callIt)(uint32_t) = (uint32_t(*)(uint32_t))(incr0bxlr+1); /* +1 for thumb mode */
 8009a44:	4d16      	ldr	r5, [pc, #88]	; (8009aa0 <cmdReboot+0xcc>)
        if(callIt(4) == 5 && callIt(54) == 55) {
 8009a46:	47a8      	blx	r5
 8009a48:	2805      	cmp	r0, #5
 8009a4a:	d105      	bne.n	8009a58 <cmdReboot+0x84>
 8009a4c:	2036      	movs	r0, #54	; 0x36
 8009a4e:	47a8      	blx	r5
 8009a50:	2837      	cmp	r0, #55	; 0x37
 8009a52:	d101      	bne.n	8009a58 <cmdReboot+0x84>
            chprintf(chp, "Success!"SHELL_NEWLINE_STR);
 8009a54:	4913      	ldr	r1, [pc, #76]	; (8009aa4 <cmdReboot+0xd0>)
 8009a56:	e7d5      	b.n	8009a04 <cmdReboot+0x30>
            chprintf(chp, "Wrong result!"SHELL_NEWLINE_STR);
 8009a58:	4913      	ldr	r1, [pc, #76]	; (8009aa8 <cmdReboot+0xd4>)
 8009a5a:	e7d3      	b.n	8009a04 <cmdReboot+0x30>
        rebootCode = 0x424C;
 8009a5c:	f244 204c 	movw	r0, #16972	; 0x424c
    RCC->APB1ENR |= (RCC_APB1ENR_PWREN | RCC_APB1ENR_BKPEN);
 8009a60:	4a12      	ldr	r2, [pc, #72]	; (8009aac <cmdReboot+0xd8>)
 8009a62:	69d3      	ldr	r3, [r2, #28]
 8009a64:	f043 53c0 	orr.w	r3, r3, #402653184	; 0x18000000
 8009a68:	61d3      	str	r3, [r2, #28]
    BKP->DR10 = rebootCode;
 8009a6a:	4b11      	ldr	r3, [pc, #68]	; (8009ab0 <cmdReboot+0xdc>)
 8009a6c:	6298      	str	r0, [r3, #40]	; 0x28
    NVIC_SystemReset();
 8009a6e:	f7fa fbe3 	bl	8004238 <NVIC_SystemReset.lto_priv.0>
        rebootCode = 0x424D;
 8009a72:	f244 204d 	movw	r0, #16973	; 0x424d
 8009a76:	e7f3      	b.n	8009a60 <cmdReboot+0x8c>
 8009a78:	0800bc75 	.word	0x0800bc75
 8009a7c:	0800c237 	.word	0x0800c237
 8009a80:	0800c247 	.word	0x0800c247
 8009a84:	0800c259 	.word	0x0800c259
 8009a88:	0800c26c 	.word	0x0800c26c
 8009a8c:	0800c27d 	.word	0x0800c27d
 8009a90:	0800c290 	.word	0x0800c290
 8009a94:	0800c298 	.word	0x0800c298
 8009a98:	0800c29f 	.word	0x0800c29f
 8009a9c:	0800c2a5 	.word	0x0800c2a5
 8009aa0:	2000084d 	.word	0x2000084d
 8009aa4:	0800c2ad 	.word	0x0800c2ad
 8009aa8:	0800c2b8 	.word	0x0800c2b8
 8009aac:	40021000 	.word	0x40021000
 8009ab0:	40006c00 	.word	0x40006c00

08009ab4 <cmdSyslog>:
{
 8009ab4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(argc == 1 && !strcmp(argv[0], "clear")) {
 8009ab8:	2a01      	cmp	r2, #1
{
 8009aba:	460d      	mov	r5, r1
 8009abc:	461c      	mov	r4, r3
 8009abe:	b087      	sub	sp, #28
    if(argc == 1 && !strcmp(argv[0], "clear")) {
 8009ac0:	d117      	bne.n	8009af2 <cmdSyslog+0x3e>
 8009ac2:	4942      	ldr	r1, [pc, #264]	; (8009bcc <cmdSyslog+0x118>)
 8009ac4:	6818      	ldr	r0, [r3, #0]
 8009ac6:	f7fa f87f 	bl	8003bc8 <strcmp>
 8009aca:	4604      	mov	r4, r0
 8009acc:	b9f8      	cbnz	r0, 8009b0e <cmdSyslog+0x5a>
    xSemaphoreTake(syslogSemaphore, portMAX_DELAY);
 8009ace:	4b40      	ldr	r3, [pc, #256]	; (8009bd0 <cmdSyslog+0x11c>)
 8009ad0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8009ad4:	681d      	ldr	r5, [r3, #0]
 8009ad6:	4628      	mov	r0, r5
 8009ad8:	f7fc f884 	bl	8005be4 <xQueueSemaphoreTake>
    }
}

void packetQueueInit(PacketQueue_t* queue, void* buffer, uint32_t bufferSize)
{
    memset(queue, 0, sizeof(*queue));
 8009adc:	221c      	movs	r2, #28
 8009ade:	4621      	mov	r1, r4
 8009ae0:	483c      	ldr	r0, [pc, #240]	; (8009bd4 <cmdSyslog+0x120>)
 8009ae2:	f001 fe97 	bl	800b814 <memset>
    xSemaphoreGive(syslogSemaphore);
 8009ae6:	4628      	mov	r0, r5
}
 8009ae8:	b007      	add	sp, #28
 8009aea:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
            i += readBytes;
        }
        chnWrite(chp, (uint8_t*)SHELL_NEWLINE_STR, strlen(SHELL_NEWLINE_STR));
    }
    packetQueueEndReadTransaction(&syslogQueue, true);
    xSemaphoreGive(syslogSemaphore);
 8009aee:	f7fe bccb 	b.w	8008488 <xQueueGenericSend.constprop.0>
    } else if(argc == 2 && !strcmp(argv[0], "add")) {
 8009af2:	2a02      	cmp	r2, #2
 8009af4:	d10b      	bne.n	8009b0e <cmdSyslog+0x5a>
 8009af6:	4938      	ldr	r1, [pc, #224]	; (8009bd8 <cmdSyslog+0x124>)
 8009af8:	6818      	ldr	r0, [r3, #0]
 8009afa:	f7fa f865 	bl	8003bc8 <strcmp>
 8009afe:	b930      	cbnz	r0, 8009b0e <cmdSyslog+0x5a>
        syslog("%s", argv[1]);
 8009b00:	6861      	ldr	r1, [r4, #4]
 8009b02:	4836      	ldr	r0, [pc, #216]	; (8009bdc <cmdSyslog+0x128>)
}
 8009b04:	b007      	add	sp, #28
 8009b06:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        syslog("%s", argv[1]);
 8009b0a:	f7ff b93f 	b.w	8008d8c <syslog>
    xSemaphoreTake(syslogSemaphore, portMAX_DELAY);
 8009b0e:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 8009bd0 <cmdSyslog+0x11c>
    if(syslogQueue.numDropped) {
 8009b12:	4c33      	ldr	r4, [pc, #204]	; (8009be0 <cmdSyslog+0x12c>)
    xSemaphoreTake(syslogSemaphore, portMAX_DELAY);
 8009b14:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8009b18:	f8d8 0000 	ldr.w	r0, [r8]
 8009b1c:	f7fc f862 	bl	8005be4 <xQueueSemaphoreTake>
    if(syslogQueue.numDropped) {
 8009b20:	6a22      	ldr	r2, [r4, #32]
 8009b22:	b11a      	cbz	r2, 8009b2c <cmdSyslog+0x78>
        chprintf(chp, "... %u dropped ..."SHELL_NEWLINE_STR, syslogQueue.numDropped);
 8009b24:	4628      	mov	r0, r5
 8009b26:	492f      	ldr	r1, [pc, #188]	; (8009be4 <cmdSyslog+0x130>)
 8009b28:	f7fe fe13 	bl	8008752 <chprintf>
    queue->readPtrStored = queue->readPtr;
 8009b2c:	68a3      	ldr	r3, [r4, #8]
        chnWrite(chp, (uint8_t*)SHELL_NEWLINE_STR, strlen(SHELL_NEWLINE_STR));
 8009b2e:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8009be8 <cmdSyslog+0x134>
 8009b32:	60e3      	str	r3, [r4, #12]
    queue->pktCountStored = queue->pktCount;
 8009b34:	8aa3      	ldrh	r3, [r4, #20]
 8009b36:	82e3      	strh	r3, [r4, #22]
    if(!queue->pktCount) {
 8009b38:	8aa3      	ldrh	r3, [r4, #20]
 8009b3a:	b943      	cbnz	r3, 8009b4e <cmdSyslog+0x9a>
        queue->readPtr = queue->readPtrStored;
 8009b3c:	68e3      	ldr	r3, [r4, #12]
    xSemaphoreGive(syslogSemaphore);
 8009b3e:	f8d8 0000 	ldr.w	r0, [r8]
 8009b42:	60a3      	str	r3, [r4, #8]
        queue->pktCount = queue->pktCountStored;
 8009b44:	8ae3      	ldrh	r3, [r4, #22]
 8009b46:	82a3      	strh	r3, [r4, #20]
 8009b48:	e7ce      	b.n	8009ae8 <cmdSyslog+0x34>
        return 0;
 8009b4a:	463e      	mov	r6, r7
 8009b4c:	e02a      	b.n	8009ba4 <cmdSyslog+0xf0>
    queue->pktLen = (packetQueueReadByte(queue) << 8) |
 8009b4e:	f7fc fa05 	bl	8005f5c <packetQueueReadByte.constprop.0>
 8009b52:	4606      	mov	r6, r0
                    (packetQueueReadByte(queue));
 8009b54:	f7fc fa02 	bl	8005f5c <packetQueueReadByte.constprop.0>
    queue->pktLen = (packetQueueReadByte(queue) << 8) |
 8009b58:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
    return queue->pktLen;
 8009b5c:	b283      	uxth	r3, r0
    queue->pktLen = (packetQueueReadByte(queue) << 8) |
 8009b5e:	61a0      	str	r0, [r4, #24]
    return queue->pktLen;
 8009b60:	9300      	str	r3, [sp, #0]
    while((len = packetQueueReadPacket(&syslogQueue))) {
 8009b62:	2800      	cmp	r0, #0
 8009b64:	d0ea      	beq.n	8009b3c <cmdSyslog+0x88>
        uint16_t i = 0;
 8009b66:	f04f 0900 	mov.w	r9, #0
    if(!queue->pktLen) {
 8009b6a:	69a7      	ldr	r7, [r4, #24]
 8009b6c:	2f00      	cmp	r7, #0
 8009b6e:	d0ec      	beq.n	8009b4a <cmdSyslog+0x96>
    if(bufLen > queue->pktLen) {
 8009b70:	2f0c      	cmp	r7, #12
 8009b72:	bf28      	it	cs
 8009b74:	270c      	movcs	r7, #12
        for(uint16_t i=0; i<bufLen; i++) {
 8009b76:	f04f 0b00 	mov.w	fp, #0
 8009b7a:	b2be      	uxth	r6, r7
 8009b7c:	aa03      	add	r2, sp, #12
 8009b7e:	9201      	str	r2, [sp, #4]
            buffer[i] = packetQueueReadByte(queue);
 8009b80:	f7fc f9ec 	bl	8005f5c <packetQueueReadByte.constprop.0>
        for(uint16_t i=0; i<bufLen; i++) {
 8009b84:	f10b 0b01 	add.w	fp, fp, #1
            buffer[i] = packetQueueReadByte(queue);
 8009b88:	9a01      	ldr	r2, [sp, #4]
        for(uint16_t i=0; i<bufLen; i++) {
 8009b8a:	fa1f fb8b 	uxth.w	fp, fp
 8009b8e:	45b3      	cmp	fp, r6
            buffer[i] = packetQueueReadByte(queue);
 8009b90:	f802 0b01 	strb.w	r0, [r2], #1
        for(uint16_t i=0; i<bufLen; i++) {
 8009b94:	d3f3      	bcc.n	8009b7e <cmdSyslog+0xca>
    queue->pktLen -= bufLen;
 8009b96:	69a2      	ldr	r2, [r4, #24]
 8009b98:	1bd7      	subs	r7, r2, r7
 8009b9a:	61a7      	str	r7, [r4, #24]
    if(!queue->pktLen) {
 8009b9c:	b917      	cbnz	r7, 8009ba4 <cmdSyslog+0xf0>
        queue->pktCount--;
 8009b9e:	8aa2      	ldrh	r2, [r4, #20]
 8009ba0:	3a01      	subs	r2, #1
 8009ba2:	82a2      	strh	r2, [r4, #20]
            chnWrite(chp, tmpBuf, readBytes);
 8009ba4:	682a      	ldr	r2, [r5, #0]
 8009ba6:	4628      	mov	r0, r5
 8009ba8:	6817      	ldr	r7, [r2, #0]
 8009baa:	a903      	add	r1, sp, #12
 8009bac:	4632      	mov	r2, r6
 8009bae:	47b8      	blx	r7
            i += readBytes;
 8009bb0:	444e      	add	r6, r9
        while(i < len) {
 8009bb2:	9b00      	ldr	r3, [sp, #0]
            i += readBytes;
 8009bb4:	fa1f f986 	uxth.w	r9, r6
        while(i < len) {
 8009bb8:	4599      	cmp	r9, r3
 8009bba:	d3d6      	bcc.n	8009b6a <cmdSyslog+0xb6>
        chnWrite(chp, (uint8_t*)SHELL_NEWLINE_STR, strlen(SHELL_NEWLINE_STR));
 8009bbc:	682b      	ldr	r3, [r5, #0]
 8009bbe:	2202      	movs	r2, #2
 8009bc0:	4651      	mov	r1, sl
 8009bc2:	4628      	mov	r0, r5
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	4798      	blx	r3
 8009bc8:	e7b6      	b.n	8009b38 <cmdSyslog+0x84>
 8009bca:	bf00      	nop
 8009bcc:	0800c0b7 	.word	0x0800c0b7
 8009bd0:	20001334 	.word	0x20001334
 8009bd4:	20001318 	.word	0x20001318
 8009bd8:	0800c2c8 	.word	0x0800c2c8
 8009bdc:	0800bc8c 	.word	0x0800bc8c
 8009be0:	20001310 	.word	0x20001310
 8009be4:	0800c2cc 	.word	0x0800c2cc
 8009be8:	0800be6c 	.word	0x0800be6c

08009bec <shellStartThread>:
{
 8009bec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bf0:	4681      	mov	r9, r0
  *(scfg->sc_histbuf) = 0;
 8009bf2:	f04f 0b00 	mov.w	fp, #0
 8009bf6:	4bb6      	ldr	r3, [pc, #728]	; (8009ed0 <shellStartThread+0x2e4>)
 8009bf8:	b0a3      	sub	sp, #140	; 0x8c
 8009bfa:	681b      	ldr	r3, [r3, #0]
    syslog("Shell 0x%08x started (%s).", activeShell, activeShell->taskName);
 8009bfc:	4601      	mov	r1, r0
 8009bfe:	65d8      	str	r0, [r3, #92]	; 0x5c
 8009c00:	6802      	ldr	r2, [r0, #0]
 8009c02:	48b4      	ldr	r0, [pc, #720]	; (8009ed4 <shellStartThread+0x2e8>)
 8009c04:	f7ff f8c2 	bl	8008d8c <syslog>
  const ShellCommand *scp = scfg->sc_commands;
 8009c08:	e9d9 7301 	ldrd	r7, r3, [r9, #4]
 8009c0c:	9302      	str	r3, [sp, #8]
  *(scfg->sc_histbuf) = 0;
 8009c0e:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8009c12:	f883 b000 	strb.w	fp, [r3]
  ShellHistory hist = {
 8009c16:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8009c1a:	e9cd bb0a 	strd	fp, fp, [sp, #40]	; 0x28
 8009c1e:	9307      	str	r3, [sp, #28]
 8009c20:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009c24:	e9cd 3b08 	strd	r3, fp, [sp, #32]
  chprintf(chp, SHELL_NEWLINE_STR);
 8009c28:	49ab      	ldr	r1, [pc, #684]	; (8009ed8 <shellStartThread+0x2ec>)
 8009c2a:	4638      	mov	r0, r7
 8009c2c:	f7fe fd91 	bl	8008752 <chprintf>
bool shellGetLine(ShellConfig *scfg, char *line, unsigned size, ShellHistory *shp) {
  char *p = line;
  BaseSequentialStream *chp = scfg->sc_channel;
#if SHELL_USE_ESC_SEQ == TRUE
  bool escape = false;
  bool bracket = false;
 8009c30:	f04f 0800 	mov.w	r8, #0
  char *p = line;
 8009c34:	ad12      	add	r5, sp, #72	; 0x48
  bool escape = false;
 8009c36:	46c2      	mov	sl, r8
 8009c38:	462e      	mov	r6, r5
    chprintf(chp, SHELL_PROMPT_STR);
 8009c3a:	4638      	mov	r0, r7
 8009c3c:	49a7      	ldr	r1, [pc, #668]	; (8009edc <shellStartThread+0x2f0>)
 8009c3e:	f7fe fd88 	bl	8008752 <chprintf>
    if (shellGetLine(scfg, line, sizeof(line), shp)) {
 8009c42:	f8d9 4004 	ldr.w	r4, [r9, #4]
#endif

  while (true) {
    char c;

    if (streamRead(chp, (uint8_t *)&c, 1) == 0)
 8009c46:	6823      	ldr	r3, [r4, #0]
 8009c48:	2201      	movs	r2, #1
 8009c4a:	4620      	mov	r0, r4
 8009c4c:	685b      	ldr	r3, [r3, #4]
 8009c4e:	f10d 0117 	add.w	r1, sp, #23
 8009c52:	4798      	blx	r3
 8009c54:	2800      	cmp	r0, #0
 8009c56:	d041      	beq.n	8009cdc <shellStartThread+0xf0>
      return true;
#if SHELL_USE_ESC_SEQ == TRUE
    if (c == 27) {
 8009c58:	f89d 1017 	ldrb.w	r1, [sp, #23]
 8009c5c:	291b      	cmp	r1, #27
 8009c5e:	f000 8129 	beq.w	8009eb4 <shellStartThread+0x2c8>
      escape = true;
      continue;
    }
    if (escape) {
 8009c62:	f1ba 0f00 	cmp.w	sl, #0
 8009c66:	d033      	beq.n	8009cd0 <shellStartThread+0xe4>
      escape = false;
      if (c == '[') {
 8009c68:	295b      	cmp	r1, #91	; 0x5b
 8009c6a:	f000 8126 	beq.w	8009eba <shellStartThread+0x2ce>
        escape = true;
        bracket = true;
        continue;
      }
      if (bracket) {
 8009c6e:	f1b8 0f00 	cmp.w	r8, #0
 8009c72:	d02b      	beq.n	8009ccc <shellStartThread+0xe0>
        bracket = false;
#if SHELL_USE_HISTORY == TRUE
        if (c == 'A') {
 8009c74:	2941      	cmp	r1, #65	; 0x41
 8009c76:	d119      	bne.n	8009cac <shellStartThread+0xc0>
          int len = get_history(shp, line, SHELL_HIST_DIR_BK);
 8009c78:	2200      	movs	r2, #0
 8009c7a:	4631      	mov	r1, r6
 8009c7c:	a807      	add	r0, sp, #28
 8009c7e:	f7fd ff86 	bl	8007b8e <get_history>

          if (len > 0) {
 8009c82:	f1b0 0800 	subs.w	r8, r0, #0
 8009c86:	dd1f      	ble.n	8009cc8 <shellStartThread+0xdc>

          if (len == 0)
            *line = 0;

          if (len >= 0) {
            _shell_reset_cur(chp);
 8009c88:	2308      	movs	r3, #8
 8009c8a:	224a      	movs	r2, #74	; 0x4a
 8009c8c:	4994      	ldr	r1, [pc, #592]	; (8009ee0 <shellStartThread+0x2f4>)
 8009c8e:	4620      	mov	r0, r4
 8009c90:	f7fe fd5f 	bl	8008752 <chprintf>
            _shell_clr_line(chp);
 8009c94:	4993      	ldr	r1, [pc, #588]	; (8009ee4 <shellStartThread+0x2f8>)
 8009c96:	4620      	mov	r0, r4
 8009c98:	f7fe fd5b 	bl	8008752 <chprintf>
            chprintf(chp, "%s", line);
 8009c9c:	4632      	mov	r2, r6
 8009c9e:	4620      	mov	r0, r4
 8009ca0:	4991      	ldr	r1, [pc, #580]	; (8009ee8 <shellStartThread+0x2fc>)
 8009ca2:	f7fe fd56 	bl	8008752 <chprintf>
            p = line + len;
 8009ca6:	eb06 0508 	add.w	r5, r6, r8
 8009caa:	e00d      	b.n	8009cc8 <shellStartThread+0xdc>
        if (c == 'B') {
 8009cac:	2942      	cmp	r1, #66	; 0x42
 8009cae:	d10b      	bne.n	8009cc8 <shellStartThread+0xdc>
          int len = get_history(shp, line, SHELL_HIST_DIR_FW);
 8009cb0:	2201      	movs	r2, #1
 8009cb2:	4631      	mov	r1, r6
 8009cb4:	a807      	add	r0, sp, #28
 8009cb6:	f7fd ff6a 	bl	8007b8e <get_history>
          if (len == 0)
 8009cba:	f1b0 0800 	subs.w	r8, r0, #0
 8009cbe:	d102      	bne.n	8009cc6 <shellStartThread+0xda>
            *line = 0;
 8009cc0:	f88d 8048 	strb.w	r8, [sp, #72]	; 0x48
 8009cc4:	e7e0      	b.n	8009c88 <shellStartThread+0x9c>
          if (len >= 0) {
 8009cc6:	dadf      	bge.n	8009c88 <shellStartThread+0x9c>
        bracket = false;
 8009cc8:	f04f 0800 	mov.w	r8, #0
      escape = false;
 8009ccc:	46c2      	mov	sl, r8
 8009cce:	e7ba      	b.n	8009c46 <shellStartThread+0x5a>
      }
      continue;
    }
#endif
#if (SHELL_CMD_EXIT_ENABLED == TRUE) && !defined(_CHIBIOS_NIL_)
    if (c == 4) {
 8009cd0:	2904      	cmp	r1, #4
 8009cd2:	d116      	bne.n	8009d02 <shellStartThread+0x116>
      chprintf(chp, "^D");
 8009cd4:	4620      	mov	r0, r4
 8009cd6:	4985      	ldr	r1, [pc, #532]	; (8009eec <shellStartThread+0x300>)
 8009cd8:	f7fe fd3b 	bl	8008752 <chprintf>
      chprintf(chp, SHELL_NEWLINE_STR);
 8009cdc:	4638      	mov	r0, r7
 8009cde:	497e      	ldr	r1, [pc, #504]	; (8009ed8 <shellStartThread+0x2ec>)
 8009ce0:	f7fe fd37 	bl	8008752 <chprintf>
      chprintf(chp, "logout");
 8009ce4:	4982      	ldr	r1, [pc, #520]	; (8009ef0 <shellStartThread+0x304>)
 8009ce6:	4638      	mov	r0, r7
 8009ce8:	f7fe fd33 	bl	8008752 <chprintf>
  chSysLock();
 8009cec:	f7fa fd1a 	bl	8004724 <vPortEnterCritical>
    osalEventBroadcastFlagsI(event_source, 1);
 8009cf0:	4880      	ldr	r0, [pc, #512]	; (8009ef4 <shellStartThread+0x308>)
 8009cf2:	2101      	movs	r1, #1
 8009cf4:	f7fd f8f0 	bl	8006ed8 <osalEventBroadcastFlagsI>
    vTaskDelete(NULL);
 8009cf8:	f7fc f9bc 	bl	8006074 <vTaskDelete.constprop.0>
}
 8009cfc:	b023      	add	sp, #140	; 0x8c
 8009cfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      return true;
    }
#endif
    if ((c == 8) || (c == 127)) {
 8009d02:	2908      	cmp	r1, #8
 8009d04:	d001      	beq.n	8009d0a <shellStartThread+0x11e>
 8009d06:	297f      	cmp	r1, #127	; 0x7f
 8009d08:	d112      	bne.n	8009d30 <shellStartThread+0x144>
      if (p != line) {
 8009d0a:	42b5      	cmp	r5, r6
 8009d0c:	d09b      	beq.n	8009c46 <shellStartThread+0x5a>
        streamPut(chp, 0x08);
 8009d0e:	6823      	ldr	r3, [r4, #0]
 8009d10:	2108      	movs	r1, #8
 8009d12:	689b      	ldr	r3, [r3, #8]
 8009d14:	4620      	mov	r0, r4
 8009d16:	4798      	blx	r3
        streamPut(chp, 0x20);
 8009d18:	6823      	ldr	r3, [r4, #0]
 8009d1a:	2120      	movs	r1, #32
 8009d1c:	689b      	ldr	r3, [r3, #8]
 8009d1e:	4620      	mov	r0, r4
 8009d20:	4798      	blx	r3
        streamPut(chp, 0x08);
 8009d22:	6823      	ldr	r3, [r4, #0]
 8009d24:	2108      	movs	r1, #8
 8009d26:	4620      	mov	r0, r4
 8009d28:	689b      	ldr	r3, [r3, #8]
 8009d2a:	4798      	blx	r3
        p--;
 8009d2c:	3d01      	subs	r5, #1
 8009d2e:	e78a      	b.n	8009c46 <shellStartThread+0x5a>
      }
      continue;
    }
    if (c == '\r') {
 8009d30:	290d      	cmp	r1, #13
 8009d32:	f040 8081 	bne.w	8009e38 <shellStartThread+0x24c>
      chprintf(chp, SHELL_NEWLINE_STR);
 8009d36:	4620      	mov	r0, r4
 8009d38:	4967      	ldr	r1, [pc, #412]	; (8009ed8 <shellStartThread+0x2ec>)
 8009d3a:	f7fe fd0a 	bl	8008752 <chprintf>
  if (length > shp->sh_size - 2)
 8009d3e:	9908      	ldr	r1, [sp, #32]
#if SHELL_USE_HISTORY == TRUE
      save_history(shp, line, p - line);
 8009d40:	1bac      	subs	r4, r5, r6
  if (length > shp->sh_size - 2)
 8009d42:	1e4b      	subs	r3, r1, #1
 8009d44:	429c      	cmp	r4, r3
 8009d46:	da06      	bge.n	8009d56 <shellStartThread+0x16a>
 8009d48:	462b      	mov	r3, r5
  while ((*(line + length -1) == ' ') && (length > 0))
 8009d4a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009d4e:	2a20      	cmp	r2, #32
 8009d50:	d12d      	bne.n	8009dae <shellStartThread+0x1c2>
 8009d52:	2c00      	cmp	r4, #0
 8009d54:	dc29      	bgt.n	8009daa <shellStartThread+0x1be>
    lp = parse_arguments(line, &tokp);
 8009d56:	4630      	mov	r0, r6
#endif
      *p = 0;
 8009d58:	f885 b000 	strb.w	fp, [r5]
    lp = parse_arguments(line, &tokp);
 8009d5c:	a906      	add	r1, sp, #24
 8009d5e:	f7ff fc3d 	bl	80095dc <parse_arguments>
 8009d62:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 8009d66:	4604      	mov	r4, r0
    n = 0;
 8009d68:	2600      	movs	r6, #0
 8009d6a:	4645      	mov	r5, r8
    while ((lp = parse_arguments(NULL, &tokp)) != NULL) {
 8009d6c:	2000      	movs	r0, #0
 8009d6e:	a906      	add	r1, sp, #24
 8009d70:	f7ff fc34 	bl	80095dc <parse_arguments>
 8009d74:	2800      	cmp	r0, #0
 8009d76:	f040 80a2 	bne.w	8009ebe <shellStartThread+0x2d2>
    args[n] = NULL;
 8009d7a:	ab22      	add	r3, sp, #136	; 0x88
 8009d7c:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 8009d80:	f843 0c58 	str.w	r0, [r3, #-88]
    if (cmd != NULL) {
 8009d84:	2c00      	cmp	r4, #0
 8009d86:	f43f af53 	beq.w	8009c30 <shellStartThread+0x44>
      if (strcmp(cmd, "help") == 0) {
 8009d8a:	4620      	mov	r0, r4
 8009d8c:	495a      	ldr	r1, [pc, #360]	; (8009ef8 <shellStartThread+0x30c>)
 8009d8e:	f7f9 ff1b 	bl	8003bc8 <strcmp>
 8009d92:	2800      	cmp	r0, #0
 8009d94:	f040 80da 	bne.w	8009f4c <shellStartThread+0x360>
        if (n > 0) {
 8009d98:	2e00      	cmp	r6, #0
 8009d9a:	f000 80b7 	beq.w	8009f0c <shellStartThread+0x320>
          shellUsage(chp, "help");
 8009d9e:	4638      	mov	r0, r7
 8009da0:	4a55      	ldr	r2, [pc, #340]	; (8009ef8 <shellStartThread+0x30c>)
 8009da2:	4956      	ldr	r1, [pc, #344]	; (8009efc <shellStartThread+0x310>)
 8009da4:	f7fe fcd5 	bl	8008752 <chprintf>
          continue;
 8009da8:	e742      	b.n	8009c30 <shellStartThread+0x44>
    length--;
 8009daa:	3c01      	subs	r4, #1
 8009dac:	e7cd      	b.n	8009d4a <shellStartThread+0x15e>
  if (length <= 0)
 8009dae:	2c00      	cmp	r4, #0
 8009db0:	ddd1      	ble.n	8009d56 <shellStartThread+0x16a>
  if (shp->sh_end >= shp->sh_beg) {
 8009db2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  int pos = shp->sh_beg + *(shp->sh_buffer + shp->sh_beg) + 1;
 8009db4:	9807      	ldr	r0, [sp, #28]
  if (shp->sh_end >= shp->sh_beg) {
 8009db6:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 8009dba:	4562      	cmp	r2, ip
    if (length < (shp->sh_size - (shp->sh_end - shp->sh_beg + 1)))
 8009dbc:	bfa5      	ittet	ge
 8009dbe:	eba2 030c 	subge.w	r3, r2, ip
 8009dc2:	3301      	addge	r3, #1
    if (length < (shp->sh_beg - shp->sh_end - 1))
 8009dc4:	ebac 0302 	sublt.w	r3, ip, r2
    if (length < (shp->sh_size - (shp->sh_end - shp->sh_beg + 1)))
 8009dc8:	1acb      	subge	r3, r1, r3
    if (length < (shp->sh_beg - shp->sh_end - 1))
 8009dca:	bfb8      	it	lt
 8009dcc:	f103 33ff 	addlt.w	r3, r3, #4294967295	; 0xffffffff
 8009dd0:	429c      	cmp	r4, r3
 8009dd2:	da1e      	bge.n	8009e12 <shellStartThread+0x226>
  if (length < shp->sh_size - shp->sh_end - 1)
 8009dd4:	eba1 0802 	sub.w	r8, r1, r2
 8009dd8:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    memcpy(shp->sh_buffer + shp->sh_end + 1, line, length);
 8009ddc:	3201      	adds	r2, #1
  if (length < shp->sh_size - shp->sh_end - 1)
 8009dde:	4544      	cmp	r4, r8
    memcpy(shp->sh_buffer + shp->sh_end + 1, line, length);
 8009de0:	4410      	add	r0, r2
  if (length < shp->sh_size - shp->sh_end - 1)
 8009de2:	da1f      	bge.n	8009e24 <shellStartThread+0x238>
    memcpy(shp->sh_buffer + shp->sh_end + 1, line, length);
 8009de4:	4622      	mov	r2, r4
 8009de6:	4631      	mov	r1, r6
    memcpy(shp->sh_buffer, line + part_len, length - part_len);
 8009de8:	f7f9 fe78 	bl	8003adc <memcpy>
  *(shp->sh_buffer + shp->sh_end) = (char)length;
 8009dec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009dee:	9a07      	ldr	r2, [sp, #28]
 8009df0:	54d4      	strb	r4, [r2, r3]
  shp->sh_end += length + 1;
 8009df2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009df4:	3401      	adds	r4, #1
 8009df6:	441c      	add	r4, r3
  if (shp->sh_end >= shp->sh_size)
 8009df8:	9b08      	ldr	r3, [sp, #32]
  shp->sh_end += length + 1;
 8009dfa:	940a      	str	r4, [sp, #40]	; 0x28
  if (shp->sh_end >= shp->sh_size)
 8009dfc:	429c      	cmp	r4, r3
    shp->sh_end -= shp->sh_size;
 8009dfe:	bfa4      	itt	ge
 8009e00:	1ae4      	subge	r4, r4, r3
 8009e02:	940a      	strge	r4, [sp, #40]	; 0x28
  *(shp->sh_buffer + shp->sh_end) = 0;
 8009e04:	9a07      	ldr	r2, [sp, #28]
 8009e06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e08:	f802 b003 	strb.w	fp, [r2, r3]
  shp->sh_cur = 0;
 8009e0c:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8009e10:	e7a1      	b.n	8009d56 <shellStartThread+0x16a>
  int pos = shp->sh_beg + *(shp->sh_buffer + shp->sh_beg) + 1;
 8009e12:	f810 300c 	ldrb.w	r3, [r0, ip]
 8009e16:	4463      	add	r3, ip
 8009e18:	3301      	adds	r3, #1
  if (pos >= shp->sh_size)
 8009e1a:	4299      	cmp	r1, r3
    pos -= shp->sh_size;
 8009e1c:	bfd8      	it	le
 8009e1e:	1a5b      	suble	r3, r3, r1
  shp->sh_beg = pos;
 8009e20:	9309      	str	r3, [sp, #36]	; 0x24
 8009e22:	e7c8      	b.n	8009db6 <shellStartThread+0x1ca>
    memcpy(shp->sh_buffer + shp->sh_end + 1, line, part_len);
 8009e24:	4642      	mov	r2, r8
 8009e26:	4631      	mov	r1, r6
 8009e28:	f7f9 fe58 	bl	8003adc <memcpy>
    memcpy(shp->sh_buffer, line + part_len, length - part_len);
 8009e2c:	9807      	ldr	r0, [sp, #28]
 8009e2e:	eba4 0208 	sub.w	r2, r4, r8
 8009e32:	eb06 0108 	add.w	r1, r6, r8
 8009e36:	e7d7      	b.n	8009de8 <shellStartThread+0x1fc>
      }
      continue;
    }
#endif
#if SHELL_USE_HISTORY == TRUE
    if (c == 14) {
 8009e38:	290e      	cmp	r1, #14
 8009e3a:	d11e      	bne.n	8009e7a <shellStartThread+0x28e>
      int len = get_history(shp, line, SHELL_HIST_DIR_FW);
 8009e3c:	2201      	movs	r2, #1
 8009e3e:	4631      	mov	r1, r6
 8009e40:	a807      	add	r0, sp, #28
 8009e42:	f7fd fea4 	bl	8007b8e <get_history>

      if (len == 0)
 8009e46:	1e03      	subs	r3, r0, #0
 8009e48:	9303      	str	r3, [sp, #12]
 8009e4a:	d113      	bne.n	8009e74 <shellStartThread+0x288>
        *line = 0;
 8009e4c:	f88d a048 	strb.w	sl, [sp, #72]	; 0x48
    }
    if (c == 16) {
      int len = get_history(shp, line, SHELL_HIST_DIR_BK);

      if (len > 0) {
        _shell_reset_cur(chp);
 8009e50:	2308      	movs	r3, #8
 8009e52:	224a      	movs	r2, #74	; 0x4a
 8009e54:	4922      	ldr	r1, [pc, #136]	; (8009ee0 <shellStartThread+0x2f4>)
 8009e56:	4620      	mov	r0, r4
 8009e58:	f7fe fc7b 	bl	8008752 <chprintf>
        _shell_clr_line(chp);
 8009e5c:	4921      	ldr	r1, [pc, #132]	; (8009ee4 <shellStartThread+0x2f8>)
 8009e5e:	4620      	mov	r0, r4
 8009e60:	f7fe fc77 	bl	8008752 <chprintf>
        chprintf(chp, "%s", line);
 8009e64:	4632      	mov	r2, r6
 8009e66:	4620      	mov	r0, r4
 8009e68:	491f      	ldr	r1, [pc, #124]	; (8009ee8 <shellStartThread+0x2fc>)
 8009e6a:	f7fe fc72 	bl	8008752 <chprintf>
        p = line + len;
 8009e6e:	9d03      	ldr	r5, [sp, #12]
 8009e70:	4435      	add	r5, r6
 8009e72:	e6e8      	b.n	8009c46 <shellStartThread+0x5a>
      if (len >= 0) {
 8009e74:	f6ff aee7 	blt.w	8009c46 <shellStartThread+0x5a>
 8009e78:	e7ea      	b.n	8009e50 <shellStartThread+0x264>
    if (c == 16) {
 8009e7a:	2910      	cmp	r1, #16
 8009e7c:	d109      	bne.n	8009e92 <shellStartThread+0x2a6>
      int len = get_history(shp, line, SHELL_HIST_DIR_BK);
 8009e7e:	4652      	mov	r2, sl
 8009e80:	4631      	mov	r1, r6
 8009e82:	a807      	add	r0, sp, #28
 8009e84:	f7fd fe83 	bl	8007b8e <get_history>
      if (len > 0) {
 8009e88:	1e03      	subs	r3, r0, #0
 8009e8a:	9303      	str	r3, [sp, #12]
 8009e8c:	f77f aedb 	ble.w	8009c46 <shellStartThread+0x5a>
 8009e90:	e7de      	b.n	8009e50 <shellStartThread+0x264>
      }
      continue;
    }
#endif
    if (c < 0x20)
 8009e92:	291f      	cmp	r1, #31
 8009e94:	f67f aed7 	bls.w	8009c46 <shellStartThread+0x5a>
      continue;
    if (p < line + size - 1) {
 8009e98:	f10d 0387 	add.w	r3, sp, #135	; 0x87
 8009e9c:	429d      	cmp	r5, r3
 8009e9e:	f4bf aed2 	bcs.w	8009c46 <shellStartThread+0x5a>
      streamPut(chp, c);
 8009ea2:	6823      	ldr	r3, [r4, #0]
 8009ea4:	4620      	mov	r0, r4
 8009ea6:	689b      	ldr	r3, [r3, #8]
 8009ea8:	4798      	blx	r3
      *p++ = (char)c;
 8009eaa:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8009eae:	f805 3b01 	strb.w	r3, [r5], #1
 8009eb2:	e6c8      	b.n	8009c46 <shellStartThread+0x5a>
      escape = true;
 8009eb4:	f04f 0a01 	mov.w	sl, #1
 8009eb8:	e6c5      	b.n	8009c46 <shellStartThread+0x5a>
        bracket = true;
 8009eba:	46d0      	mov	r8, sl
 8009ebc:	e6c3      	b.n	8009c46 <shellStartThread+0x5a>
      if (n >= SHELL_MAX_ARGUMENTS) {
 8009ebe:	2e05      	cmp	r6, #5
 8009ec0:	d120      	bne.n	8009f04 <shellStartThread+0x318>
        chprintf(chp, "too many arguments"SHELL_NEWLINE_STR);
 8009ec2:	4638      	mov	r0, r7
 8009ec4:	490e      	ldr	r1, [pc, #56]	; (8009f00 <shellStartThread+0x314>)
 8009ec6:	f7fe fc44 	bl	8008752 <chprintf>
    args[n] = NULL;
 8009eca:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
    if (cmd != NULL) {
 8009ece:	e6af      	b.n	8009c30 <shellStartThread+0x44>
 8009ed0:	200011a8 	.word	0x200011a8
 8009ed4:	0800c2e1 	.word	0x0800c2e1
 8009ed8:	0800be6c 	.word	0x0800be6c
 8009edc:	0800c2fc 	.word	0x0800c2fc
 8009ee0:	0800c305 	.word	0x0800c305
 8009ee4:	0800c310 	.word	0x0800c310
 8009ee8:	0800bc8c 	.word	0x0800bc8c
 8009eec:	0800c314 	.word	0x0800c314
 8009ef0:	0800c317 	.word	0x0800c317
 8009ef4:	200012b8 	.word	0x200012b8
 8009ef8:	0800c333 	.word	0x0800c333
 8009efc:	0800bad6 	.word	0x0800bad6
 8009f00:	0800c31e 	.word	0x0800c31e
      args[n++] = lp;
 8009f04:	3601      	adds	r6, #1
 8009f06:	f848 0b04 	str.w	r0, [r8], #4
 8009f0a:	e72f      	b.n	8009d6c <shellStartThread+0x180>
        chprintf(chp, "Commands: help ");
 8009f0c:	4638      	mov	r0, r7
 8009f0e:	491e      	ldr	r1, [pc, #120]	; (8009f88 <shellStartThread+0x39c>)
 8009f10:	f7fe fc1f 	bl	8008752 <chprintf>
 8009f14:	4c1d      	ldr	r4, [pc, #116]	; (8009f8c <shellStartThread+0x3a0>)
    chprintf(chp, "%s ", scp->sc_name);
 8009f16:	4d1e      	ldr	r5, [pc, #120]	; (8009f90 <shellStartThread+0x3a4>)
  while (scp->sc_name != NULL) {
 8009f18:	6822      	ldr	r2, [r4, #0]
 8009f1a:	b98a      	cbnz	r2, 8009f40 <shellStartThread+0x354>
        if (scp != NULL)
 8009f1c:	9b02      	ldr	r3, [sp, #8]
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	f43f ae82 	beq.w	8009c28 <shellStartThread+0x3c>
    chprintf(chp, "%s ", scp->sc_name);
 8009f24:	4d1a      	ldr	r5, [pc, #104]	; (8009f90 <shellStartThread+0x3a4>)
 8009f26:	f103 040c 	add.w	r4, r3, #12
  while (scp->sc_name != NULL) {
 8009f2a:	f854 2c0c 	ldr.w	r2, [r4, #-12]
 8009f2e:	340c      	adds	r4, #12
 8009f30:	2a00      	cmp	r2, #0
 8009f32:	f43f ae79 	beq.w	8009c28 <shellStartThread+0x3c>
    chprintf(chp, "%s ", scp->sc_name);
 8009f36:	4629      	mov	r1, r5
 8009f38:	4638      	mov	r0, r7
 8009f3a:	f7fe fc0a 	bl	8008752 <chprintf>
    scp++;
 8009f3e:	e7f4      	b.n	8009f2a <shellStartThread+0x33e>
    chprintf(chp, "%s ", scp->sc_name);
 8009f40:	4629      	mov	r1, r5
 8009f42:	4638      	mov	r0, r7
 8009f44:	f7fe fc05 	bl	8008752 <chprintf>
    scp++;
 8009f48:	340c      	adds	r4, #12
 8009f4a:	e7e5      	b.n	8009f18 <shellStartThread+0x32c>
      else if (cmdexec(shell_local_commands, chp, cmd, n, args) &&
 8009f4c:	4633      	mov	r3, r6
 8009f4e:	4622      	mov	r2, r4
 8009f50:	4639      	mov	r1, r7
 8009f52:	480e      	ldr	r0, [pc, #56]	; (8009f8c <shellStartThread+0x3a0>)
 8009f54:	9500      	str	r5, [sp, #0]
 8009f56:	f7ff fb67 	bl	8009628 <cmdexec>
 8009f5a:	2800      	cmp	r0, #0
 8009f5c:	f43f ae68 	beq.w	8009c30 <shellStartThread+0x44>
 8009f60:	9b02      	ldr	r3, [sp, #8]
 8009f62:	b933      	cbnz	r3, 8009f72 <shellStartThread+0x386>
        chprintf(chp, "%s", cmd);
 8009f64:	490b      	ldr	r1, [pc, #44]	; (8009f94 <shellStartThread+0x3a8>)
 8009f66:	4622      	mov	r2, r4
 8009f68:	4638      	mov	r0, r7
 8009f6a:	f7fe fbf2 	bl	8008752 <chprintf>
        chprintf(chp, " ?"SHELL_NEWLINE_STR);
 8009f6e:	490a      	ldr	r1, [pc, #40]	; (8009f98 <shellStartThread+0x3ac>)
 8009f70:	e65b      	b.n	8009c2a <shellStartThread+0x3e>
          ((scp == NULL) || cmdexec(scp, chp, cmd, n, args))) {
 8009f72:	4633      	mov	r3, r6
 8009f74:	4622      	mov	r2, r4
 8009f76:	4639      	mov	r1, r7
 8009f78:	9802      	ldr	r0, [sp, #8]
 8009f7a:	9500      	str	r5, [sp, #0]
 8009f7c:	f7ff fb54 	bl	8009628 <cmdexec>
 8009f80:	2800      	cmp	r0, #0
 8009f82:	d1ef      	bne.n	8009f64 <shellStartThread+0x378>
 8009f84:	e654      	b.n	8009c30 <shellStartThread+0x44>
 8009f86:	bf00      	nop
 8009f88:	0800c338 	.word	0x0800c338
 8009f8c:	0800cb80 	.word	0x0800cb80
 8009f90:	0800c348 	.word	0x0800c348
 8009f94:	0800bc8c 	.word	0x0800bc8c
 8009f98:	0800c34c 	.word	0x0800c34c

08009f9c <cmdThreadInfo>:
    else if(state == eDeleted) printfFixed(chp, 9, "Deleted");
    else printfFixed(chp, 9, "Invalid");
}

void cmdThreadInfo(void* user, BaseSequentialStream *chp, int argc, char *argv[])
{
 8009f9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    (void)argc;
    (void)argv;
    (void) user;

    unsigned int numberOfTasks = uxTaskGetNumberOfTasks();
    TaskStatus_t* taskStatusArray = pvPortMalloc(numberOfTasks * sizeof(TaskStatus_t));
 8009fa0:	2624      	movs	r6, #36	; 0x24
 8009fa2:	f8df 8260 	ldr.w	r8, [pc, #608]	; 800a204 <cmdThreadInfo+0x268>
{
 8009fa6:	b085      	sub	sp, #20
 8009fa8:	f8d8 5000 	ldr.w	r5, [r8]
 8009fac:	460c      	mov	r4, r1
    TaskStatus_t* taskStatusArray = pvPortMalloc(numberOfTasks * sizeof(TaskStatus_t));
 8009fae:	fb06 f005 	mul.w	r0, r6, r5
 8009fb2:	f7fb fc23 	bl	80057fc <pvPortMalloc>
    if(!taskStatusArray) {
 8009fb6:	4607      	mov	r7, r0
 8009fb8:	2800      	cmp	r0, #0
 8009fba:	f000 8096 	beq.w	800a0ea <cmdThreadInfo+0x14e>
 8009fbe:	f7fa fb4b 	bl	8004658 <vTaskSuspendAll>
 8009fc2:	f8d8 3000 	ldr.w	r3, [r8]
 8009fc6:	429d      	cmp	r5, r3
 8009fc8:	f0c0 8092 	bcc.w	800a0f0 <cmdThreadInfo+0x154>
 8009fcc:	f04f 0805 	mov.w	r8, #5
 8009fd0:	2500      	movs	r5, #0
 8009fd2:	f04f 0a14 	mov.w	sl, #20
 8009fd6:	f8df 9230 	ldr.w	r9, [pc, #560]	; 800a208 <cmdThreadInfo+0x26c>
 8009fda:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8009fde:	fb06 7005 	mla	r0, r6, r5, r7
 8009fe2:	2201      	movs	r2, #1
 8009fe4:	fb0a 9108 	mla	r1, sl, r8, r9
 8009fe8:	f7fb fcc2 	bl	8005970 <prvListTasksWithinSingleList>
 8009fec:	4405      	add	r5, r0
 8009fee:	f1b8 0f00 	cmp.w	r8, #0
 8009ff2:	d1f2      	bne.n	8009fda <cmdThreadInfo+0x3e>
 8009ff4:	4b85      	ldr	r3, [pc, #532]	; (800a20c <cmdThreadInfo+0x270>)
 8009ff6:	2202      	movs	r2, #2
 8009ff8:	6819      	ldr	r1, [r3, #0]
 8009ffa:	fb06 7005 	mla	r0, r6, r5, r7
 8009ffe:	f7fb fcb7 	bl	8005970 <prvListTasksWithinSingleList>
 800a002:	4b83      	ldr	r3, [pc, #524]	; (800a210 <cmdThreadInfo+0x274>)
 800a004:	4405      	add	r5, r0
 800a006:	6819      	ldr	r1, [r3, #0]
 800a008:	2202      	movs	r2, #2
 800a00a:	fb06 7005 	mla	r0, r6, r5, r7
 800a00e:	f7fb fcaf 	bl	8005970 <prvListTasksWithinSingleList>
 800a012:	4405      	add	r5, r0
 800a014:	2204      	movs	r2, #4
 800a016:	fb06 7005 	mla	r0, r6, r5, r7
 800a01a:	497e      	ldr	r1, [pc, #504]	; (800a214 <cmdThreadInfo+0x278>)
 800a01c:	f7fb fca8 	bl	8005970 <prvListTasksWithinSingleList>
 800a020:	4405      	add	r5, r0
 800a022:	fb06 7005 	mla	r0, r6, r5, r7
 800a026:	2203      	movs	r2, #3
 800a028:	497b      	ldr	r1, [pc, #492]	; (800a218 <cmdThreadInfo+0x27c>)
 800a02a:	f7fb fca1 	bl	8005970 <prvListTasksWithinSingleList>
 800a02e:	4405      	add	r5, r0
 800a030:	f7fb fb60 	bl	80056f4 <xTaskResumeAll>
        return;
    }

    uint32_t totalRunTime;
    unsigned int  result = uxTaskGetSystemState(taskStatusArray, numberOfTasks, &totalRunTime);
    printfFixed(chp, 13, "Task ID");
 800a034:	210d      	movs	r1, #13
 800a036:	4a79      	ldr	r2, [pc, #484]	; (800a21c <cmdThreadInfo+0x280>)
 800a038:	4620      	mov	r0, r4
 800a03a:	f7fe fd37 	bl	8008aac <printfFixed>
    printfFixed(chp, 10, "Task Name");
 800a03e:	210a      	movs	r1, #10
 800a040:	4a77      	ldr	r2, [pc, #476]	; (800a220 <cmdThreadInfo+0x284>)
 800a042:	4620      	mov	r0, r4
 800a044:	f7fe fd32 	bl	8008aac <printfFixed>
    printfFixed(chp, 11, "Stack Base");
 800a048:	210b      	movs	r1, #11
 800a04a:	4a76      	ldr	r2, [pc, #472]	; (800a224 <cmdThreadInfo+0x288>)
 800a04c:	4620      	mov	r0, r4
 800a04e:	f7fe fd2d 	bl	8008aac <printfFixed>
    printfFixed(chp, 11, "Free Stack");
 800a052:	210b      	movs	r1, #11
 800a054:	4a74      	ldr	r2, [pc, #464]	; (800a228 <cmdThreadInfo+0x28c>)
 800a056:	4620      	mov	r0, r4
 800a058:	f7fe fd28 	bl	8008aac <printfFixed>
    printfFixed(chp, 6, "PrioB");
 800a05c:	2106      	movs	r1, #6
 800a05e:	4a73      	ldr	r2, [pc, #460]	; (800a22c <cmdThreadInfo+0x290>)
 800a060:	4620      	mov	r0, r4
 800a062:	f7fe fd23 	bl	8008aac <printfFixed>
#if configUSE_MUTEXES
    printfFixed(chp, 6, "PrioC");
 800a066:	2106      	movs	r1, #6
 800a068:	4a71      	ldr	r2, [pc, #452]	; (800a230 <cmdThreadInfo+0x294>)
 800a06a:	4620      	mov	r0, r4
 800a06c:	f7fe fd1e 	bl	8008aac <printfFixed>
#endif
    printfFixed(chp, 9, "State");
 800a070:	2109      	movs	r1, #9
 800a072:	4a70      	ldr	r2, [pc, #448]	; (800a234 <cmdThreadInfo+0x298>)
 800a074:	4620      	mov	r0, r4
 800a076:	f7fe fd19 	bl	8008aac <printfFixed>
    chprintf(chp,SHELL_NEWLINE_STR);
 800a07a:	4620      	mov	r0, r4
 800a07c:	496e      	ldr	r1, [pc, #440]	; (800a238 <cmdThreadInfo+0x29c>)
 800a07e:	f7fe fb68 	bl	8008752 <chprintf>
    for(unsigned int i = 0; i<result; i++) {
 800a082:	463e      	mov	r6, r7
 800a084:	f04f 0800 	mov.w	r8, #0
        printfFixed(chp, 13, "%u=%08x ", taskStatusArray[i].xTaskNumber, taskStatusArray[i].xHandle);
 800a088:	f8df 91b0 	ldr.w	r9, [pc, #432]	; 800a23c <cmdThreadInfo+0x2a0>
        if(!strcmp("IDLE", taskStatusArray[i].pcTaskName)) {
 800a08c:	f8df a1b0 	ldr.w	sl, [pc, #432]	; 800a240 <cmdThreadInfo+0x2a4>
            printfFixed(chp, 10, "Idle");
        } else {
            printfFixed(chp, 10, "%s", taskStatusArray[i].pcTaskName);
 800a090:	f8df b1b0 	ldr.w	fp, [pc, #432]	; 800a244 <cmdThreadInfo+0x2a8>
    for(unsigned int i = 0; i<result; i++) {
 800a094:	45a8      	cmp	r8, r5
 800a096:	d12d      	bne.n	800a0f4 <cmdThreadInfo+0x158>
    printfFixed(chp, 11, "Descriptor");
    printfFixed(chp, 11, "Callback");
    chprintf(chp, "State"SHELL_NEWLINE_STR);

    MonitorEntry* entry = monThreadFirst;
    unsigned int index = 0;
 800a098:	2600      	movs	r6, #0
            cmdThreadPrintState(chp, taskStatusArray[i].eCurrentState);
        }
        chprintf(chp,SHELL_NEWLINE_STR);
    }

    vPortFree(taskStatusArray);
 800a09a:	4638      	mov	r0, r7
 800a09c:	f7fb fc2e 	bl	80058fc <vPortFree>
    chprintf(chp,SHELL_NEWLINE_STR);
 800a0a0:	4965      	ldr	r1, [pc, #404]	; (800a238 <cmdThreadInfo+0x29c>)
 800a0a2:	4620      	mov	r0, r4
 800a0a4:	f7fe fb55 	bl	8008752 <chprintf>
    printfFixed(chp, 13, "Monitor ID");
 800a0a8:	210d      	movs	r1, #13
 800a0aa:	4a67      	ldr	r2, [pc, #412]	; (800a248 <cmdThreadInfo+0x2ac>)
 800a0ac:	4620      	mov	r0, r4
 800a0ae:	f7fe fcfd 	bl	8008aac <printfFixed>
    printfFixed(chp, 10, "Task Name");
 800a0b2:	210a      	movs	r1, #10
 800a0b4:	4a5a      	ldr	r2, [pc, #360]	; (800a220 <cmdThreadInfo+0x284>)
 800a0b6:	4620      	mov	r0, r4
 800a0b8:	f7fe fcf8 	bl	8008aac <printfFixed>
    printfFixed(chp, 11, "Descriptor");
 800a0bc:	210b      	movs	r1, #11
 800a0be:	4a63      	ldr	r2, [pc, #396]	; (800a24c <cmdThreadInfo+0x2b0>)
 800a0c0:	4620      	mov	r0, r4
 800a0c2:	f7fe fcf3 	bl	8008aac <printfFixed>
    printfFixed(chp, 11, "Callback");
 800a0c6:	210b      	movs	r1, #11
 800a0c8:	4a61      	ldr	r2, [pc, #388]	; (800a250 <cmdThreadInfo+0x2b4>)
 800a0ca:	4620      	mov	r0, r4
 800a0cc:	f7fe fcee 	bl	8008aac <printfFixed>
    chprintf(chp, "State"SHELL_NEWLINE_STR);
 800a0d0:	4620      	mov	r0, r4
 800a0d2:	4960      	ldr	r1, [pc, #384]	; (800a254 <cmdThreadInfo+0x2b8>)
 800a0d4:	f7fe fb3d 	bl	8008752 <chprintf>
    MonitorEntry* entry = monThreadFirst;
 800a0d8:	4b5f      	ldr	r3, [pc, #380]	; (800a258 <cmdThreadInfo+0x2bc>)
    while(entry) {
        printfFixed(chp, 13, "%u", index);
 800a0da:	4f60      	ldr	r7, [pc, #384]	; (800a25c <cmdThreadInfo+0x2c0>)
    MonitorEntry* entry = monThreadFirst;
 800a0dc:	681d      	ldr	r5, [r3, #0]
        if(entry->name) {
            printfFixed(chp, 10, "%s",entry->name);
        } else {
            printfFixed(chp, 10, "");
 800a0de:	f8df 8180 	ldr.w	r8, [pc, #384]	; 800a260 <cmdThreadInfo+0x2c4>
            printfFixed(chp, 10, "%s",entry->name);
 800a0e2:	f8df 9160 	ldr.w	r9, [pc, #352]	; 800a244 <cmdThreadInfo+0x2a8>
    while(entry) {
 800a0e6:	2d00      	cmp	r5, #0
 800a0e8:	d162      	bne.n	800a1b0 <cmdThreadInfo+0x214>
    monitorPrintStatus(chp);
}
 800a0ea:	b005      	add	sp, #20
 800a0ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0f0:	2500      	movs	r5, #0
 800a0f2:	e79d      	b.n	800a030 <cmdThreadInfo+0x94>
        printfFixed(chp, 13, "%u=%08x ", taskStatusArray[i].xTaskNumber, taskStatusArray[i].xHandle);
 800a0f4:	6833      	ldr	r3, [r6, #0]
 800a0f6:	464a      	mov	r2, r9
 800a0f8:	9300      	str	r3, [sp, #0]
 800a0fa:	210d      	movs	r1, #13
 800a0fc:	68b3      	ldr	r3, [r6, #8]
 800a0fe:	4620      	mov	r0, r4
 800a100:	f7fe fcd4 	bl	8008aac <printfFixed>
        if(!strcmp("IDLE", taskStatusArray[i].pcTaskName)) {
 800a104:	6873      	ldr	r3, [r6, #4]
 800a106:	4650      	mov	r0, sl
 800a108:	4619      	mov	r1, r3
 800a10a:	9303      	str	r3, [sp, #12]
 800a10c:	f7f9 fd5c 	bl	8003bc8 <strcmp>
 800a110:	9b03      	ldr	r3, [sp, #12]
 800a112:	2800      	cmp	r0, #0
 800a114:	d132      	bne.n	800a17c <cmdThreadInfo+0x1e0>
            printfFixed(chp, 10, "Idle");
 800a116:	210a      	movs	r1, #10
 800a118:	4620      	mov	r0, r4
 800a11a:	4a52      	ldr	r2, [pc, #328]	; (800a264 <cmdThreadInfo+0x2c8>)
 800a11c:	f7fe fcc6 	bl	8008aac <printfFixed>
        printfFixed(chp, 11, "%08x", taskStatusArray[i].pxStackBase);
 800a120:	210b      	movs	r1, #11
 800a122:	69f3      	ldr	r3, [r6, #28]
 800a124:	4a50      	ldr	r2, [pc, #320]	; (800a268 <cmdThreadInfo+0x2cc>)
 800a126:	4620      	mov	r0, r4
 800a128:	f7fe fcc0 	bl	8008aac <printfFixed>
        printfFixed(chp, 11, "%u", (uint32_t)taskStatusArray[i].usStackHighWaterMark);
 800a12c:	210b      	movs	r1, #11
 800a12e:	8c33      	ldrh	r3, [r6, #32]
 800a130:	4a4a      	ldr	r2, [pc, #296]	; (800a25c <cmdThreadInfo+0x2c0>)
 800a132:	4620      	mov	r0, r4
 800a134:	f7fe fcba 	bl	8008aac <printfFixed>
        printfFixed(chp, 6, "%u", taskStatusArray[i].uxBasePriority);
 800a138:	2106      	movs	r1, #6
 800a13a:	6973      	ldr	r3, [r6, #20]
 800a13c:	4a47      	ldr	r2, [pc, #284]	; (800a25c <cmdThreadInfo+0x2c0>)
 800a13e:	4620      	mov	r0, r4
 800a140:	f7fe fcb4 	bl	8008aac <printfFixed>
        printfFixed(chp, 6, "%u", taskStatusArray[i].uxCurrentPriority);
 800a144:	2106      	movs	r1, #6
 800a146:	6933      	ldr	r3, [r6, #16]
 800a148:	4a44      	ldr	r2, [pc, #272]	; (800a25c <cmdThreadInfo+0x2c0>)
 800a14a:	4620      	mov	r0, r4
 800a14c:	f7fe fcae 	bl	8008aac <printfFixed>
        if(taskStatusArray[i].xHandle == xGetCurrentTaskHandle()) {
 800a150:	6830      	ldr	r0, [r6, #0]
 800a152:	f7fa fae7 	bl	8004724 <vPortEnterCritical>
 800a156:	4b45      	ldr	r3, [pc, #276]	; (800a26c <cmdThreadInfo+0x2d0>)
 800a158:	6819      	ldr	r1, [r3, #0]
 800a15a:	f7fa fcfb 	bl	8004b54 <vPortExitCritical>
 800a15e:	4288      	cmp	r0, r1
 800a160:	d112      	bne.n	800a188 <cmdThreadInfo+0x1ec>
    if(state == eRunning) printfFixed(chp, 9, "Running");
 800a162:	4a43      	ldr	r2, [pc, #268]	; (800a270 <cmdThreadInfo+0x2d4>)
    else printfFixed(chp, 9, "Invalid");
 800a164:	2109      	movs	r1, #9
 800a166:	4620      	mov	r0, r4
 800a168:	f7fe fca0 	bl	8008aac <printfFixed>
        chprintf(chp,SHELL_NEWLINE_STR);
 800a16c:	4620      	mov	r0, r4
 800a16e:	4932      	ldr	r1, [pc, #200]	; (800a238 <cmdThreadInfo+0x29c>)
 800a170:	f7fe faef 	bl	8008752 <chprintf>
    for(unsigned int i = 0; i<result; i++) {
 800a174:	f108 0801 	add.w	r8, r8, #1
 800a178:	3624      	adds	r6, #36	; 0x24
 800a17a:	e78b      	b.n	800a094 <cmdThreadInfo+0xf8>
            printfFixed(chp, 10, "%s", taskStatusArray[i].pcTaskName);
 800a17c:	465a      	mov	r2, fp
 800a17e:	210a      	movs	r1, #10
 800a180:	4620      	mov	r0, r4
 800a182:	f7fe fc93 	bl	8008aac <printfFixed>
 800a186:	e7cb      	b.n	800a120 <cmdThreadInfo+0x184>
            cmdThreadPrintState(chp, taskStatusArray[i].eCurrentState);
 800a188:	7b33      	ldrb	r3, [r6, #12]
    if(state == eRunning) printfFixed(chp, 9, "Running");
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d0e9      	beq.n	800a162 <cmdThreadInfo+0x1c6>
    else if(state == eReady) printfFixed(chp, 9, "Ready");
 800a18e:	2b01      	cmp	r3, #1
 800a190:	d101      	bne.n	800a196 <cmdThreadInfo+0x1fa>
 800a192:	4a38      	ldr	r2, [pc, #224]	; (800a274 <cmdThreadInfo+0x2d8>)
 800a194:	e7e6      	b.n	800a164 <cmdThreadInfo+0x1c8>
    else if(state == eBlocked) printfFixed(chp, 9, "Blocked");
 800a196:	2b02      	cmp	r3, #2
 800a198:	d101      	bne.n	800a19e <cmdThreadInfo+0x202>
 800a19a:	4a37      	ldr	r2, [pc, #220]	; (800a278 <cmdThreadInfo+0x2dc>)
 800a19c:	e7e2      	b.n	800a164 <cmdThreadInfo+0x1c8>
    else if(state == eSuspended) printfFixed(chp, 9, "Suspended");
 800a19e:	2b03      	cmp	r3, #3
 800a1a0:	d101      	bne.n	800a1a6 <cmdThreadInfo+0x20a>
 800a1a2:	4a36      	ldr	r2, [pc, #216]	; (800a27c <cmdThreadInfo+0x2e0>)
 800a1a4:	e7de      	b.n	800a164 <cmdThreadInfo+0x1c8>
    else if(state == eDeleted) printfFixed(chp, 9, "Deleted");
 800a1a6:	2b04      	cmp	r3, #4
 800a1a8:	bf0c      	ite	eq
 800a1aa:	4a35      	ldreq	r2, [pc, #212]	; (800a280 <cmdThreadInfo+0x2e4>)
    else printfFixed(chp, 9, "Invalid");
 800a1ac:	4a35      	ldrne	r2, [pc, #212]	; (800a284 <cmdThreadInfo+0x2e8>)
 800a1ae:	e7d9      	b.n	800a164 <cmdThreadInfo+0x1c8>
        printfFixed(chp, 13, "%u", index);
 800a1b0:	4633      	mov	r3, r6
 800a1b2:	463a      	mov	r2, r7
 800a1b4:	210d      	movs	r1, #13
 800a1b6:	4620      	mov	r0, r4
 800a1b8:	f7fe fc78 	bl	8008aac <printfFixed>
        if(entry->name) {
 800a1bc:	68eb      	ldr	r3, [r5, #12]
 800a1be:	b1cb      	cbz	r3, 800a1f4 <cmdThreadInfo+0x258>
            printfFixed(chp, 10, "%s",entry->name);
 800a1c0:	464a      	mov	r2, r9
 800a1c2:	210a      	movs	r1, #10
 800a1c4:	4620      	mov	r0, r4
 800a1c6:	f7fe fc71 	bl	8008aac <printfFixed>
        }
        printfFixed(chp, 11, "%08x", entry);
 800a1ca:	462b      	mov	r3, r5
 800a1cc:	210b      	movs	r1, #11
 800a1ce:	4a26      	ldr	r2, [pc, #152]	; (800a268 <cmdThreadInfo+0x2cc>)
 800a1d0:	4620      	mov	r0, r4
 800a1d2:	f7fe fc6b 	bl	8008aac <printfFixed>
        printfFixed(chp, 11, "%08x", entry->callback);
 800a1d6:	682b      	ldr	r3, [r5, #0]
 800a1d8:	210b      	movs	r1, #11
 800a1da:	4620      	mov	r0, r4
 800a1dc:	4a22      	ldr	r2, [pc, #136]	; (800a268 <cmdThreadInfo+0x2cc>)
 800a1de:	f7fe fc65 	bl	8008aac <printfFixed>
        if(entry->active) {
 800a1e2:	7c2b      	ldrb	r3, [r5, #16]
 800a1e4:	b163      	cbz	r3, 800a200 <cmdThreadInfo+0x264>
            chprintf(chp, "Active"SHELL_NEWLINE_STR);
 800a1e6:	4928      	ldr	r1, [pc, #160]	; (800a288 <cmdThreadInfo+0x2ec>)
        } else {
            chprintf(chp, "Idle"SHELL_NEWLINE_STR);
 800a1e8:	4620      	mov	r0, r4
 800a1ea:	f7fe fab2 	bl	8008752 <chprintf>
        }
        index++;
 800a1ee:	3601      	adds	r6, #1
        entry = entry->next;
 800a1f0:	68ad      	ldr	r5, [r5, #8]
 800a1f2:	e778      	b.n	800a0e6 <cmdThreadInfo+0x14a>
            printfFixed(chp, 10, "");
 800a1f4:	4642      	mov	r2, r8
 800a1f6:	210a      	movs	r1, #10
 800a1f8:	4620      	mov	r0, r4
 800a1fa:	f7fe fc57 	bl	8008aac <printfFixed>
 800a1fe:	e7e4      	b.n	800a1ca <cmdThreadInfo+0x22e>
            chprintf(chp, "Idle"SHELL_NEWLINE_STR);
 800a200:	4922      	ldr	r1, [pc, #136]	; (800a28c <cmdThreadInfo+0x2f0>)
 800a202:	e7f1      	b.n	800a1e8 <cmdThreadInfo+0x24c>
 800a204:	2000135c 	.word	0x2000135c
 800a208:	200011b8 	.word	0x200011b8
 800a20c:	200011ac 	.word	0x200011ac
 800a210:	200011b4 	.word	0x200011b4
 800a214:	20001634 	.word	0x20001634
 800a218:	20001620 	.word	0x20001620
 800a21c:	0800c351 	.word	0x0800c351
 800a220:	0800c359 	.word	0x0800c359
 800a224:	0800c363 	.word	0x0800c363
 800a228:	0800c36e 	.word	0x0800c36e
 800a22c:	0800c379 	.word	0x0800c379
 800a230:	0800c37f 	.word	0x0800c37f
 800a234:	0800c385 	.word	0x0800c385
 800a238:	0800be6c 	.word	0x0800be6c
 800a23c:	0800c38b 	.word	0x0800c38b
 800a240:	0800c394 	.word	0x0800c394
 800a244:	0800bc8c 	.word	0x0800bc8c
 800a248:	0800c3d3 	.word	0x0800c3d3
 800a24c:	0800c3de 	.word	0x0800c3de
 800a250:	0800c3e9 	.word	0x0800c3e9
 800a254:	0800c3f2 	.word	0x0800c3f2
 800a258:	200011a0 	.word	0x200011a0
 800a25c:	0800c119 	.word	0x0800c119
 800a260:	0800c07a 	.word	0x0800c07a
 800a264:	0800c399 	.word	0x0800c399
 800a268:	0800c39e 	.word	0x0800c39e
 800a26c:	200011a8 	.word	0x200011a8
 800a270:	0800c3a3 	.word	0x0800c3a3
 800a274:	0800c3ab 	.word	0x0800c3ab
 800a278:	0800c3b1 	.word	0x0800c3b1
 800a27c:	0800c3b9 	.word	0x0800c3b9
 800a280:	0800c3c3 	.word	0x0800c3c3
 800a284:	0800c3cb 	.word	0x0800c3cb
 800a288:	0800c3fa 	.word	0x0800c3fa
 800a28c:	0800c403 	.word	0x0800c403

0800a290 <cmdMax>:
    }
}


void cmdMax(void* user, BaseSequentialStream *chp, int argc, char *argv[])
{
 800a290:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a294:	4604      	mov	r4, r0
 800a296:	460d      	mov	r5, r1
 800a298:	4698      	mov	r8, r3
    MAX2870Driver* pll = (MAX2870Driver*)user;

    if(argc == 0) {
 800a29a:	4616      	mov	r6, r2
{
 800a29c:	b087      	sub	sp, #28
    if(argc == 0) {
 800a29e:	b92a      	cbnz	r2, 800a2ac <cmdMax+0x1c>
        cmdMaxUsage(chp);
 800a2a0:	4628      	mov	r0, r5
        chprintf(chp, "Digital Lock Detect: %u"SHELL_NEWLINE_STR, max2870GetDigitalLockDetect(pll));
    } else {
        cmdMaxUsage(chp);
        return;
    }
}
 800a2a2:	b007      	add	sp, #28
 800a2a4:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        cmdMaxUsage(chp);
 800a2a8:	f7fe bb70 	b.w	800898c <cmdMaxUsage>
    if(!strcmp(argv[0], "tune")) {
 800a2ac:	681f      	ldr	r7, [r3, #0]
 800a2ae:	497f      	ldr	r1, [pc, #508]	; (800a4ac <cmdMax+0x21c>)
 800a2b0:	4638      	mov	r0, r7
 800a2b2:	f7f9 fc89 	bl	8003bc8 <strcmp>
 800a2b6:	4684      	mov	ip, r0
 800a2b8:	2800      	cmp	r0, #0
 800a2ba:	d158      	bne.n	800a36e <cmdMax+0xde>
        cmdMaxTune(pll, chp, argc-1, argv+1);
 800a2bc:	f106 39ff 	add.w	r9, r6, #4294967295	; 0xffffffff
    MAX2870TuneRequest tune = *max2870getCurrentTuning(pll);
 800a2c0:	466e      	mov	r6, sp
 800a2c2:	f104 0708 	add.w	r7, r4, #8
 800a2c6:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800a2c8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800a2ca:	e897 0003 	ldmia.w	r7, {r0, r1}
    if(argc >= 1) {
 800a2ce:	f1b9 0f00 	cmp.w	r9, #0
    MAX2870TuneRequest tune = *max2870getCurrentTuning(pll);
 800a2d2:	e886 0003 	stmia.w	r6, {r0, r1}
    tune.fastLockDurationMicroseconds = 0;
 800a2d6:	f8cd c00c 	str.w	ip, [sp, #12]
    tune.useVCOAutotune = false;
 800a2da:	f88d c010 	strb.w	ip, [sp, #16]
    if(argc >= 1) {
 800a2de:	dd20      	ble.n	800a322 <cmdMax+0x92>
        tune.frequency = (uint64_t)strToInt(argv[0], 10) * 1000;
 800a2e0:	210a      	movs	r1, #10
 800a2e2:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800a2e6:	f7f9 ff78 	bl	80041da <strToInt>
 800a2ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a2ee:	fb80 0303 	smull	r0, r3, r0, r3
    if(argc >= 2) {
 800a2f2:	f1b9 0f01 	cmp.w	r9, #1
        tune.frequency = (uint64_t)strToInt(argv[0], 10) * 1000;
 800a2f6:	e9cd 0300 	strd	r0, r3, [sp]
    if(argc >= 2) {
 800a2fa:	d012      	beq.n	800a322 <cmdMax+0x92>
        tune.powerA = strToInt(argv[1], 10);
 800a2fc:	f8d8 0008 	ldr.w	r0, [r8, #8]
 800a300:	f7f9 ff6b 	bl	80041da <strToInt>
    if(argc >= 3) {
 800a304:	f1b9 0f02 	cmp.w	r9, #2
        tune.powerA = strToInt(argv[1], 10);
 800a308:	f88d 0008 	strb.w	r0, [sp, #8]
    if(argc >= 3) {
 800a30c:	d009      	beq.n	800a322 <cmdMax+0x92>
        tune.useVCOAutotune = (strToInt(argv[2], 10) > 0);
 800a30e:	f8d8 000c 	ldr.w	r0, [r8, #12]
 800a312:	f7f9 ff62 	bl	80041da <strToInt>
 800a316:	2800      	cmp	r0, #0
 800a318:	bfd4      	ite	le
 800a31a:	2000      	movle	r0, #0
 800a31c:	2001      	movgt	r0, #1
 800a31e:	f88d 0010 	strb.w	r0, [sp, #16]
    MAX2870TuneResult result = max2870Tune(pll, &tune);
 800a322:	4669      	mov	r1, sp
 800a324:	4620      	mov	r0, r4
 800a326:	f7fe ffb9 	bl	800929c <max2870Tune>
    if(result == TUNE_OK) {
 800a32a:	2800      	cmp	r0, #0
 800a32c:	f040 80b9 	bne.w	800a4a2 <cmdMax+0x212>
        max2870StatusPrint(pll, chp);
 800a330:	4629      	mov	r1, r5
 800a332:	4620      	mov	r0, r4
 800a334:	f7fe fbe0 	bl	8008af8 <max2870StatusPrint>
        chprintf(chp, SHELL_NEWLINE_STR);
 800a338:	4628      	mov	r0, r5
 800a33a:	495d      	ldr	r1, [pc, #372]	; (800a4b0 <cmdMax+0x220>)
 800a33c:	f7fe fa09 	bl	8008752 <chprintf>
    return lock == 0xFF;
}

const char* max2870TuneResultToString(MAX2870TuneResult result)
{
    if(result == TUNE_OK) return "OK";
 800a340:	4a5c      	ldr	r2, [pc, #368]	; (800a4b4 <cmdMax+0x224>)
    chprintf(chp, "Tuning result: %s"SHELL_NEWLINE_STR, max2870TuneResultToString(result));
 800a342:	4628      	mov	r0, r5
 800a344:	495c      	ldr	r1, [pc, #368]	; (800a4b8 <cmdMax+0x228>)
 800a346:	f7fe fa04 	bl	8008752 <chprintf>
}
 800a34a:	b007      	add	sp, #28
 800a34c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if(result == TUNE_CANT_FASTLOCK) return "Invalid fastlock command";
    if(result == TUNE_NOT_LOCKED) return "Lock failed";
 800a350:	1d06      	adds	r6, r0, #4
 800a352:	d008      	beq.n	800a366 <cmdMax+0xd6>
    if(result == TUNE_PLL_N_OUT_OF_RANGE) return "N out of range";
 800a354:	1c84      	adds	r4, r0, #2
 800a356:	d008      	beq.n	800a36a <cmdMax+0xda>
    if(result == TUNE_FREQUENCY_OUT_OF_RANGE) return "Frequency out of range";
 800a358:	4a58      	ldr	r2, [pc, #352]	; (800a4bc <cmdMax+0x22c>)
 800a35a:	4b59      	ldr	r3, [pc, #356]	; (800a4c0 <cmdMax+0x230>)
 800a35c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800a360:	bf08      	it	eq
 800a362:	461a      	moveq	r2, r3
 800a364:	e7ed      	b.n	800a342 <cmdMax+0xb2>
    if(result == TUNE_NOT_LOCKED) return "Lock failed";
 800a366:	4a57      	ldr	r2, [pc, #348]	; (800a4c4 <cmdMax+0x234>)
 800a368:	e7eb      	b.n	800a342 <cmdMax+0xb2>
    if(result == TUNE_PLL_N_OUT_OF_RANGE) return "N out of range";
 800a36a:	4a57      	ldr	r2, [pc, #348]	; (800a4c8 <cmdMax+0x238>)
 800a36c:	e7e9      	b.n	800a342 <cmdMax+0xb2>
    } else if(!strcmp(argv[0], "status")) {
 800a36e:	4638      	mov	r0, r7
 800a370:	4956      	ldr	r1, [pc, #344]	; (800a4cc <cmdMax+0x23c>)
 800a372:	f7f9 fc29 	bl	8003bc8 <strcmp>
 800a376:	b930      	cbnz	r0, 800a386 <cmdMax+0xf6>
        max2870StatusPrint(pll, chp);
 800a378:	4629      	mov	r1, r5
 800a37a:	4620      	mov	r0, r4
}
 800a37c:	b007      	add	sp, #28
 800a37e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        max2870StatusPrint(pll, chp);
 800a382:	f7fe bbb9 	b.w	8008af8 <max2870StatusPrint>
    } else if(!strcmp(argv[0], "vcocache")) {
 800a386:	4638      	mov	r0, r7
 800a388:	4951      	ldr	r1, [pc, #324]	; (800a4d0 <cmdMax+0x240>)
 800a38a:	f7f9 fc1d 	bl	8003bc8 <strcmp>
 800a38e:	2800      	cmp	r0, #0
 800a390:	d15f      	bne.n	800a452 <cmdMax+0x1c2>
    if(argc == 0) {
 800a392:	1e77      	subs	r7, r6, #1
 800a394:	d121      	bne.n	800a3da <cmdMax+0x14a>
    uint32_t frequency = MAX2870_VCO_MIN_FREQUENCY/1000000 + MAX2870_VCO_INCREMENT/2000000;
 800a396:	f640 36c2 	movw	r6, #3010	; 0xbc2
        chprintf(stdout, "Frequency: %u MHz, VCO Band: ", frequency);
 800a39a:	4f4e      	ldr	r7, [pc, #312]	; (800a4d4 <cmdMax+0x244>)
            chprintf(stdout, "Invalid"SHELL_NEWLINE_STR);
 800a39c:	f8df 8138 	ldr.w	r8, [pc, #312]	; 800a4d8 <cmdMax+0x248>
            chprintf(stdout, "%u"SHELL_NEWLINE_STR, vco & 0x3f);
 800a3a0:	f8df 9138 	ldr.w	r9, [pc, #312]	; 800a4dc <cmdMax+0x24c>
 800a3a4:	3420      	adds	r4, #32
        chprintf(stdout, "Frequency: %u MHz, VCO Band: ", frequency);
 800a3a6:	4632      	mov	r2, r6
 800a3a8:	4639      	mov	r1, r7
 800a3aa:	4628      	mov	r0, r5
 800a3ac:	f7fe f9d1 	bl	8008752 <chprintf>
        uint8_t vco = driver->vcoCache[i];
 800a3b0:	f814 2b01 	ldrb.w	r2, [r4], #1
        if(vco & 0x80) {
 800a3b4:	0610      	lsls	r0, r2, #24
 800a3b6:	d50b      	bpl.n	800a3d0 <cmdMax+0x140>
            chprintf(stdout, "%u"SHELL_NEWLINE_STR, vco & 0x3f);
 800a3b8:	4649      	mov	r1, r9
 800a3ba:	4628      	mov	r0, r5
 800a3bc:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800a3c0:	f7fe f9c7 	bl	8008752 <chprintf>
    for(unsigned int i=0; i<sizeof(driver->vcoCache); i++) {
 800a3c4:	f241 737a 	movw	r3, #6010	; 0x177a
        frequency += MAX2870_VCO_INCREMENT/1000000;
 800a3c8:	3614      	adds	r6, #20
    for(unsigned int i=0; i<sizeof(driver->vcoCache); i++) {
 800a3ca:	429e      	cmp	r6, r3
 800a3cc:	d1eb      	bne.n	800a3a6 <cmdMax+0x116>
 800a3ce:	e7bc      	b.n	800a34a <cmdMax+0xba>
            chprintf(stdout, "Invalid"SHELL_NEWLINE_STR);
 800a3d0:	4641      	mov	r1, r8
 800a3d2:	4628      	mov	r0, r5
 800a3d4:	f7fe f9bd 	bl	8008752 <chprintf>
 800a3d8:	e7f4      	b.n	800a3c4 <cmdMax+0x134>
    } else if(!strcmp(argv[0], "calibrate")) {
 800a3da:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800a3de:	4940      	ldr	r1, [pc, #256]	; (800a4e0 <cmdMax+0x250>)
 800a3e0:	4630      	mov	r0, r6
 800a3e2:	f7f9 fbf1 	bl	8003bc8 <strcmp>
 800a3e6:	b948      	cbnz	r0, 800a3fc <cmdMax+0x16c>
        max2870VcoPrecal(pll);
 800a3e8:	4620      	mov	r0, r4
 800a3ea:	f7fe ff85 	bl	80092f8 <max2870VcoPrecal>
        chprintf(chp, "Done"SHELL_NEWLINE_STR);
 800a3ee:	493d      	ldr	r1, [pc, #244]	; (800a4e4 <cmdMax+0x254>)
            chprintf(chp, "The cow says moo!"SHELL_NEWLINE_STR);
 800a3f0:	4628      	mov	r0, r5
}
 800a3f2:	b007      	add	sp, #28
 800a3f4:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
            chprintf(chp, "The cow says moo!"SHELL_NEWLINE_STR);
 800a3f8:	f7fe b9ab 	b.w	8008752 <chprintf>
    } else if(argc >= 2 && !strcmp(argv[0], "set")) {
 800a3fc:	2f01      	cmp	r7, #1
 800a3fe:	f77f af4f 	ble.w	800a2a0 <cmdMax+0x10>
 800a402:	4630      	mov	r0, r6
 800a404:	4938      	ldr	r1, [pc, #224]	; (800a4e8 <cmdMax+0x258>)
 800a406:	f7f9 fbdf 	bl	8003bc8 <strcmp>
 800a40a:	4606      	mov	r6, r0
 800a40c:	2800      	cmp	r0, #0
 800a40e:	f47f af47 	bne.w	800a2a0 <cmdMax+0x10>
        unsigned int a = strToInt(argv[1], 10);
 800a412:	210a      	movs	r1, #10
 800a414:	f8d8 0008 	ldr.w	r0, [r8, #8]
 800a418:	f7f9 fedf 	bl	80041da <strToInt>
        if(argc == 3) {
 800a41c:	2f03      	cmp	r7, #3
        unsigned int a = strToInt(argv[1], 10);
 800a41e:	4681      	mov	r9, r0
        if(argc == 3) {
 800a420:	d10a      	bne.n	800a438 <cmdMax+0x1a8>
            b = strToInt(argv[2], 10) | 0x80;
 800a422:	f8d8 000c 	ldr.w	r0, [r8, #12]
 800a426:	f7f9 fed8 	bl	80041da <strToInt>
 800a42a:	f040 0380 	orr.w	r3, r0, #128	; 0x80
    return &driver->currentTune;
}

bool max2870VcoCacheSet(MAX2870Driver* driver, unsigned int vcoIndex, uint8_t value)
{
    if(vcoIndex > sizeof(driver->vcoCache)) {
 800a42e:	f1b9 0f96 	cmp.w	r9, #150	; 0x96
 800a432:	d903      	bls.n	800a43c <cmdMax+0x1ac>
            chprintf(chp, "The cow says moo!"SHELL_NEWLINE_STR);
 800a434:	492d      	ldr	r1, [pc, #180]	; (800a4ec <cmdMax+0x25c>)
 800a436:	e7db      	b.n	800a3f0 <cmdMax+0x160>
        unsigned int b = 0;
 800a438:	4633      	mov	r3, r6
 800a43a:	e7f8      	b.n	800a42e <cmdMax+0x19e>
            chprintf(chp, "%u=0x%02x"SHELL_NEWLINE_STR,a,b);
 800a43c:	464a      	mov	r2, r9
 800a43e:	4628      	mov	r0, r5
 800a440:	492b      	ldr	r1, [pc, #172]	; (800a4f0 <cmdMax+0x260>)
        return false;
    }

    driver->vcoCache[vcoIndex] = value;
 800a442:	444c      	add	r4, r9
        if(max2870VcoCacheSet(pll, a , b)) {
 800a444:	f884 3020 	strb.w	r3, [r4, #32]
}
 800a448:	b007      	add	sp, #28
 800a44a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
            chprintf(chp, "%u=0x%02x"SHELL_NEWLINE_STR,a,b);
 800a44e:	f7fe b980 	b.w	8008752 <chprintf>
    } else if(!strcmp(argv[0], "dld")) {
 800a452:	4638      	mov	r0, r7
 800a454:	4927      	ldr	r1, [pc, #156]	; (800a4f4 <cmdMax+0x264>)
 800a456:	f7f9 fbb7 	bl	8003bc8 <strcmp>
 800a45a:	2800      	cmp	r0, #0
 800a45c:	f47f af20 	bne.w	800a2a0 <cmdMax+0x10>
    max2870SpiState(driver, true);
 800a460:	4620      	mov	r0, r4
 800a462:	f7fd fe63 	bl	800812c <max2870SpiState.constprop.0>
    max2870SetMUXOut(driver, 0x6);
 800a466:	4620      	mov	r0, r4
 800a468:	2106      	movs	r1, #6
 800a46a:	f7fd ff61 	bl	8008330 <max2870SetMUXOut>
    spiReceive(driver->config->spiPort, 1, &lock);
 800a46e:	6823      	ldr	r3, [r4, #0]
 800a470:	6818      	ldr	r0, [r3, #0]
 800a472:	b910      	cbnz	r0, 800a47a <cmdMax+0x1ea>
 800a474:	f7fa f966 	bl	8004744 <vTaskEndScheduler>
 800a478:	e7fe      	b.n	800a478 <cmdMax+0x1e8>
 800a47a:	466a      	mov	r2, sp
 800a47c:	2101      	movs	r1, #1
 800a47e:	f7fc f8c9 	bl	8006614 <spiReceive.part.0>
    if(enable) {
 800a482:	4620      	mov	r0, r4
 800a484:	f7fe f920 	bl	80086c8 <max2870SpiState.part.0>
        chprintf(chp, "Digital Lock Detect: %u"SHELL_NEWLINE_STR, max2870GetDigitalLockDetect(pll));
 800a488:	4628      	mov	r0, r5
    return lock == 0xFF;
 800a48a:	f89d 2000 	ldrb.w	r2, [sp]
 800a48e:	f1a2 01ff 	sub.w	r1, r2, #255	; 0xff
 800a492:	424a      	negs	r2, r1
 800a494:	414a      	adcs	r2, r1
 800a496:	4918      	ldr	r1, [pc, #96]	; (800a4f8 <cmdMax+0x268>)
}
 800a498:	b007      	add	sp, #28
 800a49a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        chprintf(chp, "Digital Lock Detect: %u"SHELL_NEWLINE_STR, max2870GetDigitalLockDetect(pll));
 800a49e:	f7fe b958 	b.w	8008752 <chprintf>
    if(result == TUNE_CANT_FASTLOCK) return "Invalid fastlock command";
 800a4a2:	1cc3      	adds	r3, r0, #3
 800a4a4:	f47f af54 	bne.w	800a350 <cmdMax+0xc0>
 800a4a8:	4a14      	ldr	r2, [pc, #80]	; (800a4fc <cmdMax+0x26c>)
 800a4aa:	e74a      	b.n	800a342 <cmdMax+0xb2>
 800a4ac:	0800c463 	.word	0x0800c463
 800a4b0:	0800be6c 	.word	0x0800be6c
 800a4b4:	0800ba7d 	.word	0x0800ba7d
 800a4b8:	0800c468 	.word	0x0800c468
 800a4bc:	0800c40a 	.word	0x0800c40a
 800a4c0:	0800c433 	.word	0x0800c433
 800a4c4:	0800c427 	.word	0x0800c427
 800a4c8:	0800c418 	.word	0x0800c418
 800a4cc:	0800c07b 	.word	0x0800c07b
 800a4d0:	0800c47c 	.word	0x0800c47c
 800a4d4:	0800c485 	.word	0x0800c485
 800a4d8:	0800c4a3 	.word	0x0800c4a3
 800a4dc:	0800c199 	.word	0x0800c199
 800a4e0:	0800c4ad 	.word	0x0800c4ad
 800a4e4:	0800c4b7 	.word	0x0800c4b7
 800a4e8:	0800c0b3 	.word	0x0800c0b3
 800a4ec:	0800c4be 	.word	0x0800c4be
 800a4f0:	0800c4d2 	.word	0x0800c4d2
 800a4f4:	0800c4de 	.word	0x0800c4de
 800a4f8:	0800c4e2 	.word	0x0800c4e2
 800a4fc:	0800c44a 	.word	0x0800c44a

0800a500 <cmdSof>:

void cmdSof(void* user, BaseSequentialStream *chp, int argc, char *argv[])
{
    (void) user;

    if(argc > 0) {
 800a500:	2a00      	cmp	r2, #0
{
 800a502:	b538      	push	{r3, r4, r5, lr}
 800a504:	460c      	mov	r4, r1
 800a506:	4d16      	ldr	r5, [pc, #88]	; (800a560 <cmdSof+0x60>)
    if(argc > 0) {
 800a508:	dd06      	ble.n	800a518 <cmdSof+0x18>
        if(!strcmp(argv[0],"1")) {
 800a50a:	4916      	ldr	r1, [pc, #88]	; (800a564 <cmdSof+0x64>)
 800a50c:	6818      	ldr	r0, [r3, #0]
 800a50e:	f7f9 fb5b 	bl	8003bc8 <strcmp>
 800a512:	b9f0      	cbnz	r0, 800a552 <cmdSof+0x52>
    sofNeededCallback
};

void usbDisableSOF(bool doIt)
{
    allowDisableSOF = doIt;
 800a514:	2301      	movs	r3, #1
 800a516:	702b      	strb	r3, [r5, #0]
            usbDisableSOF(true);
        } else {
            usbDisableSOF(false);
        }
    }
    printfFixed(chp, 21, "SoF Disable Allowed:");
 800a518:	2115      	movs	r1, #21
 800a51a:	4a13      	ldr	r2, [pc, #76]	; (800a568 <cmdSof+0x68>)
 800a51c:	4620      	mov	r0, r4
 800a51e:	f7fe fac5 	bl	8008aac <printfFixed>
    }
}

uint32_t usbGetSofCounter(bool* sofDisableAllowed)
{
    osalSysLock();
 800a522:	f7fa f8ff 	bl	8004724 <vPortEnterCritical>
    if(sofDisableAllowed) *sofDisableAllowed=allowDisableSOF;

    uint32_t count = sofCounter;
 800a526:	4b11      	ldr	r3, [pc, #68]	; (800a56c <cmdSof+0x6c>)
    if(sofDisableAllowed) *sofDisableAllowed=allowDisableSOF;
 800a528:	7828      	ldrb	r0, [r5, #0]
    uint32_t count = sofCounter;
 800a52a:	681d      	ldr	r5, [r3, #0]
    osalSysUnlock();
 800a52c:	f7fa fb1e 	bl	8004b6c <osalSysUnlock.lto_priv.0>
    bool allowDisable;
    uint32_t cnt = usbGetSofCounter(&allowDisable);
    chprintf(chp, "%u"SHELL_NEWLINE_STR, allowDisable);
 800a530:	4602      	mov	r2, r0
 800a532:	490f      	ldr	r1, [pc, #60]	; (800a570 <cmdSof+0x70>)
 800a534:	4620      	mov	r0, r4
 800a536:	f7fe f90c 	bl	8008752 <chprintf>
    printfFixed(chp, 21, "SoF Count:");
 800a53a:	2115      	movs	r1, #21
 800a53c:	4620      	mov	r0, r4
 800a53e:	4a0d      	ldr	r2, [pc, #52]	; (800a574 <cmdSof+0x74>)
 800a540:	f7fe fab4 	bl	8008aac <printfFixed>
    chprintf(chp, "%u"SHELL_NEWLINE_STR, cnt);
 800a544:	462a      	mov	r2, r5
 800a546:	4620      	mov	r0, r4
}
 800a548:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    chprintf(chp, "%u"SHELL_NEWLINE_STR, cnt);
 800a54c:	4908      	ldr	r1, [pc, #32]	; (800a570 <cmdSof+0x70>)
 800a54e:	f7fe b900 	b.w	8008752 <chprintf>
    allowDisableSOF = doIt;
 800a552:	2300      	movs	r3, #0
        sofNeededCallback(&USBD1, true);
 800a554:	2101      	movs	r1, #1
 800a556:	4808      	ldr	r0, [pc, #32]	; (800a578 <cmdSof+0x78>)
    allowDisableSOF = doIt;
 800a558:	702b      	strb	r3, [r5, #0]
        sofNeededCallback(&USBD1, true);
 800a55a:	f7fa fe59 	bl	8005210 <sofNeededCallback>
 800a55e:	e7db      	b.n	800a518 <cmdSof+0x18>
 800a560:	20000800 	.word	0x20000800
 800a564:	0800bbac 	.word	0x0800bbac
 800a568:	0800c4fc 	.word	0x0800c4fc
 800a56c:	200012c8 	.word	0x200012c8
 800a570:	0800c199 	.word	0x0800c199
 800a574:	0800c511 	.word	0x0800c511
 800a578:	20000f54 	.word	0x20000f54

0800a57c <cmdSanity>:

void cmdSanity(void* user, BaseSequentialStream *chp, int argc, char *argv[])
{
    (void)user;

    if(argc == 1) {
 800a57c:	2a01      	cmp	r2, #1
{
 800a57e:	b570      	push	{r4, r5, r6, lr}
 800a580:	460c      	mov	r4, r1
 800a582:	4615      	mov	r5, r2
    if(argc == 1) {
 800a584:	d117      	bne.n	800a5b6 <cmdSanity+0x3a>
        if(sanitySettingsLocked){
 800a586:	4e11      	ldr	r6, [pc, #68]	; (800a5cc <cmdSanity+0x50>)
 800a588:	7832      	ldrb	r2, [r6, #0]
 800a58a:	b12a      	cbz	r2, 800a598 <cmdSanity+0x1c>
            chprintf(chp, "Settings locked!"SHELL_NEWLINE_STR);
 800a58c:	4910      	ldr	r1, [pc, #64]	; (800a5d0 <cmdSanity+0x54>)
    chprintf(chp, "\tsanity [delaysec]"SHELL_NEWLINE_STR);
 800a58e:	4620      	mov	r0, r4
        }
        return;
    };

    cmdSanityUsage(chp);
}
 800a590:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    chprintf(chp, "\tsanity [delaysec]"SHELL_NEWLINE_STR);
 800a594:	f7fe b8dd 	b.w	8008752 <chprintf>
        }else if(!strcmp(argv[0], "lock")) {
 800a598:	681c      	ldr	r4, [r3, #0]
 800a59a:	490e      	ldr	r1, [pc, #56]	; (800a5d4 <cmdSanity+0x58>)
 800a59c:	4620      	mov	r0, r4
 800a59e:	f7f9 fb13 	bl	8003bc8 <strcmp>
 800a5a2:	b908      	cbnz	r0, 800a5a8 <cmdSanity+0x2c>
            sanitySettingsLocked = true;
 800a5a4:	7035      	strb	r5, [r6, #0]
}
 800a5a6:	bd70      	pop	{r4, r5, r6, pc}
            sanityRebootSeconds = strToInt(argv[0], 10);
 800a5a8:	210a      	movs	r1, #10
 800a5aa:	4620      	mov	r0, r4
 800a5ac:	f7f9 fe15 	bl	80041da <strToInt>
 800a5b0:	4b09      	ldr	r3, [pc, #36]	; (800a5d8 <cmdSanity+0x5c>)
 800a5b2:	6018      	str	r0, [r3, #0]
 800a5b4:	e7f7      	b.n	800a5a6 <cmdSanity+0x2a>
    chprintf(chp, "Usage:"SHELL_NEWLINE_STR);
 800a5b6:	4909      	ldr	r1, [pc, #36]	; (800a5dc <cmdSanity+0x60>)
 800a5b8:	4620      	mov	r0, r4
 800a5ba:	f7fe f8ca 	bl	8008752 <chprintf>
    chprintf(chp, "\tsanity lock"SHELL_NEWLINE_STR);
 800a5be:	4908      	ldr	r1, [pc, #32]	; (800a5e0 <cmdSanity+0x64>)
 800a5c0:	4620      	mov	r0, r4
 800a5c2:	f7fe f8c6 	bl	8008752 <chprintf>
    chprintf(chp, "\tsanity [delaysec]"SHELL_NEWLINE_STR);
 800a5c6:	4907      	ldr	r1, [pc, #28]	; (800a5e4 <cmdSanity+0x68>)
 800a5c8:	e7e1      	b.n	800a58e <cmdSanity+0x12>
 800a5ca:	bf00      	nop
 800a5cc:	20001230 	.word	0x20001230
 800a5d0:	0800c51c 	.word	0x0800c51c
 800a5d4:	0800c52f 	.word	0x0800c52f
 800a5d8:	20000858 	.word	0x20000858
 800a5dc:	0800bc75 	.word	0x0800bc75
 800a5e0:	0800c534 	.word	0x0800c534
 800a5e4:	0800c543 	.word	0x0800c543

0800a5e8 <i2cSafeWriteRegStandard>:
{
 800a5e8:	b530      	push	{r4, r5, lr}
 800a5ea:	460d      	mov	r5, r1
    osalDbgAssert(i2c != NULL, "i2c == NULL");
 800a5ec:	4604      	mov	r4, r0
{
 800a5ee:	b085      	sub	sp, #20
    osalDbgAssert(i2c != NULL, "i2c == NULL");
 800a5f0:	b910      	cbnz	r0, 800a5f8 <i2cSafeWriteRegStandard+0x10>
 800a5f2:	f7fa f8a7 	bl	8004744 <vTaskEndScheduler>
 800a5f6:	e7fe      	b.n	800a5f6 <i2cSafeWriteRegStandard+0xe>
    txBuf[0]=addr;
 800a5f8:	f88d 200c 	strb.w	r2, [sp, #12]
    memcpy(&txBuf[1], values, len);
 800a5fc:	f88d 300d 	strb.w	r3, [sp, #13]
    i2cAcquireBus(i2c);
 800a600:	f7fb fc6c 	bl	8005edc <i2cAcquireBus>
    i2c_status = i2cSafeMasterTransmitTimeoutWithRetry(i2c, devAddr, txBuf,
 800a604:	2300      	movs	r3, #0
 800a606:	4629      	mov	r1, r5
 800a608:	e9cd 3300 	strd	r3, r3, [sp]
 800a60c:	aa03      	add	r2, sp, #12
 800a60e:	2302      	movs	r3, #2
 800a610:	4620      	mov	r0, r4
 800a612:	f7fe fef5 	bl	8009400 <i2cSafeMasterTransmitTimeoutWithRetry.constprop.0>
 800a616:	4605      	mov	r5, r0
    i2cReleaseBus(i2c);
 800a618:	4620      	mov	r0, r4
 800a61a:	f7fe f84b 	bl	80086b4 <i2cReleaseBus>
}
 800a61e:	4628      	mov	r0, r5
 800a620:	b005      	add	sp, #20
 800a622:	bd30      	pop	{r4, r5, pc}

0800a624 <main_>:
{
 800a624:	b5f0      	push	{r4, r5, r6, r7, lr}
    void* syslogBuffer = pvPortMalloc(bufferSize);
 800a626:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800a62a:	b085      	sub	sp, #20
 800a62c:	f7fb f8e6 	bl	80057fc <pvPortMalloc>
    memset(queue, 0, sizeof(*queue));
 800a630:	4c55      	ldr	r4, [pc, #340]	; (800a788 <main_+0x164>)
 800a632:	4605      	mov	r5, r0
 800a634:	221c      	movs	r2, #28
 800a636:	2100      	movs	r1, #0
 800a638:	f104 0008 	add.w	r0, r4, #8
 800a63c:	f001 f8ea 	bl	800b814 <memset>

    queue->buffer = buffer;
    queue->bufferSize = bufferSize;
 800a640:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a644:	2050      	movs	r0, #80	; 0x50
    queue->buffer = buffer;
 800a646:	6025      	str	r5, [r4, #0]
    queue->bufferSize = bufferSize;
 800a648:	6063      	str	r3, [r4, #4]
 800a64a:	f7fb f8d7 	bl	80057fc <pvPortMalloc>
 800a64e:	4604      	mov	r4, r0
 800a650:	b160      	cbz	r0, 800a66c <main_+0x48>
 800a652:	2300      	movs	r3, #0
 800a654:	2501      	movs	r5, #1
 800a656:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
 800a65a:	e9c0 530f 	strd	r5, r3, [r0, #60]	; 0x3c
 800a65e:	6000      	str	r0, [r0, #0]
 800a660:	f7fe f84d 	bl	80086fe <xQueueGenericReset.constprop.0.isra.0>
 800a664:	f880 504c 	strb.w	r5, [r0, #76]	; 0x4c
 800a668:	f7fe f843 	bl	80086f2 <prvInitialiseMutex.part.0>
    syslogSemaphore = xSemaphoreCreateMutex();
 800a66c:	4b47      	ldr	r3, [pc, #284]	; (800a78c <main_+0x168>)
    syslog("Syslog started.");
 800a66e:	4848      	ldr	r0, [pc, #288]	; (800a790 <main_+0x16c>)
    syslogSemaphore = xSemaphoreCreateMutex();
 800a670:	601c      	str	r4, [r3, #0]
    syslog("Syslog started.");
 800a672:	f7fe fb8b 	bl	8008d8c <syslog>
    usbDisconnectBus(serusbcfg.usbp);
 800a676:	f44f 6380 	mov.w	r3, #1024	; 0x400
    event_source->setEvents = 0;
 800a67a:	2400      	movs	r4, #0
 800a67c:	4d45      	ldr	r5, [pc, #276]	; (800a794 <main_+0x170>)
 800a67e:	4846      	ldr	r0, [pc, #280]	; (800a798 <main_+0x174>)
 800a680:	616b      	str	r3, [r5, #20]
    event_source->firstRepeater = NULL;
 800a682:	e9c0 4400 	strd	r4, r4, [r0]
    event_source->waitThread = NULL;
 800a686:	6084      	str	r4, [r0, #8]
    osalSysLock();
 800a688:	f7fa f84c 	bl	8004724 <vPortEnterCritical>
 800a68c:	f3ef 8311 	mrs	r3, BASEPRI
 800a690:	b1b3      	cbz	r3, 800a6c0 <main_+0x9c>
 800a692:	4b42      	ldr	r3, [pc, #264]	; (800a79c <main_+0x178>)
    GPIODriverData.numPorts = numPorts;
 800a694:	4e42      	ldr	r6, [pc, #264]	; (800a7a0 <main_+0x17c>)
 800a696:	60c3      	str	r3, [r0, #12]
    osalSysUnlock();
 800a698:	f7fa fa68 	bl	8004b6c <osalSysUnlock.lto_priv.0>
 800a69c:	2304      	movs	r3, #4
    GPIODriverData.ports = pvPortMalloc(sizeof(GPIOPort) * numPorts);
 800a69e:	2030      	movs	r0, #48	; 0x30
    GPIODriverData.numPorts = numPorts;
 800a6a0:	7133      	strb	r3, [r6, #4]
    GPIODriverData.ports = pvPortMalloc(sizeof(GPIOPort) * numPorts);
 800a6a2:	f7fb f8ab 	bl	80057fc <pvPortMalloc>
 800a6a6:	6030      	str	r0, [r6, #0]
    if(!GPIODriverData.ports) {
 800a6a8:	b968      	cbnz	r0, 800a6c6 <main_+0xa2>
        syslog("GPIO subsystem init failed.");
 800a6aa:	483e      	ldr	r0, [pc, #248]	; (800a7a4 <main_+0x180>)
    syslog("USB init done.");
 800a6ac:	f7fe fb6e 	bl	8008d8c <syslog>
    shellStart((BaseSequentialStream*)&SD3, 128, "ShellTTL", NULL, NULL);
 800a6b0:	2200      	movs	r2, #0
 800a6b2:	493d      	ldr	r1, [pc, #244]	; (800a7a8 <main_+0x184>)
 800a6b4:	483d      	ldr	r0, [pc, #244]	; (800a7ac <main_+0x188>)
}
 800a6b6:	b005      	add	sp, #20
 800a6b8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    shellStart((BaseSequentialStream*)&SD3, 128, "ShellTTL", NULL, NULL);
 800a6bc:	f7fd bb42 	b.w	8007d44 <shellStart.constprop.0>
 800a6c0:	f7fa f840 	bl	8004744 <vTaskEndScheduler>
 800a6c4:	e7fe      	b.n	800a6c4 <main_+0xa0>
        GPIODriverData.ports[i].numPins = 0;
 800a6c6:	4623      	mov	r3, r4
        GPIODriverData.ports[i].functions = &gpioDummyFunctions;
 800a6c8:	4a39      	ldr	r2, [pc, #228]	; (800a7b0 <main_+0x18c>)
        GPIODriverData.ports[i].driver = (void*)(unsigned int)i;
 800a6ca:	6004      	str	r4, [r0, #0]
    for(uint8_t i=0; i<numPorts; i++) {
 800a6cc:	3401      	adds	r4, #1
 800a6ce:	2c04      	cmp	r4, #4
        GPIODriverData.ports[i].numPins = 0;
 800a6d0:	e9c0 3201 	strd	r3, r2, [r0, #4]
    for(uint8_t i=0; i<numPorts; i++) {
 800a6d4:	f100 000c 	add.w	r0, r0, #12
 800a6d8:	d1f7      	bne.n	800a6ca <main_+0xa6>
        syslog("GPIO subsystem init done.");
 800a6da:	4836      	ldr	r0, [pc, #216]	; (800a7b4 <main_+0x190>)
 800a6dc:	f7fe fb56 	bl	8008d8c <syslog>
        gpioCPUInit(GPIO_PORT_GPIOA, GPIOA);
 800a6e0:	492c      	ldr	r1, [pc, #176]	; (800a794 <main_+0x170>)
 800a6e2:	2000      	movs	r0, #0
 800a6e4:	f7f9 fedc 	bl	80044a0 <gpioCPUInit>
        gpioCPUInit(GPIO_PORT_GPIOB, GPIOB);
 800a6e8:	2001      	movs	r0, #1
 800a6ea:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800a6ee:	f7f9 fed7 	bl	80044a0 <gpioCPUInit>
        gpioCPUInit(GPIO_PORT_GPIOC, GPIOC);
 800a6f2:	2002      	movs	r0, #2
 800a6f4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800a6f8:	f7f9 fed2 	bl	80044a0 <gpioCPUInit>
        shellCommandRegister("gpio", cmdGPIO, NULL);
 800a6fc:	2200      	movs	r2, #0
 800a6fe:	492e      	ldr	r1, [pc, #184]	; (800a7b8 <main_+0x194>)
 800a700:	482e      	ldr	r0, [pc, #184]	; (800a7bc <main_+0x198>)
 800a702:	f7f9 fdab 	bl	800425c <shellCommandRegister>
    gpioSetPinMode(gpioPin, PAL_MODE_INPUT_PULLUP);
 800a706:	2103      	movs	r1, #3
 800a708:	f44f 7084 	mov.w	r0, #264	; 0x108
 800a70c:	f7fc fdfc 	bl	8007308 <gpioSetPinMode.isra.0>
    osalThreadSleepMilliseconds(1);
 800a710:	2001      	movs	r0, #1
 800a712:	f7fb fbef 	bl	8005ef4 <vTaskDelay>
    if(gpioGetPin(gpioPin) == 0) {
 800a716:	f44f 7084 	mov.w	r0, #264	; 0x108
 800a71a:	f7f9 fe5f 	bl	80043dc <gpioGetPin>
 800a71e:	b158      	cbz	r0, 800a738 <main_+0x114>
    gpioSetPinMode(gpioPin, PAL_MODE_INPUT_PULLDOWN);
 800a720:	4621      	mov	r1, r4
 800a722:	f44f 7084 	mov.w	r0, #264	; 0x108
 800a726:	f7fc fdef 	bl	8007308 <gpioSetPinMode.isra.0>
    osalThreadSleepMilliseconds(1);
 800a72a:	2001      	movs	r0, #1
 800a72c:	f7fb fbe2 	bl	8005ef4 <vTaskDelay>
    if(gpioGetPin(gpioPin) == 1) {
 800a730:	f44f 7084 	mov.w	r0, #264	; 0x108
 800a734:	f7f9 fe52 	bl	80043dc <gpioGetPin>
    uint32_t index = 0;

    for(;;) {
        const GPIOPinInit* pin = &pins[index];

        if(pin->gpioPin == 0xffff) {
 800a738:	f64f 76ff 	movw	r6, #65535	; 0xffff
 800a73c:	4c20      	ldr	r4, [pc, #128]	; (800a7c0 <main_+0x19c>)
 800a73e:	f834 0b04 	ldrh.w	r0, [r4], #4
 800a742:	42b0      	cmp	r0, r6
 800a744:	d00a      	beq.n	800a75c <main_+0x138>
            return;
        }

        gpioSetPinMode(pin->gpioPin, pin->gpioMode);
 800a746:	f814 1c02 	ldrb.w	r1, [r4, #-2]
 800a74a:	f7fc fddd 	bl	8007308 <gpioSetPinMode.isra.0>
        gpioSetPin(pin->gpioPin, pin->defaultValue);
 800a74e:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 800a752:	f834 0c04 	ldrh.w	r0, [r4, #-4]
 800a756:	f7fc feeb 	bl	8007530 <gpioSetPin.isra.0>
 800a75a:	e7f0      	b.n	800a73e <main_+0x11a>
    i2c->i2cSafeConfig = (void*)config;
 800a75c:	4c19      	ldr	r4, [pc, #100]	; (800a7c4 <main_+0x1a0>)
 800a75e:	4b1a      	ldr	r3, [pc, #104]	; (800a7c8 <main_+0x1a4>)
    i2cSafeRawHardwareControl(i2c);
 800a760:	4620      	mov	r0, r4
    i2c->i2cSafeConfig = (void*)config;
 800a762:	67e3      	str	r3, [r4, #124]	; 0x7c
    i2cSafeRawHardwareControl(i2c);
 800a764:	f7fc fddc 	bl	8007320 <i2cSafeRawHardwareControl>
    shellCommandRegister("i2c", cmdI2C, &I2CD1);
 800a768:	4622      	mov	r2, r4
 800a76a:	4918      	ldr	r1, [pc, #96]	; (800a7cc <main_+0x1a8>)
 800a76c:	4818      	ldr	r0, [pc, #96]	; (800a7d0 <main_+0x1ac>)
 800a76e:	f7f9 fd75 	bl	800425c <shellCommandRegister>
  osalSysLock();
 800a772:	f7f9 ffd7 	bl	8004724 <vPortEnterCritical>
  osalDbgAssert((sdp->state == SD_STOP) || (sdp->state == SD_READY),
 800a776:	490d      	ldr	r1, [pc, #52]	; (800a7ac <main_+0x188>)
 800a778:	7d0b      	ldrb	r3, [r1, #20]
 800a77a:	1e5a      	subs	r2, r3, #1
 800a77c:	2a01      	cmp	r2, #1
 800a77e:	d929      	bls.n	800a7d4 <main_+0x1b0>
 800a780:	f7f9 ffe0 	bl	8004744 <vTaskEndScheduler>
 800a784:	e7fe      	b.n	800a784 <main_+0x160>
 800a786:	bf00      	nop
 800a788:	20001310 	.word	0x20001310
 800a78c:	20001334 	.word	0x20001334
 800a790:	0800c558 	.word	0x0800c558
 800a794:	40010800 	.word	0x40010800
 800a798:	200012b8 	.word	0x200012b8
 800a79c:	08008e01 	.word	0x08008e01
 800a7a0:	20000928 	.word	0x20000928
 800a7a4:	0800c568 	.word	0x0800c568
 800a7a8:	0800c67a 	.word	0x0800c67a
 800a7ac:	200009bc 	.word	0x200009bc
 800a7b0:	0800ca40 	.word	0x0800ca40
 800a7b4:	0800c584 	.word	0x0800c584
 800a7b8:	0800965d 	.word	0x0800965d
 800a7bc:	0800c59e 	.word	0x0800c59e
 800a7c0:	0800ca90 	.word	0x0800ca90
 800a7c4:	20000934 	.word	0x20000934
 800a7c8:	0800c84c 	.word	0x0800c84c
 800a7cc:	0800ab61 	.word	0x0800ab61
 800a7d0:	0800c5a3 	.word	0x0800c5a3
void sd_lld_start(SerialDriver *sdp, const SerialConfig *config) {

  if (config == NULL)
    config = &default_config;

  if (sdp->state == SD_STOP) {
 800a7d4:	2b01      	cmp	r3, #1
 800a7d6:	d10c      	bne.n	800a7f2 <main_+0x1ce>
      nvicEnableVector(STM32_USART2_NUMBER, STM32_SERIAL_USART2_PRIORITY);
    }
#endif
#if STM32_SERIAL_USE_USART3
    if (&SD3 == sdp) {
      rccEnableUSART3(FALSE);
 800a7d8:	4ab4      	ldr	r2, [pc, #720]	; (800aaac <main_+0x488>)
 800a7da:	69d3      	ldr	r3, [r2, #28]
 800a7dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a7e0:	61d3      	str	r3, [r2, #28]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 800a7e2:	22c0      	movs	r2, #192	; 0xc0
 800a7e4:	4bb2      	ldr	r3, [pc, #712]	; (800aab0 <main_+0x48c>)
 800a7e6:	f883 2327 	strb.w	r2, [r3, #807]	; 0x327
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800a7ea:	2280      	movs	r2, #128	; 0x80
 800a7ec:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 800a7f0:	605a      	str	r2, [r3, #4]
static void usart_init(SerialDriver *sdp, const SerialConfig *config) {
 800a7f2:	f44f 729c 	mov.w	r2, #312	; 0x138
  USART_TypeDef *u = sdp->usart;
 800a7f6:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
  u->SR = 0;
 800a7fa:	2600      	movs	r6, #0
    u->BRR = STM32_PCLK2 / config->speed;
 800a7fc:	609a      	str	r2, [r3, #8]
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 800a7fe:	2040      	movs	r0, #64	; 0x40
  u->CR3 = config->cr3 | USART_CR3_EIE;
 800a800:	2401      	movs	r4, #1
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
 800a802:	f242 122c 	movw	r2, #8492	; 0x212c
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 800a806:	6118      	str	r0, [r3, #16]
  u->CR3 = config->cr3 | USART_CR3_EIE;
 800a808:	615c      	str	r4, [r3, #20]
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
 800a80a:	60da      	str	r2, [r3, #12]
  u->SR = 0;
 800a80c:	601e      	str	r6, [r3, #0]
  (void)u->SR;  /* SR reset step 1.*/
 800a80e:	681a      	ldr	r2, [r3, #0]
  (void)u->DR;  /* SR reset step 2.*/
 800a810:	685b      	ldr	r3, [r3, #4]
    sdp->rxmask = 0xFF;
 800a812:	23ff      	movs	r3, #255	; 0xff
 800a814:	f881 3084 	strb.w	r3, [r1, #132]	; 0x84
  sdp->state = SD_READY;
 800a818:	2302      	movs	r3, #2
 800a81a:	750b      	strb	r3, [r1, #20]
    osalOsRescheduleS();
 800a81c:	f7fa f808 	bl	8004830 <osalOsRescheduleS.lto_priv.1>
    taskEXIT_CRITICAL();
 800a820:	f7fa f998 	bl	8004b54 <vPortExitCritical>
    xTaskCreate(mixLedTask, "Led", 64, (void*)&mixLedDelay, 1, &mixLedTaskHandle);
 800a824:	4ba3      	ldr	r3, [pc, #652]	; (800aab4 <main_+0x490>)
 800a826:	4602      	mov	r2, r0
 800a828:	e9cd 4300 	strd	r4, r3, [sp]
    memset(driver, 0, sizeof(*driver));
 800a82c:	4ca2      	ldr	r4, [pc, #648]	; (800aab8 <main_+0x494>)
 800a82e:	4ba3      	ldr	r3, [pc, #652]	; (800aabc <main_+0x498>)
 800a830:	49a3      	ldr	r1, [pc, #652]	; (800aac0 <main_+0x49c>)
 800a832:	48a4      	ldr	r0, [pc, #656]	; (800aac4 <main_+0x4a0>)
 800a834:	f7fd fa56 	bl	8007ce4 <xTaskCreate.isra.0>
 800a838:	22fc      	movs	r2, #252	; 0xfc
 800a83a:	4631      	mov	r1, r6
 800a83c:	1d20      	adds	r0, r4, #4
 800a83e:	f000 ffe9 	bl	800b814 <memset>
    driver->config = config;
 800a842:	4ba1      	ldr	r3, [pc, #644]	; (800aac8 <main_+0x4a4>)
    max2870Tune(driver, &driver->currentTune);
 800a844:	f104 0108 	add.w	r1, r4, #8
    driver->config = config;
 800a848:	6023      	str	r3, [r4, #0]
    driver->currentTune.powerA = -127;
 800a84a:	f248 1381 	movw	r3, #33153	; 0x8181
    max2870Tune(driver, &driver->currentTune);
 800a84e:	4620      	mov	r0, r4
    driver->currentTune.powerA = -127;
 800a850:	8223      	strh	r3, [r4, #16]
    max2870Tune(driver, &driver->currentTune);
 800a852:	f7fe fd23 	bl	800929c <max2870Tune>
    uint16_t pfdDivider = driver->config->referenceToPfdDivider;
 800a856:	6820      	ldr	r0, [r4, #0]
 800a858:	8a83      	ldrh	r3, [r0, #20]
    uint32_t pfdFrequency = driver->config->inputFrequency;
 800a85a:	6902      	ldr	r2, [r0, #16]
    if(!(pfdDivider % 2)) {
 800a85c:	07d9      	lsls	r1, r3, #31
        pfdDivider /= 2;
 800a85e:	bf57      	itett	pl
 800a860:	085b      	lsrpl	r3, r3, #1
    uint32_t register2 = 0;
 800a862:	4631      	movmi	r1, r6
        register2 |= _BV(MAX2870_REG2_RDIV2_OFFSET);
 800a864:	f04f 7180 	movpl.w	r1, #16777216	; 0x1000000
        pfdFrequency /= 2;
 800a868:	0852      	lsrpl	r2, r2, #1
    if(pfdDivider > 1023) {
 800a86a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a86e:	4e97      	ldr	r6, [pc, #604]	; (800aacc <main_+0x4a8>)
 800a870:	f080 8099 	bcs.w	800a9a6 <main_+0x382>
    pfdFrequency /= pfdDivider;
 800a874:	fbb2 f2f3 	udiv	r2, r2, r3
    if(pfdFrequency % driver->config->stepFrequency) {
 800a878:	6980      	ldr	r0, [r0, #24]
        pfdDivider = 0;
 800a87a:	2b01      	cmp	r3, #1
    if(pfdFrequency % driver->config->stepFrequency) {
 800a87c:	fbb2 f7f0 	udiv	r7, r2, r0
 800a880:	fb00 2017 	mls	r0, r0, r7, r2
        pfdDivider = 0;
 800a884:	bf08      	it	eq
 800a886:	2300      	moveq	r3, #0
    if(pfdFrequency % driver->config->stepFrequency) {
 800a888:	2800      	cmp	r0, #0
 800a88a:	f040 808c 	bne.w	800a9a6 <main_+0x382>
    if(fracDivider > 4095) {
 800a88e:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
 800a892:	f080 8088 	bcs.w	800a9a6 <main_+0x382>
    register2 |= pfdDivider << MAX2870_REG2_R_OFFSET;
 800a896:	ea41 3383 	orr.w	r3, r1, r3, lsl #14
    driver->bsValue = (pfdFrequency + 49999) / 50000;
 800a89a:	f24c 3150 	movw	r1, #50000	; 0xc350
    driver->refDividerRegister2 = register2;
 800a89e:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
    driver->bsValue = (pfdFrequency + 49999) / 50000;
 800a8a2:	f502 4343 	add.w	r3, r2, #49920	; 0xc300
 800a8a6:	334f      	adds	r3, #79	; 0x4f
 800a8a8:	fbb3 f3f1 	udiv	r3, r3, r1
 800a8ac:	b29b      	uxth	r3, r3
    if(driver->bsValue > 1023) {
 800a8ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    driver->fracDivider = fracDivider;
 800a8b2:	f8a4 70bc 	strh.w	r7, [r4, #188]	; 0xbc
    driver->bsValue = (pfdFrequency + 49999) / 50000;
 800a8b6:	f8a4 30c4 	strh.w	r3, [r4, #196]	; 0xc4
    if(driver->bsValue > 1023) {
 800a8ba:	d274      	bcs.n	800a9a6 <main_+0x382>
    entry->name = name;
 800a8bc:	4b84      	ldr	r3, [pc, #528]	; (800aad0 <main_+0x4ac>)
    driver->pfdFrequency = pfdFrequency;
 800a8be:	f8c4 20b8 	str.w	r2, [r4, #184]	; 0xb8
 800a8c2:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
    entry->callback = callback;
 800a8c6:	4b83      	ldr	r3, [pc, #524]	; (800aad4 <main_+0x4b0>)
    entry->param = param;
 800a8c8:	e9c4 343a 	strd	r3, r4, [r4, #232]	; 0xe8
    entry->next = monThreadFirst;
 800a8cc:	6833      	ldr	r3, [r6, #0]
 800a8ce:	f8c4 30f0 	str.w	r3, [r4, #240]	; 0xf0
    monThreadFirst = entry;
 800a8d2:	4c81      	ldr	r4, [pc, #516]	; (800aad8 <main_+0x4b4>)
    if(max2870Init(&loPLL, &max2870Config) && max2870VcoPrecal(&loPLL)) {
 800a8d4:	f1a4 00e8 	sub.w	r0, r4, #232	; 0xe8
 800a8d8:	6034      	str	r4, [r6, #0]
 800a8da:	f7fe fd0d 	bl	80092f8 <max2870VcoPrecal>
 800a8de:	2800      	cmp	r0, #0
 800a8e0:	d061      	beq.n	800a9a6 <main_+0x382>
		shellCommandRegister("max", cmdMax, &loPLL);
 800a8e2:	487e      	ldr	r0, [pc, #504]	; (800aadc <main_+0x4b8>)
 800a8e4:	497e      	ldr	r1, [pc, #504]	; (800aae0 <main_+0x4bc>)
 800a8e6:	f1a4 02e8 	sub.w	r2, r4, #232	; 0xe8
 800a8ea:	f7f9 fcb7 	bl	800425c <shellCommandRegister>
		syslog("MAX2870 init done.");
 800a8ee:	487d      	ldr	r0, [pc, #500]	; (800aae4 <main_+0x4c0>)
    	syslog("MAX2870 init failed.");
 800a8f0:	f7fe fa4c 	bl	8008d8c <syslog>

bool MCP9804Init(MCP9804Driver* driver, const MCP9804Driver_config* config)
{
    memset(driver, 0, sizeof(*driver));
 800a8f4:	2300      	movs	r3, #0
 800a8f6:	4c7c      	ldr	r4, [pc, #496]	; (800aae8 <main_+0x4c4>)

    driver->config = config;

    /* Read device id */
    uint8_t devId;
    if(i2cSafeReadRegStandard(driver->config->i2cPort, driver->config->i2cAddr, 0x7, &devId) != MSG_OK) {
 800a8f8:	2207      	movs	r2, #7
    memset(driver, 0, sizeof(*driver));
 800a8fa:	6063      	str	r3, [r4, #4]
    driver->config = config;
 800a8fc:	4b7b      	ldr	r3, [pc, #492]	; (800aaec <main_+0x4c8>)
    if(i2cSafeReadRegStandard(driver->config->i2cPort, driver->config->i2cAddr, 0x7, &devId) != MSG_OK) {
 800a8fe:	2118      	movs	r1, #24
    driver->config = config;
 800a900:	6023      	str	r3, [r4, #0]
    if(i2cSafeReadRegStandard(driver->config->i2cPort, driver->config->i2cAddr, 0x7, &devId) != MSG_OK) {
 800a902:	487b      	ldr	r0, [pc, #492]	; (800aaf0 <main_+0x4cc>)
 800a904:	f10d 030f 	add.w	r3, sp, #15
 800a908:	f7fe fe2a 	bl	8009560 <i2cSafeReadRegStandard>
 800a90c:	b998      	cbnz	r0, 800a936 <main_+0x312>
        return false;
    }

    if(devId != 0x2) {
 800a90e:	f89d 300f 	ldrb.w	r3, [sp, #15]
 800a912:	2b02      	cmp	r3, #2
 800a914:	d10f      	bne.n	800a936 <main_+0x312>
        return false;
    }

    /* Set resolution to the highest */
    if(i2cSafeWriteRegStandard(driver->config->i2cPort, driver->config->i2cAddr, 0x8, 0x3) != MSG_OK) {
 800a916:	6820      	ldr	r0, [r4, #0]
 800a918:	2303      	movs	r3, #3
 800a91a:	7901      	ldrb	r1, [r0, #4]
 800a91c:	2208      	movs	r2, #8
 800a91e:	6800      	ldr	r0, [r0, #0]
 800a920:	f7ff fe62 	bl	800a5e8 <i2cSafeWriteRegStandard>
 800a924:	b938      	cbnz	r0, 800a936 <main_+0x312>
 800a926:	4620      	mov	r0, r4
 800a928:	f7fe fe28 	bl	800957c <MCP9804MeasureTemperature.part.0>
    if(!MCP9804Init(&tcxoTempSensor, &mcp9804Config)) {
 800a92c:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800a930:	4298      	cmp	r0, r3
        return false;
    }

    driver->temperature = MCP9804MeasureTemperature(driver, true);
 800a932:	80a0      	strh	r0, [r4, #4]
 800a934:	d139      	bne.n	800a9aa <main_+0x386>
        syslog("Temperature sensor init failed.");
 800a936:	486f      	ldr	r0, [pc, #444]	; (800aaf4 <main_+0x4d0>)
 800a938:	f7fe fa28 	bl	8008d8c <syslog>
    converter->activeBand = 0xff;
 800a93c:	23ff      	movs	r3, #255	; 0xff
 800a93e:	4a6e      	ldr	r2, [pc, #440]	; (800aaf8 <main_+0x4d4>)
        shellCommandRegister("convert", cmdConvert, &converter);
 800a940:	496e      	ldr	r1, [pc, #440]	; (800aafc <main_+0x4d8>)
 800a942:	7613      	strb	r3, [r2, #24]
    converter->bands = bands;
 800a944:	4b6e      	ldr	r3, [pc, #440]	; (800ab00 <main_+0x4dc>)
 800a946:	486f      	ldr	r0, [pc, #444]	; (800ab04 <main_+0x4e0>)
 800a948:	6153      	str	r3, [r2, #20]
    converter->setConverterGpio = setGpio;
 800a94a:	4b6f      	ldr	r3, [pc, #444]	; (800ab08 <main_+0x4e4>)
 800a94c:	6213      	str	r3, [r2, #32]
 800a94e:	f7f9 fc85 	bl	800425c <shellCommandRegister>
        if(!converterTune(&converter, &startupTuneRequest)) {
 800a952:	4610      	mov	r0, r2
 800a954:	496d      	ldr	r1, [pc, #436]	; (800ab0c <main_+0x4e8>)
 800a956:	f7f9 fdc1 	bl	80044dc <converterTune>
 800a95a:	2800      	cmp	r0, #0
 800a95c:	d12e      	bne.n	800a9bc <main_+0x398>
            syslog("Converter startup failed.");
 800a95e:	486c      	ldr	r0, [pc, #432]	; (800ab10 <main_+0x4ec>)
    entry->param = param;
 800a960:	2700      	movs	r7, #0
            syslog("Converter startup done.");
 800a962:	f7fe fa13 	bl	8008d8c <syslog>
    entry->name = name;
 800a966:	486b      	ldr	r0, [pc, #428]	; (800ab14 <main_+0x4f0>)
 800a968:	4b6b      	ldr	r3, [pc, #428]	; (800ab18 <main_+0x4f4>)
    monitorKick(&sanityReboot, true);
 800a96a:	2101      	movs	r1, #1
 800a96c:	60c3      	str	r3, [r0, #12]
    entry->callback = callback;
 800a96e:	4b6b      	ldr	r3, [pc, #428]	; (800ab1c <main_+0x4f8>)
    entry->param = param;
 800a970:	6047      	str	r7, [r0, #4]
    entry->callback = callback;
 800a972:	6003      	str	r3, [r0, #0]
    entry->next = monThreadFirst;
 800a974:	6833      	ldr	r3, [r6, #0]
    monThreadFirst = entry;
 800a976:	6030      	str	r0, [r6, #0]
    entry->next = monThreadFirst;
 800a978:	6083      	str	r3, [r0, #8]
 800a97a:	f7fa fdcf 	bl	800551c <monitorKick>
    xTaskCreate(taskPeriodicMon, "Monitor", stackSize, NULL, 1, &monThreadHandle );
 800a97e:	4b68      	ldr	r3, [pc, #416]	; (800ab20 <main_+0x4fc>)
  osalDbgAssert((usbp->state == USB_STOP) || (usbp->state == USB_READY),
 800a980:	4c68      	ldr	r4, [pc, #416]	; (800ab24 <main_+0x500>)
 800a982:	9301      	str	r3, [sp, #4]
 800a984:	2301      	movs	r3, #1
 800a986:	2280      	movs	r2, #128	; 0x80
 800a988:	4967      	ldr	r1, [pc, #412]	; (800ab28 <main_+0x504>)
 800a98a:	9300      	str	r3, [sp, #0]
 800a98c:	4867      	ldr	r0, [pc, #412]	; (800ab2c <main_+0x508>)
 800a98e:	463b      	mov	r3, r7
 800a990:	f7fd f9a8 	bl	8007ce4 <xTaskCreate.isra.0>
  osalSysLock();
 800a994:	f7f9 fec6 	bl	8004724 <vPortEnterCritical>
  osalDbgAssert((usbp->state == USB_STOP) || (usbp->state == USB_READY),
 800a998:	7826      	ldrb	r6, [r4, #0]
 800a99a:	1e73      	subs	r3, r6, #1
 800a99c:	2b01      	cmp	r3, #1
 800a99e:	d90f      	bls.n	800a9c0 <main_+0x39c>
 800a9a0:	f7f9 fed0 	bl	8004744 <vTaskEndScheduler>
 800a9a4:	e7fe      	b.n	800a9a4 <main_+0x380>
    	syslog("MAX2870 init failed.");
 800a9a6:	4862      	ldr	r0, [pc, #392]	; (800ab30 <main_+0x50c>)
 800a9a8:	e7a2      	b.n	800a8f0 <main_+0x2cc>
        syslog("Temperature sensor init done.");
 800a9aa:	4862      	ldr	r0, [pc, #392]	; (800ab34 <main_+0x510>)
 800a9ac:	f7fe f9ee 	bl	8008d8c <syslog>
        shellCommandRegister("temp", cmdTemp, &tcxoTempSensor);
 800a9b0:	4622      	mov	r2, r4
 800a9b2:	4961      	ldr	r1, [pc, #388]	; (800ab38 <main_+0x514>)
 800a9b4:	4861      	ldr	r0, [pc, #388]	; (800ab3c <main_+0x518>)
 800a9b6:	f7f9 fc51 	bl	800425c <shellCommandRegister>
 800a9ba:	e7bf      	b.n	800a93c <main_+0x318>
            syslog("Converter startup done.");
 800a9bc:	4860      	ldr	r0, [pc, #384]	; (800ab40 <main_+0x51c>)
 800a9be:	e7cf      	b.n	800a960 <main_+0x33c>
  usbp->config = config;
 800a9c0:	4b60      	ldr	r3, [pc, #384]	; (800ab44 <main_+0x520>)
    usbp->epc[i] = NULL;
 800a9c2:	2220      	movs	r2, #32
 800a9c4:	4639      	mov	r1, r7
 800a9c6:	f104 000c 	add.w	r0, r4, #12
  usbp->config = config;
 800a9ca:	6063      	str	r3, [r4, #4]
    usbp->epc[i] = NULL;
 800a9cc:	f000 ff22 	bl	800b814 <memset>
  if (usbp->state == USB_STOP) {
 800a9d0:	2e01      	cmp	r6, #1
 800a9d2:	d11b      	bne.n	800aa0c <main_+0x3e8>
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 800a9d4:	21d0      	movs	r1, #208	; 0xd0
      rccEnableUSB(FALSE);
 800a9d6:	4b35      	ldr	r3, [pc, #212]	; (800aaac <main_+0x488>)
 800a9d8:	69da      	ldr	r2, [r3, #28]
 800a9da:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800a9de:	61da      	str	r2, [r3, #28]
 800a9e0:	4a33      	ldr	r2, [pc, #204]	; (800aab0 <main_+0x48c>)
      STM32_USB->CNTR = CNTR_FRES;
 800a9e2:	f5a3 33da 	sub.w	r3, r3, #111616	; 0x1b400
 800a9e6:	641e      	str	r6, [r3, #64]	; 0x40
 800a9e8:	f882 1313 	strb.w	r1, [r2, #787]	; 0x313
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800a9ec:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800a9f0:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 800a9f4:	6011      	str	r1, [r2, #0]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 800a9f6:	21e0      	movs	r1, #224	; 0xe0
 800a9f8:	f882 1314 	strb.w	r1, [r2, #788]	; 0x314
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800a9fc:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 800aa00:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 800aa04:	6011      	str	r1, [r2, #0]
      STM32_USB->CNTR = 0;
 800aa06:	641f      	str	r7, [r3, #64]	; 0x40
    _usb_reset(usbp);
 800aa08:	f7fb fbb0 	bl	800616c <_usb_reset.constprop.0>
  usbp->state = USB_READY;
 800aa0c:	2702      	movs	r7, #2
  sdup->vmt = &vmt;
 800aa0e:	484e      	ldr	r0, [pc, #312]	; (800ab48 <main_+0x524>)
 800aa10:	7027      	strb	r7, [r4, #0]
    osalOsRescheduleS();
 800aa12:	f7f9 ff0d 	bl	8004830 <osalOsRescheduleS.lto_priv.1>
    taskEXIT_CRITICAL();
 800aa16:	f7fa f89d 	bl	8004b54 <vPortExitCritical>
 800aa1a:	4b4c      	ldr	r3, [pc, #304]	; (800ab4c <main_+0x528>)
  sdup->state = SDU_STOP;
 800aa1c:	2101      	movs	r1, #1
  sdup->vmt = &vmt;
 800aa1e:	6003      	str	r3, [r0, #0]
    event_source->setEvents = 0;
 800aa20:	2300      	movs	r3, #0
  ibqp->bsize     = size + sizeof (size_t);
 800aa22:	f44f 7c82 	mov.w	ip, #260	; 0x104
  ibqp->brdptr    = bp;
 800aa26:	f100 0688 	add.w	r6, r0, #136	; 0x88
  ibqp->ptr       = NULL;
 800aa2a:	e9c0 630f 	strd	r6, r3, [r0, #60]	; 0x3c
  ibqp->bcounter  = 0;
 800aa2e:	6243      	str	r3, [r0, #36]	; 0x24
    event_source->firstRepeater = NULL;
 800aa30:	e9c0 3301 	strd	r3, r3, [r0, #4]
    thread_queue->tail = NULL;
 800aa34:	e9c0 3306 	strd	r3, r3, [r0, #24]
  ibqp->bwrptr    = bp;
 800aa38:	e9c0 660a 	strd	r6, r6, [r0, #40]	; 0x28
 800aa3c:	e9c0 3314 	strd	r3, r3, [r0, #80]	; 0x50
  obqp->top       = NULL;
 800aa40:	e9c0 331e 	strd	r3, r3, [r0, #120]	; 0x78
    event_source->waitThread = NULL;
 800aa44:	60c3      	str	r3, [r0, #12]
  ibqp->top       = NULL;
 800aa46:	6443      	str	r3, [r0, #68]	; 0x44
  ibqp->notify    = infy;
 800aa48:	4e41      	ldr	r6, [pc, #260]	; (800ab50 <main_+0x52c>)
  obqp->notify    = onfy;
 800aa4a:	4b42      	ldr	r3, [pc, #264]	; (800ab54 <main_+0x530>)
  ibqp->btop      = bp + ((size + sizeof (size_t)) * n);
 800aa4c:	f500 7224 	add.w	r2, r0, #656	; 0x290
  sdup->state = SDU_STOP;
 800aa50:	7501      	strb	r1, [r0, #20]
  ibqp->suspended = suspended;
 800aa52:	f880 1020 	strb.w	r1, [r0, #32]
  obqp->suspended = suspended;
 800aa56:	f880 1058 	strb.w	r1, [r0, #88]	; 0x58
  obqp->btop      = bp + ((size + sizeof (size_t)) * n);
 800aa5a:	f500 6193 	add.w	r1, r0, #1176	; 0x498
  ibqp->bn        = n;
 800aa5e:	e9c0 c70d 	strd	ip, r7, [r0, #52]	; 0x34
  obqp->bwrptr    = bp;
 800aa62:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
  obqp->bsize     = size + sizeof (size_t);
 800aa66:	e9c0 1c1a 	strd	r1, ip, [r0, #104]	; 0x68
  obqp->buffers   = bp;
 800aa6a:	e9c0 721c 	strd	r7, r2, [r0, #112]	; 0x70
  ibqp->btop      = bp + ((size + sizeof (size_t)) * n);
 800aa6e:	6302      	str	r2, [r0, #48]	; 0x30
  ibqp->link      = link;
 800aa70:	e9c0 6012 	strd	r6, r0, [r0, #72]	; 0x48
  obqp->bcounter  = n;
 800aa74:	65c7      	str	r7, [r0, #92]	; 0x5c
  obqp->link      = link;
 800aa76:	e9c0 3020 	strd	r3, r0, [r0, #128]	; 0x80
  osalSysLock();
 800aa7a:	f7f9 fe53 	bl	8004724 <vPortEnterCritical>
  osalDbgAssert((sdup->state == SDU_STOP) || (sdup->state == SDU_READY),
 800aa7e:	7d03      	ldrb	r3, [r0, #20]
 800aa80:	3b01      	subs	r3, #1
 800aa82:	2b01      	cmp	r3, #1
 800aa84:	d902      	bls.n	800aa8c <main_+0x468>
 800aa86:	f7f9 fe5d 	bl	8004744 <vTaskEndScheduler>
 800aa8a:	e7fe      	b.n	800aa8a <main_+0x466>
  sdup->config = config;
 800aa8c:	4b32      	ldr	r3, [pc, #200]	; (800ab58 <main_+0x534>)
  usbp->in_params[config->bulk_in - 1U]   = sdup;
 800aa8e:	62e0      	str	r0, [r4, #44]	; 0x2c
  usbp->out_params[config->bulk_out - 1U] = sdup;
 800aa90:	64a0      	str	r0, [r4, #72]	; 0x48
    usbp->in_params[config->int_in - 1U]  = sdup;
 800aa92:	6320      	str	r0, [r4, #48]	; 0x30
  sdup->config = config;
 800aa94:	f8c0 3498 	str.w	r3, [r0, #1176]	; 0x498
  sdup->state = SDU_READY;
 800aa98:	7507      	strb	r7, [r0, #20]
    osalOsRescheduleS();
 800aa9a:	f7f9 fec9 	bl	8004830 <osalOsRescheduleS.lto_priv.1>
    taskEXIT_CRITICAL();
 800aa9e:	f7fa f859 	bl	8004b54 <vPortExitCritical>
{
    usbStart(&USBD1, &usbcfg);
    sduObjectInit(&SDU1);
    sduStart(&SDU1, &serusbcfg);

    usbConnectBus(serusbcfg.usbp);
 800aaa2:	f44f 6380 	mov.w	r3, #1024	; 0x400
    syslog("USB init done.");
 800aaa6:	482d      	ldr	r0, [pc, #180]	; (800ab5c <main_+0x538>)
 800aaa8:	612b      	str	r3, [r5, #16]
 800aaaa:	e5ff      	b.n	800a6ac <main_+0x88>
 800aaac:	40021000 	.word	0x40021000
 800aab0:	e000e100 	.word	0xe000e100
 800aab4:	2000119c 	.word	0x2000119c
 800aab8:	20001098 	.word	0x20001098
 800aabc:	20001198 	.word	0x20001198
 800aac0:	0800c5a7 	.word	0x0800c5a7
 800aac4:	0800b6d5 	.word	0x0800b6d5
 800aac8:	0800ca68 	.word	0x0800ca68
 800aacc:	200011a0 	.word	0x200011a0
 800aad0:	0800c5ab 	.word	0x0800c5ab
 800aad4:	0800922d 	.word	0x0800922d
 800aad8:	20001180 	.word	0x20001180
 800aadc:	0800c5b3 	.word	0x0800c5b3
 800aae0:	0800a291 	.word	0x0800a291
 800aae4:	0800c5b7 	.word	0x0800c5b7
 800aae8:	20001338 	.word	0x20001338
 800aaec:	0800ca88 	.word	0x0800ca88
 800aaf0:	20000934 	.word	0x20000934
 800aaf4:	0800c5df 	.word	0x0800c5df
 800aaf8:	20001020 	.word	0x20001020
 800aafc:	080097b9 	.word	0x080097b9
 800ab00:	0800c92c 	.word	0x0800c92c
 800ab04:	0800c622 	.word	0x0800c622
 800ab08:	08007551 	.word	0x08007551
 800ab0c:	20000914 	.word	0x20000914
 800ab10:	0800c62a 	.word	0x0800c62a
 800ab14:	2000121c 	.word	0x2000121c
 800ab18:	0800c65c 	.word	0x0800c65c
 800ab1c:	08007f45 	.word	0x08007f45
 800ab20:	200011a4 	.word	0x200011a4
 800ab24:	20000f54 	.word	0x20000f54
 800ab28:	0800c663 	.word	0x0800c663
 800ab2c:	08006585 	.word	0x08006585
 800ab30:	0800c5ca 	.word	0x0800c5ca
 800ab34:	0800c5ff 	.word	0x0800c5ff
 800ab38:	080095b9 	.word	0x080095b9
 800ab3c:	0800c61d 	.word	0x0800c61d
 800ab40:	0800c644 	.word	0x0800c644
 800ab44:	0800cbdc 	.word	0x0800cbdc
 800ab48:	20000a44 	.word	0x20000a44
 800ab4c:	0800cd28 	.word	0x0800cd28
 800ab50:	08007851 	.word	0x08007851
 800ab54:	08004951 	.word	0x08004951
 800ab58:	0800cb74 	.word	0x0800cb74
 800ab5c:	0800c66b 	.word	0x0800c66b

0800ab60 <cmdI2C>:
    }
    chprintf(chp, SHELL_NEWLINE_STR);
}

void cmdI2C(void* user, BaseSequentialStream *chp, int argc, char *argv[])
{
 800ab60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab64:	4606      	mov	r6, r0
 800ab66:	460c      	mov	r4, r1
 800ab68:	4698      	mov	r8, r3
    I2CDriver* i2c = (I2CDriver*)user;

    if(argc == 0) {
 800ab6a:	4615      	mov	r5, r2
{
 800ab6c:	b087      	sub	sp, #28
    if(argc == 0) {
 800ab6e:	b92a      	cbnz	r2, 800ab7c <cmdI2C+0x1c>
        cmdI2CUsage(chp);
 800ab70:	4620      	mov	r0, r4
        cmdI2CScan(i2c, chp);
    } else {
        cmdI2CUsage(chp);
        return;
    }
}
 800ab72:	b007      	add	sp, #28
 800ab74:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        cmdI2CUsage(chp);
 800ab78:	f7fd bf36 	b.w	80089e8 <cmdI2CUsage>
    if(!strcmp(argv[0], "test")) {
 800ab7c:	681f      	ldr	r7, [r3, #0]
 800ab7e:	4966      	ldr	r1, [pc, #408]	; (800ad18 <cmdI2C+0x1b8>)
 800ab80:	4638      	mov	r0, r7
 800ab82:	f7f9 f821 	bl	8003bc8 <strcmp>
 800ab86:	b9a0      	cbnz	r0, 800abb2 <cmdI2C+0x52>
    i2cAcquireBus(i2c);
 800ab88:	4630      	mov	r0, r6
 800ab8a:	f7fb f9a7 	bl	8005edc <i2cAcquireBus>
    i2c_result retVal = i2cSafeRawUnclogBus(i2c);
 800ab8e:	4630      	mov	r0, r6
 800ab90:	f7fd fa0c 	bl	8007fac <i2cSafeRawUnclogBus>
 800ab94:	4605      	mov	r5, r0
    i2cReleaseBus(i2c);
 800ab96:	4630      	mov	r0, r6
 800ab98:	f7fd fd8c 	bl	80086b4 <i2cReleaseBus>
        chprintf(chp, "Verdict: %s"SHELL_NEWLINE_STR, i2cSafeResultToString(i2cSafeTestBus(i2c)));
 800ab9c:	4628      	mov	r0, r5
 800ab9e:	f7f9 fbdb 	bl	8004358 <i2cSafeResultToString>
 800aba2:	4602      	mov	r2, r0
 800aba4:	495d      	ldr	r1, [pc, #372]	; (800ad1c <cmdI2C+0x1bc>)
        chprintf(chp, "I2C Errors: %u"SHELL_NEWLINE_STR, i2cSafeGetNumberOfErrors(i2c));
 800aba6:	4620      	mov	r0, r4
}
 800aba8:	b007      	add	sp, #28
 800abaa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        chprintf(chp, "I2C Errors: %u"SHELL_NEWLINE_STR, i2cSafeGetNumberOfErrors(i2c));
 800abae:	f7fd bdd0 	b.w	8008752 <chprintf>
    if(!strcmp(argv[0], "set")) {
 800abb2:	4638      	mov	r0, r7
 800abb4:	495a      	ldr	r1, [pc, #360]	; (800ad20 <cmdI2C+0x1c0>)
 800abb6:	f7f9 f807 	bl	8003bc8 <strcmp>
 800abba:	4681      	mov	r9, r0
 800abbc:	2800      	cmp	r0, #0
 800abbe:	d149      	bne.n	800ac54 <cmdI2C+0xf4>
        if(argc<4) return false;
 800abc0:	2d03      	cmp	r5, #3
 800abc2:	dd5b      	ble.n	800ac7c <cmdI2C+0x11c>
        if(argc>4) stress = true;
 800abc4:	3d04      	subs	r5, #4
        regValue = strToInt(argv[3], 16);
 800abc6:	f04f 0110 	mov.w	r1, #16
 800abca:	f8d8 000c 	ldr.w	r0, [r8, #12]
        if(argc>4) stress = true;
 800abce:	bf18      	it	ne
 800abd0:	2501      	movne	r5, #1
        regValue = strToInt(argv[3], 16);
 800abd2:	f7f9 fb02 	bl	80041da <strToInt>
        wantToRead = false;
 800abd6:	464f      	mov	r7, r9
        regValue = strToInt(argv[3], 16);
 800abd8:	f88d 0017 	strb.w	r0, [sp, #23]
    uint8_t devAddr = strToInt(argv[1], 16);
 800abdc:	2110      	movs	r1, #16
 800abde:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800abe2:	f7f9 fafa 	bl	80041da <strToInt>
 800abe6:	fa5f f980 	uxtb.w	r9, r0
    uint8_t regAddr = strToInt(argv[2], 16);
 800abea:	f8d8 0008 	ldr.w	r0, [r8, #8]
 800abee:	f7f9 faf4 	bl	80041da <strToInt>
    uint32_t stressCnt = 0;
 800abf2:	f04f 0a00 	mov.w	sl, #0
    uint8_t regAddr = strToInt(argv[2], 16);
 800abf6:	9003      	str	r0, [sp, #12]
 800abf8:	f89d b00c 	ldrb.w	fp, [sp, #12]
        if(wantToRead) {
 800abfc:	b3b7      	cbz	r7, 800ac6c <cmdI2C+0x10c>
            result = i2cSafeReadRegStandard(i2c, devAddr, regAddr, &regValue);
 800abfe:	465a      	mov	r2, fp
 800ac00:	4649      	mov	r1, r9
 800ac02:	4630      	mov	r0, r6
 800ac04:	f10d 0317 	add.w	r3, sp, #23
 800ac08:	f7fe fcaa 	bl	8009560 <i2cSafeReadRegStandard>
            result = i2cSafeWriteRegStandard(i2c, devAddr, regAddr, regValue);
 800ac0c:	4680      	mov	r8, r0
        if(result != I2C_BUS_OK) {
 800ac0e:	b110      	cbz	r0, 800ac16 <cmdI2C+0xb6>
            regValue = 0;
 800ac10:	2300      	movs	r3, #0
 800ac12:	f88d 3017 	strb.w	r3, [sp, #23]
        if(stress) {
 800ac16:	b12d      	cbz	r5, 800ac24 <cmdI2C+0xc4>
            printfFixed(chp, 7, "%u", stressCnt);
 800ac18:	4653      	mov	r3, sl
 800ac1a:	2107      	movs	r1, #7
 800ac1c:	4620      	mov	r0, r4
 800ac1e:	4a41      	ldr	r2, [pc, #260]	; (800ad24 <cmdI2C+0x1c4>)
 800ac20:	f7fd ff44 	bl	8008aac <printfFixed>
        chprintf(chp, "Status: %s, address: 0x%02x, register: 0x%02x, value: 0x%02x"SHELL_NEWLINE_STR,
 800ac24:	4640      	mov	r0, r8
 800ac26:	f7f9 fb97 	bl	8004358 <i2cSafeResultToString>
 800ac2a:	f89d 3017 	ldrb.w	r3, [sp, #23]
 800ac2e:	4602      	mov	r2, r0
 800ac30:	9301      	str	r3, [sp, #4]
 800ac32:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800ac36:	4620      	mov	r0, r4
 800ac38:	9300      	str	r3, [sp, #0]
 800ac3a:	493b      	ldr	r1, [pc, #236]	; (800ad28 <cmdI2C+0x1c8>)
 800ac3c:	464b      	mov	r3, r9
 800ac3e:	f7fd fd88 	bl	8008752 <chprintf>
        stressCnt++;
 800ac42:	f10a 0a01 	add.w	sl, sl, #1
    } while (stress && stressCnt <= 100000);
 800ac46:	b115      	cbz	r5, 800ac4e <cmdI2C+0xee>
 800ac48:	4b38      	ldr	r3, [pc, #224]	; (800ad2c <cmdI2C+0x1cc>)
 800ac4a:	459a      	cmp	sl, r3
 800ac4c:	d1d6      	bne.n	800abfc <cmdI2C+0x9c>
}
 800ac4e:	b007      	add	sp, #28
 800ac50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    } else if(!strcmp(argv[0], "get")) {
 800ac54:	4638      	mov	r0, r7
 800ac56:	4936      	ldr	r1, [pc, #216]	; (800ad30 <cmdI2C+0x1d0>)
 800ac58:	f7f8 ffb6 	bl	8003bc8 <strcmp>
 800ac5c:	b970      	cbnz	r0, 800ac7c <cmdI2C+0x11c>
        if(argc<3) return false;
 800ac5e:	2d02      	cmp	r5, #2
 800ac60:	dd0c      	ble.n	800ac7c <cmdI2C+0x11c>
        if(argc>3) stress = true;
 800ac62:	3d03      	subs	r5, #3
 800ac64:	bf18      	it	ne
 800ac66:	2501      	movne	r5, #1
        wantToRead = true;
 800ac68:	2701      	movs	r7, #1
 800ac6a:	e7b7      	b.n	800abdc <cmdI2C+0x7c>
            result = i2cSafeWriteRegStandard(i2c, devAddr, regAddr, regValue);
 800ac6c:	465a      	mov	r2, fp
 800ac6e:	4649      	mov	r1, r9
 800ac70:	4630      	mov	r0, r6
 800ac72:	f89d 3017 	ldrb.w	r3, [sp, #23]
 800ac76:	f7ff fcb7 	bl	800a5e8 <i2cSafeWriteRegStandard>
 800ac7a:	e7c7      	b.n	800ac0c <cmdI2C+0xac>
    } else if(!strcmp(argv[0], "errors")) {
 800ac7c:	4638      	mov	r0, r7
 800ac7e:	492d      	ldr	r1, [pc, #180]	; (800ad34 <cmdI2C+0x1d4>)
 800ac80:	f7f8 ffa2 	bl	8003bc8 <strcmp>
 800ac84:	b940      	cbnz	r0, 800ac98 <cmdI2C+0x138>

uint32_t i2cSafeGetNumberOfErrors(I2CDriver* i2c)
{
    osalSysLock();
 800ac86:	f7f9 fd4d 	bl	8004724 <vPortEnterCritical>
    uint32_t result = i2c->i2cErrors;
 800ac8a:	f8d6 0084 	ldr.w	r0, [r6, #132]	; 0x84
    osalSysUnlock();
 800ac8e:	f7f9 ff6d 	bl	8004b6c <osalSysUnlock.lto_priv.0>
        chprintf(chp, "I2C Errors: %u"SHELL_NEWLINE_STR, i2cSafeGetNumberOfErrors(i2c));
 800ac92:	4602      	mov	r2, r0
 800ac94:	4928      	ldr	r1, [pc, #160]	; (800ad38 <cmdI2C+0x1d8>)
 800ac96:	e786      	b.n	800aba6 <cmdI2C+0x46>
    } else if(!strcmp(argv[0], "scan")) {
 800ac98:	4638      	mov	r0, r7
 800ac9a:	4928      	ldr	r1, [pc, #160]	; (800ad3c <cmdI2C+0x1dc>)
 800ac9c:	f7f8 ff94 	bl	8003bc8 <strcmp>
 800aca0:	4605      	mov	r5, r0
 800aca2:	2800      	cmp	r0, #0
 800aca4:	f47f af64 	bne.w	800ab70 <cmdI2C+0x10>
    chprintf(chp, "   ");
 800aca8:	4620      	mov	r0, r4
 800acaa:	4925      	ldr	r1, [pc, #148]	; (800ad40 <cmdI2C+0x1e0>)
 800acac:	f7fd fd51 	bl	8008752 <chprintf>
    for(int addr = 0; addr <= 0xF; addr++) {
 800acb0:	462f      	mov	r7, r5
        chprintf(chp, "%1x  ", addr);
 800acb2:	f8df 8090 	ldr.w	r8, [pc, #144]	; 800ad44 <cmdI2C+0x1e4>
 800acb6:	463a      	mov	r2, r7
 800acb8:	4641      	mov	r1, r8
 800acba:	4620      	mov	r0, r4
    for(int addr = 0; addr <= 0xF; addr++) {
 800acbc:	3701      	adds	r7, #1
        chprintf(chp, "%1x  ", addr);
 800acbe:	f7fd fd48 	bl	8008752 <chprintf>
    for(int addr = 0; addr <= 0xF; addr++) {
 800acc2:	2f10      	cmp	r7, #16
 800acc4:	d1f7      	bne.n	800acb6 <cmdI2C+0x156>
            chprintf(chp, SHELL_NEWLINE_STR"%1x ", addr/16);
 800acc6:	4f20      	ldr	r7, [pc, #128]	; (800ad48 <cmdI2C+0x1e8>)
            chprintf(chp, "EE ");
 800acc8:	f8df 8080 	ldr.w	r8, [pc, #128]	; 800ad4c <cmdI2C+0x1ec>
            chprintf(chp, "-- ");
 800accc:	f8df 9080 	ldr.w	r9, [pc, #128]	; 800ad50 <cmdI2C+0x1f0>
        if(addr % 16 == 0) {
 800acd0:	072b      	lsls	r3, r5, #28
 800acd2:	d104      	bne.n	800acde <cmdI2C+0x17e>
            chprintf(chp, SHELL_NEWLINE_STR"%1x ", addr/16);
 800acd4:	4639      	mov	r1, r7
 800acd6:	4620      	mov	r0, r4
 800acd8:	112a      	asrs	r2, r5, #4
 800acda:	f7fd fd3a 	bl	8008752 <chprintf>
        i2c_result result = i2cSafeReadRegStandard(i2c, addr, 0, &regValue);
 800acde:	2200      	movs	r2, #0
 800ace0:	4630      	mov	r0, r6
 800ace2:	f10d 0317 	add.w	r3, sp, #23
 800ace6:	b2e9      	uxtb	r1, r5
 800ace8:	f7fe fc3a 	bl	8009560 <i2cSafeReadRegStandard>
        if(result == I2C_BUS_OK) {
 800acec:	b960      	cbnz	r0, 800ad08 <cmdI2C+0x1a8>
            chprintf(chp, "%02x ", addr);
 800acee:	462a      	mov	r2, r5
 800acf0:	4620      	mov	r0, r4
 800acf2:	4918      	ldr	r1, [pc, #96]	; (800ad54 <cmdI2C+0x1f4>)
 800acf4:	f7fd fd2d 	bl	8008752 <chprintf>
    for(int addr = 0; addr <= 0x7F; addr++) {
 800acf8:	3501      	adds	r5, #1
 800acfa:	2d80      	cmp	r5, #128	; 0x80
 800acfc:	d1e8      	bne.n	800acd0 <cmdI2C+0x170>
    chprintf(chp, SHELL_NEWLINE_STR);
 800acfe:	4620      	mov	r0, r4
 800ad00:	4915      	ldr	r1, [pc, #84]	; (800ad58 <cmdI2C+0x1f8>)
 800ad02:	f7fd fd26 	bl	8008752 <chprintf>
 800ad06:	e7a2      	b.n	800ac4e <cmdI2C+0xee>
        } else if(result == I2C_BUS_RESET) {
 800ad08:	3002      	adds	r0, #2
            chprintf(chp, "-- ");
 800ad0a:	bf0c      	ite	eq
 800ad0c:	4649      	moveq	r1, r9
            chprintf(chp, "EE ");
 800ad0e:	4641      	movne	r1, r8
 800ad10:	4620      	mov	r0, r4
 800ad12:	f7fd fd1e 	bl	8008752 <chprintf>
 800ad16:	e7ef      	b.n	800acf8 <cmdI2C+0x198>
 800ad18:	0800c683 	.word	0x0800c683
 800ad1c:	0800c688 	.word	0x0800c688
 800ad20:	0800c0b3 	.word	0x0800c0b3
 800ad24:	0800c119 	.word	0x0800c119
 800ad28:	0800c69a 	.word	0x0800c69a
 800ad2c:	000186a1 	.word	0x000186a1
 800ad30:	0800c696 	.word	0x0800c696
 800ad34:	0800c6d9 	.word	0x0800c6d9
 800ad38:	0800c6e0 	.word	0x0800c6e0
 800ad3c:	0800c6f1 	.word	0x0800c6f1
 800ad40:	0800bbd9 	.word	0x0800bbd9
 800ad44:	0800c6f6 	.word	0x0800c6f6
 800ad48:	0800c6fc 	.word	0x0800c6fc
 800ad4c:	0800c70d 	.word	0x0800c70d
 800ad50:	0800c709 	.word	0x0800c709
 800ad54:	0800c703 	.word	0x0800c703
 800ad58:	0800be6c 	.word	0x0800be6c

0800ad5c <syslogISRUnknownPriority>:

static bool syslogISRHasSomething;
static char syslogISRBuffer[64];

bool syslogISRUnknownPriority(const char *format, ...)
{
 800ad5c:	b40f      	push	{r0, r1, r2, r3}
    if(__atomic_test_and_set(&syslogISRHasSomething, __ATOMIC_ACQUIRE)) {
 800ad5e:	f04f 0201 	mov.w	r2, #1
{
 800ad62:	b530      	push	{r4, r5, lr}
    if(__atomic_test_and_set(&syslogISRHasSomething, __ATOMIC_ACQUIRE)) {
 800ad64:	4b11      	ldr	r3, [pc, #68]	; (800adac <syslogISRUnknownPriority+0x50>)
{
 800ad66:	b087      	sub	sp, #28
    if(__atomic_test_and_set(&syslogISRHasSomething, __ATOMIC_ACQUIRE)) {
 800ad68:	e8d3 5f4f 	ldrexb	r5, [r3]
 800ad6c:	e8c3 2f41 	strexb	r1, r2, [r3]
 800ad70:	2900      	cmp	r1, #0
 800ad72:	d1f9      	bne.n	800ad68 <syslogISRUnknownPriority+0xc>
 800ad74:	b2eb      	uxtb	r3, r5
 800ad76:	f3bf 8f5b 	dmb	ish
 800ad7a:	b9ab      	cbnz	r3, 800ada8 <syslogISRUnknownPriority+0x4c>
 *                      for ROM streams.
 */
void msObjectInit(MemoryStream *msp, uint8_t *buffer,
                  size_t size, size_t eos) {

  msp->vmt    = &vmt;
 800ad7c:	490c      	ldr	r1, [pc, #48]	; (800adb0 <syslogISRUnknownPriority+0x54>)
  msp->buffer = buffer;
 800ad7e:	4c0d      	ldr	r4, [pc, #52]	; (800adb4 <syslogISRUnknownPriority+0x58>)
  msp->vmt    = &vmt;
 800ad80:	9101      	str	r1, [sp, #4]
  msp->size   = size;
 800ad82:	213f      	movs	r1, #63	; 0x3f
        return false;
    }

    va_list args;
    va_start(args, format);
 800ad84:	aa0b      	add	r2, sp, #44	; 0x2c
  msp->eos    = eos;
 800ad86:	e9cd 1303 	strd	r1, r3, [sp, #12]

    MemoryStream ms;
    msObjectInit(&ms, (uint8_t *)syslogISRBuffer, sizeof(syslogISRBuffer)-1, 0);
    BaseSequentialStream *chp = (BaseSequentialStream *)(void *)&ms;

    chvprintf(chp, format, args);
 800ad8a:	a801      	add	r0, sp, #4
 800ad8c:	990a      	ldr	r1, [sp, #40]	; 0x28
  msp->offset = 0;
 800ad8e:	9305      	str	r3, [sp, #20]
    va_start(args, format);
 800ad90:	9200      	str	r2, [sp, #0]
  msp->buffer = buffer;
 800ad92:	9402      	str	r4, [sp, #8]
    chvprintf(chp, format, args);
 800ad94:	f7fb feac 	bl	8006af0 <chvprintf>
    syslogISRBuffer[ms.eos] = 0;

    va_end(args);

    return true;
 800ad98:	2001      	movs	r0, #1
    syslogISRBuffer[ms.eos] = 0;
 800ad9a:	9b04      	ldr	r3, [sp, #16]
 800ad9c:	54e5      	strb	r5, [r4, r3]
}
 800ad9e:	b007      	add	sp, #28
 800ada0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ada4:	b004      	add	sp, #16
 800ada6:	4770      	bx	lr
        return false;
 800ada8:	2000      	movs	r0, #0
 800adaa:	e7f8      	b.n	800ad9e <syslogISRUnknownPriority+0x42>
 800adac:	2000130c 	.word	0x2000130c
 800adb0:	0800cd48 	.word	0x0800cd48
 800adb4:	200012cc 	.word	0x200012cc

0800adb8 <BusFault_Handler>:
#error "the constant CORTEX_NUM_VECTORS must be between 8 and 240 inclusive"
#endif

extern void unhandledException(void);

void _unhandled_exception(void){
 800adb8:	b508      	push	{r3, lr}
}

void unhandledException(void)
{
    /* Check which vector is active */
    unsigned int vectorId = NVIC_ICSR & 0x1ff;
 800adba:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800adbe:	f8d3 1d04 	ldr.w	r1, [r3, #3332]	; 0xd04

    if(vectorId >= 16) {
 800adc2:	f411 7ff8 	tst.w	r1, #496	; 0x1f0
 800adc6:	d013      	beq.n	800adf0 <BusFault_Handler+0x38>
    *pendReg = _BV(vectorId%32);
 800adc8:	2301      	movs	r3, #1
    unsigned int vectorId = NVIC_ICSR & 0x1ff;
 800adca:	f3c1 0108 	ubfx	r1, r1, #0, #9
        /* This can be masked */
        vectorId -= 16;
 800adce:	3910      	subs	r1, #16
    *pendReg = _BV(vectorId%32);
 800add0:	f001 001f 	and.w	r0, r1, #31
 800add4:	4083      	lsls	r3, r0
 800add6:	4808      	ldr	r0, [pc, #32]	; (800adf8 <BusFault_Handler+0x40>)
    volatile uint32_t* pendReg = (&NVIC_CPR) + (vectorId / 32);
 800add8:	094a      	lsrs	r2, r1, #5
    *pendReg = _BV(vectorId%32);
 800adda:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
        volatile uint32_t* ceReg = (&NVIC_CER) + (vectorId / 32);
 800adde:	f5a0 7080 	sub.w	r0, r0, #256	; 0x100
        *ceReg = _BV(vectorId%32);
 800ade2:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
        clearInterrupt(vectorId, true);

        /* Report it */
        syslogISRUnknownPriority("Unhandled vector %u.", vectorId);
 800ade6:	4805      	ldr	r0, [pc, #20]	; (800adfc <BusFault_Handler+0x44>)
	unhandledException();
}
 800ade8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800adec:	f7ff bfb6 	b.w	800ad5c <syslogISRUnknownPriority>
    } else {
        osalSysHalt("Fault");
 800adf0:	f7f9 fca8 	bl	8004744 <vTaskEndScheduler>
 800adf4:	e7fe      	b.n	800adf4 <BusFault_Handler+0x3c>
 800adf6:	bf00      	nop
 800adf8:	e000e280 	.word	0xe000e280
 800adfc:	0800c711 	.word	0x0800c711

0800ae00 <usb_event>:
{
 800ae00:	b538      	push	{r3, r4, r5, lr}
 800ae02:	4604      	mov	r4, r0
 800ae04:	2905      	cmp	r1, #5
 800ae06:	d878      	bhi.n	800aefa <usb_event+0xfa>
 800ae08:	e8df f001 	tbb	[pc, r1]
 800ae0c:	4e08034e 	.word	0x4e08034e
 800ae10:	6a4e      	.short	0x6a4e
            syslogISRUnknownPriority("USB address assigned.");
 800ae12:	483a      	ldr	r0, [pc, #232]	; (800aefc <usb_event+0xfc>)
}
 800ae14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            syslogISRUnknownPriority("USB address assigned.");
 800ae18:	f7ff bfa0 	b.w	800ad5c <syslogISRUnknownPriority>
            osalSysLockFromISR();
 800ae1c:	f7f9 ff18 	bl	8004c50 <osalSysLockFromISR.lto_priv.0>
            usbInitEndpointI(usbp, USBD1_DATA_REQUEST_EP, &ep1config);
 800ae20:	2101      	movs	r1, #1
 800ae22:	4620      	mov	r0, r4
 800ae24:	4a36      	ldr	r2, [pc, #216]	; (800af00 <usb_event+0x100>)
 800ae26:	f7fc fe85 	bl	8007b34 <usbInitEndpointI>
            usbInitEndpointI(usbp, USBD1_INTERRUPT_REQUEST_EP, &ep2config);
 800ae2a:	2102      	movs	r1, #2
 800ae2c:	4620      	mov	r0, r4
 800ae2e:	4a35      	ldr	r2, [pc, #212]	; (800af04 <usb_event+0x104>)
 800ae30:	f7fc fe80 	bl	8007b34 <usbInitEndpointI>
	__asm volatile( "mrs %0, basepri" : "=r"( ulBasePri ) );
 800ae34:	f3ef 8311 	mrs	r3, BASEPRI
	return (ulBasePri > 0)? pdTRUE : pdFALSE;
 800ae38:	b19b      	cbz	r3, 800ae62 <usb_event+0x62>
  ibqp->bcounter  = 0;
 800ae3a:	2500      	movs	r5, #0
 800ae3c:	4c32      	ldr	r4, [pc, #200]	; (800af08 <usb_event+0x108>)
  ibqp->brdptr    = ibqp->buffers;
 800ae3e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  ibqp->top       = NULL;
 800ae40:	e9c4 5510 	strd	r5, r5, [r4, #64]	; 0x40
  ibqp->bwrptr    = ibqp->buffers;
 800ae44:	e9c4 330a 	strd	r3, r3, [r4, #40]	; 0x28
  ibqp->bcounter  = 0;
 800ae48:	6265      	str	r5, [r4, #36]	; 0x24
  osalThreadDequeueAllI(&ibqp->waiting, MSG_RESET);
 800ae4a:	f104 0018 	add.w	r0, r4, #24
 800ae4e:	f7fc f82f 	bl	8006eb0 <osalThreadDequeueAllI.constprop.0>
  bqResumeX(&sdup->ibqueue);
 800ae52:	f884 5020 	strb.w	r5, [r4, #32]
	__asm volatile( "mrs %0, basepri" : "=r"( ulBasePri ) );
 800ae56:	f3ef 8311 	mrs	r3, BASEPRI
	return (ulBasePri > 0)? pdTRUE : pdFALSE;
 800ae5a:	b92b      	cbnz	r3, 800ae68 <usb_event+0x68>
  osalDbgCheckClassI();
 800ae5c:	f7f9 fc72 	bl	8004744 <vTaskEndScheduler>
 800ae60:	e7fe      	b.n	800ae60 <usb_event+0x60>
  osalDbgCheckClassI();
 800ae62:	f7f9 fc6f 	bl	8004744 <vTaskEndScheduler>
 800ae66:	e7fe      	b.n	800ae66 <usb_event+0x66>
  obqp->bcounter  = bqSizeX(obqp);
 800ae68:	6f23      	ldr	r3, [r4, #112]	; 0x70
  osalThreadDequeueAllI(&obqp->waiting, MSG_RESET);
 800ae6a:	f104 0050 	add.w	r0, r4, #80	; 0x50
  obqp->bcounter  = bqSizeX(obqp);
 800ae6e:	65e3      	str	r3, [r4, #92]	; 0x5c
  obqp->brdptr    = obqp->buffers;
 800ae70:	6f63      	ldr	r3, [r4, #116]	; 0x74
  obqp->top       = NULL;
 800ae72:	e9c4 551e 	strd	r5, r5, [r4, #120]	; 0x78
  obqp->bwrptr    = obqp->buffers;
 800ae76:	e9c4 3318 	strd	r3, r3, [r4, #96]	; 0x60
  osalThreadDequeueAllI(&obqp->waiting, MSG_RESET);
 800ae7a:	f7fc f819 	bl	8006eb0 <osalThreadDequeueAllI.constprop.0>
  chnAddFlagsI(sdup, CHN_CONNECTED);
 800ae7e:	1d20      	adds	r0, r4, #4
 800ae80:	2101      	movs	r1, #1
  bqResumeX(&sdup->obqueue);
 800ae82:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
  chnAddFlagsI(sdup, CHN_CONNECTED);
 800ae86:	f7fc f827 	bl	8006ed8 <osalEventBroadcastFlagsI>
  (void) sdu_start_receive(sdup);
 800ae8a:	4620      	mov	r0, r4
        if(!usbConnectState) {
 800ae8c:	4c1f      	ldr	r4, [pc, #124]	; (800af0c <usb_event+0x10c>)
 800ae8e:	f7fc fcb9 	bl	8007804 <sdu_start_receive.isra.0>
 800ae92:	7823      	ldrb	r3, [r4, #0]
 800ae94:	b913      	cbnz	r3, 800ae9c <usb_event+0x9c>
            syslogISRUnknownPriority("USB up.");
 800ae96:	481e      	ldr	r0, [pc, #120]	; (800af10 <usb_event+0x110>)
 800ae98:	f7ff ff60 	bl	800ad5c <syslogISRUnknownPriority>
    usbConnectState = up;
 800ae9c:	2301      	movs	r3, #1
 800ae9e:	7023      	strb	r3, [r4, #0]
}
 800aea0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            osalSysUnlockFromISR();
 800aea4:	f7f9 bee8 	b.w	8004c78 <osalSysUnlockFromISR.lto_priv.0>
  bqSuspendI(&sdup->ibqueue);
 800aea8:	2501      	movs	r5, #1
  chnAddFlagsI(sdup, CHN_DISCONNECTED);
 800aeaa:	4c17      	ldr	r4, [pc, #92]	; (800af08 <usb_event+0x108>)
            osalSysLockFromISR();
 800aeac:	f7f9 fed0 	bl	8004c50 <osalSysLockFromISR.lto_priv.0>
 800aeb0:	2102      	movs	r1, #2
 800aeb2:	1d20      	adds	r0, r4, #4
 800aeb4:	f7fc f810 	bl	8006ed8 <osalEventBroadcastFlagsI>
  bqSuspendI(&sdup->ibqueue);
 800aeb8:	f104 0018 	add.w	r0, r4, #24
 800aebc:	f884 5020 	strb.w	r5, [r4, #32]
 800aec0:	f7fb fff6 	bl	8006eb0 <osalThreadDequeueAllI.constprop.0>
  bqSuspendI(&sdup->obqueue);
 800aec4:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
 800aec8:	f104 0050 	add.w	r0, r4, #80	; 0x50
        if(usbConnectState) {
 800aecc:	4c0f      	ldr	r4, [pc, #60]	; (800af0c <usb_event+0x10c>)
 800aece:	f7fb ffef 	bl	8006eb0 <osalThreadDequeueAllI.constprop.0>
 800aed2:	7823      	ldrb	r3, [r4, #0]
 800aed4:	b113      	cbz	r3, 800aedc <usb_event+0xdc>
            syslogISRUnknownPriority("USB down.");
 800aed6:	480f      	ldr	r0, [pc, #60]	; (800af14 <usb_event+0x114>)
 800aed8:	f7ff ff40 	bl	800ad5c <syslogISRUnknownPriority>
    usbConnectState = up;
 800aedc:	2300      	movs	r3, #0
 800aede:	e7de      	b.n	800ae9e <usb_event+0x9e>
  chnAddFlagsI(sdup, CHN_CONNECTED);
 800aee0:	4c09      	ldr	r4, [pc, #36]	; (800af08 <usb_event+0x108>)
            osalSysLockFromISR();
 800aee2:	f7f9 feb5 	bl	8004c50 <osalSysLockFromISR.lto_priv.0>
 800aee6:	2101      	movs	r1, #1
 800aee8:	1d20      	adds	r0, r4, #4
 800aeea:	f7fb fff5 	bl	8006ed8 <osalEventBroadcastFlagsI>
  bqResumeX(&sdup->ibqueue);
 800aeee:	2300      	movs	r3, #0
 800aef0:	f884 3020 	strb.w	r3, [r4, #32]
  bqResumeX(&sdup->obqueue);
 800aef4:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 800aef8:	e7d2      	b.n	800aea0 <usb_event+0xa0>
}
 800aefa:	bd38      	pop	{r3, r4, r5, pc}
 800aefc:	0800c726 	.word	0x0800c726
 800af00:	0800c9e0 	.word	0x0800c9e0
 800af04:	0800ca04 	.word	0x0800ca04
 800af08:	20000a44 	.word	0x20000a44
 800af0c:	20001354 	.word	0x20001354
 800af10:	0800c73c 	.word	0x0800c73c
 800af14:	0800c744 	.word	0x0800c744

0800af18 <prvIdleTask>:
 800af18:	b580      	push	{r7, lr}
 800af1a:	4c97      	ldr	r4, [pc, #604]	; (800b178 <prvIdleTask+0x260>)
 800af1c:	4d97      	ldr	r5, [pc, #604]	; (800b17c <prvIdleTask+0x264>)
 800af1e:	4e98      	ldr	r6, [pc, #608]	; (800b180 <prvIdleTask+0x268>)
 800af20:	6823      	ldr	r3, [r4, #0]
 800af22:	2b00      	cmp	r3, #0
 800af24:	d178      	bne.n	800b018 <prvIdleTask+0x100>
 800af26:	4b97      	ldr	r3, [pc, #604]	; (800b184 <prvIdleTask+0x26c>)
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	2b01      	cmp	r3, #1
 800af2c:	d91c      	bls.n	800af68 <prvIdleTask+0x50>
 800af2e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800af32:	4a95      	ldr	r2, [pc, #596]	; (800b188 <prvIdleTask+0x270>)
 800af34:	f8d3 1d20 	ldr.w	r1, [r3, #3360]	; 0xd20
 800af38:	6011      	str	r1, [r2, #0]
 800af3a:	4a94      	ldr	r2, [pc, #592]	; (800b18c <prvIdleTask+0x274>)
 800af3c:	6812      	ldr	r2, [r2, #0]
 800af3e:	b14a      	cbz	r2, 800af54 <prvIdleTask+0x3c>
 800af40:	f8d3 2d20 	ldr.w	r2, [r3, #3360]	; 0xd20
 800af44:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
 800af48:	f8c3 2d20 	str.w	r2, [r3, #3360]	; 0xd20
 800af4c:	f8d3 2d20 	ldr.w	r2, [r3, #3360]	; 0xd20
 800af50:	f8c3 2d20 	str.w	r2, [r3, #3360]	; 0xd20
 800af54:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800af58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af5c:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800af60:	f3bf 8f4f 	dsb	sy
 800af64:	f3bf 8f6f 	isb	sy
    /*
     * Some events may happen from IRQs with unknown priority (possibly above kernel),
     * so they are written to a buffer (one entry only) and added to the syslog in
     * the IDLE thread.
     */
    if(__atomic_load_n(&syslogISRHasSomething, __ATOMIC_ACQUIRE)) {
 800af68:	f8df 8224 	ldr.w	r8, [pc, #548]	; 800b190 <prvIdleTask+0x278>
 800af6c:	f898 3000 	ldrb.w	r3, [r8]
 800af70:	f3bf 8f5b 	dmb	ish
 800af74:	b373      	cbz	r3, 800afd4 <prvIdleTask+0xbc>
        if(xSemaphoreTake(syslogSemaphore, 0)) {
 800af76:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800b194 <prvIdleTask+0x27c>
 800af7a:	2100      	movs	r1, #0
 800af7c:	f8d9 0000 	ldr.w	r0, [r9]
 800af80:	f7fa fe30 	bl	8005be4 <xQueueSemaphoreTake>
 800af84:	b330      	cbz	r0, 800afd4 <prvIdleTask+0xbc>
    queue->pktLen = 0;
 800af86:	2600      	movs	r6, #0
    queue->lenHeaderStart = queue->writePtr;
 800af88:	4f83      	ldr	r7, [pc, #524]	; (800b198 <prvIdleTask+0x280>)
    packetQueueWriteByte(queue, 0x00);
 800af8a:	2000      	movs	r0, #0
    queue->lenHeaderStart = queue->writePtr;
 800af8c:	693b      	ldr	r3, [r7, #16]
 800af8e:	61fb      	str	r3, [r7, #28]
    packetQueueWriteByte(queue, 0x00);
 800af90:	f7fa fff2 	bl	8005f78 <packetQueueWriteByte.constprop.0>
    packetQueueWriteByte(queue, 0x00);
 800af94:	2000      	movs	r0, #0
 800af96:	f7fa ffef 	bl	8005f78 <packetQueueWriteByte.constprop.0>
    queue->pktLen = 0;
 800af9a:	61be      	str	r6, [r7, #24]
 800af9c:	f7fa f9b0 	bl	8005300 <vPortValidateInterruptPriority>
 800afa0:	4b7e      	ldr	r3, [pc, #504]	; (800b19c <prvIdleTask+0x284>)
            packetQueueStartWritePacket(&syslogQueue);
            chprintf((BaseSequentialStream*)&syslogStream, "[%-11u] {ISR} ", osalOsGetSystemTimeX());
            syslogISRBuffer[sizeof(syslogISRBuffer)-1] = 0;
 800afa2:	4f7f      	ldr	r7, [pc, #508]	; (800b1a0 <prvIdleTask+0x288>)
 800afa4:	681a      	ldr	r2, [r3, #0]
            chprintf((BaseSequentialStream*)&syslogStream, "[%-11u] {ISR} ", osalOsGetSystemTimeX());
 800afa6:	497f      	ldr	r1, [pc, #508]	; (800b1a4 <prvIdleTask+0x28c>)
 800afa8:	487f      	ldr	r0, [pc, #508]	; (800b1a8 <prvIdleTask+0x290>)
 800afaa:	f7fd fbd2 	bl	8008752 <chprintf>
            packetQueuePutBytes(&syslogQueue, (uint8_t*)syslogISRBuffer, strlen(syslogISRBuffer));
 800afae:	4638      	mov	r0, r7
            syslogISRBuffer[sizeof(syslogISRBuffer)-1] = 0;
 800afb0:	f887 603f 	strb.w	r6, [r7, #63]	; 0x3f
            packetQueuePutBytes(&syslogQueue, (uint8_t*)syslogISRBuffer, strlen(syslogISRBuffer));
 800afb4:	f000 fce8 	bl	800b988 <strlen>
 800afb8:	b281      	uxth	r1, r0
 800afba:	4638      	mov	r0, r7
 800afbc:	f7fb f80a 	bl	8005fd4 <packetQueuePutBytes.constprop.0>
            packetQueueEndWritePacket(&syslogQueue);
 800afc0:	f7fb f82e 	bl	8006020 <packetQueueEndWritePacket.constprop.0>
            xSemaphoreGive(syslogSemaphore);
 800afc4:	f8d9 0000 	ldr.w	r0, [r9]
 800afc8:	f7fd fa5e 	bl	8008488 <xQueueGenericSend.constprop.0>

            __atomic_clear(&syslogISRHasSomething, __ATOMIC_RELEASE);
 800afcc:	f3bf 8f5b 	dmb	ish
 800afd0:	f888 6000 	strb.w	r6, [r8]

void vApplicationIdleHook(void)
{
    syslogIdleHook();

    if(usbConnectState && !usbShellIsUp) {
 800afd4:	4b75      	ldr	r3, [pc, #468]	; (800b1ac <prvIdleTask+0x294>)
 800afd6:	781b      	ldrb	r3, [r3, #0]
 800afd8:	b18b      	cbz	r3, 800affe <prvIdleTask+0xe6>
 800afda:	4e75      	ldr	r6, [pc, #468]	; (800b1b0 <prvIdleTask+0x298>)
 800afdc:	7833      	ldrb	r3, [r6, #0]
 800afde:	f003 01ff 	and.w	r1, r3, #255	; 0xff
 800afe2:	b963      	cbnz	r3, 800affe <prvIdleTask+0xe6>
        usbShellIsUp = true;
 800afe4:	2301      	movs	r3, #1
        /*
         * Setting the pin from the idle hook requires a non-blocking
         * GPIO driver. In practice this means almost always a native
         * CPU pin.
         */
        gpioSetPin(GPIO_LED_USB, false);
 800afe6:	f240 1003 	movw	r0, #259	; 0x103
        usbShellIsUp = true;
 800afea:	7033      	strb	r3, [r6, #0]
        gpioSetPin(GPIO_LED_USB, false);
 800afec:	f7fc faa0 	bl	8007530 <gpioSetPin.isra.0>

        /* Try to start the shell */
        if(!shellStart((BaseSequentialStream*)&SDU1, 128, "ShellUSB", usbShellTerminated, NULL)) {
 800aff0:	4a70      	ldr	r2, [pc, #448]	; (800b1b4 <prvIdleTask+0x29c>)
 800aff2:	4971      	ldr	r1, [pc, #452]	; (800b1b8 <prvIdleTask+0x2a0>)
 800aff4:	4871      	ldr	r0, [pc, #452]	; (800b1bc <prvIdleTask+0x2a4>)
 800aff6:	f7fc fea5 	bl	8007d44 <shellStart.constprop.0>
 800affa:	b900      	cbnz	r0, 800affe <prvIdleTask+0xe6>
            /* We are very low on memory. This will keep trying, but priority is IDLE */
            usbShellIsUp = false;
 800affc:	7030      	strb	r0, [r6, #0]
 800affe:	f7f9 fb33 	bl	8004668 <prvGetExpectedIdleTime>
 800b002:	2801      	cmp	r0, #1
 800b004:	d98b      	bls.n	800af1e <prvIdleTask+0x6>
 800b006:	4e6e      	ldr	r6, [pc, #440]	; (800b1c0 <prvIdleTask+0x2a8>)
 800b008:	4964      	ldr	r1, [pc, #400]	; (800b19c <prvIdleTask+0x284>)
 800b00a:	f7f9 fb25 	bl	8004658 <vTaskSuspendAll>
 800b00e:	6832      	ldr	r2, [r6, #0]
 800b010:	680b      	ldr	r3, [r1, #0]
 800b012:	429a      	cmp	r2, r3
 800b014:	d213      	bcs.n	800b03e <prvIdleTask+0x126>
 800b016:	e7fe      	b.n	800b016 <prvIdleTask+0xfe>
 800b018:	f7f9 fb84 	bl	8004724 <vPortEnterCritical>
 800b01c:	68eb      	ldr	r3, [r5, #12]
 800b01e:	68df      	ldr	r7, [r3, #12]
 800b020:	1d38      	adds	r0, r7, #4
 800b022:	f7fa fa6a 	bl	80054fa <uxListRemove>
 800b026:	6833      	ldr	r3, [r6, #0]
 800b028:	4638      	mov	r0, r7
 800b02a:	3b01      	subs	r3, #1
 800b02c:	6033      	str	r3, [r6, #0]
 800b02e:	6823      	ldr	r3, [r4, #0]
 800b030:	3b01      	subs	r3, #1
 800b032:	6023      	str	r3, [r4, #0]
 800b034:	f7f9 fd8e 	bl	8004b54 <vPortExitCritical>
 800b038:	f7fa fc86 	bl	8005948 <prvDeleteTCB>
 800b03c:	e770      	b.n	800af20 <prvIdleTask+0x8>
 800b03e:	f7f9 fb13 	bl	8004668 <prvGetExpectedIdleTime>
 800b042:	2801      	cmp	r0, #1
 800b044:	d97a      	bls.n	800b13c <prvIdleTask+0x224>
 800b046:	4b5f      	ldr	r3, [pc, #380]	; (800b1c4 <prvIdleTask+0x2ac>)
 800b048:	4f5f      	ldr	r7, [pc, #380]	; (800b1c8 <prvIdleTask+0x2b0>)
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	f8df 817c 	ldr.w	r8, [pc, #380]	; 800b1cc <prvIdleTask+0x2b4>
 800b050:	4298      	cmp	r0, r3
 800b052:	bf28      	it	cs
 800b054:	4618      	movcs	r0, r3
 800b056:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800b05a:	691a      	ldr	r2, [r3, #16]
 800b05c:	f022 0201 	bic.w	r2, r2, #1
 800b060:	611a      	str	r2, [r3, #16]
 800b062:	699b      	ldr	r3, [r3, #24]
 800b064:	f8d7 c000 	ldr.w	ip, [r7]
 800b068:	1e42      	subs	r2, r0, #1
 800b06a:	fb0c 3902 	mla	r9, ip, r2, r3
 800b06e:	f8d8 3000 	ldr.w	r3, [r8]
 800b072:	4599      	cmp	r9, r3
 800b074:	bf88      	it	hi
 800b076:	eba9 0903 	subhi.w	r9, r9, r3
 800b07a:	b672      	cpsid	i
 800b07c:	f3bf 8f4f 	dsb	sy
 800b080:	f3bf 8f6f 	isb	sy
 800b084:	4b52      	ldr	r3, [pc, #328]	; (800b1d0 <prvIdleTask+0x2b8>)
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d14b      	bne.n	800b124 <prvIdleTask+0x20c>
 800b08c:	4b51      	ldr	r3, [pc, #324]	; (800b1d4 <prvIdleTask+0x2bc>)
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	2b00      	cmp	r3, #0
 800b092:	d147      	bne.n	800b124 <prvIdleTask+0x20c>
 800b094:	f8df c140 	ldr.w	ip, [pc, #320]	; 800b1d8 <prvIdleTask+0x2c0>
 800b098:	f8dc c000 	ldr.w	ip, [ip]
 800b09c:	f8df c0e0 	ldr.w	ip, [pc, #224]	; 800b180 <prvIdleTask+0x268>
 800b0a0:	f8dc c000 	ldr.w	ip, [ip]
 800b0a4:	f04f 2ce0 	mov.w	ip, #3758153728	; 0xe000e000
 800b0a8:	f8cc 9014 	str.w	r9, [ip, #20]
 800b0ac:	f8cc 3018 	str.w	r3, [ip, #24]
 800b0b0:	f8dc 3010 	ldr.w	r3, [ip, #16]
 800b0b4:	f043 0301 	orr.w	r3, r3, #1
 800b0b8:	f8cc 3010 	str.w	r3, [ip, #16]
 800b0bc:	2800      	cmp	r0, #0
 800b0be:	d140      	bne.n	800b142 <prvIdleTask+0x22a>
 800b0c0:	b662      	cpsie	i
 800b0c2:	f3bf 8f4f 	dsb	sy
 800b0c6:	f3bf 8f6f 	isb	sy
 800b0ca:	b672      	cpsid	i
 800b0cc:	f3bf 8f4f 	dsb	sy
 800b0d0:	f3bf 8f6f 	isb	sy
 800b0d4:	f04f 2ee0 	mov.w	lr, #3758153728	; 0xe000e000
 800b0d8:	2302      	movs	r3, #2
 800b0da:	f8ce 3010 	str.w	r3, [lr, #16]
 800b0de:	f8de 3010 	ldr.w	r3, [lr, #16]
 800b0e2:	03db      	lsls	r3, r3, #15
 800b0e4:	d533      	bpl.n	800b14e <prvIdleTask+0x236>
 800b0e6:	6838      	ldr	r0, [r7, #0]
 800b0e8:	f8de 3018 	ldr.w	r3, [lr, #24]
 800b0ec:	f8d8 c000 	ldr.w	ip, [r8]
 800b0f0:	4403      	add	r3, r0
 800b0f2:	3b01      	subs	r3, #1
 800b0f4:	eba3 0309 	sub.w	r3, r3, r9
 800b0f8:	4563      	cmp	r3, ip
 800b0fa:	d301      	bcc.n	800b100 <prvIdleTask+0x1e8>
 800b0fc:	4298      	cmp	r0, r3
 800b0fe:	d200      	bcs.n	800b102 <prvIdleTask+0x1ea>
 800b100:	1e43      	subs	r3, r0, #1
 800b102:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
 800b106:	6143      	str	r3, [r0, #20]
 800b108:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800b10c:	2000      	movs	r0, #0
 800b10e:	6198      	str	r0, [r3, #24]
 800b110:	6918      	ldr	r0, [r3, #16]
 800b112:	f040 0001 	orr.w	r0, r0, #1
 800b116:	6118      	str	r0, [r3, #16]
 800b118:	6808      	ldr	r0, [r1, #0]
 800b11a:	6836      	ldr	r6, [r6, #0]
 800b11c:	4410      	add	r0, r2
 800b11e:	42b0      	cmp	r0, r6
 800b120:	d925      	bls.n	800b16e <prvIdleTask+0x256>
 800b122:	e7fe      	b.n	800b122 <prvIdleTask+0x20a>
 800b124:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800b128:	699a      	ldr	r2, [r3, #24]
 800b12a:	615a      	str	r2, [r3, #20]
 800b12c:	691a      	ldr	r2, [r3, #16]
 800b12e:	f042 0201 	orr.w	r2, r2, #1
 800b132:	611a      	str	r2, [r3, #16]
 800b134:	683a      	ldr	r2, [r7, #0]
 800b136:	3a01      	subs	r2, #1
 800b138:	615a      	str	r2, [r3, #20]
 800b13a:	b662      	cpsie	i
 800b13c:	f7fa fada 	bl	80056f4 <xTaskResumeAll>
 800b140:	e6ed      	b.n	800af1e <prvIdleTask+0x6>
 800b142:	f3bf 8f4f 	dsb	sy
 800b146:	bf30      	wfi
 800b148:	f3bf 8f6f 	isb	sy
 800b14c:	e7b8      	b.n	800b0c0 <prvIdleTask+0x1a8>
 800b14e:	683b      	ldr	r3, [r7, #0]
 800b150:	f8de c018 	ldr.w	ip, [lr, #24]
 800b154:	4358      	muls	r0, r3
 800b156:	eba0 020c 	sub.w	r2, r0, ip
 800b15a:	fbb2 f2f3 	udiv	r2, r2, r3
 800b15e:	fb02 3303 	mla	r3, r2, r3, r3
 800b162:	ebac 0000 	sub.w	r0, ip, r0
 800b166:	4403      	add	r3, r0
 800b168:	f8ce 3014 	str.w	r3, [lr, #20]
 800b16c:	e7cc      	b.n	800b108 <prvIdleTask+0x1f0>
 800b16e:	6808      	ldr	r0, [r1, #0]
 800b170:	4402      	add	r2, r0
 800b172:	600a      	str	r2, [r1, #0]
 800b174:	e7de      	b.n	800b134 <prvIdleTask+0x21c>
 800b176:	bf00      	nop
 800b178:	20001360 	.word	0x20001360
 800b17c:	20001634 	.word	0x20001634
 800b180:	2000135c 	.word	0x2000135c
 800b184:	200011b8 	.word	0x200011b8
 800b188:	2000134c 	.word	0x2000134c
 800b18c:	20001358 	.word	0x20001358
 800b190:	2000130c 	.word	0x2000130c
 800b194:	20001334 	.word	0x20001334
 800b198:	20001310 	.word	0x20001310
 800b19c:	20001648 	.word	0x20001648
 800b1a0:	200012cc 	.word	0x200012cc
 800b1a4:	0800c74e 	.word	0x0800c74e
 800b1a8:	0800cbc8 	.word	0x0800cbc8
 800b1ac:	20001354 	.word	0x20001354
 800b1b0:	20001355 	.word	0x20001355
 800b1b4:	08007725 	.word	0x08007725
 800b1b8:	0800c75d 	.word	0x0800c75d
 800b1bc:	20000a44 	.word	0x20000a44
 800b1c0:	200015f8 	.word	0x200015f8
 800b1c4:	200015f0 	.word	0x200015f0
 800b1c8:	20001350 	.word	0x20001350
 800b1cc:	20001348 	.word	0x20001348
 800b1d0:	20001600 	.word	0x20001600
 800b1d4:	2000164c 	.word	0x2000164c
 800b1d8:	20001620 	.word	0x20001620

0800b1dc <__core_init>:

#if CORTEX_MODEL == 7
  SCB_EnableICache();
  SCB_EnableDCache();
#endif
}
 800b1dc:	4770      	bx	lr

0800b1de <__late_init>:
 800b1de:	4770      	bx	lr

0800b1e0 <__default_exit>:
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __default_exit(void) {
/*lint -restore*/

  while (true) {
 800b1e0:	e7fe      	b.n	800b1e0 <__default_exit>
	...

0800b1e4 <__init_ram_areas>:
}

/**
 * @brief   Performs the initialization of the various RAM areas.
 */
void __init_ram_areas(void) {
 800b1e4:	b570      	push	{r4, r5, r6, lr}
 800b1e6:	2508      	movs	r5, #8
#if CRT1_AREAS_NUMBER > 0
  const ram_init_area_t *rap = ram_areas;
 800b1e8:	4c13      	ldr	r4, [pc, #76]	; (800b238 <__init_ram_areas+0x54>)
  do {
    uint32_t *tp = rap->init_text_area;
    uint32_t *p = rap->init_area;

    /* Copying initialization data.*/
    while (p < rap->clear_area) {
 800b1ea:	e9d4 0201 	ldrd	r0, r2, [r4, #4]
    uint32_t *p = rap->init_area;
 800b1ee:	4601      	mov	r1, r0
 800b1f0:	6823      	ldr	r3, [r4, #0]
 800b1f2:	3b04      	subs	r3, #4
    while (p < rap->clear_area) {
 800b1f4:	428a      	cmp	r2, r1
 800b1f6:	d819      	bhi.n	800b22c <__init_ram_areas+0x48>
 800b1f8:	1cd3      	adds	r3, r2, #3
 800b1fa:	1a1b      	subs	r3, r3, r0
 800b1fc:	1ec1      	subs	r1, r0, #3
 800b1fe:	f023 0303 	bic.w	r3, r3, #3
 800b202:	428a      	cmp	r2, r1
 800b204:	bf38      	it	cc
 800b206:	2300      	movcc	r3, #0
 800b208:	4418      	add	r0, r3
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
      *p = 0;
 800b20a:	68e3      	ldr	r3, [r4, #12]
 800b20c:	1ec1      	subs	r1, r0, #3
 800b20e:	1cda      	adds	r2, r3, #3
 800b210:	1a12      	subs	r2, r2, r0
 800b212:	f022 0203 	bic.w	r2, r2, #3
 800b216:	4299      	cmp	r1, r3
 800b218:	bf88      	it	hi
 800b21a:	2200      	movhi	r2, #0
 800b21c:	2100      	movs	r1, #0
 800b21e:	f000 faf9 	bl	800b814 <memset>
      p++;
    }
    rap++;
  }
  while (rap < &ram_areas[CRT1_AREAS_NUMBER]);
 800b222:	3d01      	subs	r5, #1
    rap++;
 800b224:	f104 0410 	add.w	r4, r4, #16
  while (rap < &ram_areas[CRT1_AREAS_NUMBER]);
 800b228:	d1df      	bne.n	800b1ea <__init_ram_areas+0x6>
#endif
}
 800b22a:	bd70      	pop	{r4, r5, r6, pc}
      *p = *tp;
 800b22c:	f853 6f04 	ldr.w	r6, [r3, #4]!
 800b230:	f841 6b04 	str.w	r6, [r1], #4
      tp++;
 800b234:	e7de      	b.n	800b1f4 <__init_ram_areas+0x10>
 800b236:	bf00      	nop
 800b238:	0800caf4 	.word	0x0800caf4

0800b23c <__early_init>:
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 800b23c:	4b1c      	ldr	r3, [pc, #112]	; (800b2b0 <__early_init+0x74>)
 800b23e:	681a      	ldr	r2, [r3, #0]
 800b240:	f042 0201 	orr.w	r2, r2, #1
 800b244:	601a      	str	r2, [r3, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
 800b246:	681a      	ldr	r2, [r3, #0]
 800b248:	0792      	lsls	r2, r2, #30
 800b24a:	d5fc      	bpl.n	800b246 <__early_init+0xa>
    ;                                       /* Wait until HSI is stable.    */
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 800b24c:	681a      	ldr	r2, [r3, #0]
 800b24e:	f002 02f9 	and.w	r2, r2, #249	; 0xf9
 800b252:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 800b254:	2200      	movs	r2, #0
 800b256:	605a      	str	r2, [r3, #4]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 800b258:	685a      	ldr	r2, [r3, #4]
 800b25a:	f012 0f0c 	tst.w	r2, #12
 800b25e:	d1fb      	bne.n	800b258 <__early_init+0x1c>
#if defined(STM32_HSE_BYPASS)
  /* HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEON | RCC_CR_HSEBYP;
#endif
  /* HSE activation.*/
  RCC->CR |= RCC_CR_HSEON;
 800b260:	681a      	ldr	r2, [r3, #0]
 800b262:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800b266:	601a      	str	r2, [r3, #0]
  while (!(RCC->CR & RCC_CR_HSERDY))
 800b268:	681a      	ldr	r2, [r3, #0]
 800b26a:	0390      	lsls	r0, r2, #14
 800b26c:	d5fc      	bpl.n	800b268 <__early_init+0x2c>
    ;                                       /* Waits until HSE is stable.   */
#endif

#if STM32_LSI_ENABLED
  /* LSI activation.*/
  RCC->CSR |= RCC_CSR_LSION;
 800b26e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b270:	f042 0201 	orr.w	r2, r2, #1
 800b274:	625a      	str	r2, [r3, #36]	; 0x24
  while ((RCC->CSR & RCC_CSR_LSIRDY) == 0)
 800b276:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b278:	0791      	lsls	r1, r2, #30
 800b27a:	d5fc      	bpl.n	800b276 <__early_init+0x3a>
    ;                                       /* Waits until LSI is stable.   */
#endif

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->CFGR |= STM32_PLLMUL | STM32_PLLXTPRE | STM32_PLLSRC;
 800b27c:	685a      	ldr	r2, [r3, #4]
 800b27e:	f442 12f8 	orr.w	r2, r2, #2031616	; 0x1f0000
 800b282:	605a      	str	r2, [r3, #4]
  RCC->CR   |= RCC_CR_PLLON;
 800b284:	681a      	ldr	r2, [r3, #0]
 800b286:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800b28a:	601a      	str	r2, [r3, #0]
  while (!(RCC->CR & RCC_CR_PLLRDY))
 800b28c:	681a      	ldr	r2, [r3, #0]
 800b28e:	0192      	lsls	r2, r2, #6
 800b290:	d5fc      	bpl.n	800b28c <__early_init+0x50>
              STM32_PLLSRC | STM32_ADCPRE | STM32_PPRE2  | STM32_PPRE1    |
              STM32_HPRE;
#endif

  /* Flash setup and final clock selection.   */
  FLASH->ACR = STM32_FLASHBITS;
 800b292:	2112      	movs	r1, #18
  RCC->CFGR = STM32_MCOSEL | STM32_USBPRE | STM32_PLLMUL | STM32_PLLXTPRE |
 800b294:	4a07      	ldr	r2, [pc, #28]	; (800b2b4 <__early_init+0x78>)
 800b296:	605a      	str	r2, [r3, #4]
  FLASH->ACR = STM32_FLASHBITS;
 800b298:	4a07      	ldr	r2, [pc, #28]	; (800b2b8 <__early_init+0x7c>)
 800b29a:	6011      	str	r1, [r2, #0]

  /* Switching to the configured clock source if it is different from HSI.*/
#if (STM32_SW != STM32_SW_HSI)
  /* Switches clock source.*/
  RCC->CFGR |= STM32_SW;
 800b29c:	685a      	ldr	r2, [r3, #4]
 800b29e:	f042 0202 	orr.w	r2, r2, #2
 800b2a2:	605a      	str	r2, [r3, #4]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 800b2a4:	685a      	ldr	r2, [r3, #4]
 800b2a6:	f002 020c 	and.w	r2, r2, #12
 800b2aa:	2a08      	cmp	r2, #8
 800b2ac:	d1fa      	bne.n	800b2a4 <__early_init+0x68>
 * any other initialization.
 */
void __early_init(void) {

  stm32_clock_init();
}
 800b2ae:	4770      	bx	lr
 800b2b0:	40021000 	.word	0x40021000
 800b2b4:	001f6400 	.word	0x001f6400
 800b2b8:	40022000 	.word	0x40022000

0800b2bc <main>:
  rccResetAPB1(0xFFFFFFFF);
 800b2bc:	4bb5      	ldr	r3, [pc, #724]	; (800b594 <main+0x2d8>)
 800b2be:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800b2c2:	691a      	ldr	r2, [r3, #16]
 800b2c4:	2200      	movs	r2, #0
    _stm32_dma_streams[i].channel->CCR = 0U;
 800b2c6:	4614      	mov	r4, r2
/*
 * This main function starts FreeRTOS, we also create one thread that
 * will eventually run main_.
 */
int main(void)
{
 800b2c8:	b580      	push	{r7, lr}
 800b2ca:	6119      	str	r1, [r3, #16]
 800b2cc:	611a      	str	r2, [r3, #16]
  rccResetAPB2(0xFFFFFFFF);
 800b2ce:	68d8      	ldr	r0, [r3, #12]
 800b2d0:	60d9      	str	r1, [r3, #12]
 800b2d2:	60da      	str	r2, [r3, #12]
  rccEnablePWRInterface(FALSE);
 800b2d4:	69d9      	ldr	r1, [r3, #28]
  PWR->CR |= PWR_CR_DBP;
 800b2d6:	48b0      	ldr	r0, [pc, #704]	; (800b598 <main+0x2dc>)
  rccEnablePWRInterface(FALSE);
 800b2d8:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 800b2dc:	61d9      	str	r1, [r3, #28]
  rccEnableBKPInterface(FALSE);
 800b2de:	69d9      	ldr	r1, [r3, #28]
 800b2e0:	b08a      	sub	sp, #40	; 0x28
 800b2e2:	f041 6100 	orr.w	r1, r1, #134217728	; 0x8000000
 800b2e6:	61d9      	str	r1, [r3, #28]
  PWR->CR |= PWR_CR_DBP;
 800b2e8:	6801      	ldr	r1, [r0, #0]
 800b2ea:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800b2ee:	6001      	str	r1, [r0, #0]
  dma_streams_mask = 0U;
 800b2f0:	49aa      	ldr	r1, [pc, #680]	; (800b59c <main+0x2e0>)
    _stm32_dma_isr_redir[i].dma_func = NULL;
 800b2f2:	48ab      	ldr	r0, [pc, #684]	; (800b5a0 <main+0x2e4>)
  dma_streams_mask = 0U;
 800b2f4:	600a      	str	r2, [r1, #0]
  for (i = 0; i < STM32_DMA_STREAMS; i++) {
 800b2f6:	49ab      	ldr	r1, [pc, #684]	; (800b5a4 <main+0x2e8>)
    _stm32_dma_streams[i].channel->CCR = 0U;
 800b2f8:	684d      	ldr	r5, [r1, #4]
  for (i = 0; i < STM32_DMA_STREAMS; i++) {
 800b2fa:	3114      	adds	r1, #20
    _stm32_dma_streams[i].channel->CCR = 0U;
 800b2fc:	602c      	str	r4, [r5, #0]
    _stm32_dma_isr_redir[i].dma_func = NULL;
 800b2fe:	f840 4032 	str.w	r4, [r0, r2, lsl #3]
  for (i = 0; i < STM32_DMA_STREAMS; i++) {
 800b302:	3201      	adds	r2, #1
 800b304:	2a07      	cmp	r2, #7
 800b306:	d1f7      	bne.n	800b2f8 <main+0x3c>
  DMA1->IFCR = 0xFFFFFFFFU;
 800b308:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b30c:	49a6      	ldr	r1, [pc, #664]	; (800b5a8 <main+0x2ec>)
  i2cp->state  = I2C_STOP;
 800b30e:	2601      	movs	r6, #1
 800b310:	604a      	str	r2, [r1, #4]
  rccEnableAPB2(APB2_EN_MASK, FALSE);
 800b312:	6999      	ldr	r1, [r3, #24]
 800b314:	4da5      	ldr	r5, [pc, #660]	; (800b5ac <main+0x2f0>)
 800b316:	f041 017d 	orr.w	r1, r1, #125	; 0x7d
 800b31a:	6199      	str	r1, [r3, #24]
  GPIOA->ODR = config->PAData.odr;
 800b31c:	f46f 1340 	mvn.w	r3, #3145728	; 0x300000
 800b320:	49a3      	ldr	r1, [pc, #652]	; (800b5b0 <main+0x2f4>)
 800b322:	60cb      	str	r3, [r1, #12]
  GPIOA->CRH = config->PAData.crh;
 800b324:	4ba3      	ldr	r3, [pc, #652]	; (800b5b4 <main+0x2f8>)
 800b326:	604b      	str	r3, [r1, #4]
  GPIOA->CRL = config->PAData.crl;
 800b328:	f04f 3388 	mov.w	r3, #2290649224	; 0x88888888
 800b32c:	600b      	str	r3, [r1, #0]
  GPIOB->ODR = config->PBData.odr;
 800b32e:	f8c1 240c 	str.w	r2, [r1, #1036]	; 0x40c
  GPIOB->CRH = config->PBData.crh;
 800b332:	f8c1 3404 	str.w	r3, [r1, #1028]	; 0x404
  GPIOB->CRL = config->PBData.crl;
 800b336:	f8c1 3400 	str.w	r3, [r1, #1024]	; 0x400
  GPIOC->ODR = config->PCData.odr;
 800b33a:	f8c1 280c 	str.w	r2, [r1, #2060]	; 0x80c
  GPIOC->CRH = config->PCData.crh;
 800b33e:	f8c1 3804 	str.w	r3, [r1, #2052]	; 0x804
  GPIOC->CRL = config->PCData.crl;
 800b342:	f8c1 3800 	str.w	r3, [r1, #2048]	; 0x800
  GPIOD->ODR = config->PDData.odr;
 800b346:	f8c1 2c0c 	str.w	r2, [r1, #3084]	; 0xc0c
  GPIOD->CRH = config->PDData.crh;
 800b34a:	f8c1 3c04 	str.w	r3, [r1, #3076]	; 0xc04
  GPIOD->CRL = config->PDData.crl;
 800b34e:	f8c1 3c00 	str.w	r3, [r1, #3072]	; 0xc00
  GPIOB->ODR = config->PBData.odr;
 800b352:	f501 6180 	add.w	r1, r1, #1024	; 0x400
  GPIOE->ODR = config->PEData.odr;
 800b356:	f8c1 2c0c 	str.w	r2, [r1, #3084]	; 0xc0c
  GPIOE->CRH = config->PEData.crh;
 800b35a:	f8c1 3c04 	str.w	r3, [r1, #3076]	; 0xc04
  GPIOE->CRL = config->PEData.crl;
 800b35e:	f8c1 3c00 	str.w	r3, [r1, #3072]	; 0xc00
 800b362:	2350      	movs	r3, #80	; 0x50
 800b364:	9306      	str	r3, [sp, #24]
 800b366:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800b36a:	702e      	strb	r6, [r5, #0]
 800b36c:	4598      	cmp	r8, r3
  i2cp->config = NULL;
 800b36e:	606c      	str	r4, [r5, #4]
 800b370:	d000      	beq.n	800b374 <main+0xb8>
 800b372:	e7fe      	b.n	800b372 <main+0xb6>
 800b374:	f105 0710 	add.w	r7, r5, #16
 800b378:	4638      	mov	r0, r7
 800b37a:	612f      	str	r7, [r5, #16]
 800b37c:	e9c5 6413 	strd	r6, r4, [r5, #76]	; 0x4c
 800b380:	f885 6056 	strb.w	r6, [r5, #86]	; 0x56
 800b384:	f7fd f9bb 	bl	80086fe <xQueueGenericReset.constprop.0.isra.0>
 800b388:	f885 605c 	strb.w	r6, [r5, #92]	; 0x5c
 800b38c:	f7fd f9b1 	bl	80086f2 <prvInitialiseMutex.part.0>
  oqp->q_counter = size;
 800b390:	2110      	movs	r1, #16
    mutex->handle = xSemaphoreCreateMutexStatic(&mutex->staticData);
 800b392:	60ef      	str	r7, [r5, #12]
  I2CD1.i2c    = I2C1;
 800b394:	4b88      	ldr	r3, [pc, #544]	; (800b5b8 <main+0x2fc>)
  I2CD1.dmarx  = STM32_DMA_STREAM(STM32_I2C_I2C1_RX_DMA_STREAM);
 800b396:	4f89      	ldr	r7, [pc, #548]	; (800b5bc <main+0x300>)
  I2CD1.i2c    = I2C1;
 800b398:	67ab      	str	r3, [r5, #120]	; 0x78
  I2CD1.dmatx  = STM32_DMA_STREAM(STM32_I2C_I2C1_TX_DMA_STREAM);
 800b39a:	f1a7 0314 	sub.w	r3, r7, #20
 800b39e:	676b      	str	r3, [r5, #116]	; 0x74
  sdp->vmt = &vmt;
 800b3a0:	4a87      	ldr	r2, [pc, #540]	; (800b5c0 <main+0x304>)
 800b3a2:	4b88      	ldr	r3, [pc, #544]	; (800b5c4 <main+0x308>)
  I2CD1.thread = NULL;
 800b3a4:	662c      	str	r4, [r5, #96]	; 0x60
 800b3a6:	601a      	str	r2, [r3, #0]
  iqp->q_buffer  = bp;
 800b3a8:	f103 0260 	add.w	r2, r3, #96	; 0x60
  iqp->q_wrptr   = bp;
 800b3ac:	e9c3 220b 	strd	r2, r2, [r3, #44]	; 0x2c
  iqp->q_buffer  = bp;
 800b3b0:	625a      	str	r2, [r3, #36]	; 0x24
  iqp->q_top     = bp + size;
 800b3b2:	f103 0270 	add.w	r2, r3, #112	; 0x70
  oqp->q_wrptr   = bp;
 800b3b6:	e9c3 2214 	strd	r2, r2, [r3, #80]	; 0x50
  iqp->q_top     = bp + size;
 800b3ba:	629a      	str	r2, [r3, #40]	; 0x28
  oqp->q_buffer  = bp;
 800b3bc:	649a      	str	r2, [r3, #72]	; 0x48
  oqp->q_top     = bp + size;
 800b3be:	f103 0280 	add.w	r2, r3, #128	; 0x80
 800b3c2:	64da      	str	r2, [r3, #76]	; 0x4c
  oqp->q_notify  = onfy;
 800b3c4:	4a80      	ldr	r2, [pc, #512]	; (800b5c8 <main+0x30c>)
  I2CD1.dmarx  = STM32_DMA_STREAM(STM32_I2C_I2C1_RX_DMA_STREAM);
 800b3c6:	672f      	str	r7, [r5, #112]	; 0x70
  oqp->q_link    = link;
 800b3c8:	e9c3 2316 	strd	r2, r3, [r3, #88]	; 0x58
  spip->state = SPI_STOP;
 800b3cc:	4d7f      	ldr	r5, [pc, #508]	; (800b5cc <main+0x310>)
  SD3.usart = USART3;
 800b3ce:	4a80      	ldr	r2, [pc, #512]	; (800b5d0 <main+0x314>)
  iqp->q_counter = 0;
 800b3d0:	621c      	str	r4, [r3, #32]
    event_source->firstRepeater = NULL;
 800b3d2:	e9c3 4401 	strd	r4, r4, [r3, #4]
    thread_queue->tail = NULL;
 800b3d6:	e9c3 4406 	strd	r4, r4, [r3, #24]
  iqp->q_link    = link;
 800b3da:	e9c3 430d 	strd	r4, r3, [r3, #52]	; 0x34
 800b3de:	e9c3 440f 	strd	r4, r4, [r3, #60]	; 0x3c
    event_source->waitThread = NULL;
 800b3e2:	60dc      	str	r4, [r3, #12]
  sdp->state = SD_STOP;
 800b3e4:	751e      	strb	r6, [r3, #20]
  oqp->q_counter = size;
 800b3e6:	6459      	str	r1, [r3, #68]	; 0x44
 800b3e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  spip->thread = NULL;
 800b3ec:	e9c5 4401 	strd	r4, r4, [r5, #4]
  spip->state = SPI_STOP;
 800b3f0:	702e      	strb	r6, [r5, #0]
 800b3f2:	f8cd 801c 	str.w	r8, [sp, #28]
 800b3f6:	9b07      	ldr	r3, [sp, #28]
 800b3f8:	2b50      	cmp	r3, #80	; 0x50
 800b3fa:	d000      	beq.n	800b3fe <main+0x142>
 800b3fc:	e7fe      	b.n	800b3fc <main+0x140>
 800b3fe:	f105 0810 	add.w	r8, r5, #16
 800b402:	4640      	mov	r0, r8
 800b404:	e9c5 6413 	strd	r6, r4, [r5, #76]	; 0x4c
 800b408:	f885 6056 	strb.w	r6, [r5, #86]	; 0x56
 800b40c:	f8c5 8010 	str.w	r8, [r5, #16]
 800b410:	f7fd f975 	bl	80086fe <xQueueGenericReset.constprop.0.isra.0>
 800b414:	f885 605c 	strb.w	r6, [r5, #92]	; 0x5c
 800b418:	f7fd f96b 	bl	80086f2 <prvInitialiseMutex.part.0>
  SPID1.spi       = SPI1;
 800b41c:	4b6d      	ldr	r3, [pc, #436]	; (800b5d4 <main+0x318>)
  SPID1.txdmamode = STM32_DMA_CR_CHSEL(SPI1_TX_DMA_CHANNEL) |
 800b41e:	f241 000a 	movw	r0, #4106	; 0x100a
  SPID1.spi       = SPI1;
 800b422:	662b      	str	r3, [r5, #96]	; 0x60
  SPID1.dmarx     = STM32_DMA_STREAM(STM32_SPI_SPI1_RX_DMA_STREAM);
 800b424:	f1a7 0364 	sub.w	r3, r7, #100	; 0x64
 800b428:	666b      	str	r3, [r5, #100]	; 0x64
  SPID1.txdmamode = STM32_DMA_CR_CHSEL(SPI1_TX_DMA_CHANNEL) |
 800b42a:	f241 0318 	movw	r3, #4120	; 0x1018
  SPID1.dmatx     = STM32_DMA_STREAM(STM32_SPI_SPI1_TX_DMA_STREAM);
 800b42e:	3f50      	subs	r7, #80	; 0x50
  SPID1.txdmamode = STM32_DMA_CR_CHSEL(SPI1_TX_DMA_CHANNEL) |
 800b430:	e9c5 031b 	strd	r0, r3, [r5, #108]	; 0x6c
    mutex->handle = xSemaphoreCreateMutexStatic(&mutex->staticData);
 800b434:	f8c5 800c 	str.w	r8, [r5, #12]
  SPID1.dmatx     = STM32_DMA_STREAM(STM32_SPI_SPI1_TX_DMA_STREAM);
 800b438:	66af      	str	r7, [r5, #104]	; 0x68
  usbp->state        = USB_STOP;
 800b43a:	4d67      	ldr	r5, [pc, #412]	; (800b5d8 <main+0x31c>)
    usbp->in_params[i]  = NULL;
 800b43c:	2238      	movs	r2, #56	; 0x38
  usbp->state        = USB_STOP;
 800b43e:	4628      	mov	r0, r5
    usbp->in_params[i]  = NULL;
 800b440:	2100      	movs	r1, #0
  usbp->state        = USB_STOP;
 800b442:	f800 6b2c 	strb.w	r6, [r0], #44
    usbp->in_params[i]  = NULL;
 800b446:	f000 f9e5 	bl	800b814 <memset>
/*
 * Board-specific initialization code.
 */
void boardInit(void) {
    /* Use SWD only */
    AFIO->MAPR = AFIO_MAPR_SWJ_CFG_JTAGDISABLE;
 800b44a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  WDGD1.state = WDG_STOP;
 800b44e:	4863      	ldr	r0, [pc, #396]	; (800b5dc <main+0x320>)
  WDGD1.wdg   = IWDG;
 800b450:	4b63      	ldr	r3, [pc, #396]	; (800b5e0 <main+0x324>)
  usbp->transmitting = 0;
 800b452:	e9c5 4401 	strd	r4, r4, [r5, #4]
 800b456:	6083      	str	r3, [r0, #8]
 800b458:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
  WDGD1.state = WDG_STOP;
 800b45c:	7006      	strb	r6, [r0, #0]
 800b45e:	605a      	str	r2, [r3, #4]
  osalSysLock();
 800b460:	f7f9 f960 	bl	8004724 <vPortEnterCritical>
  osalDbgAssert((wdgp->state == WDG_STOP) || (wdgp->state == WDG_READY),
 800b464:	7803      	ldrb	r3, [r0, #0]
 800b466:	3b01      	subs	r3, #1
 800b468:	2b01      	cmp	r3, #1
 800b46a:	d902      	bls.n	800b472 <main+0x1b6>
 800b46c:	f7f9 f96a 	bl	8004744 <vTaskEndScheduler>
 800b470:	e7fe      	b.n	800b470 <main+0x1b4>
  wdgp->wdg->KR   = KR_KEY_WRITE;
 800b472:	f245 5255 	movw	r2, #21845	; 0x5555
  wdgp->config = config;
 800b476:	4b5b      	ldr	r3, [pc, #364]	; (800b5e4 <main+0x328>)
 800b478:	6043      	str	r3, [r0, #4]
 800b47a:	6883      	ldr	r3, [r0, #8]
 800b47c:	601a      	str	r2, [r3, #0]
  while (wdgp->wdg->SR != 0)
 800b47e:	68dc      	ldr	r4, [r3, #12]
 800b480:	2c00      	cmp	r4, #0
 800b482:	d1fc      	bne.n	800b47e <main+0x1c2>
  wdgp->wdg->PR   = wdgp->config->pr;
 800b484:	2206      	movs	r2, #6
 800b486:	605a      	str	r2, [r3, #4]
  wdgp->wdg->RLR  = wdgp->config->rlr;
 800b488:	f640 72ff 	movw	r2, #4095	; 0xfff
 800b48c:	609a      	str	r2, [r3, #8]
  wdgp->wdg->KR   = KR_KEY_RELOAD;
 800b48e:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800b492:	601a      	str	r2, [r3, #0]
  wdgp->wdg->KR   = KR_KEY_ENABLE;
 800b494:	f64c 42cc 	movw	r2, #52428	; 0xcccc
  wdgp->state = WDG_READY;
 800b498:	2702      	movs	r7, #2

    /* Before anything else, start watchdog (~25 seconds timeout) */
    wdgStart(&WDGD1, &watchdogConfig);

    TaskHandle_t handle;
    xTaskCreate(runInThreadBody, "Init", 256, main_, 1, &handle);
 800b49a:	2601      	movs	r6, #1
 800b49c:	601a      	str	r2, [r3, #0]
 800b49e:	7007      	strb	r7, [r0, #0]
  osalSysUnlock();
 800b4a0:	f7f9 fb64 	bl	8004b6c <osalSysUnlock.lto_priv.0>
 800b4a4:	ab05      	add	r3, sp, #20
 800b4a6:	9301      	str	r3, [sp, #4]
 800b4a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b4ac:	4b4e      	ldr	r3, [pc, #312]	; (800b5e8 <main+0x32c>)
 800b4ae:	494f      	ldr	r1, [pc, #316]	; (800b5ec <main+0x330>)
 800b4b0:	484f      	ldr	r0, [pc, #316]	; (800b5f0 <main+0x334>)
 800b4b2:	9600      	str	r6, [sp, #0]
 800b4b4:	f7fc fc16 	bl	8007ce4 <xTaskCreate.isra.0>
 800b4b8:	2368      	movs	r3, #104	; 0x68
 800b4ba:	9308      	str	r3, [sp, #32]
 800b4bc:	9b08      	ldr	r3, [sp, #32]
 800b4be:	2b68      	cmp	r3, #104	; 0x68
 800b4c0:	d000      	beq.n	800b4c4 <main+0x208>
 800b4c2:	e7fe      	b.n	800b4c2 <main+0x206>
 800b4c4:	4d4b      	ldr	r5, [pc, #300]	; (800b5f4 <main+0x338>)
 800b4c6:	4b4c      	ldr	r3, [pc, #304]	; (800b5f8 <main+0x33c>)
 800b4c8:	f885 7065 	strb.w	r7, [r5, #101]	; 0x65
 800b4cc:	632b      	str	r3, [r5, #48]	; 0x30
 800b4ce:	ab09      	add	r3, sp, #36	; 0x24
 800b4d0:	2278      	movs	r2, #120	; 0x78
 800b4d2:	e9cd 4300 	strd	r4, r3, [sp]
 800b4d6:	4949      	ldr	r1, [pc, #292]	; (800b5fc <main+0x340>)
 800b4d8:	4623      	mov	r3, r4
 800b4da:	4849      	ldr	r0, [pc, #292]	; (800b600 <main+0x344>)
 800b4dc:	9502      	str	r5, [sp, #8]
 800b4de:	f7fc fbb3 	bl	8007c48 <prvInitialiseNewTask.constprop.0>
 800b4e2:	4628      	mov	r0, r5
 800b4e4:	f7f9 ff3e 	bl	8005364 <prvAddNewTaskToReadyList>
 800b4e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	f000 80a7 	beq.w	800b63e <main+0x382>
 800b4f0:	f7f9 f918 	bl	8004724 <vPortEnterCritical>
 800b4f4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800b4f8:	4b42      	ldr	r3, [pc, #264]	; (800b604 <main+0x348>)
 800b4fa:	6019      	str	r1, [r3, #0]
 800b4fc:	4b42      	ldr	r3, [pc, #264]	; (800b608 <main+0x34c>)
 800b4fe:	601e      	str	r6, [r3, #0]
 800b500:	4b42      	ldr	r3, [pc, #264]	; (800b60c <main+0x350>)
 800b502:	601c      	str	r4, [r3, #0]
 800b504:	4b42      	ldr	r3, [pc, #264]	; (800b610 <main+0x354>)
 800b506:	781a      	ldrb	r2, [r3, #0]
 800b508:	b2d2      	uxtb	r2, r2
 800b50a:	9209      	str	r2, [sp, #36]	; 0x24
 800b50c:	7019      	strb	r1, [r3, #0]
 800b50e:	781b      	ldrb	r3, [r3, #0]
 800b510:	4a40      	ldr	r2, [pc, #256]	; (800b614 <main+0x358>)
 800b512:	b2db      	uxtb	r3, r3
 800b514:	f88d 3013 	strb.w	r3, [sp, #19]
 800b518:	f89d 3013 	ldrb.w	r3, [sp, #19]
 800b51c:	f003 03bf 	and.w	r3, r3, #191	; 0xbf
 800b520:	7013      	strb	r3, [r2, #0]
 800b522:	2307      	movs	r3, #7
 800b524:	4a3c      	ldr	r2, [pc, #240]	; (800b618 <main+0x35c>)
 800b526:	6013      	str	r3, [r2, #0]
 800b528:	f89d 1013 	ldrb.w	r1, [sp, #19]
 800b52c:	1e58      	subs	r0, r3, #1
 800b52e:	0609      	lsls	r1, r1, #24
 800b530:	d47c      	bmi.n	800b62c <main+0x370>
 800b532:	b104      	cbz	r4, 800b536 <main+0x27a>
 800b534:	6013      	str	r3, [r2, #0]
 800b536:	6813      	ldr	r3, [r2, #0]
 800b538:	f242 3128 	movw	r1, #9000	; 0x2328
 800b53c:	021b      	lsls	r3, r3, #8
 800b53e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b542:	6013      	str	r3, [r2, #0]
 800b544:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b546:	4a32      	ldr	r2, [pc, #200]	; (800b610 <main+0x354>)
 800b548:	b2db      	uxtb	r3, r3
 800b54a:	7013      	strb	r3, [r2, #0]
 800b54c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800b550:	f8d3 2d20 	ldr.w	r2, [r3, #3360]	; 0xd20
 800b554:	f442 027f 	orr.w	r2, r2, #16711680	; 0xff0000
 800b558:	f8c3 2d20 	str.w	r2, [r3, #3360]	; 0xd20
 800b55c:	f8d3 2d20 	ldr.w	r2, [r3, #3360]	; 0xd20
 800b560:	f042 427f 	orr.w	r2, r2, #4278190080	; 0xff000000
 800b564:	f8c3 2d20 	str.w	r2, [r3, #3360]	; 0xd20
 800b568:	4a2c      	ldr	r2, [pc, #176]	; (800b61c <main+0x360>)
 800b56a:	6011      	str	r1, [r2, #0]
 800b56c:	f44f 61e9 	mov.w	r1, #1864	; 0x748
 800b570:	4a2b      	ldr	r2, [pc, #172]	; (800b620 <main+0x364>)
 800b572:	6011      	str	r1, [r2, #0]
 800b574:	2105      	movs	r1, #5
 800b576:	4a2b      	ldr	r2, [pc, #172]	; (800b624 <main+0x368>)
 800b578:	6011      	str	r1, [r2, #0]
 800b57a:	f242 3227 	movw	r2, #8999	; 0x2327
 800b57e:	615a      	str	r2, [r3, #20]
 800b580:	2203      	movs	r2, #3
 800b582:	611a      	str	r2, [r3, #16]
 800b584:	2200      	movs	r2, #0
 800b586:	4b28      	ldr	r3, [pc, #160]	; (800b628 <main+0x36c>)
 800b588:	601a      	str	r2, [r3, #0]
 800b58a:	f7f9 f8bb 	bl	8004704 <prvPortStartFirstTask>
 800b58e:	f7f9 fad5 	bl	8004b3c <prvTaskExitError>
 800b592:	bf00      	nop
 800b594:	40021000 	.word	0x40021000
 800b598:	40007000 	.word	0x40007000
 800b59c:	20001044 	.word	0x20001044
 800b5a0:	20000fe8 	.word	0x20000fe8
 800b5a4:	0800c860 	.word	0x0800c860
 800b5a8:	40020000 	.word	0x40020000
 800b5ac:	20000934 	.word	0x20000934
 800b5b0:	40010800 	.word	0x40010800
 800b5b4:	88888288 	.word	0x88888288
 800b5b8:	40005400 	.word	0x40005400
 800b5bc:	0800c8d8 	.word	0x0800c8d8
 800b5c0:	0800cd08 	.word	0x0800cd08
 800b5c4:	200009bc 	.word	0x200009bc
 800b5c8:	08004159 	.word	0x08004159
 800b5cc:	20000ee0 	.word	0x20000ee0
 800b5d0:	40004800 	.word	0x40004800
 800b5d4:	40013000 	.word	0x40013000
 800b5d8:	20000f54 	.word	0x20000f54
 800b5dc:	20000fdc 	.word	0x20000fdc
 800b5e0:	40003000 	.word	0x40003000
 800b5e4:	0800cd58 	.word	0x0800cd58
 800b5e8:	0800a625 	.word	0x0800a625
 800b5ec:	0800c766 	.word	0x0800c766
 800b5f0:	08006161 	.word	0x08006161
 800b5f4:	20001588 	.word	0x20001588
 800b5f8:	200013a8 	.word	0x200013a8
 800b5fc:	0800c394 	.word	0x0800c394
 800b600:	0800af19 	.word	0x0800af19
 800b604:	200015f8 	.word	0x200015f8
 800b608:	20001614 	.word	0x20001614
 800b60c:	20001648 	.word	0x20001648
 800b610:	e000e400 	.word	0xe000e400
 800b614:	20001340 	.word	0x20001340
 800b618:	20001344 	.word	0x20001344
 800b61c:	20001350 	.word	0x20001350
 800b620:	200015f0 	.word	0x200015f0
 800b624:	20001348 	.word	0x20001348
 800b628:	20001358 	.word	0x20001358
 800b62c:	f89d 3013 	ldrb.w	r3, [sp, #19]
 800b630:	2401      	movs	r4, #1
 800b632:	005b      	lsls	r3, r3, #1
 800b634:	b2db      	uxtb	r3, r3
 800b636:	f88d 3013 	strb.w	r3, [sp, #19]
 800b63a:	4603      	mov	r3, r0
 800b63c:	e774      	b.n	800b528 <main+0x26c>

    osalSysEnable();

    /* Does not happen */
    osalSysHalt("Return in main?");
 800b63e:	f7f9 f881 	bl	8004744 <vTaskEndScheduler>
 800b642:	e7fe      	b.n	800b642 <main+0x386>

0800b644 <vTaskSwitchContext>:
 800b644:	4b1e      	ldr	r3, [pc, #120]	; (800b6c0 <vTaskSwitchContext+0x7c>)
 800b646:	b530      	push	{r4, r5, lr}
 800b648:	681a      	ldr	r2, [r3, #0]
 800b64a:	4b1e      	ldr	r3, [pc, #120]	; (800b6c4 <vTaskSwitchContext+0x80>)
 800b64c:	b112      	cbz	r2, 800b654 <vTaskSwitchContext+0x10>
 800b64e:	2201      	movs	r2, #1
 800b650:	601a      	str	r2, [r3, #0]
 800b652:	bd30      	pop	{r4, r5, pc}
 800b654:	481c      	ldr	r0, [pc, #112]	; (800b6c8 <vTaskSwitchContext+0x84>)
 800b656:	601a      	str	r2, [r3, #0]
 800b658:	6803      	ldr	r3, [r0, #0]
 800b65a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b65c:	681a      	ldr	r2, [r3, #0]
 800b65e:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
 800b662:	d10b      	bne.n	800b67c <vTaskSwitchContext+0x38>
 800b664:	685a      	ldr	r2, [r3, #4]
 800b666:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
 800b66a:	d107      	bne.n	800b67c <vTaskSwitchContext+0x38>
 800b66c:	689a      	ldr	r2, [r3, #8]
 800b66e:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
 800b672:	d103      	bne.n	800b67c <vTaskSwitchContext+0x38>
 800b674:	68db      	ldr	r3, [r3, #12]
 800b676:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
 800b67a:	d002      	beq.n	800b682 <vTaskSwitchContext+0x3e>
 800b67c:	6803      	ldr	r3, [r0, #0]
 800b67e:	6803      	ldr	r3, [r0, #0]
 800b680:	e7fe      	b.n	800b680 <vTaskSwitchContext+0x3c>
 800b682:	4b12      	ldr	r3, [pc, #72]	; (800b6cc <vTaskSwitchContext+0x88>)
 800b684:	681a      	ldr	r2, [r3, #0]
 800b686:	fab2 f282 	clz	r2, r2
 800b68a:	2314      	movs	r3, #20
 800b68c:	b2d2      	uxtb	r2, r2
 800b68e:	f1c2 021f 	rsb	r2, r2, #31
 800b692:	4353      	muls	r3, r2
 800b694:	490e      	ldr	r1, [pc, #56]	; (800b6d0 <vTaskSwitchContext+0x8c>)
 800b696:	58cd      	ldr	r5, [r1, r3]
 800b698:	18cc      	adds	r4, r1, r3
 800b69a:	b905      	cbnz	r5, 800b69e <vTaskSwitchContext+0x5a>
 800b69c:	e7fe      	b.n	800b69c <vTaskSwitchContext+0x58>
 800b69e:	6865      	ldr	r5, [r4, #4]
 800b6a0:	3308      	adds	r3, #8
 800b6a2:	686d      	ldr	r5, [r5, #4]
 800b6a4:	440b      	add	r3, r1
 800b6a6:	429d      	cmp	r5, r3
 800b6a8:	bf08      	it	eq
 800b6aa:	686b      	ldreq	r3, [r5, #4]
 800b6ac:	6065      	str	r5, [r4, #4]
 800b6ae:	bf08      	it	eq
 800b6b0:	6063      	streq	r3, [r4, #4]
 800b6b2:	2314      	movs	r3, #20
 800b6b4:	fb03 1202 	mla	r2, r3, r2, r1
 800b6b8:	6853      	ldr	r3, [r2, #4]
 800b6ba:	68db      	ldr	r3, [r3, #12]
 800b6bc:	6003      	str	r3, [r0, #0]
 800b6be:	e7c8      	b.n	800b652 <vTaskSwitchContext+0xe>
 800b6c0:	2000136c 	.word	0x2000136c
 800b6c4:	2000164c 	.word	0x2000164c
 800b6c8:	200011a8 	.word	0x200011a8
 800b6cc:	20001374 	.word	0x20001374
 800b6d0:	200011b8 	.word	0x200011b8

0800b6d4 <mixLedTask>:
{
 800b6d4:	4605      	mov	r5, r0
 800b6d6:	b580      	push	{r7, lr}
 800b6d8:	4e45      	ldr	r6, [pc, #276]	; (800b7f0 <mixLedTask+0x11c>)
 800b6da:	4f46      	ldr	r7, [pc, #280]	; (800b7f4 <mixLedTask+0x120>)
        gpioSetPin(GPIO_LED_MIX, true);
 800b6dc:	2101      	movs	r1, #1
 800b6de:	f240 1005 	movw	r0, #261	; 0x105
 800b6e2:	f7fb ff25 	bl	8007530 <gpioSetPin.isra.0>
        if(!*delay) {
 800b6e6:	682b      	ldr	r3, [r5, #0]
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d165      	bne.n	800b7b8 <mixLedTask+0xe4>
 800b6ec:	f7f9 f81a 	bl	8004724 <vPortEnterCritical>
 800b6f0:	6834      	ldr	r4, [r6, #0]
 800b6f2:	f104 0804 	add.w	r8, r4, #4
 800b6f6:	4640      	mov	r0, r8
 800b6f8:	f7f9 feff 	bl	80054fa <uxListRemove>
 800b6fc:	b978      	cbnz	r0, 800b71e <mixLedTask+0x4a>
 800b6fe:	2014      	movs	r0, #20
 800b700:	f8d4 c02c 	ldr.w	ip, [r4, #44]	; 0x2c
 800b704:	4b3c      	ldr	r3, [pc, #240]	; (800b7f8 <mixLedTask+0x124>)
 800b706:	fb00 f00c 	mul.w	r0, r0, ip
 800b70a:	581b      	ldr	r3, [r3, r0]
 800b70c:	b93b      	cbnz	r3, 800b71e <mixLedTask+0x4a>
 800b70e:	2201      	movs	r2, #1
 800b710:	493a      	ldr	r1, [pc, #232]	; (800b7fc <mixLedTask+0x128>)
 800b712:	fa02 f20c 	lsl.w	r2, r2, ip
 800b716:	680b      	ldr	r3, [r1, #0]
 800b718:	ea23 0302 	bic.w	r3, r3, r2
 800b71c:	600b      	str	r3, [r1, #0]
 800b71e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b720:	b11b      	cbz	r3, 800b72a <mixLedTask+0x56>
 800b722:	f104 0018 	add.w	r0, r4, #24
 800b726:	f7f9 fee8 	bl	80054fa <uxListRemove>
 800b72a:	4638      	mov	r0, r7
 800b72c:	4641      	mov	r1, r8
 800b72e:	f7f9 fe0c 	bl	800534a <vListInsertEnd>
 800b732:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
 800b736:	4832      	ldr	r0, [pc, #200]	; (800b800 <mixLedTask+0x12c>)
 800b738:	2b01      	cmp	r3, #1
 800b73a:	bf04      	itt	eq
 800b73c:	2300      	moveq	r3, #0
 800b73e:	f884 3064 	strbeq.w	r3, [r4, #100]	; 0x64
 800b742:	f7f9 fa07 	bl	8004b54 <vPortExitCritical>
 800b746:	6803      	ldr	r3, [r0, #0]
 800b748:	b12b      	cbz	r3, 800b756 <mixLedTask+0x82>
 800b74a:	f7f8 ffeb 	bl	8004724 <vPortEnterCritical>
 800b74e:	f7f8 ffa9 	bl	80046a4 <prvResetNextTaskUnblockTime>
 800b752:	f7f9 f9ff 	bl	8004b54 <vPortExitCritical>
 800b756:	6833      	ldr	r3, [r6, #0]
 800b758:	429c      	cmp	r4, r3
 800b75a:	d1bf      	bne.n	800b6dc <mixLedTask+0x8>
 800b75c:	6803      	ldr	r3, [r0, #0]
 800b75e:	b30b      	cbz	r3, 800b7a4 <mixLedTask+0xd0>
 800b760:	4b28      	ldr	r3, [pc, #160]	; (800b804 <mixLedTask+0x130>)
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	b103      	cbz	r3, 800b768 <mixLedTask+0x94>
 800b766:	e7fe      	b.n	800b766 <mixLedTask+0x92>
 800b768:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800b76c:	4a26      	ldr	r2, [pc, #152]	; (800b808 <mixLedTask+0x134>)
 800b76e:	f8d3 1d20 	ldr.w	r1, [r3, #3360]	; 0xd20
 800b772:	6011      	str	r1, [r2, #0]
 800b774:	4a25      	ldr	r2, [pc, #148]	; (800b80c <mixLedTask+0x138>)
 800b776:	6812      	ldr	r2, [r2, #0]
 800b778:	b14a      	cbz	r2, 800b78e <mixLedTask+0xba>
 800b77a:	f8d3 2d20 	ldr.w	r2, [r3, #3360]	; 0xd20
 800b77e:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
 800b782:	f8c3 2d20 	str.w	r2, [r3, #3360]	; 0xd20
 800b786:	f8d3 2d20 	ldr.w	r2, [r3, #3360]	; 0xd20
 800b78a:	f8c3 2d20 	str.w	r2, [r3, #3360]	; 0xd20
 800b78e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800b792:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b796:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800b79a:	f3bf 8f4f 	dsb	sy
 800b79e:	f3bf 8f6f 	isb	sy
 800b7a2:	e79b      	b.n	800b6dc <mixLedTask+0x8>
 800b7a4:	4a1a      	ldr	r2, [pc, #104]	; (800b810 <mixLedTask+0x13c>)
 800b7a6:	6839      	ldr	r1, [r7, #0]
 800b7a8:	6812      	ldr	r2, [r2, #0]
 800b7aa:	4291      	cmp	r1, r2
 800b7ac:	d101      	bne.n	800b7b2 <mixLedTask+0xde>
 800b7ae:	6033      	str	r3, [r6, #0]
 800b7b0:	e794      	b.n	800b6dc <mixLedTask+0x8>
 800b7b2:	f7ff ff47 	bl	800b644 <vTaskSwitchContext>
 800b7b6:	e791      	b.n	800b6dc <mixLedTask+0x8>
        osalThreadSleepMilliseconds(*delay);
 800b7b8:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 800b7bc:	6828      	ldr	r0, [r5, #0]
 800b7be:	4360      	muls	r0, r4
 800b7c0:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
 800b7c4:	fbb0 f0f4 	udiv	r0, r0, r4
 800b7c8:	f7fa fb94 	bl	8005ef4 <vTaskDelay>
        gpioSetPin(GPIO_LED_MIX, false);
 800b7cc:	2100      	movs	r1, #0
 800b7ce:	f240 1005 	movw	r0, #261	; 0x105
 800b7d2:	f7fb fead 	bl	8007530 <gpioSetPin.isra.0>
        if(*delay) {
 800b7d6:	682b      	ldr	r3, [r5, #0]
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	f43f af7f 	beq.w	800b6dc <mixLedTask+0x8>
            osalThreadSleepMilliseconds(*delay);
 800b7de:	6828      	ldr	r0, [r5, #0]
 800b7e0:	4360      	muls	r0, r4
 800b7e2:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
 800b7e6:	fbb0 f0f4 	udiv	r0, r0, r4
 800b7ea:	f7fa fb83 	bl	8005ef4 <vTaskDelay>
 800b7ee:	e775      	b.n	800b6dc <mixLedTask+0x8>
 800b7f0:	200011a8 	.word	0x200011a8
 800b7f4:	20001620 	.word	0x20001620
 800b7f8:	200011b8 	.word	0x200011b8
 800b7fc:	20001374 	.word	0x20001374
 800b800:	20001614 	.word	0x20001614
 800b804:	2000136c 	.word	0x2000136c
 800b808:	2000134c 	.word	0x2000134c
 800b80c:	20001358 	.word	0x20001358
 800b810:	2000135c 	.word	0x2000135c

0800b814 <memset>:
 800b814:	0783      	lsls	r3, r0, #30
 800b816:	b530      	push	{r4, r5, lr}
 800b818:	d048      	beq.n	800b8ac <memset+0x98>
 800b81a:	1e54      	subs	r4, r2, #1
 800b81c:	2a00      	cmp	r2, #0
 800b81e:	d03f      	beq.n	800b8a0 <memset+0x8c>
 800b820:	4603      	mov	r3, r0
 800b822:	b2ca      	uxtb	r2, r1
 800b824:	e001      	b.n	800b82a <memset+0x16>
 800b826:	3c01      	subs	r4, #1
 800b828:	d33a      	bcc.n	800b8a0 <memset+0x8c>
 800b82a:	f803 2b01 	strb.w	r2, [r3], #1
 800b82e:	079d      	lsls	r5, r3, #30
 800b830:	d1f9      	bne.n	800b826 <memset+0x12>
 800b832:	2c03      	cmp	r4, #3
 800b834:	d92d      	bls.n	800b892 <memset+0x7e>
 800b836:	b2cd      	uxtb	r5, r1
 800b838:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 800b83c:	2c0f      	cmp	r4, #15
 800b83e:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 800b842:	d936      	bls.n	800b8b2 <memset+0x9e>
 800b844:	f1a4 0210 	sub.w	r2, r4, #16
 800b848:	f022 0c0f 	bic.w	ip, r2, #15
 800b84c:	f103 0e20 	add.w	lr, r3, #32
 800b850:	44e6      	add	lr, ip
 800b852:	ea4f 1c12 	mov.w	ip, r2, lsr #4
 800b856:	f103 0210 	add.w	r2, r3, #16
 800b85a:	e942 5504 	strd	r5, r5, [r2, #-16]
 800b85e:	e942 5502 	strd	r5, r5, [r2, #-8]
 800b862:	3210      	adds	r2, #16
 800b864:	4572      	cmp	r2, lr
 800b866:	d1f8      	bne.n	800b85a <memset+0x46>
 800b868:	f10c 0201 	add.w	r2, ip, #1
 800b86c:	f014 0f0c 	tst.w	r4, #12
 800b870:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 800b874:	f004 0c0f 	and.w	ip, r4, #15
 800b878:	d013      	beq.n	800b8a2 <memset+0x8e>
 800b87a:	f1ac 0304 	sub.w	r3, ip, #4
 800b87e:	f023 0303 	bic.w	r3, r3, #3
 800b882:	3304      	adds	r3, #4
 800b884:	4413      	add	r3, r2
 800b886:	f842 5b04 	str.w	r5, [r2], #4
 800b88a:	4293      	cmp	r3, r2
 800b88c:	d1fb      	bne.n	800b886 <memset+0x72>
 800b88e:	f00c 0403 	and.w	r4, ip, #3
 800b892:	b12c      	cbz	r4, 800b8a0 <memset+0x8c>
 800b894:	b2ca      	uxtb	r2, r1
 800b896:	441c      	add	r4, r3
 800b898:	f803 2b01 	strb.w	r2, [r3], #1
 800b89c:	429c      	cmp	r4, r3
 800b89e:	d1fb      	bne.n	800b898 <memset+0x84>
 800b8a0:	bd30      	pop	{r4, r5, pc}
 800b8a2:	4664      	mov	r4, ip
 800b8a4:	4613      	mov	r3, r2
 800b8a6:	2c00      	cmp	r4, #0
 800b8a8:	d1f4      	bne.n	800b894 <memset+0x80>
 800b8aa:	e7f9      	b.n	800b8a0 <memset+0x8c>
 800b8ac:	4603      	mov	r3, r0
 800b8ae:	4614      	mov	r4, r2
 800b8b0:	e7bf      	b.n	800b832 <memset+0x1e>
 800b8b2:	461a      	mov	r2, r3
 800b8b4:	46a4      	mov	ip, r4
 800b8b6:	e7e0      	b.n	800b87a <memset+0x66>

0800b8b8 <strchr>:
 800b8b8:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
 800b8bc:	4603      	mov	r3, r0
 800b8be:	f000 0203 	and.w	r2, r0, #3
 800b8c2:	d043      	beq.n	800b94c <strchr+0x94>
 800b8c4:	bb92      	cbnz	r2, 800b92c <strchr+0x74>
 800b8c6:	b510      	push	{r4, lr}
 800b8c8:	6804      	ldr	r4, [r0, #0]
 800b8ca:	ea41 2e01 	orr.w	lr, r1, r1, lsl #8
 800b8ce:	ea4e 4e0e 	orr.w	lr, lr, lr, lsl #16
 800b8d2:	ea8e 0204 	eor.w	r2, lr, r4
 800b8d6:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
 800b8da:	ea23 0302 	bic.w	r3, r3, r2
 800b8de:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
 800b8e2:	ea22 0204 	bic.w	r2, r2, r4
 800b8e6:	4313      	orrs	r3, r2
 800b8e8:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 800b8ec:	d10f      	bne.n	800b90e <strchr+0x56>
 800b8ee:	f850 4f04 	ldr.w	r4, [r0, #4]!
 800b8f2:	ea84 0c0e 	eor.w	ip, r4, lr
 800b8f6:	f1a4 3301 	sub.w	r3, r4, #16843009	; 0x1010101
 800b8fa:	f1ac 3201 	sub.w	r2, ip, #16843009	; 0x1010101
 800b8fe:	ea23 0304 	bic.w	r3, r3, r4
 800b902:	ea22 020c 	bic.w	r2, r2, ip
 800b906:	4313      	orrs	r3, r2
 800b908:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 800b90c:	d0ef      	beq.n	800b8ee <strchr+0x36>
 800b90e:	7803      	ldrb	r3, [r0, #0]
 800b910:	b923      	cbnz	r3, 800b91c <strchr+0x64>
 800b912:	e036      	b.n	800b982 <strchr+0xca>
 800b914:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d032      	beq.n	800b982 <strchr+0xca>
 800b91c:	4299      	cmp	r1, r3
 800b91e:	d1f9      	bne.n	800b914 <strchr+0x5c>
 800b920:	bd10      	pop	{r4, pc}
 800b922:	428a      	cmp	r2, r1
 800b924:	d011      	beq.n	800b94a <strchr+0x92>
 800b926:	079a      	lsls	r2, r3, #30
 800b928:	4618      	mov	r0, r3
 800b92a:	d0cc      	beq.n	800b8c6 <strchr+0xe>
 800b92c:	4618      	mov	r0, r3
 800b92e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b932:	2a00      	cmp	r2, #0
 800b934:	d1f5      	bne.n	800b922 <strchr+0x6a>
 800b936:	4610      	mov	r0, r2
 800b938:	4770      	bx	lr
 800b93a:	0799      	lsls	r1, r3, #30
 800b93c:	4618      	mov	r0, r3
 800b93e:	d007      	beq.n	800b950 <strchr+0x98>
 800b940:	4618      	mov	r0, r3
 800b942:	7802      	ldrb	r2, [r0, #0]
 800b944:	3301      	adds	r3, #1
 800b946:	2a00      	cmp	r2, #0
 800b948:	d1f7      	bne.n	800b93a <strchr+0x82>
 800b94a:	4770      	bx	lr
 800b94c:	2a00      	cmp	r2, #0
 800b94e:	d1f7      	bne.n	800b940 <strchr+0x88>
 800b950:	6802      	ldr	r2, [r0, #0]
 800b952:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
 800b956:	ea23 0302 	bic.w	r3, r3, r2
 800b95a:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 800b95e:	d108      	bne.n	800b972 <strchr+0xba>
 800b960:	f850 2f04 	ldr.w	r2, [r0, #4]!
 800b964:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
 800b968:	ea23 0302 	bic.w	r3, r3, r2
 800b96c:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 800b970:	d0f6      	beq.n	800b960 <strchr+0xa8>
 800b972:	7803      	ldrb	r3, [r0, #0]
 800b974:	2b00      	cmp	r3, #0
 800b976:	d0e8      	beq.n	800b94a <strchr+0x92>
 800b978:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d1fb      	bne.n	800b978 <strchr+0xc0>
 800b980:	4770      	bx	lr
 800b982:	4618      	mov	r0, r3
 800b984:	bd10      	pop	{r4, pc}
 800b986:	bf00      	nop

0800b988 <strlen>:
 800b988:	f020 0103 	bic.w	r1, r0, #3
 800b98c:	f010 0003 	ands.w	r0, r0, #3
 800b990:	f1c0 0000 	rsb	r0, r0, #0
 800b994:	f851 3b04 	ldr.w	r3, [r1], #4
 800b998:	f100 0c04 	add.w	ip, r0, #4
 800b99c:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 800b9a0:	f06f 0200 	mvn.w	r2, #0
 800b9a4:	bf1c      	itt	ne
 800b9a6:	fa22 f20c 	lsrne.w	r2, r2, ip
 800b9aa:	4313      	orrne	r3, r2
 800b9ac:	f04f 0c01 	mov.w	ip, #1
 800b9b0:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
 800b9b4:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
 800b9b8:	eba3 020c 	sub.w	r2, r3, ip
 800b9bc:	ea22 0203 	bic.w	r2, r2, r3
 800b9c0:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
 800b9c4:	bf04      	itt	eq
 800b9c6:	f851 3b04 	ldreq.w	r3, [r1], #4
 800b9ca:	3004      	addeq	r0, #4
 800b9cc:	d0f4      	beq.n	800b9b8 <strlen+0x30>
 800b9ce:	f1c2 0100 	rsb	r1, r2, #0
 800b9d2:	ea02 0201 	and.w	r2, r2, r1
 800b9d6:	fab2 f282 	clz	r2, r2
 800b9da:	f1c2 021f 	rsb	r2, r2, #31
 800b9de:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
 800b9e2:	4770      	bx	lr

0800b9e4 <strpbrk>:
 800b9e4:	4684      	mov	ip, r0
 800b9e6:	7800      	ldrb	r0, [r0, #0]
 800b9e8:	b1b8      	cbz	r0, 800ba1a <strpbrk+0x36>
 800b9ea:	b500      	push	{lr}
 800b9ec:	468e      	mov	lr, r1
 800b9ee:	7809      	ldrb	r1, [r1, #0]
 800b9f0:	4672      	mov	r2, lr
 800b9f2:	460b      	mov	r3, r1
 800b9f4:	b919      	cbnz	r1, 800b9fe <strpbrk+0x1a>
 800b9f6:	e00b      	b.n	800ba10 <strpbrk+0x2c>
 800b9f8:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 800b9fc:	b143      	cbz	r3, 800ba10 <strpbrk+0x2c>
 800b9fe:	4298      	cmp	r0, r3
 800ba00:	d1fa      	bne.n	800b9f8 <strpbrk+0x14>
 800ba02:	7813      	ldrb	r3, [r2, #0]
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	bf14      	ite	ne
 800ba08:	4660      	movne	r0, ip
 800ba0a:	2000      	moveq	r0, #0
 800ba0c:	f85d fb04 	ldr.w	pc, [sp], #4
 800ba10:	f81c 0f01 	ldrb.w	r0, [ip, #1]!
 800ba14:	2800      	cmp	r0, #0
 800ba16:	d1eb      	bne.n	800b9f0 <strpbrk+0xc>
 800ba18:	e7f3      	b.n	800ba02 <strpbrk+0x1e>
 800ba1a:	4770      	bx	lr

0800ba1c <strspn>:
 800ba1c:	b510      	push	{r4, lr}
 800ba1e:	468e      	mov	lr, r1
 800ba20:	7801      	ldrb	r1, [r0, #0]
 800ba22:	b199      	cbz	r1, 800ba4c <strspn+0x30>
 800ba24:	4604      	mov	r4, r0
 800ba26:	4684      	mov	ip, r0
 800ba28:	f89e 0000 	ldrb.w	r0, [lr]
 800ba2c:	b158      	cbz	r0, 800ba46 <strspn+0x2a>
 800ba2e:	4672      	mov	r2, lr
 800ba30:	4603      	mov	r3, r0
 800ba32:	e002      	b.n	800ba3a <strspn+0x1e>
 800ba34:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 800ba38:	b12b      	cbz	r3, 800ba46 <strspn+0x2a>
 800ba3a:	428b      	cmp	r3, r1
 800ba3c:	d1fa      	bne.n	800ba34 <strspn+0x18>
 800ba3e:	f81c 1f01 	ldrb.w	r1, [ip, #1]!
 800ba42:	2900      	cmp	r1, #0
 800ba44:	d1f2      	bne.n	800ba2c <strspn+0x10>
 800ba46:	ebac 0004 	sub.w	r0, ip, r4
 800ba4a:	bd10      	pop	{r4, pc}
 800ba4c:	4608      	mov	r0, r1
 800ba4e:	bd10      	pop	{r4, pc}
