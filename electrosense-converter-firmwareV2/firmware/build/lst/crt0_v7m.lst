ARM GAS  /tmp/ccd4KAaB.s 			page 1


   1              	# 1 "../ChibiOS/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S"
   1              	/*
   0              	
   0              	
   2              	    ChibiOS - Copyright (C) 2006..2016 Giovanni Di Sirio
   3              	
   4              	    Licensed under the Apache License, Version 2.0 (the "License");
   5              	    you may not use this file except in compliance with the License.
   6              	    You may obtain a copy of the License at
   7              	
   8              	        http://www.apache.org/licenses/LICENSE-2.0
   9              	
  10              	    Unless required by applicable law or agreed to in writing, software
  11              	    distributed under the License is distributed on an "AS IS" BASIS,
  12              	    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  13              	    See the License for the specific language governing permissions and
  14              	    limitations under the License.
  15              	*/
  16              	
  17              	/**
  18              	 * @file    crt0_v7m.S
  19              	 * @brief   Generic ARMv7-M (Cortex-M3/M4/M7) startup file for ChibiOS.
  20              	 *
  21              	 * @addtogroup ARMCMx_GCC_STARTUP_V7M
  22              	 * @{
  23              	 */
  24              	
  25              	/*===========================================================================*/
  26              	/* Module constants.                                                         */
  27              	/*===========================================================================*/
  28              	
  29              	#if !defined(FALSE) || defined(__DOXYGEN__)
  30              	#define FALSE                               0
  31              	#endif
  32              	
  33              	#if !defined(TRUE) || defined(__DOXYGEN__)
  34              	#define TRUE                                1
  35              	#endif
  36              	
  37              	#define CONTROL_MODE_PRIVILEGED             0
  38              	#define CONTROL_MODE_UNPRIVILEGED           1
  39              	#define CONTROL_USE_MSP                     0
  40              	#define CONTROL_USE_PSP                     2
  41              	#define CONTROL_FPCA                        4
  42              	
  43              	#define FPCCR_ASPEN                         (1 << 31)
  44              	#define FPCCR_LSPEN                         (1 << 30)
  45              	
  46              	#define SCB_VTOR                            0xE000ED08
  47              	#define SCB_CPACR                           0xE000ED88
  48              	#define SCB_FPCCR                           0xE000EF34
  49              	#define SCB_FPDSCR                          0xE000EF3C
  50              	
  51              	/*===========================================================================*/
  52              	/* Module pre-compile time settings.                                         */
  53              	/*===========================================================================*/
  54              	
ARM GAS  /tmp/ccd4KAaB.s 			page 2


  55              	/**
  56              	 * @brief   VTOR special register initialization.
  57              	 * @details VTOR is initialized to point to the vectors table.
  58              	 */
  59              	#if !defined(CRT0_VTOR_INIT) || defined(__DOXYGEN__)
  60              	#define CRT0_VTOR_INIT                      TRUE
  61              	#endif
  62              	
  63              	/**
  64              	 * @brief   FPU initialization switch.
  65              	 */
  66              	#if !defined(CRT0_INIT_FPU) || defined(__DOXYGEN__)
  67              	#if defined(CORTEX_USE_FPU) || defined(__DOXYGEN__)
  68              	#define CRT0_INIT_FPU                       CORTEX_USE_FPU
  69              	#else
  70              	#define CRT0_INIT_FPU                       FALSE
  71              	#endif
  72              	#endif
  73              	
  74              	/**
  75              	 * @brief   Control special register initialization value.
  76              	 * @details The system is setup to run in privileged mode using the PSP
  77              	 *          stack (dual stack mode).
  78              	 */
  79              	#if !defined(CRT0_CONTROL_INIT) || defined(__DOXYGEN__)
  80              	#define CRT0_CONTROL_INIT                   (CONTROL_USE_PSP |              \
  81              	                                             CONTROL_MODE_PRIVILEGED)
  82              	#endif
  83              	
  84              	/**
  85              	 * @brief   Core initialization switch.
  86              	 */
  87              	#if !defined(CRT0_INIT_CORE) || defined(__DOXYGEN__)
  88              	#define CRT0_INIT_CORE                      TRUE
  89              	#endif
  90              	
  91              	/**
  92              	 * @brief   Stack segments initialization switch.
  93              	 */
  94              	#if !defined(CRT0_STACKS_FILL_PATTERN) || defined(__DOXYGEN__)
  95              	#define CRT0_STACKS_FILL_PATTERN            0x55555555
  96              	#endif
  97              	
  98              	/**
  99              	 * @brief   Stack segments initialization switch.
 100              	 */
 101              	#if !defined(CRT0_INIT_STACKS) || defined(__DOXYGEN__)
 102              	#define CRT0_INIT_STACKS                    TRUE
 103              	#endif
 104              	
 105              	/**
 106              	 * @brief   DATA segment initialization switch.
 107              	 */
 108              	#if !defined(CRT0_INIT_DATA) || defined(__DOXYGEN__)
 109              	#define CRT0_INIT_DATA                      TRUE
 110              	#endif
 111              	
ARM GAS  /tmp/ccd4KAaB.s 			page 3


 112              	/**
 113              	 * @brief   BSS segment initialization switch.
 114              	 */
 115              	#if !defined(CRT0_INIT_BSS) || defined(__DOXYGEN__)
 116              	#define CRT0_INIT_BSS                       TRUE
 117              	#endif
 118              	
 119              	/**
 120              	 * @brief   RAM areas initialization switch.
 121              	 */
 122              	#if !defined(CRT0_INIT_RAM_AREAS) || defined(__DOXYGEN__)
 123              	#define CRT0_INIT_RAM_AREAS                 TRUE
 124              	#endif
 125              	
 126              	/**
 127              	 * @brief   Constructors invocation switch.
 128              	 */
 129              	#if !defined(CRT0_CALL_CONSTRUCTORS) || defined(__DOXYGEN__)
 130              	#define CRT0_CALL_CONSTRUCTORS              TRUE
 131              	#endif
 132              	
 133              	/**
 134              	 * @brief   Destructors invocation switch.
 135              	 */
 136              	#if !defined(CRT0_CALL_DESTRUCTORS) || defined(__DOXYGEN__)
 137              	#define CRT0_CALL_DESTRUCTORS               TRUE
 138              	#endif
 139              	
 140              	/**
 141              	 * @brief   FPU FPCCR register initialization value.
 142              	 * @note    Only used if @p CRT0_INIT_FPU is equal to @p TRUE.
 143              	 */
 144              	#if !defined(CRT0_FPCCR_INIT) || defined(__DOXYGEN__)
 145              	#define CRT0_FPCCR_INIT                     (FPCCR_ASPEN | FPCCR_LSPEN)
 146              	#endif
 147              	
 148              	/**
 149              	 * @brief   CPACR register initialization value.
 150              	 * @note    Only used if @p CRT0_INIT_FPU is equal to @p TRUE.
 151              	 */
 152              	#if !defined(CRT0_CPACR_INIT) || defined(__DOXYGEN__)
 153              	#define CRT0_CPACR_INIT                     0x00F00000
 154              	#endif
 155              	
 156              	/*===========================================================================*/
 157              	/* Code section.                                                             */
 158              	/*===========================================================================*/
 159              	
 160              	#if !defined(__DOXYGEN__)
 161              	
 162              	                .syntax unified
 163              	                .cpu    cortex-m3
 164              	#if CRT0_INIT_FPU == TRUE
 165              	                .fpu    fpv4-sp-d16
 166              	#else
 167              	                .fpu    softvfp
 168              	#endif
ARM GAS  /tmp/ccd4KAaB.s 			page 4


 169              	
 170              	                .thumb
 171              	                .text
 172              	
 173              	/*
 174              	 * Reset handler.
 175              	 */
 176              	                .align  2
 177              	                .thumb_func
 178              	                .global Reset_Handler
 179              	Reset_Handler:
 180              	                /* Interrupts are globally masked initially.*/
 181 0000 72B6     	                cpsid   i
 182              	
 183              	#if CRT0_FORCE_MSP_INIT == TRUE
 184              	                /* MSP stack pointers initialization.*/
 185              	                ldr     r0, =__main_stack_end__
 186              	                msr     MSP, r0
 187              	#endif
 188              	
 189              	                /* PSP stack pointers initialization.*/
 190 0002 2648     	                ldr     r0, =__process_stack_end__
 191 0004 80F30988 	                msr     PSP, r0
 192              	
 193              	#if CRT0_VTOR_INIT == TRUE
 194 0008 2548     	                ldr     r0, =_vectors
 195 000a 4EF60851 	                movw    r1, #SCB_VTOR & 0xFFFF
 196 000e CEF20001 	                movt    r1, #SCB_VTOR >> 16
 197 0012 0860     	                str     r0, [r1]
 198              	#endif
 199              	
 200              	#if CRT0_INIT_FPU == TRUE
 201              	                /* FPU FPCCR initialization.*/
 202              	                movw    r0, #CRT0_FPCCR_INIT & 0xFFFF
 203              	                movt    r0, #CRT0_FPCCR_INIT >> 16
 204              	                movw    r1, #SCB_FPCCR & 0xFFFF
 205              	                movt    r1, #SCB_FPCCR >> 16
 206              	                str     r0, [r1]
 207              	                dsb
 208              	                isb
 209              	
 210              	                /* CPACR initialization.*/
 211              	                movw    r0, #CRT0_CPACR_INIT & 0xFFFF
 212              	                movt    r0, #CRT0_CPACR_INIT >> 16
 213              	                movw    r1, #SCB_CPACR & 0xFFFF
 214              	                movt    r1, #SCB_CPACR >> 16
 215              	                str     r0, [r1]
 216              	                dsb
 217              	                isb
 218              	
 219              	                /* FPU FPSCR initially cleared.*/
 220              	                mov     r0, #0
 221              	                vmsr    FPSCR, r0
 222              	
 223              	                /* FPU FPDSCR initially cleared.*/
 224              	                movw    r1, #SCB_FPDSCR & 0xFFFF
 225              	                movt    r1, #SCB_FPDSCR >> 16
ARM GAS  /tmp/ccd4KAaB.s 			page 5


 226              	                str     r0, [r1]
 227              	
 228              	                /* Enforcing FPCA bit in the CONTROL register.*/
 229              	                movs    r0, #CRT0_CONTROL_INIT | CONTROL_FPCA
 230              	
 231              	#else
 232 0014 0220     	                movs    r0, #CRT0_CONTROL_INIT
 233              	#endif
 234              	
 235              	                /* CONTROL register initialization as configured.*/
 236 0016 80F31488 	                msr     CONTROL, r0
 237 001a BFF36F8F 	                isb
 238              	
 239              	#if CRT0_INIT_CORE == TRUE
 240              	                /* Core initialization.*/
 241 001e FFF7FEFF 	                bl      __core_init
 242              	#endif
 243              	
 244              	                /* Early initialization.*/
 245 0022 FFF7FEFF 	                bl      __early_init
 246              	
 247              	#if CRT0_INIT_STACKS == TRUE
 248 0026 4FF05530 	                ldr     r0, =CRT0_STACKS_FILL_PATTERN
 249              	                /* Main Stack initialization. Note, it assumes that the
 250              	                   stack size is a multiple of 4 so the linker file must
 251              	                   ensure this.*/
 252 002a 1E49     	                ldr     r1, =__main_stack_base__
 253 002c 1E4A     	                ldr     r2, =__main_stack_end__
 254              	msloop:
 255 002e 9142     	                cmp     r1, r2
 256 0030 3CBF     	                itt     lo
 257 0032 41F8040B 	                strlo   r0, [r1], #4
 258 0036 FAE7     	                blo     msloop
 259              	
 260              	                /* Process Stack initialization. Note, it assumes that the
 261              	                   stack size is a multiple of 4 so the linker file must
 262              	                   ensure this.*/
 263 0038 1C49     	                ldr     r1, =__process_stack_base__
 264 003a 184A     	                ldr     r2, =__process_stack_end__
 265              	psloop:
 266 003c 9142     	                cmp     r1, r2
 267 003e 3CBF     	                itt     lo
 268 0040 41F8040B 	                strlo   r0, [r1], #4
 269 0044 FAE7     	                blo     psloop
 270              	#endif
 271              	
 272              	#if CRT0_INIT_DATA == TRUE
 273              	                /* Data initialization. Note, it assumes that the DATA size
 274              	                  is a multiple of 4 so the linker file must ensure this.*/
 275 0046 1A49     	                ldr     r1, =_textdata_start
 276 0048 1A4A     	                ldr     r2, =_data_start
 277 004a 1B4B     	                ldr     r3, =_data_end
 278              	dloop:
 279 004c 9A42     	                cmp     r2, r3
 280 004e 3EBF     	                ittt    lo
 281 0050 51F8040B 	                ldrlo   r0, [r1], #4
 282 0054 42F8040B 	                strlo   r0, [r2], #4
ARM GAS  /tmp/ccd4KAaB.s 			page 6


 283 0058 F8E7     	                blo     dloop
 284              	#endif
 285              	
 286              	#if CRT0_INIT_BSS == TRUE
 287              	                /* BSS initialization. Note, it assumes that the DATA size
 288              	                  is a multiple of 4 so the linker file must ensure this.*/
 289 005a 0020     	                movs    r0, #0
 290 005c 1749     	                ldr     r1, =_bss_start
 291 005e 184A     	                ldr     r2, =_bss_end
 292              	bloop:
 293 0060 9142     	                cmp     r1, r2
 294 0062 3CBF     	                itt     lo
 295 0064 41F8040B 	                strlo   r0, [r1], #4
 296 0068 FAE7     	                blo     bloop
 297              	#endif
 298              	
 299              	#if CRT0_INIT_RAM_AREAS == TRUE
 300              	                /* RAM areas initialization.*/
 301 006a FFF7FEFF 	                bl      __init_ram_areas
 302              	#endif
 303              	
 304              	                /* Late initialization..*/
 305 006e FFF7FEFF 	                bl      __late_init
 306              	
 307              	#if CRT0_CALL_CONSTRUCTORS == TRUE
 308              	                /* Constructors invocation.*/
 309 0072 144C     	                ldr     r4, =__init_array_start
 310 0074 144D     	                ldr     r5, =__init_array_end
 311              	initloop:
 312 0076 AC42     	                cmp     r4, r5
 313 0078 03DA     	                bge     endinitloop
 314 007a 54F8041B 	                ldr     r1, [r4], #4
 315 007e 8847     	                blx     r1
 316 0080 F9E7     	                b       initloop
 317              	endinitloop:
 318              	#endif
 319              	
 320              	                /* Main program invocation, r0 contains the returned value.*/
 321 0082 FFF7FEFF 	                bl      main
 322              	
 323              	#if CRT0_CALL_DESTRUCTORS == TRUE
 324              	                /* Destructors invocation.*/
 325 0086 114C     	                ldr     r4, =__fini_array_start
 326 0088 114D     	                ldr     r5, =__fini_array_end
 327              	finiloop:
 328 008a AC42     	                cmp     r4, r5
 329 008c 03DA     	                bge     endfiniloop
 330 008e 54F8041B 	                ldr     r1, [r4], #4
 331 0092 8847     	                blx     r1
 332 0094 F9E7     	                b       finiloop
 333              	endfiniloop:
 334              	#endif
 335              	
 336              	                /* Branching to the defined exit handler.*/
 337 0096 FFF7FEBF 	                b       __default_exit
 337      00000000 
 337      00000000 
ARM GAS  /tmp/ccd4KAaB.s 			page 7


 337      00000000 
 337      00000000 
ARM GAS  /tmp/ccd4KAaB.s 			page 8


DEFINED SYMBOLS
../ChibiOS/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S:176    .text:0000000000000000 $t
../ChibiOS/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S:179    .text:0000000000000000 Reset_Handler
../ChibiOS/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S:254    .text:000000000000002e msloop
../ChibiOS/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S:265    .text:000000000000003c psloop
../ChibiOS/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S:278    .text:000000000000004c dloop
../ChibiOS/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S:292    .text:0000000000000060 bloop
../ChibiOS/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S:311    .text:0000000000000076 initloop
../ChibiOS/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S:317    .text:0000000000000082 endinitloop
../ChibiOS/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S:327    .text:000000000000008a finiloop
../ChibiOS/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S:333    .text:0000000000000096 endfiniloop
../ChibiOS/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S:337    .text:000000000000009a $d
../ChibiOS/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S:337    .text:000000000000009c $d

UNDEFINED SYMBOLS
__process_stack_end__
_vectors
__core_init
__early_init
__main_stack_base__
__main_stack_end__
__process_stack_base__
_textdata_start
_data_start
_data_end
_bss_start
_bss_end
__init_ram_areas
__late_init
__init_array_start
__init_array_end
main
__fini_array_start
__fini_array_end
__default_exit
