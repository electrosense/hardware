
build/esense.elf:     file format elf32-littlearm


Disassembly of section .text:

08002160 <Reset_Handler>:
 8002160:	b672      	cpsid	i
 8002162:	4826      	ldr	r0, [pc, #152]	; (80021fc <endfiniloop+0x6>)
 8002164:	f380 8809 	msr	PSP, r0
 8002168:	4825      	ldr	r0, [pc, #148]	; (8002200 <endfiniloop+0xa>)
 800216a:	f64e 5108 	movw	r1, #60680	; 0xed08
 800216e:	f2ce 0100 	movt	r1, #57344	; 0xe000
 8002172:	6008      	str	r0, [r1, #0]
 8002174:	2002      	movs	r0, #2
 8002176:	f380 8814 	msr	CONTROL, r0
 800217a:	f3bf 8f6f 	isb	sy
 800217e:	f009 fb8d 	bl	800b89c <__core_init>
 8002182:	f009 fb23 	bl	800b7cc <__early_init>
 8002186:	f04f 3055 	mov.w	r0, #1431655765	; 0x55555555
 800218a:	491e      	ldr	r1, [pc, #120]	; (8002204 <endfiniloop+0xe>)
 800218c:	4a1e      	ldr	r2, [pc, #120]	; (8002208 <endfiniloop+0x12>)

0800218e <msloop>:
 800218e:	4291      	cmp	r1, r2
 8002190:	bf3c      	itt	cc
 8002192:	f841 0b04 	strcc.w	r0, [r1], #4
 8002196:	e7fa      	bcc.n	800218e <msloop>
 8002198:	491c      	ldr	r1, [pc, #112]	; (800220c <endfiniloop+0x16>)
 800219a:	4a18      	ldr	r2, [pc, #96]	; (80021fc <endfiniloop+0x6>)

0800219c <psloop>:
 800219c:	4291      	cmp	r1, r2
 800219e:	bf3c      	itt	cc
 80021a0:	f841 0b04 	strcc.w	r0, [r1], #4
 80021a4:	e7fa      	bcc.n	800219c <psloop>
 80021a6:	491a      	ldr	r1, [pc, #104]	; (8002210 <endfiniloop+0x1a>)
 80021a8:	4a1a      	ldr	r2, [pc, #104]	; (8002214 <endfiniloop+0x1e>)
 80021aa:	4b1b      	ldr	r3, [pc, #108]	; (8002218 <endfiniloop+0x22>)

080021ac <dloop>:
 80021ac:	429a      	cmp	r2, r3
 80021ae:	bf3e      	ittt	cc
 80021b0:	f851 0b04 	ldrcc.w	r0, [r1], #4
 80021b4:	f842 0b04 	strcc.w	r0, [r2], #4
 80021b8:	e7f8      	bcc.n	80021ac <dloop>
 80021ba:	2000      	movs	r0, #0
 80021bc:	4917      	ldr	r1, [pc, #92]	; (800221c <endfiniloop+0x26>)
 80021be:	4a18      	ldr	r2, [pc, #96]	; (8002220 <endfiniloop+0x2a>)

080021c0 <bloop>:
 80021c0:	4291      	cmp	r1, r2
 80021c2:	bf3c      	itt	cc
 80021c4:	f841 0b04 	strcc.w	r0, [r1], #4
 80021c8:	e7fa      	bcc.n	80021c0 <bloop>
 80021ca:	f009 fb3f 	bl	800b84c <__init_ram_areas>
 80021ce:	f009 fb64 	bl	800b89a <__late_init>
 80021d2:	4c14      	ldr	r4, [pc, #80]	; (8002224 <endfiniloop+0x2e>)
 80021d4:	4d14      	ldr	r5, [pc, #80]	; (8002228 <endfiniloop+0x32>)

080021d6 <initloop>:
 80021d6:	42ac      	cmp	r4, r5
 80021d8:	da03      	bge.n	80021e2 <endinitloop>
 80021da:	f854 1b04 	ldr.w	r1, [r4], #4
 80021de:	4788      	blx	r1
 80021e0:	e7f9      	b.n	80021d6 <initloop>

080021e2 <endinitloop>:
 80021e2:	f009 f94d 	bl	800b480 <main>
 80021e6:	4c11      	ldr	r4, [pc, #68]	; (800222c <endfiniloop+0x36>)
 80021e8:	4d11      	ldr	r5, [pc, #68]	; (8002230 <endfiniloop+0x3a>)

080021ea <finiloop>:
 80021ea:	42ac      	cmp	r4, r5
 80021ec:	da03      	bge.n	80021f6 <endfiniloop>
 80021ee:	f854 1b04 	ldr.w	r1, [r4], #4
 80021f2:	4788      	blx	r1
 80021f4:	e7f9      	b.n	80021ea <finiloop>

080021f6 <endfiniloop>:
 80021f6:	f009 bb4f 	b.w	800b898 <__default_exit>
 80021fa:	0000      	.short	0x0000
 80021fc:	20000800 	.word	0x20000800
 8002200:	08002000 	.word	0x08002000
 8002204:	20000000 	.word	0x20000000
 8002208:	20000400 	.word	0x20000400
 800220c:	20000400 	.word	0x20000400
 8002210:	0800cbdc 	.word	0x0800cbdc
 8002214:	20000800 	.word	0x20000800
 8002218:	20000928 	.word	0x20000928
 800221c:	20000928 	.word	0x20000928
 8002220:	20001650 	.word	0x20001650
 8002224:	08002160 	.word	0x08002160
 8002228:	08002160 	.word	0x08002160
 800222c:	08002160 	.word	0x08002160
 8002230:	08002160 	.word	0x08002160

08002234 <_binary_data_license_bin_start>:
 8002234:	2a2a2a2a 	.word	0x2a2a2a2a
 8002238:	2a2a2a2a 	.word	0x2a2a2a2a
 800223c:	2a2a2a2a 	.word	0x2a2a2a2a
 8002240:	2a2a2a2a 	.word	0x2a2a2a2a
 8002244:	2a2a2a2a 	.word	0x2a2a2a2a
 8002248:	2a2a2a2a 	.word	0x2a2a2a2a
 800224c:	2a2a2a2a 	.word	0x2a2a2a2a
 8002250:	2a2a2a2a 	.word	0x2a2a2a2a
 8002254:	2a2a2a2a 	.word	0x2a2a2a2a
 8002258:	2a2a2a2a 	.word	0x2a2a2a2a
 800225c:	2a2a2a2a 	.word	0x2a2a2a2a
 8002260:	2a2a2a2a 	.word	0x2a2a2a2a
 8002264:	2a2a2a2a 	.word	0x2a2a2a2a
 8002268:	2a2a2a2a 	.word	0x2a2a2a2a
 800226c:	2a2a2a2a 	.word	0x2a2a2a2a
 8002270:	2a2a2a2a 	.word	0x2a2a2a2a
 8002274:	2a2a2a2a 	.word	0x2a2a2a2a
 8002278:	2a2a2a2a 	.word	0x2a2a2a2a
 800227c:	2a2a2a2a 	.word	0x2a2a2a2a
 8002280:	2a2a2a2a 	.word	0x2a2a2a2a
 8002284:	0a0d2a2a 	.word	0x0a0d2a2a
 8002288:	65657246 	.word	0x65657246
 800228c:	534f5452 	.word	0x534f5452
 8002290:	72654b20 	.word	0x72654b20
 8002294:	206c656e 	.word	0x206c656e
 8002298:	2e303156 	.word	0x2e303156
 800229c:	0d302e30 	.word	0x0d302e30
 80022a0:	706f430a 	.word	0x706f430a
 80022a4:	67697279 	.word	0x67697279
 80022a8:	28207468 	.word	0x28207468
 80022ac:	32202943 	.word	0x32202943
 80022b0:	20373130 	.word	0x20373130
 80022b4:	7a616d41 	.word	0x7a616d41
 80022b8:	632e6e6f 	.word	0x632e6e6f
 80022bc:	202c6d6f 	.word	0x202c6d6f
 80022c0:	2e636e49 	.word	0x2e636e49
 80022c4:	20726f20 	.word	0x20726f20
 80022c8:	20737469 	.word	0x20737469
 80022cc:	69666661 	.word	0x69666661
 80022d0:	7461696c 	.word	0x7461696c
 80022d4:	202e7365 	.word	0x202e7365
 80022d8:	6c6c4120 	.word	0x6c6c4120
 80022dc:	67695220 	.word	0x67695220
 80022e0:	20737468 	.word	0x20737468
 80022e4:	65736552 	.word	0x65736552
 80022e8:	64657672 	.word	0x64657672
 80022ec:	0d0a0d2e 	.word	0x0d0a0d2e
 80022f0:	7265500a 	.word	0x7265500a
 80022f4:	7373696d 	.word	0x7373696d
 80022f8:	206e6f69 	.word	0x206e6f69
 80022fc:	68207369 	.word	0x68207369
 8002300:	62657265 	.word	0x62657265
 8002304:	72672079 	.word	0x72672079
 8002308:	65746e61 	.word	0x65746e61
 800230c:	66202c64 	.word	0x66202c64
 8002310:	20656572 	.word	0x20656572
 8002314:	6320666f 	.word	0x6320666f
 8002318:	67726168 	.word	0x67726168
 800231c:	74202c65 	.word	0x74202c65
 8002320:	6e61206f 	.word	0x6e61206f
 8002324:	65702079 	.word	0x65702079
 8002328:	6e6f7372 	.word	0x6e6f7372
 800232c:	74626f20 	.word	0x74626f20
 8002330:	696e6961 	.word	0x696e6961
 8002334:	6120676e 	.word	0x6120676e
 8002338:	706f6320 	.word	0x706f6320
 800233c:	666f2079 	.word	0x666f2079
 8002340:	68740a0d 	.word	0x68740a0d
 8002344:	73207369 	.word	0x73207369
 8002348:	7774666f 	.word	0x7774666f
 800234c:	20657261 	.word	0x20657261
 8002350:	20646e61 	.word	0x20646e61
 8002354:	6f737361 	.word	0x6f737361
 8002358:	74616963 	.word	0x74616963
 800235c:	64206465 	.word	0x64206465
 8002360:	6d75636f 	.word	0x6d75636f
 8002364:	61746e65 	.word	0x61746e65
 8002368:	6e6f6974 	.word	0x6e6f6974
 800236c:	6c696620 	.word	0x6c696620
 8002370:	28207365 	.word	0x28207365
 8002374:	20656874 	.word	0x20656874
 8002378:	666f5322 	.word	0x666f5322
 800237c:	72617774 	.word	0x72617774
 8002380:	2c292265 	.word	0x2c292265
 8002384:	206f7420 	.word	0x206f7420
 8002388:	6c616564 	.word	0x6c616564
 800238c:	0d6e6920 	.word	0x0d6e6920
 8002390:	6568740a 	.word	0x6568740a
 8002394:	666f5320 	.word	0x666f5320
 8002398:	72617774 	.word	0x72617774
 800239c:	69772065 	.word	0x69772065
 80023a0:	756f6874 	.word	0x756f6874
 80023a4:	65722074 	.word	0x65722074
 80023a8:	69727473 	.word	0x69727473
 80023ac:	6f697463 	.word	0x6f697463
 80023b0:	69202c6e 	.word	0x69202c6e
 80023b4:	756c636e 	.word	0x756c636e
 80023b8:	676e6964 	.word	0x676e6964
 80023bc:	74697720 	.word	0x74697720
 80023c0:	74756f68 	.word	0x74756f68
 80023c4:	6d696c20 	.word	0x6d696c20
 80023c8:	74617469 	.word	0x74617469
 80023cc:	206e6f69 	.word	0x206e6f69
 80023d0:	20656874 	.word	0x20656874
 80023d4:	68676972 	.word	0x68676972
 80023d8:	74207374 	.word	0x74207374
 80023dc:	750a0d6f 	.word	0x750a0d6f
 80023e0:	202c6573 	.word	0x202c6573
 80023e4:	79706f63 	.word	0x79706f63
 80023e8:	6f6d202c 	.word	0x6f6d202c
 80023ec:	79666964 	.word	0x79666964
 80023f0:	656d202c 	.word	0x656d202c
 80023f4:	2c656772 	.word	0x2c656772
 80023f8:	62757020 	.word	0x62757020
 80023fc:	6873696c 	.word	0x6873696c
 8002400:	6964202c 	.word	0x6964202c
 8002404:	69727473 	.word	0x69727473
 8002408:	65747562 	.word	0x65747562
 800240c:	7573202c 	.word	0x7573202c
 8002410:	63696c62 	.word	0x63696c62
 8002414:	65736e65 	.word	0x65736e65
 8002418:	6e61202c 	.word	0x6e61202c
 800241c:	726f2f64 	.word	0x726f2f64
 8002420:	6c657320 	.word	0x6c657320
 8002424:	6f63206c 	.word	0x6f63206c
 8002428:	73656970 	.word	0x73656970
 800242c:	0d666f20 	.word	0x0d666f20
 8002430:	6568740a 	.word	0x6568740a
 8002434:	666f5320 	.word	0x666f5320
 8002438:	72617774 	.word	0x72617774
 800243c:	61202c65 	.word	0x61202c65
 8002440:	7420646e 	.word	0x7420646e
 8002444:	6570206f 	.word	0x6570206f
 8002448:	74696d72 	.word	0x74696d72
 800244c:	72657020 	.word	0x72657020
 8002450:	736e6f73 	.word	0x736e6f73
 8002454:	206f7420 	.word	0x206f7420
 8002458:	6d6f6877 	.word	0x6d6f6877
 800245c:	65687420 	.word	0x65687420
 8002460:	666f5320 	.word	0x666f5320
 8002464:	72617774 	.word	0x72617774
 8002468:	73692065 	.word	0x73692065
 800246c:	72756620 	.word	0x72756620
 8002470:	6873696e 	.word	0x6873696e
 8002474:	74206465 	.word	0x74206465
 8002478:	6f64206f 	.word	0x6f64206f
 800247c:	2c6f7320 	.word	0x2c6f7320
 8002480:	75730a0d 	.word	0x75730a0d
 8002484:	63656a62 	.word	0x63656a62
 8002488:	6f742074 	.word	0x6f742074
 800248c:	65687420 	.word	0x65687420
 8002490:	6c6f6620 	.word	0x6c6f6620
 8002494:	69776f6c 	.word	0x69776f6c
 8002498:	6320676e 	.word	0x6320676e
 800249c:	69646e6f 	.word	0x69646e6f
 80024a0:	6e6f6974 	.word	0x6e6f6974
 80024a4:	0a0d3a73 	.word	0x0a0d3a73
 80024a8:	68540a0d 	.word	0x68540a0d
 80024ac:	62612065 	.word	0x62612065
 80024b0:	2065766f 	.word	0x2065766f
 80024b4:	79706f63 	.word	0x79706f63
 80024b8:	68676972 	.word	0x68676972
 80024bc:	6f6e2074 	.word	0x6f6e2074
 80024c0:	65636974 	.word	0x65636974
 80024c4:	646e6120 	.word	0x646e6120
 80024c8:	69687420 	.word	0x69687420
 80024cc:	65702073 	.word	0x65702073
 80024d0:	73696d72 	.word	0x73696d72
 80024d4:	6e6f6973 	.word	0x6e6f6973
 80024d8:	746f6e20 	.word	0x746f6e20
 80024dc:	20656369 	.word	0x20656369
 80024e0:	6c616873 	.word	0x6c616873
 80024e4:	6562206c 	.word	0x6562206c
 80024e8:	636e6920 	.word	0x636e6920
 80024ec:	6564756c 	.word	0x6564756c
 80024f0:	6e692064 	.word	0x6e692064
 80024f4:	6c6c6120 	.word	0x6c6c6120
 80024f8:	6f630a0d 	.word	0x6f630a0d
 80024fc:	73656970 	.word	0x73656970
 8002500:	20726f20 	.word	0x20726f20
 8002504:	73627573 	.word	0x73627573
 8002508:	746e6174 	.word	0x746e6174
 800250c:	206c6169 	.word	0x206c6169
 8002510:	74726f70 	.word	0x74726f70
 8002514:	736e6f69 	.word	0x736e6f69
 8002518:	20666f20 	.word	0x20666f20
 800251c:	20656874 	.word	0x20656874
 8002520:	74666f53 	.word	0x74666f53
 8002524:	65726177 	.word	0x65726177
 8002528:	6649202e 	.word	0x6649202e
 800252c:	756f7920 	.word	0x756f7920
 8002530:	73697720 	.word	0x73697720
 8002534:	6f742068 	.word	0x6f742068
 8002538:	65737520 	.word	0x65737520
 800253c:	72756f20 	.word	0x72756f20
 8002540:	616d4120 	.word	0x616d4120
 8002544:	0d6e6f7a 	.word	0x0d6e6f7a
 8002548:	6572460a 	.word	0x6572460a
 800254c:	4f545265 	.word	0x4f545265
 8002550:	616e2053 	.word	0x616e2053
 8002554:	202c656d 	.word	0x202c656d
 8002558:	61656c70 	.word	0x61656c70
 800255c:	64206573 	.word	0x64206573
 8002560:	6f73206f 	.word	0x6f73206f
 8002564:	206e6920 	.word	0x206e6920
 8002568:	61662061 	.word	0x61662061
 800256c:	75207269 	.word	0x75207269
 8002570:	77206573 	.word	0x77206573
 8002574:	74207961 	.word	0x74207961
 8002578:	20746168 	.word	0x20746168
 800257c:	73656f64 	.word	0x73656f64
 8002580:	746f6e20 	.word	0x746f6e20
 8002584:	75616320 	.word	0x75616320
 8002588:	63206573 	.word	0x63206573
 800258c:	75666e6f 	.word	0x75666e6f
 8002590:	6e6f6973 	.word	0x6e6f6973
 8002594:	0d0a0d2e 	.word	0x0d0a0d2e
 8002598:	4548540a 	.word	0x4548540a
 800259c:	464f5320 	.word	0x464f5320
 80025a0:	52415754 	.word	0x52415754
 80025a4:	53492045 	.word	0x53492045
 80025a8:	4f525020 	.word	0x4f525020
 80025ac:	45444956 	.word	0x45444956
 80025b0:	41222044 	.word	0x41222044
 80025b4:	53492053 	.word	0x53492053
 80025b8:	57202c22 	.word	0x57202c22
 80025bc:	4f485449 	.word	0x4f485449
 80025c0:	57205455 	.word	0x57205455
 80025c4:	41525241 	.word	0x41525241
 80025c8:	2059544e 	.word	0x2059544e
 80025cc:	4120464f 	.word	0x4120464f
 80025d0:	4b20594e 	.word	0x4b20594e
 80025d4:	2c444e49 	.word	0x2c444e49
 80025d8:	50584520 	.word	0x50584520
 80025dc:	53534552 	.word	0x53534552
 80025e0:	0d524f20 	.word	0x0d524f20
 80025e4:	504d490a 	.word	0x504d490a
 80025e8:	4445494c 	.word	0x4445494c
 80025ec:	4e49202c 	.word	0x4e49202c
 80025f0:	44554c43 	.word	0x44554c43
 80025f4:	20474e49 	.word	0x20474e49
 80025f8:	20545542 	.word	0x20545542
 80025fc:	20544f4e 	.word	0x20544f4e
 8002600:	494d494c 	.word	0x494d494c
 8002604:	20444554 	.word	0x20444554
 8002608:	54204f54 	.word	0x54204f54
 800260c:	57204548 	.word	0x57204548
 8002610:	41525241 	.word	0x41525241
 8002614:	4549544e 	.word	0x4549544e
 8002618:	464f2053 	.word	0x464f2053
 800261c:	52454d20 	.word	0x52454d20
 8002620:	4e414843 	.word	0x4e414843
 8002624:	49424154 	.word	0x49424154
 8002628:	5954494c 	.word	0x5954494c
 800262c:	4946202c 	.word	0x4946202c
 8002630:	53454e54 	.word	0x53454e54
 8002634:	460a0d53 	.word	0x460a0d53
 8002638:	4120524f 	.word	0x4120524f
 800263c:	52415020 	.word	0x52415020
 8002640:	55434954 	.word	0x55434954
 8002644:	2052414c 	.word	0x2052414c
 8002648:	50525550 	.word	0x50525550
 800264c:	2045534f 	.word	0x2045534f
 8002650:	20444e41 	.word	0x20444e41
 8002654:	494e4f4e 	.word	0x494e4f4e
 8002658:	4952464e 	.word	0x4952464e
 800265c:	4d45474e 	.word	0x4d45474e
 8002660:	2e544e45 	.word	0x2e544e45
 8002664:	204e4920 	.word	0x204e4920
 8002668:	45204f4e 	.word	0x45204f4e
 800266c:	544e4556 	.word	0x544e4556
 8002670:	41485320 	.word	0x41485320
 8002674:	54204c4c 	.word	0x54204c4c
 8002678:	41204548 	.word	0x41204548
 800267c:	4f485455 	.word	0x4f485455
 8002680:	4f205352 	.word	0x4f205352
 8002684:	430a0d52 	.word	0x430a0d52
 8002688:	5259504f 	.word	0x5259504f
 800268c:	54484749 	.word	0x54484749
 8002690:	4c4f4820 	.word	0x4c4f4820
 8002694:	53524544 	.word	0x53524544
 8002698:	20454220 	.word	0x20454220
 800269c:	4241494c 	.word	0x4241494c
 80026a0:	4620454c 	.word	0x4620454c
 80026a4:	4120524f 	.word	0x4120524f
 80026a8:	4320594e 	.word	0x4320594e
 80026ac:	4d49414c 	.word	0x4d49414c
 80026b0:	4144202c 	.word	0x4144202c
 80026b4:	4547414d 	.word	0x4547414d
 80026b8:	524f2053 	.word	0x524f2053
 80026bc:	48544f20 	.word	0x48544f20
 80026c0:	4c205245 	.word	0x4c205245
 80026c4:	49424149 	.word	0x49424149
 80026c8:	5954494c 	.word	0x5954494c
 80026cc:	4857202c 	.word	0x4857202c
 80026d0:	45485445 	.word	0x45485445
 80026d4:	490a0d52 	.word	0x490a0d52
 80026d8:	4e41204e 	.word	0x4e41204e
 80026dc:	54434120 	.word	0x54434120
 80026e0:	204e4f49 	.word	0x204e4f49
 80026e4:	4320464f 	.word	0x4320464f
 80026e8:	52544e4f 	.word	0x52544e4f
 80026ec:	2c544341 	.word	0x2c544341
 80026f0:	524f5420 	.word	0x524f5420
 80026f4:	524f2054 	.word	0x524f2054
 80026f8:	48544f20 	.word	0x48544f20
 80026fc:	49575245 	.word	0x49575245
 8002700:	202c4553 	.word	0x202c4553
 8002704:	53495241 	.word	0x53495241
 8002708:	20474e49 	.word	0x20474e49
 800270c:	4d4f5246 	.word	0x4d4f5246
 8002710:	554f202c 	.word	0x554f202c
 8002714:	464f2054 	.word	0x464f2054
 8002718:	20524f20 	.word	0x20524f20
 800271c:	0a0d4e49 	.word	0x0a0d4e49
 8002720:	4e4e4f43 	.word	0x4e4e4f43
 8002724:	49544345 	.word	0x49544345
 8002728:	57204e4f 	.word	0x57204e4f
 800272c:	20485449 	.word	0x20485449
 8002730:	20454854 	.word	0x20454854
 8002734:	54464f53 	.word	0x54464f53
 8002738:	45524157 	.word	0x45524157
 800273c:	20524f20 	.word	0x20524f20
 8002740:	20454854 	.word	0x20454854
 8002744:	20455355 	.word	0x20455355
 8002748:	4f20524f 	.word	0x4f20524f
 800274c:	52454854 	.word	0x52454854
 8002750:	41454420 	.word	0x41454420
 8002754:	474e494c 	.word	0x474e494c
 8002758:	4e492053 	.word	0x4e492053
 800275c:	45485420 	.word	0x45485420
 8002760:	464f5320 	.word	0x464f5320
 8002764:	52415754 	.word	0x52415754
 8002768:	0a0d2e45 	.word	0x0a0d2e45
 800276c:	74680a0d 	.word	0x74680a0d
 8002770:	2f3a7074 	.word	0x2f3a7074
 8002774:	7777772f 	.word	0x7777772f
 8002778:	6572462e 	.word	0x6572462e
 800277c:	4f545265 	.word	0x4f545265
 8002780:	726f2e53 	.word	0x726f2e53
 8002784:	680a0d67 	.word	0x680a0d67
 8002788:	3a707474 	.word	0x3a707474
 800278c:	77612f2f 	.word	0x77612f2f
 8002790:	6d612e73 	.word	0x6d612e73
 8002794:	6e6f7a61 	.word	0x6e6f7a61
 8002798:	6d6f632e 	.word	0x6d6f632e
 800279c:	6572662f 	.word	0x6572662f
 80027a0:	6f747265 	.word	0x6f747265
 80027a4:	2a0a0d73 	.word	0x2a0a0d73
 80027a8:	2a2a2a2a 	.word	0x2a2a2a2a
 80027ac:	2a2a2a2a 	.word	0x2a2a2a2a
 80027b0:	2a2a2a2a 	.word	0x2a2a2a2a
 80027b4:	2a2a2a2a 	.word	0x2a2a2a2a
 80027b8:	2a2a2a2a 	.word	0x2a2a2a2a
 80027bc:	2a2a2a2a 	.word	0x2a2a2a2a
 80027c0:	2a2a2a2a 	.word	0x2a2a2a2a
 80027c4:	2a2a2a2a 	.word	0x2a2a2a2a
 80027c8:	2a2a2a2a 	.word	0x2a2a2a2a
 80027cc:	2a2a2a2a 	.word	0x2a2a2a2a
 80027d0:	2a2a2a2a 	.word	0x2a2a2a2a
 80027d4:	2a2a2a2a 	.word	0x2a2a2a2a
 80027d8:	2a2a2a2a 	.word	0x2a2a2a2a
 80027dc:	2a2a2a2a 	.word	0x2a2a2a2a
 80027e0:	2a2a2a2a 	.word	0x2a2a2a2a
 80027e4:	2a2a2a2a 	.word	0x2a2a2a2a
 80027e8:	2a2a2a2a 	.word	0x2a2a2a2a
 80027ec:	2a2a2a2a 	.word	0x2a2a2a2a
 80027f0:	2a2a2a2a 	.word	0x2a2a2a2a
 80027f4:	2a2a2a2a 	.word	0x2a2a2a2a
 80027f8:	430a0d2a 	.word	0x430a0d2a
 80027fc:	5259504f 	.word	0x5259504f
 8002800:	54484749 	.word	0x54484749
 8002804:	20296328 	.word	0x20296328
 8002808:	36313032 	.word	0x36313032
 800280c:	4d545320 	.word	0x4d545320
 8002810:	6f726369 	.word	0x6f726369
 8002814:	63656c65 	.word	0x63656c65
 8002818:	6e6f7274 	.word	0x6e6f7274
 800281c:	0d736369 	.word	0x0d736369
 8002820:	520a0d0a 	.word	0x520a0d0a
 8002824:	73696465 	.word	0x73696465
 8002828:	62697274 	.word	0x62697274
 800282c:	6f697475 	.word	0x6f697475
 8002830:	6e61206e 	.word	0x6e61206e
 8002834:	73752064 	.word	0x73752064
 8002838:	6e692065 	.word	0x6e692065
 800283c:	756f7320 	.word	0x756f7320
 8002840:	20656372 	.word	0x20656372
 8002844:	20646e61 	.word	0x20646e61
 8002848:	616e6962 	.word	0x616e6962
 800284c:	66207972 	.word	0x66207972
 8002850:	736d726f 	.word	0x736d726f
 8002854:	6977202c 	.word	0x6977202c
 8002858:	6f206874 	.word	0x6f206874
 800285c:	69772072 	.word	0x69772072
 8002860:	756f6874 	.word	0x756f6874
 8002864:	6f6d2074 	.word	0x6f6d2074
 8002868:	69666964 	.word	0x69666964
 800286c:	69746163 	.word	0x69746163
 8002870:	0d2c6e6f 	.word	0x0d2c6e6f
 8002874:	6572610a 	.word	0x6572610a
 8002878:	72657020 	.word	0x72657020
 800287c:	7474696d 	.word	0x7474696d
 8002880:	70206465 	.word	0x70206465
 8002884:	69766f72 	.word	0x69766f72
 8002888:	20646564 	.word	0x20646564
 800288c:	74616874 	.word	0x74616874
 8002890:	65687420 	.word	0x65687420
 8002894:	6c6f6620 	.word	0x6c6f6620
 8002898:	69776f6c 	.word	0x69776f6c
 800289c:	6320676e 	.word	0x6320676e
 80028a0:	69646e6f 	.word	0x69646e6f
 80028a4:	6e6f6974 	.word	0x6e6f6974
 80028a8:	72612073 	.word	0x72612073
 80028ac:	656d2065 	.word	0x656d2065
 80028b0:	0a0d3a74 	.word	0x0a0d3a74
 80028b4:	2e312020 	.word	0x2e312020
 80028b8:	64655220 	.word	0x64655220
 80028bc:	72747369 	.word	0x72747369
 80028c0:	74756269 	.word	0x74756269
 80028c4:	736e6f69 	.word	0x736e6f69
 80028c8:	20666f20 	.word	0x20666f20
 80028cc:	72756f73 	.word	0x72756f73
 80028d0:	63206563 	.word	0x63206563
 80028d4:	2065646f 	.word	0x2065646f
 80028d8:	7473756d 	.word	0x7473756d
 80028dc:	74657220 	.word	0x74657220
 80028e0:	206e6961 	.word	0x206e6961
 80028e4:	20656874 	.word	0x20656874
 80028e8:	766f6261 	.word	0x766f6261
 80028ec:	6f632065 	.word	0x6f632065
 80028f0:	69727970 	.word	0x69727970
 80028f4:	20746867 	.word	0x20746867
 80028f8:	69746f6e 	.word	0x69746f6e
 80028fc:	0d2c6563 	.word	0x0d2c6563
 8002900:	2020200a 	.word	0x2020200a
 8002904:	68742020 	.word	0x68742020
 8002908:	6c207369 	.word	0x6c207369
 800290c:	20747369 	.word	0x20747369
 8002910:	6320666f 	.word	0x6320666f
 8002914:	69646e6f 	.word	0x69646e6f
 8002918:	6e6f6974 	.word	0x6e6f6974
 800291c:	6e612073 	.word	0x6e612073
 8002920:	68742064 	.word	0x68742064
 8002924:	6f662065 	.word	0x6f662065
 8002928:	776f6c6c 	.word	0x776f6c6c
 800292c:	20676e69 	.word	0x20676e69
 8002930:	63736964 	.word	0x63736964
 8002934:	6d69616c 	.word	0x6d69616c
 8002938:	0d2e7265 	.word	0x0d2e7265
 800293c:	3220200a 	.word	0x3220200a
 8002940:	6552202e 	.word	0x6552202e
 8002944:	74736964 	.word	0x74736964
 8002948:	75626972 	.word	0x75626972
 800294c:	6e6f6974 	.word	0x6e6f6974
 8002950:	6e692073 	.word	0x6e692073
 8002954:	6e696220 	.word	0x6e696220
 8002958:	20797261 	.word	0x20797261
 800295c:	6d726f66 	.word	0x6d726f66
 8002960:	73756d20 	.word	0x73756d20
 8002964:	65722074 	.word	0x65722074
 8002968:	646f7270 	.word	0x646f7270
 800296c:	20656375 	.word	0x20656375
 8002970:	20656874 	.word	0x20656874
 8002974:	766f6261 	.word	0x766f6261
 8002978:	6f632065 	.word	0x6f632065
 800297c:	69727970 	.word	0x69727970
 8002980:	20746867 	.word	0x20746867
 8002984:	69746f6e 	.word	0x69746f6e
 8002988:	0d2c6563 	.word	0x0d2c6563
 800298c:	2020200a 	.word	0x2020200a
 8002990:	68742020 	.word	0x68742020
 8002994:	6c207369 	.word	0x6c207369
 8002998:	20747369 	.word	0x20747369
 800299c:	6320666f 	.word	0x6320666f
 80029a0:	69646e6f 	.word	0x69646e6f
 80029a4:	6e6f6974 	.word	0x6e6f6974
 80029a8:	6e612073 	.word	0x6e612073
 80029ac:	68742064 	.word	0x68742064
 80029b0:	6f662065 	.word	0x6f662065
 80029b4:	776f6c6c 	.word	0x776f6c6c
 80029b8:	20676e69 	.word	0x20676e69
 80029bc:	63736964 	.word	0x63736964
 80029c0:	6d69616c 	.word	0x6d69616c
 80029c4:	69207265 	.word	0x69207265
 80029c8:	6874206e 	.word	0x6874206e
 80029cc:	6f642065 	.word	0x6f642065
 80029d0:	656d7563 	.word	0x656d7563
 80029d4:	7461746e 	.word	0x7461746e
 80029d8:	0d6e6f69 	.word	0x0d6e6f69
 80029dc:	2020200a 	.word	0x2020200a
 80029e0:	6e612020 	.word	0x6e612020
 80029e4:	726f2f64 	.word	0x726f2f64
 80029e8:	68746f20 	.word	0x68746f20
 80029ec:	6d207265 	.word	0x6d207265
 80029f0:	72657461 	.word	0x72657461
 80029f4:	736c6169 	.word	0x736c6169
 80029f8:	6f727020 	.word	0x6f727020
 80029fc:	65646976 	.word	0x65646976
 8002a00:	69772064 	.word	0x69772064
 8002a04:	74206874 	.word	0x74206874
 8002a08:	64206568 	.word	0x64206568
 8002a0c:	72747369 	.word	0x72747369
 8002a10:	74756269 	.word	0x74756269
 8002a14:	2e6e6f69 	.word	0x2e6e6f69
 8002a18:	20200a0d 	.word	0x20200a0d
 8002a1c:	4e202e33 	.word	0x4e202e33
 8002a20:	68746965 	.word	0x68746965
 8002a24:	74207265 	.word	0x74207265
 8002a28:	6e206568 	.word	0x6e206568
 8002a2c:	20656d61 	.word	0x20656d61
 8002a30:	5320666f 	.word	0x5320666f
 8002a34:	63694d54 	.word	0x63694d54
 8002a38:	6c656f72 	.word	0x6c656f72
 8002a3c:	72746365 	.word	0x72746365
 8002a40:	63696e6f 	.word	0x63696e6f
 8002a44:	6f6e2073 	.word	0x6f6e2073
 8002a48:	68742072 	.word	0x68742072
 8002a4c:	616e2065 	.word	0x616e2065
 8002a50:	2073656d 	.word	0x2073656d
 8002a54:	6920666f 	.word	0x6920666f
 8002a58:	63207374 	.word	0x63207374
 8002a5c:	72746e6f 	.word	0x72746e6f
 8002a60:	74756269 	.word	0x74756269
 8002a64:	0d73726f 	.word	0x0d73726f
 8002a68:	2020200a 	.word	0x2020200a
 8002a6c:	616d2020 	.word	0x616d2020
 8002a70:	65622079 	.word	0x65622079
 8002a74:	65737520 	.word	0x65737520
 8002a78:	6f742064 	.word	0x6f742064
 8002a7c:	646e6520 	.word	0x646e6520
 8002a80:	6573726f 	.word	0x6573726f
 8002a84:	20726f20 	.word	0x20726f20
 8002a88:	6d6f7270 	.word	0x6d6f7270
 8002a8c:	2065746f 	.word	0x2065746f
 8002a90:	646f7270 	.word	0x646f7270
 8002a94:	73746375 	.word	0x73746375
 8002a98:	72656420 	.word	0x72656420
 8002a9c:	64657669 	.word	0x64657669
 8002aa0:	6f726620 	.word	0x6f726620
 8002aa4:	6874206d 	.word	0x6874206d
 8002aa8:	73207369 	.word	0x73207369
 8002aac:	7774666f 	.word	0x7774666f
 8002ab0:	0d657261 	.word	0x0d657261
 8002ab4:	2020200a 	.word	0x2020200a
 8002ab8:	69772020 	.word	0x69772020
 8002abc:	756f6874 	.word	0x756f6874
 8002ac0:	70732074 	.word	0x70732074
 8002ac4:	66696365 	.word	0x66696365
 8002ac8:	70206369 	.word	0x70206369
 8002acc:	726f6972 	.word	0x726f6972
 8002ad0:	69727720 	.word	0x69727720
 8002ad4:	6e657474 	.word	0x6e657474
 8002ad8:	72657020 	.word	0x72657020
 8002adc:	7373696d 	.word	0x7373696d
 8002ae0:	2e6e6f69 	.word	0x2e6e6f69
 8002ae4:	20200a0d 	.word	0x20200a0d
 8002ae8:	48540a0d 	.word	0x48540a0d
 8002aec:	53205349 	.word	0x53205349
 8002af0:	5754464f 	.word	0x5754464f
 8002af4:	20455241 	.word	0x20455241
 8002af8:	50205349 	.word	0x50205349
 8002afc:	49564f52 	.word	0x49564f52
 8002b00:	20444544 	.word	0x20444544
 8002b04:	54205942 	.word	0x54205942
 8002b08:	43204548 	.word	0x43204548
 8002b0c:	5259504f 	.word	0x5259504f
 8002b10:	54484749 	.word	0x54484749
 8002b14:	4c4f4820 	.word	0x4c4f4820
 8002b18:	53524544 	.word	0x53524544
 8002b1c:	444e4120 	.word	0x444e4120
 8002b20:	4e4f4320 	.word	0x4e4f4320
 8002b24:	42495254 	.word	0x42495254
 8002b28:	524f5455 	.word	0x524f5455
 8002b2c:	41222053 	.word	0x41222053
 8002b30:	53492053 	.word	0x53492053
 8002b34:	410a0d22 	.word	0x410a0d22
 8002b38:	4120444e 	.word	0x4120444e
 8002b3c:	4520594e 	.word	0x4520594e
 8002b40:	45525058 	.word	0x45525058
 8002b44:	4f205353 	.word	0x4f205353
 8002b48:	4d492052 	.word	0x4d492052
 8002b4c:	45494c50 	.word	0x45494c50
 8002b50:	41572044 	.word	0x41572044
 8002b54:	4e415252 	.word	0x4e415252
 8002b58:	53454954 	.word	0x53454954
 8002b5c:	4e49202c 	.word	0x4e49202c
 8002b60:	44554c43 	.word	0x44554c43
 8002b64:	2c474e49 	.word	0x2c474e49
 8002b68:	54554220 	.word	0x54554220
 8002b6c:	544f4e20 	.word	0x544f4e20
 8002b70:	4d494c20 	.word	0x4d494c20
 8002b74:	44455449 	.word	0x44455449
 8002b78:	2c4f5420 	.word	0x2c4f5420
 8002b7c:	45485420 	.word	0x45485420
 8002b80:	4d490a0d 	.word	0x4d490a0d
 8002b84:	45494c50 	.word	0x45494c50
 8002b88:	41572044 	.word	0x41572044
 8002b8c:	4e415252 	.word	0x4e415252
 8002b90:	53454954 	.word	0x53454954
 8002b94:	20464f20 	.word	0x20464f20
 8002b98:	4352454d 	.word	0x4352454d
 8002b9c:	544e4148 	.word	0x544e4148
 8002ba0:	4c494241 	.word	0x4c494241
 8002ba4:	20595449 	.word	0x20595449
 8002ba8:	20444e41 	.word	0x20444e41
 8002bac:	4e544946 	.word	0x4e544946
 8002bb0:	20535345 	.word	0x20535345
 8002bb4:	20524f46 	.word	0x20524f46
 8002bb8:	41502041 	.word	0x41502041
 8002bbc:	43495452 	.word	0x43495452
 8002bc0:	52414c55 	.word	0x52414c55
 8002bc4:	52555020 	.word	0x52555020
 8002bc8:	45534f50 	.word	0x45534f50
 8002bcc:	45524120 	.word	0x45524120
 8002bd0:	49440a0d 	.word	0x49440a0d
 8002bd4:	414c4353 	.word	0x414c4353
 8002bd8:	44454d49 	.word	0x44454d49
 8002bdc:	4e49202e 	.word	0x4e49202e
 8002be0:	204f4e20 	.word	0x204f4e20
 8002be4:	4e455645 	.word	0x4e455645
 8002be8:	48532054 	.word	0x48532054
 8002bec:	204c4c41 	.word	0x204c4c41
 8002bf0:	20454854 	.word	0x20454854
 8002bf4:	59504f43 	.word	0x59504f43
 8002bf8:	48474952 	.word	0x48474952
 8002bfc:	4f482054 	.word	0x4f482054
 8002c00:	5245444c 	.word	0x5245444c
 8002c04:	20524f20 	.word	0x20524f20
 8002c08:	544e4f43 	.word	0x544e4f43
 8002c0c:	55424952 	.word	0x55424952
 8002c10:	53524f54 	.word	0x53524f54
 8002c14:	20454220 	.word	0x20454220
 8002c18:	4241494c 	.word	0x4241494c
 8002c1c:	0a0d454c 	.word	0x0a0d454c
 8002c20:	20524f46 	.word	0x20524f46
 8002c24:	20594e41 	.word	0x20594e41
 8002c28:	45524944 	.word	0x45524944
 8002c2c:	202c5443 	.word	0x202c5443
 8002c30:	49444e49 	.word	0x49444e49
 8002c34:	54434552 	.word	0x54434552
 8002c38:	4e49202c 	.word	0x4e49202c
 8002c3c:	45444943 	.word	0x45444943
 8002c40:	4c41544e 	.word	0x4c41544e
 8002c44:	5053202c 	.word	0x5053202c
 8002c48:	41494345 	.word	0x41494345
 8002c4c:	45202c4c 	.word	0x45202c4c
 8002c50:	504d4558 	.word	0x504d4558
 8002c54:	5952414c 	.word	0x5952414c
 8002c58:	524f202c 	.word	0x524f202c
 8002c5c:	4e4f4320 	.word	0x4e4f4320
 8002c60:	55514553 	.word	0x55514553
 8002c64:	49544e45 	.word	0x49544e45
 8002c68:	0a0d4c41 	.word	0x0a0d4c41
 8002c6c:	414d4144 	.word	0x414d4144
 8002c70:	20534547 	.word	0x20534547
 8002c74:	434e4928 	.word	0x434e4928
 8002c78:	4944554c 	.word	0x4944554c
 8002c7c:	202c474e 	.word	0x202c474e
 8002c80:	20545542 	.word	0x20545542
 8002c84:	20544f4e 	.word	0x20544f4e
 8002c88:	494d494c 	.word	0x494d494c
 8002c8c:	20444554 	.word	0x20444554
 8002c90:	202c4f54 	.word	0x202c4f54
 8002c94:	434f5250 	.word	0x434f5250
 8002c98:	4d455255 	.word	0x4d455255
 8002c9c:	20544e45 	.word	0x20544e45
 8002ca0:	5320464f 	.word	0x5320464f
 8002ca4:	54534255 	.word	0x54534255
 8002ca8:	54555449 	.word	0x54555449
 8002cac:	4f472045 	.word	0x4f472045
 8002cb0:	2053444f 	.word	0x2053444f
 8002cb4:	0a0d524f 	.word	0x0a0d524f
 8002cb8:	56524553 	.word	0x56524553
 8002cbc:	53454349 	.word	0x53454349
 8002cc0:	4f4c203b 	.word	0x4f4c203b
 8002cc4:	4f205353 	.word	0x4f205353
 8002cc8:	53552046 	.word	0x53552046
 8002ccc:	44202c45 	.word	0x44202c45
 8002cd0:	2c415441 	.word	0x2c415441
 8002cd4:	20524f20 	.word	0x20524f20
 8002cd8:	464f5250 	.word	0x464f5250
 8002cdc:	3b535449 	.word	0x3b535449
 8002ce0:	20524f20 	.word	0x20524f20
 8002ce4:	49535542 	.word	0x49535542
 8002ce8:	5353454e 	.word	0x5353454e
 8002cec:	544e4920 	.word	0x544e4920
 8002cf0:	55525245 	.word	0x55525245
 8002cf4:	4f495450 	.word	0x4f495450
 8002cf8:	4820294e 	.word	0x4820294e
 8002cfc:	5645574f 	.word	0x5645574f
 8002d00:	0a0d5245 	.word	0x0a0d5245
 8002d04:	53554143 	.word	0x53554143
 8002d08:	41204445 	.word	0x41204445
 8002d0c:	4f20444e 	.word	0x4f20444e
 8002d10:	4e41204e 	.word	0x4e41204e
 8002d14:	48542059 	.word	0x48542059
 8002d18:	59524f45 	.word	0x59524f45
 8002d1c:	20464f20 	.word	0x20464f20
 8002d20:	4241494c 	.word	0x4241494c
 8002d24:	54494c49 	.word	0x54494c49
 8002d28:	57202c59 	.word	0x57202c59
 8002d2c:	48544548 	.word	0x48544548
 8002d30:	49205245 	.word	0x49205245
 8002d34:	4f43204e 	.word	0x4f43204e
 8002d38:	4152544e 	.word	0x4152544e
 8002d3c:	202c5443 	.word	0x202c5443
 8002d40:	49525453 	.word	0x49525453
 8002d44:	4c205443 	.word	0x4c205443
 8002d48:	49424149 	.word	0x49424149
 8002d4c:	5954494c 	.word	0x5954494c
 8002d50:	4f0a0d2c 	.word	0x4f0a0d2c
 8002d54:	4f542052 	.word	0x4f542052
 8002d58:	28205452 	.word	0x28205452
 8002d5c:	4c434e49 	.word	0x4c434e49
 8002d60:	4e494455 	.word	0x4e494455
 8002d64:	454e2047 	.word	0x454e2047
 8002d68:	47494c47 	.word	0x47494c47
 8002d6c:	45434e45 	.word	0x45434e45
 8002d70:	20524f20 	.word	0x20524f20
 8002d74:	4548544f 	.word	0x4548544f
 8002d78:	53495752 	.word	0x53495752
 8002d7c:	41202945 	.word	0x41202945
 8002d80:	49534952 	.word	0x49534952
 8002d84:	4920474e 	.word	0x4920474e
 8002d88:	4e41204e 	.word	0x4e41204e
 8002d8c:	41572059 	.word	0x41572059
 8002d90:	554f2059 	.word	0x554f2059
 8002d94:	464f2054 	.word	0x464f2054
 8002d98:	45485420 	.word	0x45485420
 8002d9c:	45535520 	.word	0x45535520
 8002da0:	464f0a0d 	.word	0x464f0a0d
 8002da4:	49485420 	.word	0x49485420
 8002da8:	4f532053 	.word	0x4f532053
 8002dac:	41575446 	.word	0x41575446
 8002db0:	202c4552 	.word	0x202c4552
 8002db4:	4e455645 	.word	0x4e455645
 8002db8:	20464920 	.word	0x20464920
 8002dbc:	49564441 	.word	0x49564441
 8002dc0:	20444553 	.word	0x20444553
 8002dc4:	5420464f 	.word	0x5420464f
 8002dc8:	50204548 	.word	0x50204548
 8002dcc:	4953534f 	.word	0x4953534f
 8002dd0:	494c4942 	.word	0x494c4942
 8002dd4:	4f205954 	.word	0x4f205954
 8002dd8:	55532046 	.word	0x55532046
 8002ddc:	44204843 	.word	0x44204843
 8002de0:	47414d41 	.word	0x47414d41
 8002de4:	0a0d2e45 	.word	0x0a0d2e45
 8002de8:	2a2a2a2a 	.word	0x2a2a2a2a
 8002dec:	2a2a2a2a 	.word	0x2a2a2a2a
 8002df0:	2a2a2a2a 	.word	0x2a2a2a2a
 8002df4:	2a2a2a2a 	.word	0x2a2a2a2a
 8002df8:	2a2a2a2a 	.word	0x2a2a2a2a
 8002dfc:	2a2a2a2a 	.word	0x2a2a2a2a
 8002e00:	2a2a2a2a 	.word	0x2a2a2a2a
 8002e04:	2a2a2a2a 	.word	0x2a2a2a2a
 8002e08:	2a2a2a2a 	.word	0x2a2a2a2a
 8002e0c:	2a2a2a2a 	.word	0x2a2a2a2a
 8002e10:	2a2a2a2a 	.word	0x2a2a2a2a
 8002e14:	2a2a2a2a 	.word	0x2a2a2a2a
 8002e18:	2a2a2a2a 	.word	0x2a2a2a2a
 8002e1c:	2a2a2a2a 	.word	0x2a2a2a2a
 8002e20:	2a2a2a2a 	.word	0x2a2a2a2a
 8002e24:	2a2a2a2a 	.word	0x2a2a2a2a
 8002e28:	2a2a2a2a 	.word	0x2a2a2a2a
 8002e2c:	2a2a2a2a 	.word	0x2a2a2a2a
 8002e30:	2a2a2a2a 	.word	0x2a2a2a2a
 8002e34:	2a2a2a2a 	.word	0x2a2a2a2a
 8002e38:	0a0d2a2a 	.word	0x0a0d2a2a
 8002e3c:	62696843 	.word	0x62696843
 8002e40:	20534f69 	.word	0x20534f69
 8002e44:	6f43202d 	.word	0x6f43202d
 8002e48:	69727970 	.word	0x69727970
 8002e4c:	20746867 	.word	0x20746867
 8002e50:	20294328 	.word	0x20294328
 8002e54:	36303032 	.word	0x36303032
 8002e58:	30322e2e 	.word	0x30322e2e
 8002e5c:	47203631 	.word	0x47203631
 8002e60:	61766f69 	.word	0x61766f69
 8002e64:	20696e6e 	.word	0x20696e6e
 8002e68:	53206944 	.word	0x53206944
 8002e6c:	6f697269 	.word	0x6f697269
 8002e70:	0a0d0a0d 	.word	0x0a0d0a0d
 8002e74:	6563694c 	.word	0x6563694c
 8002e78:	6465736e 	.word	0x6465736e
 8002e7c:	646e7520 	.word	0x646e7520
 8002e80:	74207265 	.word	0x74207265
 8002e84:	41206568 	.word	0x41206568
 8002e88:	68636170 	.word	0x68636170
 8002e8c:	694c2065 	.word	0x694c2065
 8002e90:	736e6563 	.word	0x736e6563
 8002e94:	56202c65 	.word	0x56202c65
 8002e98:	69737265 	.word	0x69737265
 8002e9c:	32206e6f 	.word	0x32206e6f
 8002ea0:	2820302e 	.word	0x2820302e
 8002ea4:	20656874 	.word	0x20656874
 8002ea8:	63694c22 	.word	0x63694c22
 8002eac:	65736e65 	.word	0x65736e65
 8002eb0:	0d3b2922 	.word	0x0d3b2922
 8002eb4:	756f790a 	.word	0x756f790a
 8002eb8:	79616d20 	.word	0x79616d20
 8002ebc:	746f6e20 	.word	0x746f6e20
 8002ec0:	65737520 	.word	0x65737520
 8002ec4:	69687420 	.word	0x69687420
 8002ec8:	69662073 	.word	0x69662073
 8002ecc:	6520656c 	.word	0x6520656c
 8002ed0:	70656378 	.word	0x70656378
 8002ed4:	6e692074 	.word	0x6e692074
 8002ed8:	6d6f6320 	.word	0x6d6f6320
 8002edc:	61696c70 	.word	0x61696c70
 8002ee0:	2065636e 	.word	0x2065636e
 8002ee4:	68746977 	.word	0x68746977
 8002ee8:	65687420 	.word	0x65687420
 8002eec:	63694c20 	.word	0x63694c20
 8002ef0:	65736e65 	.word	0x65736e65
 8002ef4:	590a0d2e 	.word	0x590a0d2e
 8002ef8:	6d20756f 	.word	0x6d20756f
 8002efc:	6f207961 	.word	0x6f207961
 8002f00:	69617462 	.word	0x69617462
 8002f04:	2061206e 	.word	0x2061206e
 8002f08:	79706f63 	.word	0x79706f63
 8002f0c:	20666f20 	.word	0x20666f20
 8002f10:	20656874 	.word	0x20656874
 8002f14:	6563694c 	.word	0x6563694c
 8002f18:	2065736e 	.word	0x2065736e
 8002f1c:	0a0d7461 	.word	0x0a0d7461
 8002f20:	20200a0d 	.word	0x20200a0d
 8002f24:	74682020 	.word	0x74682020
 8002f28:	2f3a7074 	.word	0x2f3a7074
 8002f2c:	7777772f 	.word	0x7777772f
 8002f30:	6170612e 	.word	0x6170612e
 8002f34:	2e656863 	.word	0x2e656863
 8002f38:	2f67726f 	.word	0x2f67726f
 8002f3c:	6563696c 	.word	0x6563696c
 8002f40:	7365736e 	.word	0x7365736e
 8002f44:	43494c2f 	.word	0x43494c2f
 8002f48:	45534e45 	.word	0x45534e45
 8002f4c:	302e322d 	.word	0x302e322d
 8002f50:	0a0d0a0d 	.word	0x0a0d0a0d
 8002f54:	656c6e55 	.word	0x656c6e55
 8002f58:	72207373 	.word	0x72207373
 8002f5c:	69757165 	.word	0x69757165
 8002f60:	20646572 	.word	0x20646572
 8002f64:	61207962 	.word	0x61207962
 8002f68:	696c7070 	.word	0x696c7070
 8002f6c:	6c626163 	.word	0x6c626163
 8002f70:	616c2065 	.word	0x616c2065
 8002f74:	726f2077 	.word	0x726f2077
 8002f78:	72676120 	.word	0x72676120
 8002f7c:	20646565 	.word	0x20646565
 8002f80:	69206f74 	.word	0x69206f74
 8002f84:	7277206e 	.word	0x7277206e
 8002f88:	6e697469 	.word	0x6e697469
 8002f8c:	73202c67 	.word	0x73202c67
 8002f90:	7774666f 	.word	0x7774666f
 8002f94:	0d657261 	.word	0x0d657261
 8002f98:	7369640a 	.word	0x7369640a
 8002f9c:	62697274 	.word	0x62697274
 8002fa0:	64657475 	.word	0x64657475
 8002fa4:	646e7520 	.word	0x646e7520
 8002fa8:	74207265 	.word	0x74207265
 8002fac:	4c206568 	.word	0x4c206568
 8002fb0:	6e656369 	.word	0x6e656369
 8002fb4:	69206573 	.word	0x69206573
 8002fb8:	69642073 	.word	0x69642073
 8002fbc:	69727473 	.word	0x69727473
 8002fc0:	65747562 	.word	0x65747562
 8002fc4:	6e6f2064 	.word	0x6e6f2064
 8002fc8:	206e6120 	.word	0x206e6120
 8002fcc:	20534122 	.word	0x20534122
 8002fd0:	20225349 	.word	0x20225349
 8002fd4:	49534142 	.word	0x49534142
 8002fd8:	0a0d2c53 	.word	0x0a0d2c53
 8002fdc:	48544957 	.word	0x48544957
 8002fe0:	2054554f 	.word	0x2054554f
 8002fe4:	52524157 	.word	0x52524157
 8002fe8:	49544e41 	.word	0x49544e41
 8002fec:	4f205345 	.word	0x4f205345
 8002ff0:	4f432052 	.word	0x4f432052
 8002ff4:	5449444e 	.word	0x5449444e
 8002ff8:	534e4f49 	.word	0x534e4f49
 8002ffc:	20464f20 	.word	0x20464f20
 8003000:	20594e41 	.word	0x20594e41
 8003004:	444e494b 	.word	0x444e494b
 8003008:	6965202c 	.word	0x6965202c
 800300c:	72656874 	.word	0x72656874
 8003010:	70786520 	.word	0x70786520
 8003014:	73736572 	.word	0x73736572
 8003018:	20726f20 	.word	0x20726f20
 800301c:	6c706d69 	.word	0x6c706d69
 8003020:	2e646569 	.word	0x2e646569
 8003024:	65530a0d 	.word	0x65530a0d
 8003028:	68742065 	.word	0x68742065
 800302c:	694c2065 	.word	0x694c2065
 8003030:	736e6563 	.word	0x736e6563
 8003034:	6f662065 	.word	0x6f662065
 8003038:	68742072 	.word	0x68742072
 800303c:	70732065 	.word	0x70732065
 8003040:	66696365 	.word	0x66696365
 8003044:	6c206369 	.word	0x6c206369
 8003048:	75676e61 	.word	0x75676e61
 800304c:	20656761 	.word	0x20656761
 8003050:	65766f67 	.word	0x65766f67
 8003054:	6e696e72 	.word	0x6e696e72
 8003058:	65702067 	.word	0x65702067
 800305c:	73696d72 	.word	0x73696d72
 8003060:	6e6f6973 	.word	0x6e6f6973
 8003064:	6e612073 	.word	0x6e612073
 8003068:	6c0a0d64 	.word	0x6c0a0d64
 800306c:	74696d69 	.word	0x74696d69
 8003070:	6f697461 	.word	0x6f697461
 8003074:	7520736e 	.word	0x7520736e
 8003078:	7265646e 	.word	0x7265646e
 800307c:	65687420 	.word	0x65687420
 8003080:	63694c20 	.word	0x63694c20
 8003084:	65736e65 	.word	0x65736e65
 8003088:	2a0a0d2e 	.word	0x2a0a0d2e
 800308c:	2a2a2a2a 	.word	0x2a2a2a2a
 8003090:	2a2a2a2a 	.word	0x2a2a2a2a
 8003094:	2a2a2a2a 	.word	0x2a2a2a2a
 8003098:	2a2a2a2a 	.word	0x2a2a2a2a
 800309c:	2a2a2a2a 	.word	0x2a2a2a2a
 80030a0:	2a2a2a2a 	.word	0x2a2a2a2a
 80030a4:	2a2a2a2a 	.word	0x2a2a2a2a
 80030a8:	2a2a2a2a 	.word	0x2a2a2a2a
 80030ac:	2a2a2a2a 	.word	0x2a2a2a2a
 80030b0:	2a2a2a2a 	.word	0x2a2a2a2a
 80030b4:	2a2a2a2a 	.word	0x2a2a2a2a
 80030b8:	2a2a2a2a 	.word	0x2a2a2a2a
 80030bc:	2a2a2a2a 	.word	0x2a2a2a2a
 80030c0:	2a2a2a2a 	.word	0x2a2a2a2a
 80030c4:	2a2a2a2a 	.word	0x2a2a2a2a
 80030c8:	2a2a2a2a 	.word	0x2a2a2a2a
 80030cc:	2a2a2a2a 	.word	0x2a2a2a2a
 80030d0:	2a2a2a2a 	.word	0x2a2a2a2a
 80030d4:	2a2a2a2a 	.word	0x2a2a2a2a
 80030d8:	2a2a2a2a 	.word	0x2a2a2a2a
 80030dc:	430a0d2a 	.word	0x430a0d2a
 80030e0:	7279706f 	.word	0x7279706f
 80030e4:	74686769 	.word	0x74686769
 80030e8:	29632820 	.word	0x29632820
 80030ec:	31303220 	.word	0x31303220
 80030f0:	30322d37 	.word	0x30322d37
 80030f4:	202c3831 	.word	0x202c3831
 80030f8:	74726542 	.word	0x74726542
 80030fc:	20646c6f 	.word	0x20646c6f
 8003100:	206e6156 	.word	0x206e6156
 8003104:	206e6564 	.word	0x206e6564
 8003108:	67726542 	.word	0x67726542
 800310c:	76282068 	.word	0x76282068
 8003110:	65646e61 	.word	0x65646e61
 8003114:	7265626e 	.word	0x7265626e
 8003118:	62406867 	.word	0x62406867
 800311c:	6f747265 	.word	0x6f747265
 8003120:	6f2e646c 	.word	0x6f2e646c
 8003124:	0d296772 	.word	0x0d296772
 8003128:	6c6c410a 	.word	0x6c6c410a
 800312c:	67697220 	.word	0x67697220
 8003130:	20737468 	.word	0x20737468
 8003134:	65736572 	.word	0x65736572
 8003138:	64657672 	.word	0x64657672
 800313c:	540a0d2e 	.word	0x540a0d2e
 8003140:	20736968 	.word	0x20736968
 8003144:	6b726f77 	.word	0x6b726f77
 8003148:	73616820 	.word	0x73616820
 800314c:	65656220 	.word	0x65656220
 8003150:	6564206e 	.word	0x6564206e
 8003154:	6f6c6576 	.word	0x6f6c6576
 8003158:	20646570 	.word	0x20646570
 800315c:	73206f74 	.word	0x73206f74
 8003160:	6f707075 	.word	0x6f707075
 8003164:	72207472 	.word	0x72207472
 8003168:	61657365 	.word	0x61657365
 800316c:	20686372 	.word	0x20686372
 8003170:	646e7566 	.word	0x646e7566
 8003174:	62206465 	.word	0x62206465
 8003178:	220a0d79 	.word	0x220a0d79
 800317c:	646e7546 	.word	0x646e7546
 8003180:	726f6620 	.word	0x726f6620
 8003184:	69635320 	.word	0x69635320
 8003188:	69746e65 	.word	0x69746e65
 800318c:	20636966 	.word	0x20636966
 8003190:	65736552 	.word	0x65736552
 8003194:	68637261 	.word	0x68637261
 8003198:	6c46202c 	.word	0x6c46202c
 800319c:	65646e61 	.word	0x65646e61
 80031a0:	20227372 	.word	0x20227372
 80031a4:	572e4628 	.word	0x572e4628
 80031a8:	2d2e4f2e 	.word	0x2d2e4f2e
 80031ac:	61616c56 	.word	0x61616c56
 80031b0:	7265646e 	.word	0x7265646e
 80031b4:	2e296e65 	.word	0x2e296e65
 80031b8:	0a0d0a0d 	.word	0x0a0d0a0d
 80031bc:	69646552 	.word	0x69646552
 80031c0:	69727473 	.word	0x69727473
 80031c4:	69747562 	.word	0x69747562
 80031c8:	61206e6f 	.word	0x61206e6f
 80031cc:	7520646e 	.word	0x7520646e
 80031d0:	69206573 	.word	0x69206573
 80031d4:	6f73206e 	.word	0x6f73206e
 80031d8:	65637275 	.word	0x65637275
 80031dc:	646e6120 	.word	0x646e6120
 80031e0:	6e696220 	.word	0x6e696220
 80031e4:	20797261 	.word	0x20797261
 80031e8:	6d726f66 	.word	0x6d726f66
 80031ec:	77202c73 	.word	0x77202c73
 80031f0:	20687469 	.word	0x20687469
 80031f4:	7720726f 	.word	0x7720726f
 80031f8:	6f687469 	.word	0x6f687469
 80031fc:	0a0d7475 	.word	0x0a0d7475
 8003200:	69646f6d 	.word	0x69646f6d
 8003204:	61636966 	.word	0x61636966
 8003208:	6e6f6974 	.word	0x6e6f6974
 800320c:	7261202c 	.word	0x7261202c
 8003210:	65702065 	.word	0x65702065
 8003214:	74696d72 	.word	0x74696d72
 8003218:	20646574 	.word	0x20646574
 800321c:	766f7270 	.word	0x766f7270
 8003220:	64656469 	.word	0x64656469
 8003224:	61687420 	.word	0x61687420
 8003228:	68742074 	.word	0x68742074
 800322c:	6f662065 	.word	0x6f662065
 8003230:	776f6c6c 	.word	0x776f6c6c
 8003234:	20676e69 	.word	0x20676e69
 8003238:	646e6f63 	.word	0x646e6f63
 800323c:	6f697469 	.word	0x6f697469
 8003240:	6120736e 	.word	0x6120736e
 8003244:	6d206572 	.word	0x6d206572
 8003248:	0d3a7465 	.word	0x0d3a7465
 800324c:	2020200a 	.word	0x2020200a
 8003250:	52202a20 	.word	0x52202a20
 8003254:	73696465 	.word	0x73696465
 8003258:	62697274 	.word	0x62697274
 800325c:	6f697475 	.word	0x6f697475
 8003260:	6f20736e 	.word	0x6f20736e
 8003264:	6f732066 	.word	0x6f732066
 8003268:	65637275 	.word	0x65637275
 800326c:	646f6320 	.word	0x646f6320
 8003270:	756d2065 	.word	0x756d2065
 8003274:	72207473 	.word	0x72207473
 8003278:	69617465 	.word	0x69617465
 800327c:	6874206e 	.word	0x6874206e
 8003280:	62612065 	.word	0x62612065
 8003284:	2065766f 	.word	0x2065766f
 8003288:	79706f63 	.word	0x79706f63
 800328c:	68676972 	.word	0x68676972
 8003290:	200a0d74 	.word	0x200a0d74
 8003294:	20202020 	.word	0x20202020
 8003298:	746f6e20 	.word	0x746f6e20
 800329c:	2c656369 	.word	0x2c656369
 80032a0:	69687420 	.word	0x69687420
 80032a4:	696c2073 	.word	0x696c2073
 80032a8:	6f207473 	.word	0x6f207473
 80032ac:	6f632066 	.word	0x6f632066
 80032b0:	7469646e 	.word	0x7469646e
 80032b4:	736e6f69 	.word	0x736e6f69
 80032b8:	646e6120 	.word	0x646e6120
 80032bc:	65687420 	.word	0x65687420
 80032c0:	6c6f6620 	.word	0x6c6f6620
 80032c4:	69776f6c 	.word	0x69776f6c
 80032c8:	6420676e 	.word	0x6420676e
 80032cc:	6c637369 	.word	0x6c637369
 80032d0:	656d6961 	.word	0x656d6961
 80032d4:	0a0d2e72 	.word	0x0a0d2e72
 80032d8:	20202020 	.word	0x20202020
 80032dc:	6552202a 	.word	0x6552202a
 80032e0:	74736964 	.word	0x74736964
 80032e4:	75626972 	.word	0x75626972
 80032e8:	6e6f6974 	.word	0x6e6f6974
 80032ec:	6e692073 	.word	0x6e692073
 80032f0:	6e696220 	.word	0x6e696220
 80032f4:	20797261 	.word	0x20797261
 80032f8:	6d726f66 	.word	0x6d726f66
 80032fc:	73756d20 	.word	0x73756d20
 8003300:	65722074 	.word	0x65722074
 8003304:	646f7270 	.word	0x646f7270
 8003308:	20656375 	.word	0x20656375
 800330c:	20656874 	.word	0x20656874
 8003310:	766f6261 	.word	0x766f6261
 8003314:	6f632065 	.word	0x6f632065
 8003318:	69727970 	.word	0x69727970
 800331c:	0d746867 	.word	0x0d746867
 8003320:	2020200a 	.word	0x2020200a
 8003324:	6e202020 	.word	0x6e202020
 8003328:	6369746f 	.word	0x6369746f
 800332c:	74202c65 	.word	0x74202c65
 8003330:	20736968 	.word	0x20736968
 8003334:	7473696c 	.word	0x7473696c
 8003338:	20666f20 	.word	0x20666f20
 800333c:	646e6f63 	.word	0x646e6f63
 8003340:	6f697469 	.word	0x6f697469
 8003344:	6120736e 	.word	0x6120736e
 8003348:	7420646e 	.word	0x7420646e
 800334c:	66206568 	.word	0x66206568
 8003350:	6f6c6c6f 	.word	0x6f6c6c6f
 8003354:	676e6977 	.word	0x676e6977
 8003358:	73696420 	.word	0x73696420
 800335c:	69616c63 	.word	0x69616c63
 8003360:	2072656d 	.word	0x2072656d
 8003364:	74206e69 	.word	0x74206e69
 8003368:	0a0d6568 	.word	0x0a0d6568
 800336c:	20202020 	.word	0x20202020
 8003370:	6f642020 	.word	0x6f642020
 8003374:	656d7563 	.word	0x656d7563
 8003378:	7461746e 	.word	0x7461746e
 800337c:	206e6f69 	.word	0x206e6f69
 8003380:	2f646e61 	.word	0x2f646e61
 8003384:	6f20726f 	.word	0x6f20726f
 8003388:	72656874 	.word	0x72656874
 800338c:	74616d20 	.word	0x74616d20
 8003390:	61697265 	.word	0x61697265
 8003394:	7020736c 	.word	0x7020736c
 8003398:	69766f72 	.word	0x69766f72
 800339c:	20646564 	.word	0x20646564
 80033a0:	68746977 	.word	0x68746977
 80033a4:	65687420 	.word	0x65687420
 80033a8:	73696420 	.word	0x73696420
 80033ac:	62697274 	.word	0x62697274
 80033b0:	6f697475 	.word	0x6f697475
 80033b4:	0a0d2e6e 	.word	0x0a0d2e6e
 80033b8:	20202020 	.word	0x20202020
 80033bc:	654e202a 	.word	0x654e202a
 80033c0:	65687469 	.word	0x65687469
 80033c4:	68742072 	.word	0x68742072
 80033c8:	616e2065 	.word	0x616e2065
 80033cc:	6f20656d 	.word	0x6f20656d
 80033d0:	68742066 	.word	0x68742066
 80033d4:	75612065 	.word	0x75612065
 80033d8:	726f6874 	.word	0x726f6874
 80033dc:	726f6e20 	.word	0x726f6e20
 80033e0:	65687420 	.word	0x65687420
 80033e4:	20200a0d 	.word	0x20200a0d
 80033e8:	20202020 	.word	0x20202020
 80033ec:	656d616e 	.word	0x656d616e
 80033f0:	666f2073 	.word	0x666f2073
 80033f4:	73746920 	.word	0x73746920
 80033f8:	6e6f6320 	.word	0x6e6f6320
 80033fc:	62697274 	.word	0x62697274
 8003400:	726f7475 	.word	0x726f7475
 8003404:	616d2073 	.word	0x616d2073
 8003408:	65622079 	.word	0x65622079
 800340c:	65737520 	.word	0x65737520
 8003410:	6f742064 	.word	0x6f742064
 8003414:	646e6520 	.word	0x646e6520
 8003418:	6573726f 	.word	0x6573726f
 800341c:	20726f20 	.word	0x20726f20
 8003420:	6d6f7270 	.word	0x6d6f7270
 8003424:	2065746f 	.word	0x2065746f
 8003428:	646f7270 	.word	0x646f7270
 800342c:	73746375 	.word	0x73746375
 8003430:	20200a0d 	.word	0x20200a0d
 8003434:	20202020 	.word	0x20202020
 8003438:	69726564 	.word	0x69726564
 800343c:	20646576 	.word	0x20646576
 8003440:	6d6f7266 	.word	0x6d6f7266
 8003444:	69687420 	.word	0x69687420
 8003448:	6f732073 	.word	0x6f732073
 800344c:	61777466 	.word	0x61777466
 8003450:	77206572 	.word	0x77206572
 8003454:	6f687469 	.word	0x6f687469
 8003458:	73207475 	.word	0x73207475
 800345c:	69636570 	.word	0x69636570
 8003460:	20636966 	.word	0x20636966
 8003464:	6f697270 	.word	0x6f697270
 8003468:	72772072 	.word	0x72772072
 800346c:	65747469 	.word	0x65747469
 8003470:	6570206e 	.word	0x6570206e
 8003474:	73696d72 	.word	0x73696d72
 8003478:	6e6f6973 	.word	0x6e6f6973
 800347c:	0d0a0d2e 	.word	0x0d0a0d2e
 8003480:	4948540a 	.word	0x4948540a
 8003484:	4f532053 	.word	0x4f532053
 8003488:	41575446 	.word	0x41575446
 800348c:	49204552 	.word	0x49204552
 8003490:	52502053 	.word	0x52502053
 8003494:	4449564f 	.word	0x4449564f
 8003498:	42204445 	.word	0x42204445
 800349c:	48542059 	.word	0x48542059
 80034a0:	4f432045 	.word	0x4f432045
 80034a4:	49525950 	.word	0x49525950
 80034a8:	20544847 	.word	0x20544847
 80034ac:	444c4f48 	.word	0x444c4f48
 80034b0:	20535245 	.word	0x20535245
 80034b4:	20444e41 	.word	0x20444e41
 80034b8:	544e4f43 	.word	0x544e4f43
 80034bc:	55424952 	.word	0x55424952
 80034c0:	53524f54 	.word	0x53524f54
 80034c4:	53412220 	.word	0x53412220
 80034c8:	22534920 	.word	0x22534920
 80034cc:	444e4120 	.word	0x444e4120
 80034d0:	4e410a0d 	.word	0x4e410a0d
 80034d4:	58452059 	.word	0x58452059
 80034d8:	53455250 	.word	0x53455250
 80034dc:	524f2053 	.word	0x524f2053
 80034e0:	504d4920 	.word	0x504d4920
 80034e4:	4445494c 	.word	0x4445494c
 80034e8:	52415720 	.word	0x52415720
 80034ec:	544e4152 	.word	0x544e4152
 80034f0:	2c534549 	.word	0x2c534549
 80034f4:	434e4920 	.word	0x434e4920
 80034f8:	4944554c 	.word	0x4944554c
 80034fc:	202c474e 	.word	0x202c474e
 8003500:	20545542 	.word	0x20545542
 8003504:	20544f4e 	.word	0x20544f4e
 8003508:	494d494c 	.word	0x494d494c
 800350c:	20444554 	.word	0x20444554
 8003510:	202c4f54 	.word	0x202c4f54
 8003514:	20454854 	.word	0x20454854
 8003518:	4c504d49 	.word	0x4c504d49
 800351c:	0d444549 	.word	0x0d444549
 8003520:	5241570a 	.word	0x5241570a
 8003524:	544e4152 	.word	0x544e4152
 8003528:	20534549 	.word	0x20534549
 800352c:	4d20464f 	.word	0x4d20464f
 8003530:	48435245 	.word	0x48435245
 8003534:	41544e41 	.word	0x41544e41
 8003538:	494c4942 	.word	0x494c4942
 800353c:	41205954 	.word	0x41205954
 8003540:	4620444e 	.word	0x4620444e
 8003544:	454e5449 	.word	0x454e5449
 8003548:	46205353 	.word	0x46205353
 800354c:	4120524f 	.word	0x4120524f
 8003550:	52415020 	.word	0x52415020
 8003554:	55434954 	.word	0x55434954
 8003558:	2052414c 	.word	0x2052414c
 800355c:	50525550 	.word	0x50525550
 8003560:	2045534f 	.word	0x2045534f
 8003564:	0d455241 	.word	0x0d455241
 8003568:	5349440a 	.word	0x5349440a
 800356c:	49414c43 	.word	0x49414c43
 8003570:	2e44454d 	.word	0x2e44454d
 8003574:	204e4920 	.word	0x204e4920
 8003578:	45204f4e 	.word	0x45204f4e
 800357c:	544e4556 	.word	0x544e4556
 8003580:	41485320 	.word	0x41485320
 8003584:	54204c4c 	.word	0x54204c4c
 8003588:	41204548 	.word	0x41204548
 800358c:	4f485455 	.word	0x4f485455
 8003590:	524f2052 	.word	0x524f2052
 8003594:	53494420 	.word	0x53494420
 8003598:	42495254 	.word	0x42495254
 800359c:	524f5455 	.word	0x524f5455
 80035a0:	20454220 	.word	0x20454220
 80035a4:	4241494c 	.word	0x4241494c
 80035a8:	4620454c 	.word	0x4620454c
 80035ac:	4120524f 	.word	0x4120524f
 80035b0:	0a0d594e 	.word	0x0a0d594e
 80035b4:	45524944 	.word	0x45524944
 80035b8:	202c5443 	.word	0x202c5443
 80035bc:	49444e49 	.word	0x49444e49
 80035c0:	54434552 	.word	0x54434552
 80035c4:	4e49202c 	.word	0x4e49202c
 80035c8:	45444943 	.word	0x45444943
 80035cc:	4c41544e 	.word	0x4c41544e
 80035d0:	5053202c 	.word	0x5053202c
 80035d4:	41494345 	.word	0x41494345
 80035d8:	45202c4c 	.word	0x45202c4c
 80035dc:	504d4558 	.word	0x504d4558
 80035e0:	5952414c 	.word	0x5952414c
 80035e4:	524f202c 	.word	0x524f202c
 80035e8:	4e4f4320 	.word	0x4e4f4320
 80035ec:	55514553 	.word	0x55514553
 80035f0:	49544e45 	.word	0x49544e45
 80035f4:	44204c41 	.word	0x44204c41
 80035f8:	47414d41 	.word	0x47414d41
 80035fc:	0a0d5345 	.word	0x0a0d5345
 8003600:	434e4928 	.word	0x434e4928
 8003604:	4944554c 	.word	0x4944554c
 8003608:	202c474e 	.word	0x202c474e
 800360c:	20545542 	.word	0x20545542
 8003610:	20544f4e 	.word	0x20544f4e
 8003614:	494d494c 	.word	0x494d494c
 8003618:	20444554 	.word	0x20444554
 800361c:	202c4f54 	.word	0x202c4f54
 8003620:	434f5250 	.word	0x434f5250
 8003624:	4d455255 	.word	0x4d455255
 8003628:	20544e45 	.word	0x20544e45
 800362c:	5320464f 	.word	0x5320464f
 8003630:	54534255 	.word	0x54534255
 8003634:	54555449 	.word	0x54555449
 8003638:	4f472045 	.word	0x4f472045
 800363c:	2053444f 	.word	0x2053444f
 8003640:	5320524f 	.word	0x5320524f
 8003644:	49565245 	.word	0x49565245
 8003648:	3b534543 	.word	0x3b534543
 800364c:	4f4c0a0d 	.word	0x4f4c0a0d
 8003650:	4f205353 	.word	0x4f205353
 8003654:	53552046 	.word	0x53552046
 8003658:	44202c45 	.word	0x44202c45
 800365c:	2c415441 	.word	0x2c415441
 8003660:	20524f20 	.word	0x20524f20
 8003664:	464f5250 	.word	0x464f5250
 8003668:	3b535449 	.word	0x3b535449
 800366c:	20524f20 	.word	0x20524f20
 8003670:	49535542 	.word	0x49535542
 8003674:	5353454e 	.word	0x5353454e
 8003678:	544e4920 	.word	0x544e4920
 800367c:	55525245 	.word	0x55525245
 8003680:	4f495450 	.word	0x4f495450
 8003684:	4820294e 	.word	0x4820294e
 8003688:	5645574f 	.word	0x5645574f
 800368c:	43205245 	.word	0x43205245
 8003690:	45535541 	.word	0x45535541
 8003694:	4e412044 	.word	0x4e412044
 8003698:	4f0a0d44 	.word	0x4f0a0d44
 800369c:	4e41204e 	.word	0x4e41204e
 80036a0:	48542059 	.word	0x48542059
 80036a4:	59524f45 	.word	0x59524f45
 80036a8:	20464f20 	.word	0x20464f20
 80036ac:	4241494c 	.word	0x4241494c
 80036b0:	54494c49 	.word	0x54494c49
 80036b4:	57202c59 	.word	0x57202c59
 80036b8:	48544548 	.word	0x48544548
 80036bc:	49205245 	.word	0x49205245
 80036c0:	4f43204e 	.word	0x4f43204e
 80036c4:	4152544e 	.word	0x4152544e
 80036c8:	202c5443 	.word	0x202c5443
 80036cc:	49525453 	.word	0x49525453
 80036d0:	4c205443 	.word	0x4c205443
 80036d4:	49424149 	.word	0x49424149
 80036d8:	5954494c 	.word	0x5954494c
 80036dc:	524f202c 	.word	0x524f202c
 80036e0:	524f5420 	.word	0x524f5420
 80036e4:	280a0d54 	.word	0x280a0d54
 80036e8:	4c434e49 	.word	0x4c434e49
 80036ec:	4e494455 	.word	0x4e494455
 80036f0:	454e2047 	.word	0x454e2047
 80036f4:	47494c47 	.word	0x47494c47
 80036f8:	45434e45 	.word	0x45434e45
 80036fc:	20524f20 	.word	0x20524f20
 8003700:	4548544f 	.word	0x4548544f
 8003704:	53495752 	.word	0x53495752
 8003708:	41202945 	.word	0x41202945
 800370c:	49534952 	.word	0x49534952
 8003710:	4920474e 	.word	0x4920474e
 8003714:	4e41204e 	.word	0x4e41204e
 8003718:	41572059 	.word	0x41572059
 800371c:	554f2059 	.word	0x554f2059
 8003720:	464f2054 	.word	0x464f2054
 8003724:	45485420 	.word	0x45485420
 8003728:	45535520 	.word	0x45535520
 800372c:	20464f20 	.word	0x20464f20
 8003730:	53494854 	.word	0x53494854
 8003734:	4f530a0d 	.word	0x4f530a0d
 8003738:	41575446 	.word	0x41575446
 800373c:	202c4552 	.word	0x202c4552
 8003740:	4e455645 	.word	0x4e455645
 8003744:	20464920 	.word	0x20464920
 8003748:	49564441 	.word	0x49564441
 800374c:	20444553 	.word	0x20444553
 8003750:	5420464f 	.word	0x5420464f
 8003754:	50204548 	.word	0x50204548
 8003758:	4953534f 	.word	0x4953534f
 800375c:	494c4942 	.word	0x494c4942
 8003760:	4f205954 	.word	0x4f205954
 8003764:	55532046 	.word	0x55532046
 8003768:	44204843 	.word	0x44204843
 800376c:	47414d41 	.word	0x47414d41
 8003770:	0a0d2e45 	.word	0x0a0d2e45
 8003774:	2a2a2a2a 	.word	0x2a2a2a2a
 8003778:	2a2a2a2a 	.word	0x2a2a2a2a
 800377c:	2a2a2a2a 	.word	0x2a2a2a2a
 8003780:	2a2a2a2a 	.word	0x2a2a2a2a
 8003784:	2a2a2a2a 	.word	0x2a2a2a2a
 8003788:	2a2a2a2a 	.word	0x2a2a2a2a
 800378c:	2a2a2a2a 	.word	0x2a2a2a2a
 8003790:	2a2a2a2a 	.word	0x2a2a2a2a
 8003794:	2a2a2a2a 	.word	0x2a2a2a2a
 8003798:	2a2a2a2a 	.word	0x2a2a2a2a
 800379c:	2a2a2a2a 	.word	0x2a2a2a2a
 80037a0:	2a2a2a2a 	.word	0x2a2a2a2a
 80037a4:	2a2a2a2a 	.word	0x2a2a2a2a
 80037a8:	2a2a2a2a 	.word	0x2a2a2a2a
 80037ac:	2a2a2a2a 	.word	0x2a2a2a2a
 80037b0:	2a2a2a2a 	.word	0x2a2a2a2a
 80037b4:	2a2a2a2a 	.word	0x2a2a2a2a
 80037b8:	2a2a2a2a 	.word	0x2a2a2a2a
 80037bc:	2a2a2a2a 	.word	0x2a2a2a2a
 80037c0:	2a2a2a2a 	.word	0x2a2a2a2a
 80037c4:	0a0d2a2a 	.word	0x0a0d2a2a
 80037c8:	0d00      	.short	0x0d00
 80037ca:	0a          	.byte	0x0a

080037cb <_binary_data_license_bin_end>:
	...

080037cc <__aeabi_uldivmod>:
 80037cc:	b953      	cbnz	r3, 80037e4 <__aeabi_uldivmod+0x18>
 80037ce:	b94a      	cbnz	r2, 80037e4 <__aeabi_uldivmod+0x18>
 80037d0:	2900      	cmp	r1, #0
 80037d2:	bf08      	it	eq
 80037d4:	2800      	cmpeq	r0, #0
 80037d6:	bf1c      	itt	ne
 80037d8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80037dc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80037e0:	f000 b96e 	b.w	8003ac0 <__aeabi_idiv0>
 80037e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80037e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80037ec:	f000 f806 	bl	80037fc <__udivmoddi4>
 80037f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80037f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80037f8:	b004      	add	sp, #16
 80037fa:	4770      	bx	lr

080037fc <__udivmoddi4>:
 80037fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003800:	9e08      	ldr	r6, [sp, #32]
 8003802:	460d      	mov	r5, r1
 8003804:	4604      	mov	r4, r0
 8003806:	468e      	mov	lr, r1
 8003808:	2b00      	cmp	r3, #0
 800380a:	f040 8083 	bne.w	8003914 <__udivmoddi4+0x118>
 800380e:	428a      	cmp	r2, r1
 8003810:	4617      	mov	r7, r2
 8003812:	d947      	bls.n	80038a4 <__udivmoddi4+0xa8>
 8003814:	fab2 f382 	clz	r3, r2
 8003818:	b14b      	cbz	r3, 800382e <__udivmoddi4+0x32>
 800381a:	f1c3 0120 	rsb	r1, r3, #32
 800381e:	fa05 fe03 	lsl.w	lr, r5, r3
 8003822:	fa20 f101 	lsr.w	r1, r0, r1
 8003826:	409f      	lsls	r7, r3
 8003828:	ea41 0e0e 	orr.w	lr, r1, lr
 800382c:	409c      	lsls	r4, r3
 800382e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8003832:	fbbe fcf8 	udiv	ip, lr, r8
 8003836:	fa1f f987 	uxth.w	r9, r7
 800383a:	fb08 e21c 	mls	r2, r8, ip, lr
 800383e:	fb0c f009 	mul.w	r0, ip, r9
 8003842:	0c21      	lsrs	r1, r4, #16
 8003844:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 8003848:	4290      	cmp	r0, r2
 800384a:	d90a      	bls.n	8003862 <__udivmoddi4+0x66>
 800384c:	18ba      	adds	r2, r7, r2
 800384e:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 8003852:	f080 8118 	bcs.w	8003a86 <__udivmoddi4+0x28a>
 8003856:	4290      	cmp	r0, r2
 8003858:	f240 8115 	bls.w	8003a86 <__udivmoddi4+0x28a>
 800385c:	f1ac 0c02 	sub.w	ip, ip, #2
 8003860:	443a      	add	r2, r7
 8003862:	1a12      	subs	r2, r2, r0
 8003864:	fbb2 f0f8 	udiv	r0, r2, r8
 8003868:	fb08 2210 	mls	r2, r8, r0, r2
 800386c:	fb00 f109 	mul.w	r1, r0, r9
 8003870:	b2a4      	uxth	r4, r4
 8003872:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8003876:	42a1      	cmp	r1, r4
 8003878:	d909      	bls.n	800388e <__udivmoddi4+0x92>
 800387a:	193c      	adds	r4, r7, r4
 800387c:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8003880:	f080 8103 	bcs.w	8003a8a <__udivmoddi4+0x28e>
 8003884:	42a1      	cmp	r1, r4
 8003886:	f240 8100 	bls.w	8003a8a <__udivmoddi4+0x28e>
 800388a:	3802      	subs	r0, #2
 800388c:	443c      	add	r4, r7
 800388e:	1a64      	subs	r4, r4, r1
 8003890:	2100      	movs	r1, #0
 8003892:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8003896:	b11e      	cbz	r6, 80038a0 <__udivmoddi4+0xa4>
 8003898:	2200      	movs	r2, #0
 800389a:	40dc      	lsrs	r4, r3
 800389c:	e9c6 4200 	strd	r4, r2, [r6]
 80038a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038a4:	b902      	cbnz	r2, 80038a8 <__udivmoddi4+0xac>
 80038a6:	deff      	udf	#255	; 0xff
 80038a8:	fab2 f382 	clz	r3, r2
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d14f      	bne.n	8003950 <__udivmoddi4+0x154>
 80038b0:	1a8d      	subs	r5, r1, r2
 80038b2:	2101      	movs	r1, #1
 80038b4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80038b8:	fa1f f882 	uxth.w	r8, r2
 80038bc:	fbb5 fcfe 	udiv	ip, r5, lr
 80038c0:	fb0e 551c 	mls	r5, lr, ip, r5
 80038c4:	fb08 f00c 	mul.w	r0, r8, ip
 80038c8:	0c22      	lsrs	r2, r4, #16
 80038ca:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 80038ce:	42a8      	cmp	r0, r5
 80038d0:	d907      	bls.n	80038e2 <__udivmoddi4+0xe6>
 80038d2:	197d      	adds	r5, r7, r5
 80038d4:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
 80038d8:	d202      	bcs.n	80038e0 <__udivmoddi4+0xe4>
 80038da:	42a8      	cmp	r0, r5
 80038dc:	f200 80e9 	bhi.w	8003ab2 <__udivmoddi4+0x2b6>
 80038e0:	4694      	mov	ip, r2
 80038e2:	1a2d      	subs	r5, r5, r0
 80038e4:	fbb5 f0fe 	udiv	r0, r5, lr
 80038e8:	fb0e 5510 	mls	r5, lr, r0, r5
 80038ec:	fb08 f800 	mul.w	r8, r8, r0
 80038f0:	b2a4      	uxth	r4, r4
 80038f2:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80038f6:	45a0      	cmp	r8, r4
 80038f8:	d907      	bls.n	800390a <__udivmoddi4+0x10e>
 80038fa:	193c      	adds	r4, r7, r4
 80038fc:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8003900:	d202      	bcs.n	8003908 <__udivmoddi4+0x10c>
 8003902:	45a0      	cmp	r8, r4
 8003904:	f200 80d9 	bhi.w	8003aba <__udivmoddi4+0x2be>
 8003908:	4610      	mov	r0, r2
 800390a:	eba4 0408 	sub.w	r4, r4, r8
 800390e:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8003912:	e7c0      	b.n	8003896 <__udivmoddi4+0x9a>
 8003914:	428b      	cmp	r3, r1
 8003916:	d908      	bls.n	800392a <__udivmoddi4+0x12e>
 8003918:	2e00      	cmp	r6, #0
 800391a:	f000 80b1 	beq.w	8003a80 <__udivmoddi4+0x284>
 800391e:	2100      	movs	r1, #0
 8003920:	e9c6 0500 	strd	r0, r5, [r6]
 8003924:	4608      	mov	r0, r1
 8003926:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800392a:	fab3 f183 	clz	r1, r3
 800392e:	2900      	cmp	r1, #0
 8003930:	d14b      	bne.n	80039ca <__udivmoddi4+0x1ce>
 8003932:	42ab      	cmp	r3, r5
 8003934:	d302      	bcc.n	800393c <__udivmoddi4+0x140>
 8003936:	4282      	cmp	r2, r0
 8003938:	f200 80b9 	bhi.w	8003aae <__udivmoddi4+0x2b2>
 800393c:	1a84      	subs	r4, r0, r2
 800393e:	eb65 0303 	sbc.w	r3, r5, r3
 8003942:	2001      	movs	r0, #1
 8003944:	469e      	mov	lr, r3
 8003946:	2e00      	cmp	r6, #0
 8003948:	d0aa      	beq.n	80038a0 <__udivmoddi4+0xa4>
 800394a:	e9c6 4e00 	strd	r4, lr, [r6]
 800394e:	e7a7      	b.n	80038a0 <__udivmoddi4+0xa4>
 8003950:	409f      	lsls	r7, r3
 8003952:	f1c3 0220 	rsb	r2, r3, #32
 8003956:	40d1      	lsrs	r1, r2
 8003958:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800395c:	fbb1 f0fe 	udiv	r0, r1, lr
 8003960:	fa1f f887 	uxth.w	r8, r7
 8003964:	fb0e 1110 	mls	r1, lr, r0, r1
 8003968:	fa24 f202 	lsr.w	r2, r4, r2
 800396c:	409d      	lsls	r5, r3
 800396e:	fb00 fc08 	mul.w	ip, r0, r8
 8003972:	432a      	orrs	r2, r5
 8003974:	0c15      	lsrs	r5, r2, #16
 8003976:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 800397a:	45ac      	cmp	ip, r5
 800397c:	fa04 f403 	lsl.w	r4, r4, r3
 8003980:	d909      	bls.n	8003996 <__udivmoddi4+0x19a>
 8003982:	197d      	adds	r5, r7, r5
 8003984:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8003988:	f080 808f 	bcs.w	8003aaa <__udivmoddi4+0x2ae>
 800398c:	45ac      	cmp	ip, r5
 800398e:	f240 808c 	bls.w	8003aaa <__udivmoddi4+0x2ae>
 8003992:	3802      	subs	r0, #2
 8003994:	443d      	add	r5, r7
 8003996:	eba5 050c 	sub.w	r5, r5, ip
 800399a:	fbb5 f1fe 	udiv	r1, r5, lr
 800399e:	fb0e 5c11 	mls	ip, lr, r1, r5
 80039a2:	fb01 f908 	mul.w	r9, r1, r8
 80039a6:	b295      	uxth	r5, r2
 80039a8:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80039ac:	45a9      	cmp	r9, r5
 80039ae:	d907      	bls.n	80039c0 <__udivmoddi4+0x1c4>
 80039b0:	197d      	adds	r5, r7, r5
 80039b2:	f101 32ff 	add.w	r2, r1, #4294967295	; 0xffffffff
 80039b6:	d274      	bcs.n	8003aa2 <__udivmoddi4+0x2a6>
 80039b8:	45a9      	cmp	r9, r5
 80039ba:	d972      	bls.n	8003aa2 <__udivmoddi4+0x2a6>
 80039bc:	3902      	subs	r1, #2
 80039be:	443d      	add	r5, r7
 80039c0:	eba5 0509 	sub.w	r5, r5, r9
 80039c4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80039c8:	e778      	b.n	80038bc <__udivmoddi4+0xc0>
 80039ca:	f1c1 0720 	rsb	r7, r1, #32
 80039ce:	408b      	lsls	r3, r1
 80039d0:	fa22 fc07 	lsr.w	ip, r2, r7
 80039d4:	ea4c 0c03 	orr.w	ip, ip, r3
 80039d8:	fa25 f407 	lsr.w	r4, r5, r7
 80039dc:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80039e0:	fbb4 f9fe 	udiv	r9, r4, lr
 80039e4:	fa1f f88c 	uxth.w	r8, ip
 80039e8:	fb0e 4419 	mls	r4, lr, r9, r4
 80039ec:	fa20 f307 	lsr.w	r3, r0, r7
 80039f0:	fb09 fa08 	mul.w	sl, r9, r8
 80039f4:	408d      	lsls	r5, r1
 80039f6:	431d      	orrs	r5, r3
 80039f8:	0c2b      	lsrs	r3, r5, #16
 80039fa:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80039fe:	45a2      	cmp	sl, r4
 8003a00:	fa02 f201 	lsl.w	r2, r2, r1
 8003a04:	fa00 f301 	lsl.w	r3, r0, r1
 8003a08:	d909      	bls.n	8003a1e <__udivmoddi4+0x222>
 8003a0a:	eb1c 0404 	adds.w	r4, ip, r4
 8003a0e:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8003a12:	d248      	bcs.n	8003aa6 <__udivmoddi4+0x2aa>
 8003a14:	45a2      	cmp	sl, r4
 8003a16:	d946      	bls.n	8003aa6 <__udivmoddi4+0x2aa>
 8003a18:	f1a9 0902 	sub.w	r9, r9, #2
 8003a1c:	4464      	add	r4, ip
 8003a1e:	eba4 040a 	sub.w	r4, r4, sl
 8003a22:	fbb4 f0fe 	udiv	r0, r4, lr
 8003a26:	fb0e 4410 	mls	r4, lr, r0, r4
 8003a2a:	fb00 fa08 	mul.w	sl, r0, r8
 8003a2e:	b2ad      	uxth	r5, r5
 8003a30:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8003a34:	45a2      	cmp	sl, r4
 8003a36:	d908      	bls.n	8003a4a <__udivmoddi4+0x24e>
 8003a38:	eb1c 0404 	adds.w	r4, ip, r4
 8003a3c:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8003a40:	d22d      	bcs.n	8003a9e <__udivmoddi4+0x2a2>
 8003a42:	45a2      	cmp	sl, r4
 8003a44:	d92b      	bls.n	8003a9e <__udivmoddi4+0x2a2>
 8003a46:	3802      	subs	r0, #2
 8003a48:	4464      	add	r4, ip
 8003a4a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8003a4e:	fba0 8902 	umull	r8, r9, r0, r2
 8003a52:	eba4 040a 	sub.w	r4, r4, sl
 8003a56:	454c      	cmp	r4, r9
 8003a58:	46c6      	mov	lr, r8
 8003a5a:	464d      	mov	r5, r9
 8003a5c:	d319      	bcc.n	8003a92 <__udivmoddi4+0x296>
 8003a5e:	d016      	beq.n	8003a8e <__udivmoddi4+0x292>
 8003a60:	b15e      	cbz	r6, 8003a7a <__udivmoddi4+0x27e>
 8003a62:	ebb3 020e 	subs.w	r2, r3, lr
 8003a66:	eb64 0405 	sbc.w	r4, r4, r5
 8003a6a:	fa04 f707 	lsl.w	r7, r4, r7
 8003a6e:	fa22 f301 	lsr.w	r3, r2, r1
 8003a72:	431f      	orrs	r7, r3
 8003a74:	40cc      	lsrs	r4, r1
 8003a76:	e9c6 7400 	strd	r7, r4, [r6]
 8003a7a:	2100      	movs	r1, #0
 8003a7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a80:	4631      	mov	r1, r6
 8003a82:	4630      	mov	r0, r6
 8003a84:	e70c      	b.n	80038a0 <__udivmoddi4+0xa4>
 8003a86:	468c      	mov	ip, r1
 8003a88:	e6eb      	b.n	8003862 <__udivmoddi4+0x66>
 8003a8a:	4610      	mov	r0, r2
 8003a8c:	e6ff      	b.n	800388e <__udivmoddi4+0x92>
 8003a8e:	4543      	cmp	r3, r8
 8003a90:	d2e6      	bcs.n	8003a60 <__udivmoddi4+0x264>
 8003a92:	ebb8 0e02 	subs.w	lr, r8, r2
 8003a96:	eb69 050c 	sbc.w	r5, r9, ip
 8003a9a:	3801      	subs	r0, #1
 8003a9c:	e7e0      	b.n	8003a60 <__udivmoddi4+0x264>
 8003a9e:	4628      	mov	r0, r5
 8003aa0:	e7d3      	b.n	8003a4a <__udivmoddi4+0x24e>
 8003aa2:	4611      	mov	r1, r2
 8003aa4:	e78c      	b.n	80039c0 <__udivmoddi4+0x1c4>
 8003aa6:	4681      	mov	r9, r0
 8003aa8:	e7b9      	b.n	8003a1e <__udivmoddi4+0x222>
 8003aaa:	4608      	mov	r0, r1
 8003aac:	e773      	b.n	8003996 <__udivmoddi4+0x19a>
 8003aae:	4608      	mov	r0, r1
 8003ab0:	e749      	b.n	8003946 <__udivmoddi4+0x14a>
 8003ab2:	f1ac 0c02 	sub.w	ip, ip, #2
 8003ab6:	443d      	add	r5, r7
 8003ab8:	e713      	b.n	80038e2 <__udivmoddi4+0xe6>
 8003aba:	3802      	subs	r0, #2
 8003abc:	443c      	add	r4, r7
 8003abe:	e724      	b.n	800390a <__udivmoddi4+0x10e>

08003ac0 <__aeabi_idiv0>:
 8003ac0:	4770      	bx	lr
 8003ac2:	bf00      	nop

08003ac4 <memcpy>:
 8003ac4:	4684      	mov	ip, r0
 8003ac6:	ea41 0300 	orr.w	r3, r1, r0
 8003aca:	f013 0303 	ands.w	r3, r3, #3
 8003ace:	d149      	bne.n	8003b64 <memcpy+0xa0>
 8003ad0:	3a40      	subs	r2, #64	; 0x40
 8003ad2:	d323      	bcc.n	8003b1c <memcpy+0x58>
 8003ad4:	680b      	ldr	r3, [r1, #0]
 8003ad6:	6003      	str	r3, [r0, #0]
 8003ad8:	684b      	ldr	r3, [r1, #4]
 8003ada:	6043      	str	r3, [r0, #4]
 8003adc:	688b      	ldr	r3, [r1, #8]
 8003ade:	6083      	str	r3, [r0, #8]
 8003ae0:	68cb      	ldr	r3, [r1, #12]
 8003ae2:	60c3      	str	r3, [r0, #12]
 8003ae4:	690b      	ldr	r3, [r1, #16]
 8003ae6:	6103      	str	r3, [r0, #16]
 8003ae8:	694b      	ldr	r3, [r1, #20]
 8003aea:	6143      	str	r3, [r0, #20]
 8003aec:	698b      	ldr	r3, [r1, #24]
 8003aee:	6183      	str	r3, [r0, #24]
 8003af0:	69cb      	ldr	r3, [r1, #28]
 8003af2:	61c3      	str	r3, [r0, #28]
 8003af4:	6a0b      	ldr	r3, [r1, #32]
 8003af6:	6203      	str	r3, [r0, #32]
 8003af8:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8003afa:	6243      	str	r3, [r0, #36]	; 0x24
 8003afc:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8003afe:	6283      	str	r3, [r0, #40]	; 0x28
 8003b00:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8003b02:	62c3      	str	r3, [r0, #44]	; 0x2c
 8003b04:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8003b06:	6303      	str	r3, [r0, #48]	; 0x30
 8003b08:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8003b0a:	6343      	str	r3, [r0, #52]	; 0x34
 8003b0c:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 8003b0e:	6383      	str	r3, [r0, #56]	; 0x38
 8003b10:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8003b12:	63c3      	str	r3, [r0, #60]	; 0x3c
 8003b14:	3040      	adds	r0, #64	; 0x40
 8003b16:	3140      	adds	r1, #64	; 0x40
 8003b18:	3a40      	subs	r2, #64	; 0x40
 8003b1a:	d2db      	bcs.n	8003ad4 <memcpy+0x10>
 8003b1c:	3230      	adds	r2, #48	; 0x30
 8003b1e:	d30b      	bcc.n	8003b38 <memcpy+0x74>
 8003b20:	680b      	ldr	r3, [r1, #0]
 8003b22:	6003      	str	r3, [r0, #0]
 8003b24:	684b      	ldr	r3, [r1, #4]
 8003b26:	6043      	str	r3, [r0, #4]
 8003b28:	688b      	ldr	r3, [r1, #8]
 8003b2a:	6083      	str	r3, [r0, #8]
 8003b2c:	68cb      	ldr	r3, [r1, #12]
 8003b2e:	60c3      	str	r3, [r0, #12]
 8003b30:	3010      	adds	r0, #16
 8003b32:	3110      	adds	r1, #16
 8003b34:	3a10      	subs	r2, #16
 8003b36:	d2f3      	bcs.n	8003b20 <memcpy+0x5c>
 8003b38:	320c      	adds	r2, #12
 8003b3a:	d305      	bcc.n	8003b48 <memcpy+0x84>
 8003b3c:	f851 3b04 	ldr.w	r3, [r1], #4
 8003b40:	f840 3b04 	str.w	r3, [r0], #4
 8003b44:	3a04      	subs	r2, #4
 8003b46:	d2f9      	bcs.n	8003b3c <memcpy+0x78>
 8003b48:	3204      	adds	r2, #4
 8003b4a:	d008      	beq.n	8003b5e <memcpy+0x9a>
 8003b4c:	07d2      	lsls	r2, r2, #31
 8003b4e:	bf1c      	itt	ne
 8003b50:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8003b54:	f800 3b01 	strbne.w	r3, [r0], #1
 8003b58:	d301      	bcc.n	8003b5e <memcpy+0x9a>
 8003b5a:	880b      	ldrh	r3, [r1, #0]
 8003b5c:	8003      	strh	r3, [r0, #0]
 8003b5e:	4660      	mov	r0, ip
 8003b60:	4770      	bx	lr
 8003b62:	bf00      	nop
 8003b64:	2a08      	cmp	r2, #8
 8003b66:	d313      	bcc.n	8003b90 <memcpy+0xcc>
 8003b68:	078b      	lsls	r3, r1, #30
 8003b6a:	d0b1      	beq.n	8003ad0 <memcpy+0xc>
 8003b6c:	f010 0303 	ands.w	r3, r0, #3
 8003b70:	d0ae      	beq.n	8003ad0 <memcpy+0xc>
 8003b72:	f1c3 0304 	rsb	r3, r3, #4
 8003b76:	1ad2      	subs	r2, r2, r3
 8003b78:	07db      	lsls	r3, r3, #31
 8003b7a:	bf1c      	itt	ne
 8003b7c:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8003b80:	f800 3b01 	strbne.w	r3, [r0], #1
 8003b84:	d3a4      	bcc.n	8003ad0 <memcpy+0xc>
 8003b86:	f831 3b02 	ldrh.w	r3, [r1], #2
 8003b8a:	f820 3b02 	strh.w	r3, [r0], #2
 8003b8e:	e79f      	b.n	8003ad0 <memcpy+0xc>
 8003b90:	3a04      	subs	r2, #4
 8003b92:	d3d9      	bcc.n	8003b48 <memcpy+0x84>
 8003b94:	3a01      	subs	r2, #1
 8003b96:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003b9a:	f800 3b01 	strb.w	r3, [r0], #1
 8003b9e:	d2f9      	bcs.n	8003b94 <memcpy+0xd0>
 8003ba0:	780b      	ldrb	r3, [r1, #0]
 8003ba2:	7003      	strb	r3, [r0, #0]
 8003ba4:	784b      	ldrb	r3, [r1, #1]
 8003ba6:	7043      	strb	r3, [r0, #1]
 8003ba8:	788b      	ldrb	r3, [r1, #2]
 8003baa:	7083      	strb	r3, [r0, #2]
 8003bac:	4660      	mov	r0, ip
 8003bae:	4770      	bx	lr

08003bb0 <memset>:
 8003bb0:	b4f0      	push	{r4, r5, r6, r7}
 8003bb2:	0786      	lsls	r6, r0, #30
 8003bb4:	d046      	beq.n	8003c44 <memset+0x94>
 8003bb6:	1e54      	subs	r4, r2, #1
 8003bb8:	2a00      	cmp	r2, #0
 8003bba:	d03c      	beq.n	8003c36 <memset+0x86>
 8003bbc:	b2ca      	uxtb	r2, r1
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	e002      	b.n	8003bc8 <memset+0x18>
 8003bc2:	f114 34ff 	adds.w	r4, r4, #4294967295	; 0xffffffff
 8003bc6:	d336      	bcc.n	8003c36 <memset+0x86>
 8003bc8:	f803 2b01 	strb.w	r2, [r3], #1
 8003bcc:	079d      	lsls	r5, r3, #30
 8003bce:	d1f8      	bne.n	8003bc2 <memset+0x12>
 8003bd0:	2c03      	cmp	r4, #3
 8003bd2:	d929      	bls.n	8003c28 <memset+0x78>
 8003bd4:	b2cd      	uxtb	r5, r1
 8003bd6:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8003bda:	2c0f      	cmp	r4, #15
 8003bdc:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8003be0:	d933      	bls.n	8003c4a <memset+0x9a>
 8003be2:	f1a4 0610 	sub.w	r6, r4, #16
 8003be6:	0936      	lsrs	r6, r6, #4
 8003be8:	f103 0720 	add.w	r7, r3, #32
 8003bec:	eb07 1706 	add.w	r7, r7, r6, lsl #4
 8003bf0:	f103 0210 	add.w	r2, r3, #16
 8003bf4:	e942 5504 	strd	r5, r5, [r2, #-16]
 8003bf8:	e942 5502 	strd	r5, r5, [r2, #-8]
 8003bfc:	3210      	adds	r2, #16
 8003bfe:	42ba      	cmp	r2, r7
 8003c00:	d1f8      	bne.n	8003bf4 <memset+0x44>
 8003c02:	1c72      	adds	r2, r6, #1
 8003c04:	f014 0f0c 	tst.w	r4, #12
 8003c08:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8003c0c:	f004 060f 	and.w	r6, r4, #15
 8003c10:	d013      	beq.n	8003c3a <memset+0x8a>
 8003c12:	1f33      	subs	r3, r6, #4
 8003c14:	f023 0303 	bic.w	r3, r3, #3
 8003c18:	3304      	adds	r3, #4
 8003c1a:	4413      	add	r3, r2
 8003c1c:	f842 5b04 	str.w	r5, [r2], #4
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d1fb      	bne.n	8003c1c <memset+0x6c>
 8003c24:	f006 0403 	and.w	r4, r6, #3
 8003c28:	b12c      	cbz	r4, 8003c36 <memset+0x86>
 8003c2a:	b2c9      	uxtb	r1, r1
 8003c2c:	441c      	add	r4, r3
 8003c2e:	f803 1b01 	strb.w	r1, [r3], #1
 8003c32:	429c      	cmp	r4, r3
 8003c34:	d1fb      	bne.n	8003c2e <memset+0x7e>
 8003c36:	bcf0      	pop	{r4, r5, r6, r7}
 8003c38:	4770      	bx	lr
 8003c3a:	4634      	mov	r4, r6
 8003c3c:	4613      	mov	r3, r2
 8003c3e:	2c00      	cmp	r4, #0
 8003c40:	d1f3      	bne.n	8003c2a <memset+0x7a>
 8003c42:	e7f8      	b.n	8003c36 <memset+0x86>
 8003c44:	4614      	mov	r4, r2
 8003c46:	4603      	mov	r3, r0
 8003c48:	e7c2      	b.n	8003bd0 <memset+0x20>
 8003c4a:	461a      	mov	r2, r3
 8003c4c:	4626      	mov	r6, r4
 8003c4e:	e7e0      	b.n	8003c12 <memset+0x62>

08003c50 <strchr>:
 8003c50:	b2c9      	uxtb	r1, r1
 8003c52:	f000 0303 	and.w	r3, r0, #3
 8003c56:	2900      	cmp	r1, #0
 8003c58:	d035      	beq.n	8003cc6 <strchr+0x76>
 8003c5a:	b17b      	cbz	r3, 8003c7c <strchr+0x2c>
 8003c5c:	7803      	ldrb	r3, [r0, #0]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d057      	beq.n	8003d12 <strchr+0xc2>
 8003c62:	4299      	cmp	r1, r3
 8003c64:	d052      	beq.n	8003d0c <strchr+0xbc>
 8003c66:	1c43      	adds	r3, r0, #1
 8003c68:	e005      	b.n	8003c76 <strchr+0x26>
 8003c6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003c6e:	2a00      	cmp	r2, #0
 8003c70:	d04d      	beq.n	8003d0e <strchr+0xbe>
 8003c72:	428a      	cmp	r2, r1
 8003c74:	d04a      	beq.n	8003d0c <strchr+0xbc>
 8003c76:	079a      	lsls	r2, r3, #30
 8003c78:	4618      	mov	r0, r3
 8003c7a:	d1f6      	bne.n	8003c6a <strchr+0x1a>
 8003c7c:	b470      	push	{r4, r5, r6}
 8003c7e:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
 8003c82:	6804      	ldr	r4, [r0, #0]
 8003c84:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
 8003c88:	e001      	b.n	8003c8e <strchr+0x3e>
 8003c8a:	f850 4f04 	ldr.w	r4, [r0, #4]!
 8003c8e:	ea86 0504 	eor.w	r5, r6, r4
 8003c92:	f1a5 3201 	sub.w	r2, r5, #16843009	; 0x1010101
 8003c96:	f1a4 3301 	sub.w	r3, r4, #16843009	; 0x1010101
 8003c9a:	ea22 0205 	bic.w	r2, r2, r5
 8003c9e:	ea23 0304 	bic.w	r3, r3, r4
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 8003ca8:	d0ef      	beq.n	8003c8a <strchr+0x3a>
 8003caa:	7803      	ldrb	r3, [r0, #0]
 8003cac:	b143      	cbz	r3, 8003cc0 <strchr+0x70>
 8003cae:	4299      	cmp	r1, r3
 8003cb0:	d102      	bne.n	8003cb8 <strchr+0x68>
 8003cb2:	e006      	b.n	8003cc2 <strchr+0x72>
 8003cb4:	428b      	cmp	r3, r1
 8003cb6:	d004      	beq.n	8003cc2 <strchr+0x72>
 8003cb8:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d1f9      	bne.n	8003cb4 <strchr+0x64>
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	bc70      	pop	{r4, r5, r6}
 8003cc4:	4770      	bx	lr
 8003cc6:	b14b      	cbz	r3, 8003cdc <strchr+0x8c>
 8003cc8:	7803      	ldrb	r3, [r0, #0]
 8003cca:	b1fb      	cbz	r3, 8003d0c <strchr+0xbc>
 8003ccc:	1c43      	adds	r3, r0, #1
 8003cce:	e002      	b.n	8003cd6 <strchr+0x86>
 8003cd0:	7802      	ldrb	r2, [r0, #0]
 8003cd2:	3301      	adds	r3, #1
 8003cd4:	b1d2      	cbz	r2, 8003d0c <strchr+0xbc>
 8003cd6:	0799      	lsls	r1, r3, #30
 8003cd8:	4618      	mov	r0, r3
 8003cda:	d1f9      	bne.n	8003cd0 <strchr+0x80>
 8003cdc:	6802      	ldr	r2, [r0, #0]
 8003cde:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
 8003ce2:	ea23 0302 	bic.w	r3, r3, r2
 8003ce6:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 8003cea:	d108      	bne.n	8003cfe <strchr+0xae>
 8003cec:	f850 2f04 	ldr.w	r2, [r0, #4]!
 8003cf0:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
 8003cf4:	ea23 0302 	bic.w	r3, r3, r2
 8003cf8:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 8003cfc:	d0f6      	beq.n	8003cec <strchr+0x9c>
 8003cfe:	7803      	ldrb	r3, [r0, #0]
 8003d00:	b123      	cbz	r3, 8003d0c <strchr+0xbc>
 8003d02:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d1fb      	bne.n	8003d02 <strchr+0xb2>
 8003d0a:	4770      	bx	lr
 8003d0c:	4770      	bx	lr
 8003d0e:	4610      	mov	r0, r2
 8003d10:	4770      	bx	lr
 8003d12:	4618      	mov	r0, r3
 8003d14:	4770      	bx	lr
 8003d16:	bf00      	nop

08003d18 <strcmp>:
 8003d18:	ea80 0c01 	eor.w	ip, r0, r1
 8003d1c:	f01c 0f03 	tst.w	ip, #3
 8003d20:	d137      	bne.n	8003d92 <strcmp+0x7a>
 8003d22:	f010 0c03 	ands.w	ip, r0, #3
 8003d26:	f020 0003 	bic.w	r0, r0, #3
 8003d2a:	f021 0103 	bic.w	r1, r1, #3
 8003d2e:	f850 2b04 	ldr.w	r2, [r0], #4
 8003d32:	bf08      	it	eq
 8003d34:	f851 3b04 	ldreq.w	r3, [r1], #4
 8003d38:	d00e      	beq.n	8003d58 <strcmp+0x40>
 8003d3a:	f08c 0c03 	eor.w	ip, ip, #3
 8003d3e:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8003d42:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8003d46:	fa23 fc0c 	lsr.w	ip, r3, ip
 8003d4a:	f851 3b04 	ldr.w	r3, [r1], #4
 8003d4e:	ea42 020c 	orr.w	r2, r2, ip
 8003d52:	ea43 030c 	orr.w	r3, r3, ip
 8003d56:	bf00      	nop
 8003d58:	f1a2 3c01 	sub.w	ip, r2, #16843009	; 0x1010101
 8003d5c:	429a      	cmp	r2, r3
 8003d5e:	bf01      	itttt	eq
 8003d60:	ea2c 0c02 	biceq.w	ip, ip, r2
 8003d64:	f01c 3f80 	tsteq.w	ip, #2155905152	; 0x80808080
 8003d68:	f850 2b04 	ldreq.w	r2, [r0], #4
 8003d6c:	f851 3b04 	ldreq.w	r3, [r1], #4
 8003d70:	d0f2      	beq.n	8003d58 <strcmp+0x40>
 8003d72:	ea4f 6002 	mov.w	r0, r2, lsl #24
 8003d76:	ea4f 2212 	mov.w	r2, r2, lsr #8
 8003d7a:	2801      	cmp	r0, #1
 8003d7c:	bf28      	it	cs
 8003d7e:	ebb0 6f03 	cmpcs.w	r0, r3, lsl #24
 8003d82:	bf08      	it	eq
 8003d84:	0a1b      	lsreq	r3, r3, #8
 8003d86:	d0f4      	beq.n	8003d72 <strcmp+0x5a>
 8003d88:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 8003d8c:	0e00      	lsrs	r0, r0, #24
 8003d8e:	1ac0      	subs	r0, r0, r3
 8003d90:	4770      	bx	lr
 8003d92:	f010 0f03 	tst.w	r0, #3
 8003d96:	d00a      	beq.n	8003dae <strcmp+0x96>
 8003d98:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003d9c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003da0:	2a01      	cmp	r2, #1
 8003da2:	bf28      	it	cs
 8003da4:	429a      	cmpcs	r2, r3
 8003da6:	d0f4      	beq.n	8003d92 <strcmp+0x7a>
 8003da8:	eba2 0003 	sub.w	r0, r2, r3
 8003dac:	4770      	bx	lr
 8003dae:	f84d 5d04 	str.w	r5, [sp, #-4]!
 8003db2:	f850 2b04 	ldr.w	r2, [r0], #4
 8003db6:	f001 0503 	and.w	r5, r1, #3
 8003dba:	f021 0103 	bic.w	r1, r1, #3
 8003dbe:	f851 3b04 	ldr.w	r3, [r1], #4
 8003dc2:	2d02      	cmp	r5, #2
 8003dc4:	d026      	beq.n	8003e14 <strcmp+0xfc>
 8003dc6:	d84d      	bhi.n	8003e64 <strcmp+0x14c>
 8003dc8:	f022 457f 	bic.w	r5, r2, #4278190080	; 0xff000000
 8003dcc:	ebb5 2f13 	cmp.w	r5, r3, lsr #8
 8003dd0:	f1a2 3c01 	sub.w	ip, r2, #16843009	; 0x1010101
 8003dd4:	ea2c 0c02 	bic.w	ip, ip, r2
 8003dd8:	d10d      	bne.n	8003df6 <strcmp+0xde>
 8003dda:	f01c 3c80 	ands.w	ip, ip, #2155905152	; 0x80808080
 8003dde:	bf08      	it	eq
 8003de0:	f851 3b04 	ldreq.w	r3, [r1], #4
 8003de4:	d10a      	bne.n	8003dfc <strcmp+0xe4>
 8003de6:	ea85 0502 	eor.w	r5, r5, r2
 8003dea:	ebb5 6f03 	cmp.w	r5, r3, lsl #24
 8003dee:	d10c      	bne.n	8003e0a <strcmp+0xf2>
 8003df0:	f850 2b04 	ldr.w	r2, [r0], #4
 8003df4:	e7e8      	b.n	8003dc8 <strcmp+0xb0>
 8003df6:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8003dfa:	e05b      	b.n	8003eb4 <strcmp+0x19c>
 8003dfc:	f03c 4c7f 	bics.w	ip, ip, #4278190080	; 0xff000000
 8003e00:	d154      	bne.n	8003eac <strcmp+0x194>
 8003e02:	780b      	ldrb	r3, [r1, #0]
 8003e04:	ea4f 6512 	mov.w	r5, r2, lsr #24
 8003e08:	e054      	b.n	8003eb4 <strcmp+0x19c>
 8003e0a:	ea4f 6512 	mov.w	r5, r2, lsr #24
 8003e0e:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 8003e12:	e04f      	b.n	8003eb4 <strcmp+0x19c>
 8003e14:	ea4f 4502 	mov.w	r5, r2, lsl #16
 8003e18:	f1a2 3c01 	sub.w	ip, r2, #16843009	; 0x1010101
 8003e1c:	ea4f 4515 	mov.w	r5, r5, lsr #16
 8003e20:	ea2c 0c02 	bic.w	ip, ip, r2
 8003e24:	ebb5 4f13 	cmp.w	r5, r3, lsr #16
 8003e28:	d118      	bne.n	8003e5c <strcmp+0x144>
 8003e2a:	f01c 3c80 	ands.w	ip, ip, #2155905152	; 0x80808080
 8003e2e:	bf08      	it	eq
 8003e30:	f851 3b04 	ldreq.w	r3, [r1], #4
 8003e34:	d107      	bne.n	8003e46 <strcmp+0x12e>
 8003e36:	ea85 0502 	eor.w	r5, r5, r2
 8003e3a:	ebb5 4f03 	cmp.w	r5, r3, lsl #16
 8003e3e:	d109      	bne.n	8003e54 <strcmp+0x13c>
 8003e40:	f850 2b04 	ldr.w	r2, [r0], #4
 8003e44:	e7e6      	b.n	8003e14 <strcmp+0xfc>
 8003e46:	ea5f 4c0c 	movs.w	ip, ip, lsl #16
 8003e4a:	d12f      	bne.n	8003eac <strcmp+0x194>
 8003e4c:	880b      	ldrh	r3, [r1, #0]
 8003e4e:	ea4f 4512 	mov.w	r5, r2, lsr #16
 8003e52:	e02f      	b.n	8003eb4 <strcmp+0x19c>
 8003e54:	ea4f 4303 	mov.w	r3, r3, lsl #16
 8003e58:	ea4f 4512 	mov.w	r5, r2, lsr #16
 8003e5c:	ea4f 4313 	mov.w	r3, r3, lsr #16
 8003e60:	e028      	b.n	8003eb4 <strcmp+0x19c>
 8003e62:	bf00      	nop
 8003e64:	f002 05ff 	and.w	r5, r2, #255	; 0xff
 8003e68:	ebb5 6f13 	cmp.w	r5, r3, lsr #24
 8003e6c:	f1a2 3c01 	sub.w	ip, r2, #16843009	; 0x1010101
 8003e70:	ea2c 0c02 	bic.w	ip, ip, r2
 8003e74:	d10d      	bne.n	8003e92 <strcmp+0x17a>
 8003e76:	f01c 3c80 	ands.w	ip, ip, #2155905152	; 0x80808080
 8003e7a:	bf08      	it	eq
 8003e7c:	f851 3b04 	ldreq.w	r3, [r1], #4
 8003e80:	d10a      	bne.n	8003e98 <strcmp+0x180>
 8003e82:	ea85 0502 	eor.w	r5, r5, r2
 8003e86:	ebb5 2f03 	cmp.w	r5, r3, lsl #8
 8003e8a:	d10a      	bne.n	8003ea2 <strcmp+0x18a>
 8003e8c:	f850 2b04 	ldr.w	r2, [r0], #4
 8003e90:	e7e8      	b.n	8003e64 <strcmp+0x14c>
 8003e92:	ea4f 6313 	mov.w	r3, r3, lsr #24
 8003e96:	e00d      	b.n	8003eb4 <strcmp+0x19c>
 8003e98:	f012 0fff 	tst.w	r2, #255	; 0xff
 8003e9c:	d006      	beq.n	8003eac <strcmp+0x194>
 8003e9e:	f851 3b04 	ldr.w	r3, [r1], #4
 8003ea2:	ea4f 2512 	mov.w	r5, r2, lsr #8
 8003ea6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003eaa:	e003      	b.n	8003eb4 <strcmp+0x19c>
 8003eac:	f04f 0000 	mov.w	r0, #0
 8003eb0:	bc20      	pop	{r5}
 8003eb2:	4770      	bx	lr
 8003eb4:	f005 02ff 	and.w	r2, r5, #255	; 0xff
 8003eb8:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 8003ebc:	2801      	cmp	r0, #1
 8003ebe:	bf28      	it	cs
 8003ec0:	4290      	cmpcs	r0, r2
 8003ec2:	bf04      	itt	eq
 8003ec4:	0a2d      	lsreq	r5, r5, #8
 8003ec6:	0a1b      	lsreq	r3, r3, #8
 8003ec8:	d0f4      	beq.n	8003eb4 <strcmp+0x19c>
 8003eca:	eba2 0000 	sub.w	r0, r2, r0
 8003ece:	bc20      	pop	{r5}
 8003ed0:	4770      	bx	lr
 8003ed2:	bf00      	nop

08003ed4 <strlen>:
 8003ed4:	f020 0103 	bic.w	r1, r0, #3
 8003ed8:	f010 0003 	ands.w	r0, r0, #3
 8003edc:	f1c0 0000 	rsb	r0, r0, #0
 8003ee0:	f851 3b04 	ldr.w	r3, [r1], #4
 8003ee4:	f100 0c04 	add.w	ip, r0, #4
 8003ee8:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8003eec:	f06f 0200 	mvn.w	r2, #0
 8003ef0:	bf1c      	itt	ne
 8003ef2:	fa22 f20c 	lsrne.w	r2, r2, ip
 8003ef6:	4313      	orrne	r3, r2
 8003ef8:	f04f 0c01 	mov.w	ip, #1
 8003efc:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
 8003f00:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
 8003f04:	eba3 020c 	sub.w	r2, r3, ip
 8003f08:	ea22 0203 	bic.w	r2, r2, r3
 8003f0c:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
 8003f10:	bf04      	itt	eq
 8003f12:	f851 3b04 	ldreq.w	r3, [r1], #4
 8003f16:	3004      	addeq	r0, #4
 8003f18:	d0f4      	beq.n	8003f04 <strlen+0x30>
 8003f1a:	f1c2 0100 	rsb	r1, r2, #0
 8003f1e:	ea02 0201 	and.w	r2, r2, r1
 8003f22:	fab2 f282 	clz	r2, r2
 8003f26:	f1c2 021f 	rsb	r2, r2, #31
 8003f2a:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
 8003f2e:	4770      	bx	lr

08003f30 <strpbrk>:
 8003f30:	b430      	push	{r4, r5}
 8003f32:	7804      	ldrb	r4, [r0, #0]
 8003f34:	b1dc      	cbz	r4, 8003f6e <strpbrk+0x3e>
 8003f36:	780d      	ldrb	r5, [r1, #0]
 8003f38:	b19d      	cbz	r5, 8003f62 <strpbrk+0x32>
 8003f3a:	42ac      	cmp	r4, r5
 8003f3c:	d00f      	beq.n	8003f5e <strpbrk+0x2e>
 8003f3e:	460a      	mov	r2, r1
 8003f40:	e001      	b.n	8003f46 <strpbrk+0x16>
 8003f42:	42a3      	cmp	r3, r4
 8003f44:	d00b      	beq.n	8003f5e <strpbrk+0x2e>
 8003f46:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d1f9      	bne.n	8003f42 <strpbrk+0x12>
 8003f4e:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 8003f52:	2c00      	cmp	r4, #0
 8003f54:	d1f0      	bne.n	8003f38 <strpbrk+0x8>
 8003f56:	7813      	ldrb	r3, [r2, #0]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	bf08      	it	eq
 8003f5c:	2000      	moveq	r0, #0
 8003f5e:	bc30      	pop	{r4, r5}
 8003f60:	4770      	bx	lr
 8003f62:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 8003f66:	460a      	mov	r2, r1
 8003f68:	2c00      	cmp	r4, #0
 8003f6a:	d1e5      	bne.n	8003f38 <strpbrk+0x8>
 8003f6c:	e7f3      	b.n	8003f56 <strpbrk+0x26>
 8003f6e:	4620      	mov	r0, r4
 8003f70:	bc30      	pop	{r4, r5}
 8003f72:	4770      	bx	lr

08003f74 <strspn>:
 8003f74:	b470      	push	{r4, r5, r6}
 8003f76:	7804      	ldrb	r4, [r0, #0]
 8003f78:	b1a4      	cbz	r4, 8003fa4 <strspn+0x30>
 8003f7a:	4605      	mov	r5, r0
 8003f7c:	780e      	ldrb	r6, [r1, #0]
 8003f7e:	b14e      	cbz	r6, 8003f94 <strspn+0x20>
 8003f80:	42a6      	cmp	r6, r4
 8003f82:	d00a      	beq.n	8003f9a <strspn+0x26>
 8003f84:	460a      	mov	r2, r1
 8003f86:	e001      	b.n	8003f8c <strspn+0x18>
 8003f88:	42a3      	cmp	r3, r4
 8003f8a:	d006      	beq.n	8003f9a <strspn+0x26>
 8003f8c:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d1f9      	bne.n	8003f88 <strspn+0x14>
 8003f94:	1a28      	subs	r0, r5, r0
 8003f96:	bc70      	pop	{r4, r5, r6}
 8003f98:	4770      	bx	lr
 8003f9a:	f815 4f01 	ldrb.w	r4, [r5, #1]!
 8003f9e:	2c00      	cmp	r4, #0
 8003fa0:	d1ed      	bne.n	8003f7e <strspn+0xa>
 8003fa2:	e7f7      	b.n	8003f94 <strspn+0x20>
 8003fa4:	4620      	mov	r0, r4
 8003fa6:	e7f6      	b.n	8003f96 <strspn+0x22>

08003fa8 <long_to_string_with_divisor.constprop.0>:
#include "memstreams.h"

#define MAX_FILLER 11
#define FLOAT_PRECISION 9

static char *long_to_string_with_divisor(char *p,
 8003fa8:	b5f0      	push	{r4, r5, r6, r7, lr}
    ll = num;
  } else {
    ll = divisor;
  }

  q = p + MAX_FILLER;
 8003faa:	f100 040b 	add.w	r4, r0, #11
 8003fae:	4623      	mov	r3, r4
  do {
    i = (int)(l % radix);
 8003fb0:	460d      	mov	r5, r1
 8003fb2:	fbb1 f1f2 	udiv	r1, r1, r2
 8003fb6:	fb02 5711 	mls	r7, r2, r1, r5
    i += '0';
 8003fba:	f107 0630 	add.w	r6, r7, #48	; 0x30
    if (i > '9')
 8003fbe:	2e39      	cmp	r6, #57	; 0x39
      i += 'A' - '0' - 10;
 8003fc0:	bfc8      	it	gt
 8003fc2:	f107 0637 	addgt.w	r6, r7, #55	; 0x37
    *--q = i;
    l /= radix;
  } while ((ll /= radix) != 0);
 8003fc6:	4295      	cmp	r5, r2
    *--q = i;
 8003fc8:	f803 6d01 	strb.w	r6, [r3, #-1]!
  } while ((ll /= radix) != 0);
 8003fcc:	d2f0      	bcs.n	8003fb0 <long_to_string_with_divisor.constprop.0+0x8>
 8003fce:	1e42      	subs	r2, r0, #1

  i = (int)(p + MAX_FILLER - q);
 8003fd0:	1ae1      	subs	r1, r4, r3
  do
    *p++ = *q++;
 8003fd2:	f813 5b01 	ldrb.w	r5, [r3], #1
  while (--i);
 8003fd6:	429c      	cmp	r4, r3
    *p++ = *q++;
 8003fd8:	f802 5f01 	strb.w	r5, [r2, #1]!
  while (--i);
 8003fdc:	d1f9      	bne.n	8003fd2 <long_to_string_with_divisor.constprop.0+0x2a>

  return p;
}
 8003fde:	4408      	add	r0, r1
 8003fe0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003fe4 <packetQueueEndWritePacket.constprop.0>:
}

void packetQueueEndWritePacket(PacketQueue_t* queue)
{
    /* Did we write more bytes than the ENTIRE queue? */
    if(queue->pktLen >= queue->bufferSize-2) {
 8003fe4:	4b13      	ldr	r3, [pc, #76]	; (8004034 <packetQueueEndWritePacket.constprop.0+0x50>)
 8003fe6:	685a      	ldr	r2, [r3, #4]
 8003fe8:	6999      	ldr	r1, [r3, #24]
 8003fea:	3a02      	subs	r2, #2
 8003fec:	4291      	cmp	r1, r2
 8003fee:	d309      	bcc.n	8004004 <packetQueueEndWritePacket.constprop.0+0x20>
        queue->numDropped+=queue->pktCount+1;
 8003ff0:	6a1a      	ldr	r2, [r3, #32]
 8003ff2:	8a99      	ldrh	r1, [r3, #20]
 8003ff4:	3201      	adds	r2, #1
 8003ff6:	440a      	add	r2, r1
 8003ff8:	621a      	str	r2, [r3, #32]
        queue->pktCount = 0;
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	829a      	strh	r2, [r3, #20]
        queue->readPtr = 0;
 8003ffe:	609a      	str	r2, [r3, #8]
        queue->writePtr = 0;
 8004000:	611a      	str	r2, [r3, #16]
 8004002:	4770      	bx	lr
        return;
    }

    /* Packet too long? */
    if(queue->pktLen > 0xffff) {
 8004004:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8004008:	69da      	ldr	r2, [r3, #28]
 800400a:	d304      	bcc.n	8004016 <packetQueueEndWritePacket.constprop.0+0x32>
        queue->writePtr = queue->lenHeaderStart;
 800400c:	611a      	str	r2, [r3, #16]
        queue->numDropped++;
 800400e:	6a1a      	ldr	r2, [r3, #32]
 8004010:	3201      	adds	r2, #1
 8004012:	621a      	str	r2, [r3, #32]
 8004014:	4770      	bx	lr
        return;
    }

    uint32_t hdrIndex = queue->lenHeaderStart;
    queue->buffer[hdrIndex] = queue->pktLen >> 8;
 8004016:	6818      	ldr	r0, [r3, #0]
 8004018:	0a09      	lsrs	r1, r1, #8
 800401a:	5481      	strb	r1, [r0, r2]
    hdrIndex++;
    if(hdrIndex >= queue->bufferSize) {
 800401c:	6859      	ldr	r1, [r3, #4]
    hdrIndex++;
 800401e:	3201      	adds	r2, #1
        hdrIndex = 0;
 8004020:	428a      	cmp	r2, r1
 8004022:	bf28      	it	cs
 8004024:	2200      	movcs	r2, #0
    }
    queue->buffer[hdrIndex] = queue->pktLen & 0xff;
 8004026:	6998      	ldr	r0, [r3, #24]
 8004028:	6819      	ldr	r1, [r3, #0]
 800402a:	5488      	strb	r0, [r1, r2]
    queue->pktCount++;
 800402c:	8a9a      	ldrh	r2, [r3, #20]
 800402e:	3201      	adds	r2, #1
 8004030:	829a      	strh	r2, [r3, #20]
}
 8004032:	4770      	bx	lr
 8004034:	20001310 	.word	0x20001310

08004038 <packetQueueReadByte.constprop.0>:
    uint8_t retVal = queue->buffer[queue->readPtr];
 8004038:	4b05      	ldr	r3, [pc, #20]	; (8004050 <packetQueueReadByte.constprop.0+0x18>)
 800403a:	689a      	ldr	r2, [r3, #8]
 800403c:	6819      	ldr	r1, [r3, #0]
 800403e:	5c88      	ldrb	r0, [r1, r2]
    if(queue->readPtr >= queue->bufferSize) {
 8004040:	6859      	ldr	r1, [r3, #4]
    queue->readPtr++;
 8004042:	3201      	adds	r2, #1
    if(queue->readPtr >= queue->bufferSize) {
 8004044:	428a      	cmp	r2, r1
    queue->readPtr++;
 8004046:	609a      	str	r2, [r3, #8]
        queue->readPtr = 0;
 8004048:	bf24      	itt	cs
 800404a:	2200      	movcs	r2, #0
 800404c:	609a      	strcs	r2, [r3, #8]
}
 800404e:	4770      	bx	lr
 8004050:	20001310 	.word	0x20001310

08004054 <packetQueueWriteByte.constprop.0>:
static void packetQueueWriteByte(PacketQueue_t* queue, uint8_t byte)
 8004054:	b570      	push	{r4, r5, r6, lr}
    if(queue->pktCount && queue->writePtr == queue->readPtr) {
 8004056:	4c15      	ldr	r4, [pc, #84]	; (80040ac <packetQueueWriteByte.constprop.0+0x58>)
static void packetQueueWriteByte(PacketQueue_t* queue, uint8_t byte)
 8004058:	4605      	mov	r5, r0
    if(queue->pktCount && queue->writePtr == queue->readPtr) {
 800405a:	8aa3      	ldrh	r3, [r4, #20]
 800405c:	b1cb      	cbz	r3, 8004092 <packetQueueWriteByte.constprop.0+0x3e>
 800405e:	68a2      	ldr	r2, [r4, #8]
 8004060:	6923      	ldr	r3, [r4, #16]
 8004062:	429a      	cmp	r2, r3
 8004064:	d115      	bne.n	8004092 <packetQueueWriteByte.constprop.0+0x3e>
        uint16_t dropPktLen = (packetQueueReadByte(queue) << 8) |
 8004066:	f7ff ffe7 	bl	8004038 <packetQueueReadByte.constprop.0>
 800406a:	4606      	mov	r6, r0
                              (packetQueueReadByte(queue));
 800406c:	f7ff ffe4 	bl	8004038 <packetQueueReadByte.constprop.0>
        uint16_t dropPktLen = (packetQueueReadByte(queue) << 8) |
 8004070:	ea40 2306 	orr.w	r3, r0, r6, lsl #8
        queue->readPtr += dropPktLen;
 8004074:	68a0      	ldr	r0, [r4, #8]
        if(queue->readPtr >= queue->bufferSize) {
 8004076:	6862      	ldr	r2, [r4, #4]
        queue->readPtr += dropPktLen;
 8004078:	b29b      	uxth	r3, r3
 800407a:	4403      	add	r3, r0
        if(queue->readPtr >= queue->bufferSize) {
 800407c:	4293      	cmp	r3, r2
        queue->readPtr += dropPktLen;
 800407e:	60a3      	str	r3, [r4, #8]
            queue->readPtr -= queue->bufferSize;
 8004080:	bf24      	itt	cs
 8004082:	1a9b      	subcs	r3, r3, r2
 8004084:	60a3      	strcs	r3, [r4, #8]
        queue->pktCount--;
 8004086:	8aa3      	ldrh	r3, [r4, #20]
 8004088:	3b01      	subs	r3, #1
 800408a:	82a3      	strh	r3, [r4, #20]
        queue->numDropped++;
 800408c:	6a23      	ldr	r3, [r4, #32]
 800408e:	3301      	adds	r3, #1
 8004090:	6223      	str	r3, [r4, #32]
    queue->buffer[queue->writePtr] = byte;
 8004092:	6923      	ldr	r3, [r4, #16]
 8004094:	6822      	ldr	r2, [r4, #0]
 8004096:	54d5      	strb	r5, [r2, r3]
    queue->writePtr++;
 8004098:	6923      	ldr	r3, [r4, #16]
    if(queue->writePtr >= queue->bufferSize) {
 800409a:	6862      	ldr	r2, [r4, #4]
    queue->writePtr++;
 800409c:	3301      	adds	r3, #1
    if(queue->writePtr >= queue->bufferSize) {
 800409e:	4293      	cmp	r3, r2
    queue->writePtr++;
 80040a0:	6123      	str	r3, [r4, #16]
        queue->writePtr = 0;
 80040a2:	bf24      	itt	cs
 80040a4:	2300      	movcs	r3, #0
 80040a6:	6123      	strcs	r3, [r4, #16]
}
 80040a8:	bd70      	pop	{r4, r5, r6, pc}
 80040aa:	bf00      	nop
 80040ac:	20001310 	.word	0x20001310

080040b0 <packetQueuePutBytes.constprop.0>:
void packetQueuePutBytes(PacketQueue_t* queue, const uint8_t* payload, uint16_t size)
 80040b0:	b570      	push	{r4, r5, r6, lr}
 80040b2:	4606      	mov	r6, r0
 80040b4:	460c      	mov	r4, r1
    for(uint32_t i=0; i<size; i++) {
 80040b6:	2500      	movs	r5, #0
 80040b8:	42a5      	cmp	r5, r4
 80040ba:	d304      	bcc.n	80040c6 <packetQueuePutBytes.constprop.0+0x16>
    queue->pktLen += size;
 80040bc:	4b04      	ldr	r3, [pc, #16]	; (80040d0 <packetQueuePutBytes.constprop.0+0x20>)
 80040be:	6999      	ldr	r1, [r3, #24]
 80040c0:	4421      	add	r1, r4
 80040c2:	6199      	str	r1, [r3, #24]
}
 80040c4:	bd70      	pop	{r4, r5, r6, pc}
        packetQueueWriteByte(queue, payload[i]);
 80040c6:	5d70      	ldrb	r0, [r6, r5]
 80040c8:	f7ff ffc4 	bl	8004054 <packetQueueWriteByte.constprop.0>
    for(uint32_t i=0; i<size; i++) {
 80040cc:	3501      	adds	r5, #1
 80040ce:	e7f3      	b.n	80040b8 <packetQueuePutBytes.constprop.0+0x8>
 80040d0:	20001310 	.word	0x20001310

080040d4 <vPortBusyDelay>:
 80040d4:	2300      	movs	r3, #0
 80040d6:	08c0      	lsrs	r0, r0, #3

080040d8 <loop317>:
 80040d8:	4283      	cmp	r3, r0
 80040da:	d001      	beq.n	80040e0 <done317>
 80040dc:	3301      	adds	r3, #1
 80040de:	e7fb      	b.n	80040d8 <loop317>

080040e0 <done317>:
 80040e0:	4770      	bx	lr
	...

080040e4 <vPortValidateInterruptPriority>:
 80040e4:	f3ef 8305 	mrs	r3, IPSR
 80040e8:	2b0f      	cmp	r3, #15
 80040ea:	d906      	bls.n	80040fa <vPortValidateInterruptPriority+0x16>
 80040ec:	4a08      	ldr	r2, [pc, #32]	; (8004110 <vPortValidateInterruptPriority+0x2c>)
 80040ee:	5c9b      	ldrb	r3, [r3, r2]
 80040f0:	4a08      	ldr	r2, [pc, #32]	; (8004114 <vPortValidateInterruptPriority+0x30>)
 80040f2:	7812      	ldrb	r2, [r2, #0]
 80040f4:	429a      	cmp	r2, r3
 80040f6:	d900      	bls.n	80040fa <vPortValidateInterruptPriority+0x16>
 80040f8:	e7fe      	b.n	80040f8 <vPortValidateInterruptPriority+0x14>
 80040fa:	4b07      	ldr	r3, [pc, #28]	; (8004118 <vPortValidateInterruptPriority+0x34>)
 80040fc:	4a07      	ldr	r2, [pc, #28]	; (800411c <vPortValidateInterruptPriority+0x38>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	6812      	ldr	r2, [r2, #0]
 8004102:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004106:	4293      	cmp	r3, r2
 8004108:	d900      	bls.n	800410c <vPortValidateInterruptPriority+0x28>
 800410a:	e7fe      	b.n	800410a <vPortValidateInterruptPriority+0x26>
 800410c:	4770      	bx	lr
 800410e:	bf00      	nop
 8004110:	e000e3f0 	.word	0xe000e3f0
 8004114:	20001340 	.word	0x20001340
 8004118:	e000ed0c 	.word	0xe000ed0c
 800411c:	20001344 	.word	0x20001344

08004120 <xPortPendSVHandler>:
 8004120:	4b18      	ldr	r3, [pc, #96]	; (8004184 <pxCurrentTCBConst+0x4>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4818      	ldr	r0, [pc, #96]	; (8004188 <pxCurrentTCBConst+0x8>)
 8004126:	461a      	mov	r2, r3
 8004128:	6002      	str	r2, [r0, #0]
 800412a:	f3ef 8009 	mrs	r0, PSP
 800412e:	f3bf 8f6f 	isb	sy
 8004132:	4b13      	ldr	r3, [pc, #76]	; (8004180 <pxCurrentTCBConst>)
 8004134:	681a      	ldr	r2, [r3, #0]
 8004136:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800413a:	4c14      	ldr	r4, [pc, #80]	; (800418c <pxCurrentTCBConst+0xc>)
 800413c:	6824      	ldr	r4, [r4, #0]
 800413e:	f3ef 8111 	mrs	r1, BASEPRI
 8004142:	e920 0012 	stmdb	r0!, {r1, r4}
 8004146:	6010      	str	r0, [r2, #0]
 8004148:	e92d 4008 	stmdb	sp!, {r3, lr}
 800414c:	f04f 00bf 	mov.w	r0, #191	; 0xbf
 8004150:	f380 8811 	msr	BASEPRI, r0
 8004154:	f007 f8b0 	bl	800b2b8 <vTaskSwitchContext>
 8004158:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800415c:	6819      	ldr	r1, [r3, #0]
 800415e:	6808      	ldr	r0, [r1, #0]
 8004160:	c812      	ldmia	r0!, {r1, r4}
 8004162:	f381 8811 	msr	BASEPRI, r1
 8004166:	4909      	ldr	r1, [pc, #36]	; (800418c <pxCurrentTCBConst+0xc>)
 8004168:	600c      	str	r4, [r1, #0]
 800416a:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800416e:	f380 8809 	msr	PSP, r0
 8004172:	f3bf 8f6f 	isb	sy
 8004176:	4770      	bx	lr
 8004178:	f3af 8000 	nop.w
 800417c:	f3af 8000 	nop.w

08004180 <pxCurrentTCBConst>:
 8004180:	200011a8 	.word	0x200011a8
 8004184:	2000134c 	.word	0x2000134c
 8004188:	e000ed20 	.word	0xe000ed20
 800418c:	20001358 	.word	0x20001358

08004190 <vPortExitCriticalFromISR>:
 8004190:	4a04      	ldr	r2, [pc, #16]	; (80041a4 <vPortExitCriticalFromISR+0x14>)
 8004192:	6813      	ldr	r3, [r2, #0]
 8004194:	b903      	cbnz	r3, 8004198 <vPortExitCriticalFromISR+0x8>
 8004196:	e7fe      	b.n	8004196 <vPortExitCriticalFromISR+0x6>
 8004198:	3b01      	subs	r3, #1
 800419a:	6013      	str	r3, [r2, #0]
 800419c:	f380 8811 	msr	BASEPRI, r0
 80041a0:	4770      	bx	lr
 80041a2:	bf00      	nop
 80041a4:	20001358 	.word	0x20001358

080041a8 <ulPortEnterCriticalFromISR>:
 80041a8:	f3ef 8011 	mrs	r0, BASEPRI
 80041ac:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 80041b0:	f383 8811 	msr	BASEPRI, r3
 80041b4:	f3bf 8f6f 	isb	sy
 80041b8:	f3bf 8f4f 	dsb	sy
 80041bc:	4a02      	ldr	r2, [pc, #8]	; (80041c8 <ulPortEnterCriticalFromISR+0x20>)
 80041be:	6813      	ldr	r3, [r2, #0]
 80041c0:	3301      	adds	r3, #1
 80041c2:	6013      	str	r3, [r2, #0]
 80041c4:	4770      	bx	lr
 80041c6:	bf00      	nop
 80041c8:	20001358 	.word	0x20001358

080041cc <vPortExitCritical>:
 80041cc:	4a04      	ldr	r2, [pc, #16]	; (80041e0 <vPortExitCritical+0x14>)
 80041ce:	6813      	ldr	r3, [r2, #0]
 80041d0:	b903      	cbnz	r3, 80041d4 <vPortExitCritical+0x8>
 80041d2:	e7fe      	b.n	80041d2 <vPortExitCritical+0x6>
 80041d4:	3b01      	subs	r3, #1
 80041d6:	6013      	str	r3, [r2, #0]
 80041d8:	b90b      	cbnz	r3, 80041de <vPortExitCritical+0x12>
 80041da:	f383 8811 	msr	BASEPRI, r3
 80041de:	4770      	bx	lr
 80041e0:	20001358 	.word	0x20001358

080041e4 <vPortEnterCritical>:
 80041e4:	4b06      	ldr	r3, [pc, #24]	; (8004200 <vPortEnterCritical+0x1c>)
 80041e6:	681a      	ldr	r2, [r3, #0]
 80041e8:	b93a      	cbnz	r2, 80041fa <vPortEnterCritical+0x16>
 80041ea:	f04f 01bf 	mov.w	r1, #191	; 0xbf
 80041ee:	f381 8811 	msr	BASEPRI, r1
 80041f2:	f3bf 8f6f 	isb	sy
 80041f6:	f3bf 8f4f 	dsb	sy
 80041fa:	3201      	adds	r2, #1
 80041fc:	601a      	str	r2, [r3, #0]
 80041fe:	4770      	bx	lr
 8004200:	20001358 	.word	0x20001358

08004204 <prvPortStartFirstTask>:
 8004204:	4806      	ldr	r0, [pc, #24]	; (8004220 <prvPortStartFirstTask+0x1c>)
 8004206:	6800      	ldr	r0, [r0, #0]
 8004208:	6800      	ldr	r0, [r0, #0]
 800420a:	f380 8808 	msr	MSP, r0
 800420e:	b662      	cpsie	i
 8004210:	b661      	cpsie	f
 8004212:	f3bf 8f4f 	dsb	sy
 8004216:	f3bf 8f6f 	isb	sy
 800421a:	df00      	svc	0
 800421c:	bf00      	nop
 800421e:	0000      	.short	0x0000
 8004220:	e000ed08 	.word	0xe000ed08
	...

08004230 <vPortSVCHandler>:
 8004230:	4b0b      	ldr	r3, [pc, #44]	; (8004260 <pxCurrentTCBConst2>)
 8004232:	6819      	ldr	r1, [r3, #0]
 8004234:	6808      	ldr	r0, [r1, #0]
 8004236:	c830      	ldmia	r0!, {r4, r5}
 8004238:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800423c:	f380 8809 	msr	PSP, r0
 8004240:	f3bf 8f6f 	isb	sy
 8004244:	f04f 0000 	mov.w	r0, #0
 8004248:	f380 8811 	msr	BASEPRI, r0
 800424c:	f04e 0e0d 	orr.w	lr, lr, #13
 8004250:	4770      	bx	lr
 8004252:	bf00      	nop
 8004254:	f3af 8000 	nop.w
 8004258:	f3af 8000 	nop.w
 800425c:	f3af 8000 	nop.w

08004260 <pxCurrentTCBConst2>:
 8004260:	200011a8 	.word	0x200011a8

08004264 <prvTaskExitError>:
 8004264:	b508      	push	{r3, lr}
 8004266:	4b04      	ldr	r3, [pc, #16]	; (8004278 <prvTaskExitError+0x14>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	3301      	adds	r3, #1
 800426c:	d000      	beq.n	8004270 <prvTaskExitError+0xc>
 800426e:	e7fe      	b.n	800426e <prvTaskExitError+0xa>
 8004270:	f7ff ffb8 	bl	80041e4 <vPortEnterCritical>
 8004274:	e7fe      	b.n	8004274 <prvTaskExitError+0x10>
 8004276:	bf00      	nop
 8004278:	20001358 	.word	0x20001358

0800427c <prvResetNextTaskUnblockTime>:
 800427c:	4a06      	ldr	r2, [pc, #24]	; (8004298 <prvResetNextTaskUnblockTime+0x1c>)
 800427e:	6813      	ldr	r3, [r2, #0]
 8004280:	6819      	ldr	r1, [r3, #0]
 8004282:	4b06      	ldr	r3, [pc, #24]	; (800429c <prvResetNextTaskUnblockTime+0x20>)
 8004284:	b919      	cbnz	r1, 800428e <prvResetNextTaskUnblockTime+0x12>
 8004286:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800428a:	601a      	str	r2, [r3, #0]
 800428c:	4770      	bx	lr
 800428e:	6812      	ldr	r2, [r2, #0]
 8004290:	68d2      	ldr	r2, [r2, #12]
 8004292:	68d2      	ldr	r2, [r2, #12]
 8004294:	6852      	ldr	r2, [r2, #4]
 8004296:	e7f8      	b.n	800428a <prvResetNextTaskUnblockTime+0xe>
 8004298:	200011ac 	.word	0x200011ac
 800429c:	200015f8 	.word	0x200015f8

080042a0 <xTaskCheckForTimeOut>:
 80042a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042a2:	460c      	mov	r4, r1
 80042a4:	f7ff ff9e 	bl	80041e4 <vPortEnterCritical>
 80042a8:	6823      	ldr	r3, [r4, #0]
 80042aa:	4a10      	ldr	r2, [pc, #64]	; (80042ec <xTaskCheckForTimeOut+0x4c>)
 80042ac:	1c59      	adds	r1, r3, #1
 80042ae:	4694      	mov	ip, r2
 80042b0:	6816      	ldr	r6, [r2, #0]
 80042b2:	d012      	beq.n	80042da <xTaskCheckForTimeOut+0x3a>
 80042b4:	490e      	ldr	r1, [pc, #56]	; (80042f0 <xTaskCheckForTimeOut+0x50>)
 80042b6:	6802      	ldr	r2, [r0, #0]
 80042b8:	680f      	ldr	r7, [r1, #0]
 80042ba:	6845      	ldr	r5, [r0, #4]
 80042bc:	42ba      	cmp	r2, r7
 80042be:	d001      	beq.n	80042c4 <xTaskCheckForTimeOut+0x24>
 80042c0:	42b5      	cmp	r5, r6
 80042c2:	d910      	bls.n	80042e6 <xTaskCheckForTimeOut+0x46>
 80042c4:	1b77      	subs	r7, r6, r5
 80042c6:	42bb      	cmp	r3, r7
 80042c8:	d90b      	bls.n	80042e2 <xTaskCheckForTimeOut+0x42>
 80042ca:	1b9b      	subs	r3, r3, r6
 80042cc:	442b      	add	r3, r5
 80042ce:	6023      	str	r3, [r4, #0]
 80042d0:	680b      	ldr	r3, [r1, #0]
 80042d2:	6003      	str	r3, [r0, #0]
 80042d4:	f8dc 3000 	ldr.w	r3, [ip]
 80042d8:	6043      	str	r3, [r0, #4]
 80042da:	2000      	movs	r0, #0
 80042dc:	f7ff ff76 	bl	80041cc <vPortExitCritical>
 80042e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80042e2:	2300      	movs	r3, #0
 80042e4:	6023      	str	r3, [r4, #0]
 80042e6:	2001      	movs	r0, #1
 80042e8:	e7f8      	b.n	80042dc <xTaskCheckForTimeOut+0x3c>
 80042ea:	bf00      	nop
 80042ec:	20001648 	.word	0x20001648
 80042f0:	200015fc 	.word	0x200015fc

080042f4 <prvGetExpectedIdleTime>:
 80042f4:	4b09      	ldr	r3, [pc, #36]	; (800431c <prvGetExpectedIdleTime+0x28>)
 80042f6:	4a0a      	ldr	r2, [pc, #40]	; (8004320 <prvGetExpectedIdleTime+0x2c>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	6812      	ldr	r2, [r2, #0]
 80042fc:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 80042fe:	b958      	cbnz	r0, 8004318 <prvGetExpectedIdleTime+0x24>
 8004300:	4a08      	ldr	r2, [pc, #32]	; (8004324 <prvGetExpectedIdleTime+0x30>)
 8004302:	6812      	ldr	r2, [r2, #0]
 8004304:	2a01      	cmp	r2, #1
 8004306:	d808      	bhi.n	800431a <prvGetExpectedIdleTime+0x26>
 8004308:	2b01      	cmp	r3, #1
 800430a:	d806      	bhi.n	800431a <prvGetExpectedIdleTime+0x26>
 800430c:	4b06      	ldr	r3, [pc, #24]	; (8004328 <prvGetExpectedIdleTime+0x34>)
 800430e:	6818      	ldr	r0, [r3, #0]
 8004310:	4b06      	ldr	r3, [pc, #24]	; (800432c <prvGetExpectedIdleTime+0x38>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	1ac0      	subs	r0, r0, r3
 8004316:	4770      	bx	lr
 8004318:	2000      	movs	r0, #0
 800431a:	4770      	bx	lr
 800431c:	20001374 	.word	0x20001374
 8004320:	200011a8 	.word	0x200011a8
 8004324:	200011b8 	.word	0x200011b8
 8004328:	200015f8 	.word	0x200015f8
 800432c:	20001648 	.word	0x20001648

08004330 <vTaskSuspendAll>:
 8004330:	4a02      	ldr	r2, [pc, #8]	; (800433c <vTaskSuspendAll+0xc>)
 8004332:	6813      	ldr	r3, [r2, #0]
 8004334:	3301      	adds	r3, #1
 8004336:	6013      	str	r3, [r2, #0]
 8004338:	4770      	bx	lr
 800433a:	bf00      	nop
 800433c:	2000136c 	.word	0x2000136c

08004340 <vTaskEndScheduler>:
 8004340:	b508      	push	{r3, lr}
 8004342:	f7ff ff4f 	bl	80041e4 <vPortEnterCritical>
 8004346:	2200      	movs	r2, #0
 8004348:	4b02      	ldr	r3, [pc, #8]	; (8004354 <vTaskEndScheduler+0x14>)
 800434a:	601a      	str	r2, [r3, #0]
 800434c:	b672      	cpsid	i
 800434e:	b671      	cpsid	f
 8004350:	bd08      	pop	{r3, pc}
 8004352:	bf00      	nop
 8004354:	20001614 	.word	0x20001614

08004358 <dmaStreamAllocate.constprop.0>:
 * @retval false        no error, stream taken.
 * @retval true         error, stream already taken.
 *
 * @special
 */
bool dmaStreamAllocate(const stm32_dma_stream_t *dmastp,
 8004358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
                       uint32_t priority,
                       stm32_dmaisr_t func,
                       void *param) {

  osalDbgCheck(dmastp != NULL);
 800435a:	b910      	cbnz	r0, 8004362 <dmaStreamAllocate.constprop.0+0xa>
 800435c:	f7ff fff0 	bl	8004340 <vTaskEndScheduler>
 8004360:	e7fe      	b.n	8004360 <dmaStreamAllocate.constprop.0+0x8>

  /* Checks if the stream is already taken.*/
  if ((dma_streams_mask & (1U << dmastp->selfindex)) != 0U)
 8004362:	2301      	movs	r3, #1
 8004364:	4c1f      	ldr	r4, [pc, #124]	; (80043e4 <dmaStreamAllocate.constprop.0+0x8c>)
 8004366:	7c47      	ldrb	r7, [r0, #17]
 8004368:	6826      	ldr	r6, [r4, #0]
 800436a:	fa03 f507 	lsl.w	r5, r3, r7
 800436e:	4235      	tst	r5, r6
 8004370:	d135      	bne.n	80043de <dmaStreamAllocate.constprop.0+0x86>
    return true;

  /* Installs the DMA handler.*/
  _stm32_dma_isr_redir[dmastp->selfindex].dma_func  = func;
 8004372:	4b1d      	ldr	r3, [pc, #116]	; (80043e8 <dmaStreamAllocate.constprop.0+0x90>)
 8004374:	f843 1037 	str.w	r1, [r3, r7, lsl #3]
  _stm32_dma_isr_redir[dmastp->selfindex].dma_param = param;
 8004378:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800437c:	605a      	str	r2, [r3, #4]

  /* Enabling DMA clocks required by the current streams set.*/
  if ((dma_streams_mask & STM32_DMA1_STREAMS_MASK) == 0U) {
 800437e:	0673      	lsls	r3, r6, #25
    rccEnableDMA1(false);
 8004380:	bf08      	it	eq
 8004382:	4a1a      	ldreq	r2, [pc, #104]	; (80043ec <dmaStreamAllocate.constprop.0+0x94>)
    rccEnableDMA2(false);
  }
#endif

  /* Putting the stream in a safe state.*/
  dmaStreamDisable(dmastp);
 8004384:	6801      	ldr	r1, [r0, #0]
    rccEnableDMA1(false);
 8004386:	bf02      	ittt	eq
 8004388:	6953      	ldreq	r3, [r2, #20]
 800438a:	f043 0301 	orreq.w	r3, r3, #1
 800438e:	6153      	streq	r3, [r2, #20]
  dmaStreamDisable(dmastp);
 8004390:	6843      	ldr	r3, [r0, #4]
 8004392:	681a      	ldr	r2, [r3, #0]
 8004394:	f022 020f 	bic.w	r2, r2, #15
 8004398:	601a      	str	r2, [r3, #0]
 800439a:	220e      	movs	r2, #14
 800439c:	7c07      	ldrb	r7, [r0, #16]
 800439e:	40ba      	lsls	r2, r7
 80043a0:	604a      	str	r2, [r1, #4]
  dmastp->channel->CCR = STM32_DMA_CCR_RESET_VALUE;
 80043a2:	2200      	movs	r2, #0
 80043a4:	601a      	str	r2, [r3, #0]

  /* Enables the associated IRQ vector if not alread enabled and if a
     callback is defined.*/
  if (((dma_streams_mask & dmastp->cmask) == 0U) &&
 80043a6:	6883      	ldr	r3, [r0, #8]
 80043a8:	421e      	tst	r6, r3
 80043aa:	d114      	bne.n	80043d6 <dmaStreamAllocate.constprop.0+0x7e>

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80043ac:	21c0      	movs	r1, #192	; 0xc0
      (func != NULL)) {
    nvicEnableVector(dmastp->vector, priority);
 80043ae:	7c83      	ldrb	r3, [r0, #18]
 80043b0:	f103 4260 	add.w	r2, r3, #3758096384	; 0xe0000000
 80043b4:	f502 4261 	add.w	r2, r2, #57600	; 0xe100
 80043b8:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80043bc:	2201      	movs	r2, #1
 80043be:	f003 011f 	and.w	r1, r3, #31
 80043c2:	095b      	lsrs	r3, r3, #5
 80043c4:	009b      	lsls	r3, r3, #2
 80043c6:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 80043ca:	408a      	lsls	r2, r1
 80043cc:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
 80043d0:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 80043d4:	601a      	str	r2, [r3, #0]
  }

  /* Marks the stream as allocated.*/
  dma_streams_mask |= (1U << dmastp->selfindex);

  return false;
 80043d6:	2000      	movs	r0, #0
  dma_streams_mask |= (1U << dmastp->selfindex);
 80043d8:	4335      	orrs	r5, r6
 80043da:	6025      	str	r5, [r4, #0]
}
 80043dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return true;
 80043de:	4618      	mov	r0, r3
 80043e0:	e7fc      	b.n	80043dc <dmaStreamAllocate.constprop.0+0x84>
 80043e2:	bf00      	nop
 80043e4:	20001044 	.word	0x20001044
 80043e8:	20000fe8 	.word	0x20000fe8
 80043ec:	40021000 	.word	0x40021000

080043f0 <uxListRemove>:
 80043f0:	6903      	ldr	r3, [r0, #16]
 80043f2:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
 80043f6:	608a      	str	r2, [r1, #8]
 80043f8:	6051      	str	r1, [r2, #4]
 80043fa:	6859      	ldr	r1, [r3, #4]
 80043fc:	4281      	cmp	r1, r0
 80043fe:	bf08      	it	eq
 8004400:	605a      	streq	r2, [r3, #4]
 8004402:	2200      	movs	r2, #0
 8004404:	6102      	str	r2, [r0, #16]
 8004406:	681a      	ldr	r2, [r3, #0]
 8004408:	3a01      	subs	r2, #1
 800440a:	601a      	str	r2, [r3, #0]
 800440c:	6818      	ldr	r0, [r3, #0]
 800440e:	4770      	bx	lr

08004410 <vListInsert>:
 8004410:	b530      	push	{r4, r5, lr}
 8004412:	680c      	ldr	r4, [r1, #0]
 8004414:	1c63      	adds	r3, r4, #1
 8004416:	d10a      	bne.n	800442e <vListInsert+0x1e>
 8004418:	6903      	ldr	r3, [r0, #16]
 800441a:	685a      	ldr	r2, [r3, #4]
 800441c:	604a      	str	r2, [r1, #4]
 800441e:	6091      	str	r1, [r2, #8]
 8004420:	608b      	str	r3, [r1, #8]
 8004422:	6059      	str	r1, [r3, #4]
 8004424:	6803      	ldr	r3, [r0, #0]
 8004426:	6108      	str	r0, [r1, #16]
 8004428:	3301      	adds	r3, #1
 800442a:	6003      	str	r3, [r0, #0]
 800442c:	bd30      	pop	{r4, r5, pc}
 800442e:	f100 0208 	add.w	r2, r0, #8
 8004432:	4613      	mov	r3, r2
 8004434:	6852      	ldr	r2, [r2, #4]
 8004436:	6815      	ldr	r5, [r2, #0]
 8004438:	42a5      	cmp	r5, r4
 800443a:	d9fa      	bls.n	8004432 <vListInsert+0x22>
 800443c:	e7ed      	b.n	800441a <vListInsert+0xa>

0800443e <vListInsertEnd>:
 800443e:	6843      	ldr	r3, [r0, #4]
 8004440:	689a      	ldr	r2, [r3, #8]
 8004442:	604b      	str	r3, [r1, #4]
 8004444:	608a      	str	r2, [r1, #8]
 8004446:	689a      	ldr	r2, [r3, #8]
 8004448:	6051      	str	r1, [r2, #4]
 800444a:	6099      	str	r1, [r3, #8]
 800444c:	6803      	ldr	r3, [r0, #0]
 800444e:	6108      	str	r0, [r1, #16]
 8004450:	3301      	adds	r3, #1
 8004452:	6003      	str	r3, [r0, #0]
 8004454:	4770      	bx	lr
	...

08004458 <xTaskGenericNotifyFromISR.constprop.0>:
 8004458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800445a:	4604      	mov	r4, r0
 800445c:	b900      	cbnz	r0, 8004460 <xTaskGenericNotifyFromISR.constprop.0+0x8>
 800445e:	e7fe      	b.n	800445e <xTaskGenericNotifyFromISR.constprop.0+0x6>
 8004460:	f7ff fe40 	bl	80040e4 <vPortValidateInterruptPriority>
 8004464:	f7ff fea0 	bl	80041a8 <ulPortEnterCriticalFromISR>
 8004468:	2202      	movs	r2, #2
 800446a:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
 800446e:	4606      	mov	r6, r0
 8004470:	2b01      	cmp	r3, #1
 8004472:	f884 2064 	strb.w	r2, [r4, #100]	; 0x64
 8004476:	b2dd      	uxtb	r5, r3
 8004478:	6621      	str	r1, [r4, #96]	; 0x60
 800447a:	d11f      	bne.n	80044bc <xTaskGenericNotifyFromISR.constprop.0+0x64>
 800447c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800447e:	b103      	cbz	r3, 8004482 <xTaskGenericNotifyFromISR.constprop.0+0x2a>
 8004480:	e7fe      	b.n	8004480 <xTaskGenericNotifyFromISR.constprop.0+0x28>
 8004482:	4b13      	ldr	r3, [pc, #76]	; (80044d0 <xTaskGenericNotifyFromISR.constprop.0+0x78>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	b9f3      	cbnz	r3, 80044c6 <xTaskGenericNotifyFromISR.constprop.0+0x6e>
 8004488:	1d27      	adds	r7, r4, #4
 800448a:	4638      	mov	r0, r7
 800448c:	f7ff ffb0 	bl	80043f0 <uxListRemove>
 8004490:	4a10      	ldr	r2, [pc, #64]	; (80044d4 <xTaskGenericNotifyFromISR.constprop.0+0x7c>)
 8004492:	2014      	movs	r0, #20
 8004494:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004496:	6811      	ldr	r1, [r2, #0]
 8004498:	409d      	lsls	r5, r3
 800449a:	430d      	orrs	r5, r1
 800449c:	4639      	mov	r1, r7
 800449e:	6015      	str	r5, [r2, #0]
 80044a0:	4a0d      	ldr	r2, [pc, #52]	; (80044d8 <xTaskGenericNotifyFromISR.constprop.0+0x80>)
 80044a2:	fb00 2003 	mla	r0, r0, r3, r2
 80044a6:	f7ff ffca 	bl	800443e <vListInsertEnd>
 80044aa:	4b0c      	ldr	r3, [pc, #48]	; (80044dc <xTaskGenericNotifyFromISR.constprop.0+0x84>)
 80044ac:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044b2:	429a      	cmp	r2, r3
 80044b4:	bf82      	ittt	hi
 80044b6:	2201      	movhi	r2, #1
 80044b8:	4b09      	ldrhi	r3, [pc, #36]	; (80044e0 <xTaskGenericNotifyFromISR.constprop.0+0x88>)
 80044ba:	601a      	strhi	r2, [r3, #0]
 80044bc:	4630      	mov	r0, r6
 80044be:	f7ff fe67 	bl	8004190 <vPortExitCriticalFromISR>
 80044c2:	2001      	movs	r0, #1
 80044c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80044c6:	4807      	ldr	r0, [pc, #28]	; (80044e4 <xTaskGenericNotifyFromISR.constprop.0+0x8c>)
 80044c8:	f104 0118 	add.w	r1, r4, #24
 80044cc:	e7eb      	b.n	80044a6 <xTaskGenericNotifyFromISR.constprop.0+0x4e>
 80044ce:	bf00      	nop
 80044d0:	2000136c 	.word	0x2000136c
 80044d4:	20001374 	.word	0x20001374
 80044d8:	200011b8 	.word	0x200011b8
 80044dc:	200011a8 	.word	0x200011a8
 80044e0:	2000164c 	.word	0x2000164c
 80044e4:	20001600 	.word	0x20001600

080044e8 <osalThreadResumeI.lto_priv.2>:
 80044e8:	b510      	push	{r4, lr}
 80044ea:	4604      	mov	r4, r0
 80044ec:	f3ef 8311 	mrs	r3, BASEPRI
 80044f0:	b133      	cbz	r3, 8004500 <osalThreadResumeI.lto_priv.2+0x18>
}

static inline void osalThreadResumeI(thread_reference_t* thread_reference, msg_t msg)
{
    osalDbgCheckClassI();
    if(*thread_reference) {
 80044f2:	6800      	ldr	r0, [r0, #0]
 80044f4:	b118      	cbz	r0, 80044fe <osalThreadResumeI.lto_priv.2+0x16>
        xTaskNotifyFromISR( *thread_reference, msg, eSetValueWithOverwrite, NULL );
 80044f6:	f7ff ffaf 	bl	8004458 <xTaskGenericNotifyFromISR.constprop.0>
        *thread_reference = NULL;
 80044fa:	2300      	movs	r3, #0
 80044fc:	6023      	str	r3, [r4, #0]
 80044fe:	bd10      	pop	{r4, pc}
 8004500:	f7ff ff1e 	bl	8004340 <vTaskEndScheduler>
 8004504:	e7fe      	b.n	8004504 <osalThreadResumeI.lto_priv.2+0x1c>

08004506 <osalEventBroadcastFlagsI>:
 8004506:	b570      	push	{r4, r5, r6, lr}
 8004508:	4604      	mov	r4, r0
 800450a:	b910      	cbnz	r0, 8004512 <osalEventBroadcastFlagsI+0xc>
 800450c:	f7ff ff18 	bl	8004340 <vTaskEndScheduler>
 8004510:	e7fe      	b.n	8004510 <osalEventBroadcastFlagsI+0xa>
 8004512:	f3ef 8311 	mrs	r3, BASEPRI
 8004516:	b31b      	cbz	r3, 8004560 <osalEventBroadcastFlagsI+0x5a>
 8004518:	6846      	ldr	r6, [r0, #4]
 800451a:	68c3      	ldr	r3, [r0, #12]
 800451c:	430e      	orrs	r6, r1
 800451e:	6046      	str	r6, [r0, #4]
 8004520:	b10b      	cbz	r3, 8004526 <osalEventBroadcastFlagsI+0x20>
 8004522:	4631      	mov	r1, r6
 8004524:	4798      	blx	r3
 8004526:	6825      	ldr	r5, [r4, #0]
 8004528:	b94d      	cbnz	r5, 800453e <osalEventBroadcastFlagsI+0x38>
 800452a:	6863      	ldr	r3, [r4, #4]
 800452c:	b1db      	cbz	r3, 8004566 <osalEventBroadcastFlagsI+0x60>
 800452e:	f104 0008 	add.w	r0, r4, #8
 8004532:	f06f 0102 	mvn.w	r1, #2
 8004536:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800453a:	f7ff bfd5 	b.w	80044e8 <osalThreadResumeI.lto_priv.2>
 800453e:	692b      	ldr	r3, [r5, #16]
 8004540:	421e      	tst	r6, r3
 8004542:	d006      	beq.n	8004552 <osalEventBroadcastFlagsI+0x4c>
 8004544:	696b      	ldr	r3, [r5, #20]
 8004546:	69a9      	ldr	r1, [r5, #24]
 8004548:	4333      	orrs	r3, r6
 800454a:	68e8      	ldr	r0, [r5, #12]
 800454c:	616b      	str	r3, [r5, #20]
 800454e:	f7ff ffda 	bl	8004506 <osalEventBroadcastFlagsI>
 8004552:	692a      	ldr	r2, [r5, #16]
 8004554:	6863      	ldr	r3, [r4, #4]
 8004556:	682d      	ldr	r5, [r5, #0]
 8004558:	ea23 0302 	bic.w	r3, r3, r2
 800455c:	6063      	str	r3, [r4, #4]
 800455e:	e7e3      	b.n	8004528 <osalEventBroadcastFlagsI+0x22>
 8004560:	f7ff feee 	bl	8004340 <vTaskEndScheduler>
 8004564:	e7fe      	b.n	8004564 <osalEventBroadcastFlagsI+0x5e>
 8004566:	bd70      	pop	{r4, r5, r6, pc}

08004568 <osalThreadDequeueI>:
 8004568:	4603      	mov	r3, r0
 800456a:	b507      	push	{r0, r1, r2, lr}
 800456c:	6840      	ldr	r0, [r0, #4]
 800456e:	b148      	cbz	r0, 8004584 <osalThreadDequeueI+0x1c>
 8004570:	6d82      	ldr	r2, [r0, #88]	; 0x58
 8004572:	9001      	str	r0, [sp, #4]
 8004574:	b14a      	cbz	r2, 800458a <osalThreadDequeueI+0x22>
 8004576:	2000      	movs	r0, #0
 8004578:	6550      	str	r0, [r2, #84]	; 0x54
 800457a:	a801      	add	r0, sp, #4
 800457c:	605a      	str	r2, [r3, #4]
 800457e:	f7ff ffb3 	bl	80044e8 <osalThreadResumeI.lto_priv.2>
 8004582:	2001      	movs	r0, #1
 8004584:	b003      	add	sp, #12
 8004586:	f85d fb04 	ldr.w	pc, [sp], #4
 800458a:	601a      	str	r2, [r3, #0]
 800458c:	e7f5      	b.n	800457a <osalThreadDequeueI+0x12>

0800458e <osalThreadDequeueAllI.constprop.0>:
 800458e:	b510      	push	{r4, lr}
 8004590:	4604      	mov	r4, r0
 8004592:	b910      	cbnz	r0, 800459a <osalThreadDequeueAllI.constprop.0+0xc>
 8004594:	f7ff fed4 	bl	8004340 <vTaskEndScheduler>
 8004598:	e7fe      	b.n	8004598 <osalThreadDequeueAllI.constprop.0+0xa>
 800459a:	f3ef 8311 	mrs	r3, BASEPRI
 800459e:	b913      	cbnz	r3, 80045a6 <osalThreadDequeueAllI.constprop.0+0x18>
 80045a0:	f7ff fece 	bl	8004340 <vTaskEndScheduler>
 80045a4:	e7fe      	b.n	80045a4 <osalThreadDequeueAllI.constprop.0+0x16>
 80045a6:	f06f 0101 	mvn.w	r1, #1
 80045aa:	4620      	mov	r0, r4
 80045ac:	f7ff ffdc 	bl	8004568 <osalThreadDequeueI>
 80045b0:	2800      	cmp	r0, #0
 80045b2:	d1f8      	bne.n	80045a6 <osalThreadDequeueAllI.constprop.0+0x18>
 80045b4:	bd10      	pop	{r4, pc}

080045b6 <osalThreadDequeueNextI.constprop.0>:
 80045b6:	b508      	push	{r3, lr}
 80045b8:	b910      	cbnz	r0, 80045c0 <osalThreadDequeueNextI.constprop.0+0xa>
 80045ba:	f7ff fec1 	bl	8004340 <vTaskEndScheduler>
 80045be:	e7fe      	b.n	80045be <osalThreadDequeueNextI.constprop.0+0x8>
 80045c0:	f3ef 8311 	mrs	r3, BASEPRI
 80045c4:	b123      	cbz	r3, 80045d0 <osalThreadDequeueNextI.constprop.0+0x1a>
 80045c6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80045ca:	2100      	movs	r1, #0
 80045cc:	f7ff bfcc 	b.w	8004568 <osalThreadDequeueI>
 80045d0:	f7ff feb6 	bl	8004340 <vTaskEndScheduler>
 80045d4:	e7fe      	b.n	80045d4 <osalThreadDequeueNextI.constprop.0+0x1e>
	...

080045d8 <prvAddCurrentTaskToDelayedList>:
 80045d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045da:	4b1b      	ldr	r3, [pc, #108]	; (8004648 <prvAddCurrentTaskToDelayedList+0x70>)
 80045dc:	4f1b      	ldr	r7, [pc, #108]	; (800464c <prvAddCurrentTaskToDelayedList+0x74>)
 80045de:	681c      	ldr	r4, [r3, #0]
 80045e0:	4605      	mov	r5, r0
 80045e2:	6838      	ldr	r0, [r7, #0]
 80045e4:	460e      	mov	r6, r1
 80045e6:	3004      	adds	r0, #4
 80045e8:	f7ff ff02 	bl	80043f0 <uxListRemove>
 80045ec:	463b      	mov	r3, r7
 80045ee:	b940      	cbnz	r0, 8004602 <prvAddCurrentTaskToDelayedList+0x2a>
 80045f0:	6839      	ldr	r1, [r7, #0]
 80045f2:	4817      	ldr	r0, [pc, #92]	; (8004650 <prvAddCurrentTaskToDelayedList+0x78>)
 80045f4:	6acf      	ldr	r7, [r1, #44]	; 0x2c
 80045f6:	2101      	movs	r1, #1
 80045f8:	6802      	ldr	r2, [r0, #0]
 80045fa:	40b9      	lsls	r1, r7
 80045fc:	ea22 0201 	bic.w	r2, r2, r1
 8004600:	6002      	str	r2, [r0, #0]
 8004602:	1c6a      	adds	r2, r5, #1
 8004604:	d107      	bne.n	8004616 <prvAddCurrentTaskToDelayedList+0x3e>
 8004606:	b136      	cbz	r6, 8004616 <prvAddCurrentTaskToDelayedList+0x3e>
 8004608:	6819      	ldr	r1, [r3, #0]
 800460a:	4812      	ldr	r0, [pc, #72]	; (8004654 <prvAddCurrentTaskToDelayedList+0x7c>)
 800460c:	3104      	adds	r1, #4
 800460e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004612:	f7ff bf14 	b.w	800443e <vListInsertEnd>
 8004616:	681a      	ldr	r2, [r3, #0]
 8004618:	1964      	adds	r4, r4, r5
 800461a:	6054      	str	r4, [r2, #4]
 800461c:	d307      	bcc.n	800462e <prvAddCurrentTaskToDelayedList+0x56>
 800461e:	4a0e      	ldr	r2, [pc, #56]	; (8004658 <prvAddCurrentTaskToDelayedList+0x80>)
 8004620:	6810      	ldr	r0, [r2, #0]
 8004622:	6819      	ldr	r1, [r3, #0]
 8004624:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004628:	3104      	adds	r1, #4
 800462a:	f7ff bef1 	b.w	8004410 <vListInsert>
 800462e:	4a0b      	ldr	r2, [pc, #44]	; (800465c <prvAddCurrentTaskToDelayedList+0x84>)
 8004630:	6810      	ldr	r0, [r2, #0]
 8004632:	6819      	ldr	r1, [r3, #0]
 8004634:	3104      	adds	r1, #4
 8004636:	f7ff feeb 	bl	8004410 <vListInsert>
 800463a:	4b09      	ldr	r3, [pc, #36]	; (8004660 <prvAddCurrentTaskToDelayedList+0x88>)
 800463c:	681a      	ldr	r2, [r3, #0]
 800463e:	42a2      	cmp	r2, r4
 8004640:	bf88      	it	hi
 8004642:	601c      	strhi	r4, [r3, #0]
 8004644:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004646:	bf00      	nop
 8004648:	20001648 	.word	0x20001648
 800464c:	200011a8 	.word	0x200011a8
 8004650:	20001374 	.word	0x20001374
 8004654:	20001620 	.word	0x20001620
 8004658:	200011b4 	.word	0x200011b4
 800465c:	200011ac 	.word	0x200011ac
 8004660:	200015f8 	.word	0x200015f8

08004664 <xTaskNotifyWait.constprop.0>:
 8004664:	b570      	push	{r4, r5, r6, lr}
 8004666:	4c23      	ldr	r4, [pc, #140]	; (80046f4 <xTaskNotifyWait.constprop.0+0x90>)
 8004668:	4606      	mov	r6, r0
 800466a:	460d      	mov	r5, r1
 800466c:	4610      	mov	r0, r2
 800466e:	f7ff fdb9 	bl	80041e4 <vPortEnterCritical>
 8004672:	6823      	ldr	r3, [r4, #0]
 8004674:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8004678:	2b02      	cmp	r3, #2
 800467a:	d020      	beq.n	80046be <xTaskNotifyWait.constprop.0+0x5a>
 800467c:	2101      	movs	r1, #1
 800467e:	6822      	ldr	r2, [r4, #0]
 8004680:	6e13      	ldr	r3, [r2, #96]	; 0x60
 8004682:	ea23 0306 	bic.w	r3, r3, r6
 8004686:	6613      	str	r3, [r2, #96]	; 0x60
 8004688:	6823      	ldr	r3, [r4, #0]
 800468a:	f883 1064 	strb.w	r1, [r3, #100]	; 0x64
 800468e:	b1b0      	cbz	r0, 80046be <xTaskNotifyWait.constprop.0+0x5a>
 8004690:	f7ff ffa2 	bl	80045d8 <prvAddCurrentTaskToDelayedList>
 8004694:	4b18      	ldr	r3, [pc, #96]	; (80046f8 <xTaskNotifyWait.constprop.0+0x94>)
 8004696:	4a19      	ldr	r2, [pc, #100]	; (80046fc <xTaskNotifyWait.constprop.0+0x98>)
 8004698:	6819      	ldr	r1, [r3, #0]
 800469a:	6011      	str	r1, [r2, #0]
 800469c:	4a18      	ldr	r2, [pc, #96]	; (8004700 <xTaskNotifyWait.constprop.0+0x9c>)
 800469e:	6812      	ldr	r2, [r2, #0]
 80046a0:	b12a      	cbz	r2, 80046ae <xTaskNotifyWait.constprop.0+0x4a>
 80046a2:	681a      	ldr	r2, [r3, #0]
 80046a4:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
 80046a8:	601a      	str	r2, [r3, #0]
 80046aa:	681a      	ldr	r2, [r3, #0]
 80046ac:	601a      	str	r2, [r3, #0]
 80046ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046b2:	4b14      	ldr	r3, [pc, #80]	; (8004704 <xTaskNotifyWait.constprop.0+0xa0>)
 80046b4:	601a      	str	r2, [r3, #0]
 80046b6:	f3bf 8f4f 	dsb	sy
 80046ba:	f3bf 8f6f 	isb	sy
 80046be:	f7ff fd85 	bl	80041cc <vPortExitCritical>
 80046c2:	f7ff fd8f 	bl	80041e4 <vPortEnterCritical>
 80046c6:	6823      	ldr	r3, [r4, #0]
 80046c8:	2000      	movs	r0, #0
 80046ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046cc:	602b      	str	r3, [r5, #0]
 80046ce:	6823      	ldr	r3, [r4, #0]
 80046d0:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 80046d4:	2b02      	cmp	r3, #2
 80046d6:	bf04      	itt	eq
 80046d8:	6823      	ldreq	r3, [r4, #0]
 80046da:	6e1a      	ldreq	r2, [r3, #96]	; 0x60
 80046dc:	f04f 0200 	mov.w	r2, #0
 80046e0:	bf08      	it	eq
 80046e2:	6618      	streq	r0, [r3, #96]	; 0x60
 80046e4:	6823      	ldr	r3, [r4, #0]
 80046e6:	bf08      	it	eq
 80046e8:	2001      	moveq	r0, #1
 80046ea:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 80046ee:	f7ff fd6d 	bl	80041cc <vPortExitCritical>
 80046f2:	bd70      	pop	{r4, r5, r6, pc}
 80046f4:	200011a8 	.word	0x200011a8
 80046f8:	e000ed20 	.word	0xe000ed20
 80046fc:	2000134c 	.word	0x2000134c
 8004700:	20001358 	.word	0x20001358
 8004704:	e000ed04 	.word	0xe000ed04

08004708 <osalThreadSuspendTimeoutS>:
 8004708:	b513      	push	{r0, r1, r4, lr}
 800470a:	4604      	mov	r4, r0
 800470c:	4608      	mov	r0, r1
 800470e:	f3ef 8311 	mrs	r3, BASEPRI
 8004712:	b12b      	cbz	r3, 8004720 <osalThreadSuspendTimeoutS+0x18>
 8004714:	f3ef 8305 	mrs	r3, IPSR
 8004718:	b12b      	cbz	r3, 8004726 <osalThreadSuspendTimeoutS+0x1e>
 800471a:	f7ff fe11 	bl	8004340 <vTaskEndScheduler>
 800471e:	e7fe      	b.n	800471e <osalThreadSuspendTimeoutS+0x16>
 8004720:	f7ff fe0e 	bl	8004340 <vTaskEndScheduler>
 8004724:	e7fe      	b.n	8004724 <osalThreadSuspendTimeoutS+0x1c>
 8004726:	b181      	cbz	r1, 800474a <osalThreadSuspendTimeoutS+0x42>
 8004728:	b134      	cbz	r4, 8004738 <osalThreadSuspendTimeoutS+0x30>
 800472a:	f7ff fd5b 	bl	80041e4 <vPortEnterCritical>
 800472e:	4b0a      	ldr	r3, [pc, #40]	; (8004758 <osalThreadSuspendTimeoutS+0x50>)
 8004730:	6819      	ldr	r1, [r3, #0]
 8004732:	f7ff fd4b 	bl	80041cc <vPortExitCritical>
 8004736:	6021      	str	r1, [r4, #0]
 8004738:	4602      	mov	r2, r0
 800473a:	a901      	add	r1, sp, #4
 800473c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004740:	f7ff ff90 	bl	8004664 <xTaskNotifyWait.constprop.0>
 8004744:	b920      	cbnz	r0, 8004750 <osalThreadSuspendTimeoutS+0x48>
 8004746:	b104      	cbz	r4, 800474a <osalThreadSuspendTimeoutS+0x42>
 8004748:	6020      	str	r0, [r4, #0]
 800474a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800474e:	e000      	b.n	8004752 <osalThreadSuspendTimeoutS+0x4a>
 8004750:	9801      	ldr	r0, [sp, #4]
 8004752:	b002      	add	sp, #8
 8004754:	bd10      	pop	{r4, pc}
 8004756:	bf00      	nop
 8004758:	200011a8 	.word	0x200011a8

0800475c <osalThreadEnqueueTimeoutS>:
 800475c:	b570      	push	{r4, r5, r6, lr}
 800475e:	4605      	mov	r5, r0
 8004760:	4608      	mov	r0, r1
 8004762:	2900      	cmp	r1, #0
 8004764:	d03a      	beq.n	80047dc <osalThreadEnqueueTimeoutS+0x80>
 8004766:	f3ef 8311 	mrs	r3, BASEPRI
 800476a:	b12b      	cbz	r3, 8004778 <osalThreadEnqueueTimeoutS+0x1c>
 800476c:	f3ef 8305 	mrs	r3, IPSR
 8004770:	b12b      	cbz	r3, 800477e <osalThreadEnqueueTimeoutS+0x22>
 8004772:	f7ff fde5 	bl	8004340 <vTaskEndScheduler>
 8004776:	e7fe      	b.n	8004776 <osalThreadEnqueueTimeoutS+0x1a>
 8004778:	f7ff fde2 	bl	8004340 <vTaskEndScheduler>
 800477c:	e7fe      	b.n	800477c <osalThreadEnqueueTimeoutS+0x20>
 800477e:	4e19      	ldr	r6, [pc, #100]	; (80047e4 <osalThreadEnqueueTimeoutS+0x88>)
 8004780:	f7ff fd30 	bl	80041e4 <vPortEnterCritical>
 8004784:	6834      	ldr	r4, [r6, #0]
 8004786:	f7ff fd21 	bl	80041cc <vPortExitCritical>
 800478a:	682b      	ldr	r3, [r5, #0]
 800478c:	b9e4      	cbnz	r4, 80047c8 <osalThreadEnqueueTimeoutS+0x6c>
 800478e:	6832      	ldr	r2, [r6, #0]
 8004790:	6553      	str	r3, [r2, #84]	; 0x54
 8004792:	b9dc      	cbnz	r4, 80047cc <osalThreadEnqueueTimeoutS+0x70>
 8004794:	6832      	ldr	r2, [r6, #0]
 8004796:	2100      	movs	r1, #0
 8004798:	6591      	str	r1, [r2, #88]	; 0x58
 800479a:	b103      	cbz	r3, 800479e <osalThreadEnqueueTimeoutS+0x42>
 800479c:	659c      	str	r4, [r3, #88]	; 0x58
 800479e:	686b      	ldr	r3, [r5, #4]
 80047a0:	602c      	str	r4, [r5, #0]
 80047a2:	b903      	cbnz	r3, 80047a6 <osalThreadEnqueueTimeoutS+0x4a>
 80047a4:	606c      	str	r4, [r5, #4]
 80047a6:	4601      	mov	r1, r0
 80047a8:	2000      	movs	r0, #0
 80047aa:	f7ff ffad 	bl	8004708 <osalThreadSuspendTimeoutS>
 80047ae:	1c43      	adds	r3, r0, #1
 80047b0:	d109      	bne.n	80047c6 <osalThreadEnqueueTimeoutS+0x6a>
 80047b2:	b96c      	cbnz	r4, 80047d0 <osalThreadEnqueueTimeoutS+0x74>
 80047b4:	6833      	ldr	r3, [r6, #0]
 80047b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047b8:	b904      	cbnz	r4, 80047bc <osalThreadEnqueueTimeoutS+0x60>
 80047ba:	6834      	ldr	r4, [r6, #0]
 80047bc:	6da2      	ldr	r2, [r4, #88]	; 0x58
 80047be:	b14b      	cbz	r3, 80047d4 <osalThreadEnqueueTimeoutS+0x78>
 80047c0:	659a      	str	r2, [r3, #88]	; 0x58
 80047c2:	b14a      	cbz	r2, 80047d8 <osalThreadEnqueueTimeoutS+0x7c>
 80047c4:	6553      	str	r3, [r2, #84]	; 0x54
 80047c6:	bd70      	pop	{r4, r5, r6, pc}
 80047c8:	4622      	mov	r2, r4
 80047ca:	e7e1      	b.n	8004790 <osalThreadEnqueueTimeoutS+0x34>
 80047cc:	4622      	mov	r2, r4
 80047ce:	e7e2      	b.n	8004796 <osalThreadEnqueueTimeoutS+0x3a>
 80047d0:	4623      	mov	r3, r4
 80047d2:	e7f0      	b.n	80047b6 <osalThreadEnqueueTimeoutS+0x5a>
 80047d4:	606a      	str	r2, [r5, #4]
 80047d6:	e7f4      	b.n	80047c2 <osalThreadEnqueueTimeoutS+0x66>
 80047d8:	602b      	str	r3, [r5, #0]
 80047da:	e7f4      	b.n	80047c6 <osalThreadEnqueueTimeoutS+0x6a>
 80047dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80047e0:	e7f1      	b.n	80047c6 <osalThreadEnqueueTimeoutS+0x6a>
 80047e2:	bf00      	nop
 80047e4:	200011a8 	.word	0x200011a8

080047e8 <xTaskRemoveFromEventList>:
 80047e8:	b538      	push	{r3, r4, r5, lr}
 80047ea:	68c3      	ldr	r3, [r0, #12]
 80047ec:	68dc      	ldr	r4, [r3, #12]
 80047ee:	b904      	cbnz	r4, 80047f2 <xTaskRemoveFromEventList+0xa>
 80047f0:	e7fe      	b.n	80047f0 <xTaskRemoveFromEventList+0x8>
 80047f2:	f104 0518 	add.w	r5, r4, #24
 80047f6:	4628      	mov	r0, r5
 80047f8:	f7ff fdfa 	bl	80043f0 <uxListRemove>
 80047fc:	4b12      	ldr	r3, [pc, #72]	; (8004848 <xTaskRemoveFromEventList+0x60>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	b9f3      	cbnz	r3, 8004840 <xTaskRemoveFromEventList+0x58>
 8004802:	1d25      	adds	r5, r4, #4
 8004804:	4628      	mov	r0, r5
 8004806:	f7ff fdf3 	bl	80043f0 <uxListRemove>
 800480a:	2301      	movs	r3, #1
 800480c:	490f      	ldr	r1, [pc, #60]	; (800484c <xTaskRemoveFromEventList+0x64>)
 800480e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004810:	6808      	ldr	r0, [r1, #0]
 8004812:	4093      	lsls	r3, r2
 8004814:	4303      	orrs	r3, r0
 8004816:	2014      	movs	r0, #20
 8004818:	600b      	str	r3, [r1, #0]
 800481a:	4629      	mov	r1, r5
 800481c:	4b0c      	ldr	r3, [pc, #48]	; (8004850 <xTaskRemoveFromEventList+0x68>)
 800481e:	fb00 3002 	mla	r0, r0, r2, r3
 8004822:	f7ff fe0c 	bl	800443e <vListInsertEnd>
 8004826:	4b0b      	ldr	r3, [pc, #44]	; (8004854 <xTaskRemoveFromEventList+0x6c>)
 8004828:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800482e:	429a      	cmp	r2, r3
 8004830:	bf85      	ittet	hi
 8004832:	2001      	movhi	r0, #1
 8004834:	4b08      	ldrhi	r3, [pc, #32]	; (8004858 <xTaskRemoveFromEventList+0x70>)
 8004836:	2000      	movls	r0, #0
 8004838:	6018      	strhi	r0, [r3, #0]
 800483a:	f7ff fd1f 	bl	800427c <prvResetNextTaskUnblockTime>
 800483e:	bd38      	pop	{r3, r4, r5, pc}
 8004840:	4629      	mov	r1, r5
 8004842:	4806      	ldr	r0, [pc, #24]	; (800485c <xTaskRemoveFromEventList+0x74>)
 8004844:	e7ed      	b.n	8004822 <xTaskRemoveFromEventList+0x3a>
 8004846:	bf00      	nop
 8004848:	2000136c 	.word	0x2000136c
 800484c:	20001374 	.word	0x20001374
 8004850:	200011b8 	.word	0x200011b8
 8004854:	200011a8 	.word	0x200011a8
 8004858:	2000164c 	.word	0x2000164c
 800485c:	20001600 	.word	0x20001600

08004860 <xTaskIncrementTick>:
 8004860:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004864:	4b38      	ldr	r3, [pc, #224]	; (8004948 <xTaskIncrementTick+0xe8>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d166      	bne.n	800493a <xTaskIncrementTick+0xda>
 800486c:	4b37      	ldr	r3, [pc, #220]	; (800494c <xTaskIncrementTick+0xec>)
 800486e:	681d      	ldr	r5, [r3, #0]
 8004870:	3501      	adds	r5, #1
 8004872:	601d      	str	r5, [r3, #0]
 8004874:	b97d      	cbnz	r5, 8004896 <xTaskIncrementTick+0x36>
 8004876:	4b36      	ldr	r3, [pc, #216]	; (8004950 <xTaskIncrementTick+0xf0>)
 8004878:	681a      	ldr	r2, [r3, #0]
 800487a:	6812      	ldr	r2, [r2, #0]
 800487c:	b102      	cbz	r2, 8004880 <xTaskIncrementTick+0x20>
 800487e:	e7fe      	b.n	800487e <xTaskIncrementTick+0x1e>
 8004880:	4a34      	ldr	r2, [pc, #208]	; (8004954 <xTaskIncrementTick+0xf4>)
 8004882:	6819      	ldr	r1, [r3, #0]
 8004884:	6810      	ldr	r0, [r2, #0]
 8004886:	6018      	str	r0, [r3, #0]
 8004888:	6011      	str	r1, [r2, #0]
 800488a:	4a33      	ldr	r2, [pc, #204]	; (8004958 <xTaskIncrementTick+0xf8>)
 800488c:	6813      	ldr	r3, [r2, #0]
 800488e:	3301      	adds	r3, #1
 8004890:	6013      	str	r3, [r2, #0]
 8004892:	f7ff fcf3 	bl	800427c <prvResetNextTaskUnblockTime>
 8004896:	4e31      	ldr	r6, [pc, #196]	; (800495c <xTaskIncrementTick+0xfc>)
 8004898:	2400      	movs	r4, #0
 800489a:	6833      	ldr	r3, [r6, #0]
 800489c:	4f30      	ldr	r7, [pc, #192]	; (8004960 <xTaskIncrementTick+0x100>)
 800489e:	42ab      	cmp	r3, r5
 80048a0:	d910      	bls.n	80048c4 <xTaskIncrementTick+0x64>
 80048a2:	4b30      	ldr	r3, [pc, #192]	; (8004964 <xTaskIncrementTick+0x104>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048a8:	2314      	movs	r3, #20
 80048aa:	4353      	muls	r3, r2
 80048ac:	58fb      	ldr	r3, [r7, r3]
 80048ae:	2b02      	cmp	r3, #2
 80048b0:	bf28      	it	cs
 80048b2:	2401      	movcs	r4, #1
 80048b4:	4b2c      	ldr	r3, [pc, #176]	; (8004968 <xTaskIncrementTick+0x108>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	bf0c      	ite	eq
 80048bc:	4620      	moveq	r0, r4
 80048be:	2001      	movne	r0, #1
 80048c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048c4:	f8df a088 	ldr.w	sl, [pc, #136]	; 8004950 <xTaskIncrementTick+0xf0>
 80048c8:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 8004970 <xTaskIncrementTick+0x110>
 80048cc:	f8da 3000 	ldr.w	r3, [sl]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	b91b      	cbnz	r3, 80048dc <xTaskIncrementTick+0x7c>
 80048d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80048d8:	6033      	str	r3, [r6, #0]
 80048da:	e7e2      	b.n	80048a2 <xTaskIncrementTick+0x42>
 80048dc:	f8da 3000 	ldr.w	r3, [sl]
 80048e0:	68db      	ldr	r3, [r3, #12]
 80048e2:	f8d3 b00c 	ldr.w	fp, [r3, #12]
 80048e6:	f8db 2004 	ldr.w	r2, [fp, #4]
 80048ea:	4295      	cmp	r5, r2
 80048ec:	d201      	bcs.n	80048f2 <xTaskIncrementTick+0x92>
 80048ee:	6032      	str	r2, [r6, #0]
 80048f0:	e7d7      	b.n	80048a2 <xTaskIncrementTick+0x42>
 80048f2:	f10b 0804 	add.w	r8, fp, #4
 80048f6:	4640      	mov	r0, r8
 80048f8:	f7ff fd7a 	bl	80043f0 <uxListRemove>
 80048fc:	f8db 2028 	ldr.w	r2, [fp, #40]	; 0x28
 8004900:	b11a      	cbz	r2, 800490a <xTaskIncrementTick+0xaa>
 8004902:	f10b 0018 	add.w	r0, fp, #24
 8004906:	f7ff fd73 	bl	80043f0 <uxListRemove>
 800490a:	2201      	movs	r2, #1
 800490c:	f8db 002c 	ldr.w	r0, [fp, #44]	; 0x2c
 8004910:	f8d9 3000 	ldr.w	r3, [r9]
 8004914:	4082      	lsls	r2, r0
 8004916:	431a      	orrs	r2, r3
 8004918:	f8c9 2000 	str.w	r2, [r9]
 800491c:	2214      	movs	r2, #20
 800491e:	4641      	mov	r1, r8
 8004920:	fb02 7000 	mla	r0, r2, r0, r7
 8004924:	f7ff fd8b 	bl	800443e <vListInsertEnd>
 8004928:	4b0e      	ldr	r3, [pc, #56]	; (8004964 <xTaskIncrementTick+0x104>)
 800492a:	f8db 202c 	ldr.w	r2, [fp, #44]	; 0x2c
 800492e:	6819      	ldr	r1, [r3, #0]
 8004930:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8004932:	429a      	cmp	r2, r3
 8004934:	bf28      	it	cs
 8004936:	2401      	movcs	r4, #1
 8004938:	e7c8      	b.n	80048cc <xTaskIncrementTick+0x6c>
 800493a:	4a0c      	ldr	r2, [pc, #48]	; (800496c <xTaskIncrementTick+0x10c>)
 800493c:	2400      	movs	r4, #0
 800493e:	6813      	ldr	r3, [r2, #0]
 8004940:	3301      	adds	r3, #1
 8004942:	6013      	str	r3, [r2, #0]
 8004944:	e7b6      	b.n	80048b4 <xTaskIncrementTick+0x54>
 8004946:	bf00      	nop
 8004948:	2000136c 	.word	0x2000136c
 800494c:	20001648 	.word	0x20001648
 8004950:	200011ac 	.word	0x200011ac
 8004954:	200011b4 	.word	0x200011b4
 8004958:	200015fc 	.word	0x200015fc
 800495c:	200015f8 	.word	0x200015f8
 8004960:	200011b8 	.word	0x200011b8
 8004964:	200011a8 	.word	0x200011a8
 8004968:	2000164c 	.word	0x2000164c
 800496c:	20001364 	.word	0x20001364
 8004970:	20001374 	.word	0x20001374

08004974 <xPortSysTickHandler>:
 8004974:	b508      	push	{r3, lr}
 8004976:	f7ff fc35 	bl	80041e4 <vPortEnterCritical>
 800497a:	f7ff ff71 	bl	8004860 <xTaskIncrementTick>
 800497e:	b138      	cbz	r0, 8004990 <xPortSysTickHandler+0x1c>
 8004980:	4b05      	ldr	r3, [pc, #20]	; (8004998 <xPortSysTickHandler+0x24>)
 8004982:	681a      	ldr	r2, [r3, #0]
 8004984:	4b05      	ldr	r3, [pc, #20]	; (800499c <xPortSysTickHandler+0x28>)
 8004986:	601a      	str	r2, [r3, #0]
 8004988:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800498c:	4b04      	ldr	r3, [pc, #16]	; (80049a0 <xPortSysTickHandler+0x2c>)
 800498e:	601a      	str	r2, [r3, #0]
 8004990:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8004994:	f7ff bc1a 	b.w	80041cc <vPortExitCritical>
 8004998:	e000ed20 	.word	0xe000ed20
 800499c:	2000134c 	.word	0x2000134c
 80049a0:	e000ed04 	.word	0xe000ed04

080049a4 <xTaskResumeAll>:
 80049a4:	4833      	ldr	r0, [pc, #204]	; (8004a74 <xTaskResumeAll+0xd0>)
 80049a6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80049aa:	6803      	ldr	r3, [r0, #0]
 80049ac:	b903      	cbnz	r3, 80049b0 <xTaskResumeAll+0xc>
 80049ae:	e7fe      	b.n	80049ae <xTaskResumeAll+0xa>
 80049b0:	f7ff fc18 	bl	80041e4 <vPortEnterCritical>
 80049b4:	6803      	ldr	r3, [r0, #0]
 80049b6:	3b01      	subs	r3, #1
 80049b8:	6003      	str	r3, [r0, #0]
 80049ba:	6804      	ldr	r4, [r0, #0]
 80049bc:	b124      	cbz	r4, 80049c8 <xTaskResumeAll+0x24>
 80049be:	2000      	movs	r0, #0
 80049c0:	f7ff fc04 	bl	80041cc <vPortExitCritical>
 80049c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80049c8:	4b2b      	ldr	r3, [pc, #172]	; (8004a78 <xTaskResumeAll+0xd4>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d0f6      	beq.n	80049be <xTaskResumeAll+0x1a>
 80049d0:	4d2a      	ldr	r5, [pc, #168]	; (8004a7c <xTaskResumeAll+0xd8>)
 80049d2:	4e2b      	ldr	r6, [pc, #172]	; (8004a80 <xTaskResumeAll+0xdc>)
 80049d4:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 8004aa0 <xTaskResumeAll+0xfc>
 80049d8:	e01f      	b.n	8004a1a <xTaskResumeAll+0x76>
 80049da:	68eb      	ldr	r3, [r5, #12]
 80049dc:	2701      	movs	r7, #1
 80049de:	68dc      	ldr	r4, [r3, #12]
 80049e0:	f104 0904 	add.w	r9, r4, #4
 80049e4:	f104 0018 	add.w	r0, r4, #24
 80049e8:	f7ff fd02 	bl	80043f0 <uxListRemove>
 80049ec:	4648      	mov	r0, r9
 80049ee:	f7ff fcff 	bl	80043f0 <uxListRemove>
 80049f2:	2014      	movs	r0, #20
 80049f4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80049f6:	6831      	ldr	r1, [r6, #0]
 80049f8:	fa07 f302 	lsl.w	r3, r7, r2
 80049fc:	430b      	orrs	r3, r1
 80049fe:	fb00 8002 	mla	r0, r0, r2, r8
 8004a02:	4649      	mov	r1, r9
 8004a04:	6033      	str	r3, [r6, #0]
 8004a06:	f7ff fd1a 	bl	800443e <vListInsertEnd>
 8004a0a:	4b1e      	ldr	r3, [pc, #120]	; (8004a84 <xTaskResumeAll+0xe0>)
 8004a0c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a12:	429a      	cmp	r2, r3
 8004a14:	d301      	bcc.n	8004a1a <xTaskResumeAll+0x76>
 8004a16:	4b1c      	ldr	r3, [pc, #112]	; (8004a88 <xTaskResumeAll+0xe4>)
 8004a18:	601f      	str	r7, [r3, #0]
 8004a1a:	682b      	ldr	r3, [r5, #0]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d1dc      	bne.n	80049da <xTaskResumeAll+0x36>
 8004a20:	b10c      	cbz	r4, 8004a26 <xTaskResumeAll+0x82>
 8004a22:	f7ff fc2b 	bl	800427c <prvResetNextTaskUnblockTime>
 8004a26:	4d19      	ldr	r5, [pc, #100]	; (8004a8c <xTaskResumeAll+0xe8>)
 8004a28:	682c      	ldr	r4, [r5, #0]
 8004a2a:	b144      	cbz	r4, 8004a3e <xTaskResumeAll+0x9a>
 8004a2c:	2701      	movs	r7, #1
 8004a2e:	4e16      	ldr	r6, [pc, #88]	; (8004a88 <xTaskResumeAll+0xe4>)
 8004a30:	f7ff ff16 	bl	8004860 <xTaskIncrementTick>
 8004a34:	b100      	cbz	r0, 8004a38 <xTaskResumeAll+0x94>
 8004a36:	6037      	str	r7, [r6, #0]
 8004a38:	3c01      	subs	r4, #1
 8004a3a:	d1f9      	bne.n	8004a30 <xTaskResumeAll+0x8c>
 8004a3c:	602c      	str	r4, [r5, #0]
 8004a3e:	4b12      	ldr	r3, [pc, #72]	; (8004a88 <xTaskResumeAll+0xe4>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d0bb      	beq.n	80049be <xTaskResumeAll+0x1a>
 8004a46:	4b12      	ldr	r3, [pc, #72]	; (8004a90 <xTaskResumeAll+0xec>)
 8004a48:	4a12      	ldr	r2, [pc, #72]	; (8004a94 <xTaskResumeAll+0xf0>)
 8004a4a:	6819      	ldr	r1, [r3, #0]
 8004a4c:	6011      	str	r1, [r2, #0]
 8004a4e:	4a12      	ldr	r2, [pc, #72]	; (8004a98 <xTaskResumeAll+0xf4>)
 8004a50:	6812      	ldr	r2, [r2, #0]
 8004a52:	b12a      	cbz	r2, 8004a60 <xTaskResumeAll+0xbc>
 8004a54:	681a      	ldr	r2, [r3, #0]
 8004a56:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
 8004a5a:	601a      	str	r2, [r3, #0]
 8004a5c:	681a      	ldr	r2, [r3, #0]
 8004a5e:	601a      	str	r2, [r3, #0]
 8004a60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a64:	4b0d      	ldr	r3, [pc, #52]	; (8004a9c <xTaskResumeAll+0xf8>)
 8004a66:	601a      	str	r2, [r3, #0]
 8004a68:	f3bf 8f4f 	dsb	sy
 8004a6c:	f3bf 8f6f 	isb	sy
 8004a70:	2001      	movs	r0, #1
 8004a72:	e7a5      	b.n	80049c0 <xTaskResumeAll+0x1c>
 8004a74:	2000136c 	.word	0x2000136c
 8004a78:	2000135c 	.word	0x2000135c
 8004a7c:	20001600 	.word	0x20001600
 8004a80:	20001374 	.word	0x20001374
 8004a84:	200011a8 	.word	0x200011a8
 8004a88:	2000164c 	.word	0x2000164c
 8004a8c:	20001364 	.word	0x20001364
 8004a90:	e000ed20 	.word	0xe000ed20
 8004a94:	2000134c 	.word	0x2000134c
 8004a98:	20001358 	.word	0x20001358
 8004a9c:	e000ed04 	.word	0xe000ed04
 8004aa0:	200011b8 	.word	0x200011b8

08004aa4 <prvListTasksWithinSingleList>:
 8004aa4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004aa8:	f8d1 a000 	ldr.w	sl, [r1]
 8004aac:	4604      	mov	r4, r0
 8004aae:	460d      	mov	r5, r1
 8004ab0:	4617      	mov	r7, r2
 8004ab2:	f1ba 0f00 	cmp.w	sl, #0
 8004ab6:	d040      	beq.n	8004b3a <prvListTasksWithinSingleList+0x96>
 8004ab8:	f04f 0a00 	mov.w	sl, #0
 8004abc:	684b      	ldr	r3, [r1, #4]
 8004abe:	f101 0808 	add.w	r8, r1, #8
 8004ac2:	685b      	ldr	r3, [r3, #4]
 8004ac4:	f8df 909c 	ldr.w	r9, [pc, #156]	; 8004b64 <prvListTasksWithinSingleList+0xc0>
 8004ac8:	4543      	cmp	r3, r8
 8004aca:	604b      	str	r3, [r1, #4]
 8004acc:	bf04      	itt	eq
 8004ace:	68cb      	ldreq	r3, [r1, #12]
 8004ad0:	604b      	streq	r3, [r1, #4]
 8004ad2:	684b      	ldr	r3, [r1, #4]
 8004ad4:	68db      	ldr	r3, [r3, #12]
 8004ad6:	9301      	str	r3, [sp, #4]
 8004ad8:	686a      	ldr	r2, [r5, #4]
 8004ada:	6852      	ldr	r2, [r2, #4]
 8004adc:	4590      	cmp	r8, r2
 8004ade:	606a      	str	r2, [r5, #4]
 8004ae0:	bf04      	itt	eq
 8004ae2:	f8d8 2004 	ldreq.w	r2, [r8, #4]
 8004ae6:	606a      	streq	r2, [r5, #4]
 8004ae8:	686a      	ldr	r2, [r5, #4]
 8004aea:	f8d2 b00c 	ldr.w	fp, [r2, #12]
 8004aee:	f1bb 0f00 	cmp.w	fp, #0
 8004af2:	d126      	bne.n	8004b42 <prvListTasksWithinSingleList+0x9e>
 8004af4:	f8d9 6000 	ldr.w	r6, [r9]
 8004af8:	2300      	movs	r3, #0
 8004afa:	f106 0034 	add.w	r0, r6, #52	; 0x34
 8004afe:	6060      	str	r0, [r4, #4]
 8004b00:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 8004b02:	6026      	str	r6, [r4, #0]
 8004b04:	6120      	str	r0, [r4, #16]
 8004b06:	6b30      	ldr	r0, [r6, #48]	; 0x30
 8004b08:	61e0      	str	r0, [r4, #28]
 8004b0a:	6c70      	ldr	r0, [r6, #68]	; 0x44
 8004b0c:	60a0      	str	r0, [r4, #8]
 8004b0e:	6cf0      	ldr	r0, [r6, #76]	; 0x4c
 8004b10:	61a3      	str	r3, [r4, #24]
 8004b12:	6160      	str	r0, [r4, #20]
 8004b14:	f8d9 0000 	ldr.w	r0, [r9]
 8004b18:	4286      	cmp	r6, r0
 8004b1a:	d114      	bne.n	8004b46 <prvListTasksWithinSingleList+0xa2>
 8004b1c:	7323      	strb	r3, [r4, #12]
 8004b1e:	2000      	movs	r0, #0
 8004b20:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8004b22:	5c1e      	ldrb	r6, [r3, r0]
 8004b24:	2ea5      	cmp	r6, #165	; 0xa5
 8004b26:	d01b      	beq.n	8004b60 <prvListTasksWithinSingleList+0xbc>
 8004b28:	9b01      	ldr	r3, [sp, #4]
 8004b2a:	0880      	lsrs	r0, r0, #2
 8004b2c:	455b      	cmp	r3, fp
 8004b2e:	8420      	strh	r0, [r4, #32]
 8004b30:	f10a 0a01 	add.w	sl, sl, #1
 8004b34:	f104 0424 	add.w	r4, r4, #36	; 0x24
 8004b38:	d1ce      	bne.n	8004ad8 <prvListTasksWithinSingleList+0x34>
 8004b3a:	4650      	mov	r0, sl
 8004b3c:	b003      	add	sp, #12
 8004b3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b42:	465e      	mov	r6, fp
 8004b44:	e7d8      	b.n	8004af8 <prvListTasksWithinSingleList+0x54>
 8004b46:	2f03      	cmp	r7, #3
 8004b48:	7327      	strb	r7, [r4, #12]
 8004b4a:	d1e8      	bne.n	8004b1e <prvListTasksWithinSingleList+0x7a>
 8004b4c:	f7ff fbf0 	bl	8004330 <vTaskSuspendAll>
 8004b50:	6ab0      	ldr	r0, [r6, #40]	; 0x28
 8004b52:	b110      	cbz	r0, 8004b5a <prvListTasksWithinSingleList+0xb6>
 8004b54:	f04f 0302 	mov.w	r3, #2
 8004b58:	7323      	strb	r3, [r4, #12]
 8004b5a:	f7ff ff23 	bl	80049a4 <xTaskResumeAll>
 8004b5e:	e7de      	b.n	8004b1e <prvListTasksWithinSingleList+0x7a>
 8004b60:	3001      	adds	r0, #1
 8004b62:	e7de      	b.n	8004b22 <prvListTasksWithinSingleList+0x7e>
 8004b64:	200011a8 	.word	0x200011a8

08004b68 <vTaskDelay>:
 8004b68:	b508      	push	{r3, lr}
 8004b6a:	b978      	cbnz	r0, 8004b8c <vTaskDelay+0x24>
 8004b6c:	4b11      	ldr	r3, [pc, #68]	; (8004bb4 <vTaskDelay+0x4c>)
 8004b6e:	4a12      	ldr	r2, [pc, #72]	; (8004bb8 <vTaskDelay+0x50>)
 8004b70:	6819      	ldr	r1, [r3, #0]
 8004b72:	6011      	str	r1, [r2, #0]
 8004b74:	4a11      	ldr	r2, [pc, #68]	; (8004bbc <vTaskDelay+0x54>)
 8004b76:	6812      	ldr	r2, [r2, #0]
 8004b78:	b9aa      	cbnz	r2, 8004ba6 <vTaskDelay+0x3e>
 8004b7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b7e:	4b10      	ldr	r3, [pc, #64]	; (8004bc0 <vTaskDelay+0x58>)
 8004b80:	601a      	str	r2, [r3, #0]
 8004b82:	f3bf 8f4f 	dsb	sy
 8004b86:	f3bf 8f6f 	isb	sy
 8004b8a:	e00b      	b.n	8004ba4 <vTaskDelay+0x3c>
 8004b8c:	4b0d      	ldr	r3, [pc, #52]	; (8004bc4 <vTaskDelay+0x5c>)
 8004b8e:	6819      	ldr	r1, [r3, #0]
 8004b90:	b101      	cbz	r1, 8004b94 <vTaskDelay+0x2c>
 8004b92:	e7fe      	b.n	8004b92 <vTaskDelay+0x2a>
 8004b94:	f7ff fbcc 	bl	8004330 <vTaskSuspendAll>
 8004b98:	f7ff fd1e 	bl	80045d8 <prvAddCurrentTaskToDelayedList>
 8004b9c:	f7ff ff02 	bl	80049a4 <xTaskResumeAll>
 8004ba0:	2800      	cmp	r0, #0
 8004ba2:	d0e3      	beq.n	8004b6c <vTaskDelay+0x4>
 8004ba4:	bd08      	pop	{r3, pc}
 8004ba6:	681a      	ldr	r2, [r3, #0]
 8004ba8:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
 8004bac:	601a      	str	r2, [r3, #0]
 8004bae:	681a      	ldr	r2, [r3, #0]
 8004bb0:	601a      	str	r2, [r3, #0]
 8004bb2:	e7e2      	b.n	8004b7a <vTaskDelay+0x12>
 8004bb4:	e000ed20 	.word	0xe000ed20
 8004bb8:	2000134c 	.word	0x2000134c
 8004bbc:	20001358 	.word	0x20001358
 8004bc0:	e000ed04 	.word	0xe000ed04
 8004bc4:	2000136c 	.word	0x2000136c

08004bc8 <prvAddNewTaskToReadyList>:
 8004bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bca:	4604      	mov	r4, r0
 8004bcc:	f7ff fb0a 	bl	80041e4 <vPortEnterCritical>
 8004bd0:	4a44      	ldr	r2, [pc, #272]	; (8004ce4 <prvAddNewTaskToReadyList+0x11c>)
 8004bd2:	4d45      	ldr	r5, [pc, #276]	; (8004ce8 <prvAddNewTaskToReadyList+0x120>)
 8004bd4:	6813      	ldr	r3, [r2, #0]
 8004bd6:	4845      	ldr	r0, [pc, #276]	; (8004cec <prvAddNewTaskToReadyList+0x124>)
 8004bd8:	3301      	adds	r3, #1
 8004bda:	6013      	str	r3, [r2, #0]
 8004bdc:	682b      	ldr	r3, [r5, #0]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d175      	bne.n	8004cce <prvAddNewTaskToReadyList+0x106>
 8004be2:	602c      	str	r4, [r5, #0]
 8004be4:	6812      	ldr	r2, [r2, #0]
 8004be6:	2a01      	cmp	r2, #1
 8004be8:	d13f      	bne.n	8004c6a <prvAddNewTaskToReadyList+0xa2>
 8004bea:	4602      	mov	r2, r0
 8004bec:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8004bf0:	f04f 0c14 	mov.w	ip, #20
 8004bf4:	461e      	mov	r6, r3
 8004bf6:	f102 0108 	add.w	r1, r2, #8
 8004bfa:	e9c2 1701 	strd	r1, r7, [r2, #4]
 8004bfe:	e9c2 1103 	strd	r1, r1, [r2, #12]
 8004c02:	fb0c f103 	mul.w	r1, ip, r3
 8004c06:	3301      	adds	r3, #1
 8004c08:	2b05      	cmp	r3, #5
 8004c0a:	5046      	str	r6, [r0, r1]
 8004c0c:	f102 0214 	add.w	r2, r2, #20
 8004c10:	d1f1      	bne.n	8004bf6 <prvAddNewTaskToReadyList+0x2e>
 8004c12:	4a37      	ldr	r2, [pc, #220]	; (8004cf0 <prvAddNewTaskToReadyList+0x128>)
 8004c14:	f102 0308 	add.w	r3, r2, #8
 8004c18:	e9c2 3701 	strd	r3, r7, [r2, #4]
 8004c1c:	e9c2 3303 	strd	r3, r3, [r2, #12]
 8004c20:	4b34      	ldr	r3, [pc, #208]	; (8004cf4 <prvAddNewTaskToReadyList+0x12c>)
 8004c22:	6016      	str	r6, [r2, #0]
 8004c24:	f103 0108 	add.w	r1, r3, #8
 8004c28:	e9c3 1701 	strd	r1, r7, [r3, #4]
 8004c2c:	e9c3 1103 	strd	r1, r1, [r3, #12]
 8004c30:	4931      	ldr	r1, [pc, #196]	; (8004cf8 <prvAddNewTaskToReadyList+0x130>)
 8004c32:	601e      	str	r6, [r3, #0]
 8004c34:	f101 0c08 	add.w	ip, r1, #8
 8004c38:	600e      	str	r6, [r1, #0]
 8004c3a:	e9c1 c701 	strd	ip, r7, [r1, #4]
 8004c3e:	e9c1 cc03 	strd	ip, ip, [r1, #12]
 8004c42:	492e      	ldr	r1, [pc, #184]	; (8004cfc <prvAddNewTaskToReadyList+0x134>)
 8004c44:	f101 0c08 	add.w	ip, r1, #8
 8004c48:	600e      	str	r6, [r1, #0]
 8004c4a:	e9c1 c701 	strd	ip, r7, [r1, #4]
 8004c4e:	e9c1 cc03 	strd	ip, ip, [r1, #12]
 8004c52:	492b      	ldr	r1, [pc, #172]	; (8004d00 <prvAddNewTaskToReadyList+0x138>)
 8004c54:	f101 0c08 	add.w	ip, r1, #8
 8004c58:	600e      	str	r6, [r1, #0]
 8004c5a:	e9c1 c701 	strd	ip, r7, [r1, #4]
 8004c5e:	e9c1 cc03 	strd	ip, ip, [r1, #12]
 8004c62:	4928      	ldr	r1, [pc, #160]	; (8004d04 <prvAddNewTaskToReadyList+0x13c>)
 8004c64:	600a      	str	r2, [r1, #0]
 8004c66:	4a28      	ldr	r2, [pc, #160]	; (8004d08 <prvAddNewTaskToReadyList+0x140>)
 8004c68:	6013      	str	r3, [r2, #0]
 8004c6a:	4a28      	ldr	r2, [pc, #160]	; (8004d0c <prvAddNewTaskToReadyList+0x144>)
 8004c6c:	4928      	ldr	r1, [pc, #160]	; (8004d10 <prvAddNewTaskToReadyList+0x148>)
 8004c6e:	6813      	ldr	r3, [r2, #0]
 8004c70:	680e      	ldr	r6, [r1, #0]
 8004c72:	3301      	adds	r3, #1
 8004c74:	6013      	str	r3, [r2, #0]
 8004c76:	6463      	str	r3, [r4, #68]	; 0x44
 8004c78:	2301      	movs	r3, #1
 8004c7a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004c7c:	4093      	lsls	r3, r2
 8004c7e:	4333      	orrs	r3, r6
 8004c80:	600b      	str	r3, [r1, #0]
 8004c82:	2314      	movs	r3, #20
 8004c84:	1d21      	adds	r1, r4, #4
 8004c86:	fb03 0002 	mla	r0, r3, r2, r0
 8004c8a:	f7ff fbd8 	bl	800443e <vListInsertEnd>
 8004c8e:	f7ff fa9d 	bl	80041cc <vPortExitCritical>
 8004c92:	4b20      	ldr	r3, [pc, #128]	; (8004d14 <prvAddNewTaskToReadyList+0x14c>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	b1cb      	cbz	r3, 8004ccc <prvAddNewTaskToReadyList+0x104>
 8004c98:	682b      	ldr	r3, [r5, #0]
 8004c9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c9c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004c9e:	429a      	cmp	r2, r3
 8004ca0:	d214      	bcs.n	8004ccc <prvAddNewTaskToReadyList+0x104>
 8004ca2:	4b1d      	ldr	r3, [pc, #116]	; (8004d18 <prvAddNewTaskToReadyList+0x150>)
 8004ca4:	4a1d      	ldr	r2, [pc, #116]	; (8004d1c <prvAddNewTaskToReadyList+0x154>)
 8004ca6:	6819      	ldr	r1, [r3, #0]
 8004ca8:	6011      	str	r1, [r2, #0]
 8004caa:	4a1d      	ldr	r2, [pc, #116]	; (8004d20 <prvAddNewTaskToReadyList+0x158>)
 8004cac:	6812      	ldr	r2, [r2, #0]
 8004cae:	b12a      	cbz	r2, 8004cbc <prvAddNewTaskToReadyList+0xf4>
 8004cb0:	681a      	ldr	r2, [r3, #0]
 8004cb2:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
 8004cb6:	601a      	str	r2, [r3, #0]
 8004cb8:	681a      	ldr	r2, [r3, #0]
 8004cba:	601a      	str	r2, [r3, #0]
 8004cbc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004cc0:	4b18      	ldr	r3, [pc, #96]	; (8004d24 <prvAddNewTaskToReadyList+0x15c>)
 8004cc2:	601a      	str	r2, [r3, #0]
 8004cc4:	f3bf 8f4f 	dsb	sy
 8004cc8:	f3bf 8f6f 	isb	sy
 8004ccc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004cce:	4b11      	ldr	r3, [pc, #68]	; (8004d14 <prvAddNewTaskToReadyList+0x14c>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d1c9      	bne.n	8004c6a <prvAddNewTaskToReadyList+0xa2>
 8004cd6:	682b      	ldr	r3, [r5, #0]
 8004cd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cda:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004cdc:	429a      	cmp	r2, r3
 8004cde:	bf98      	it	ls
 8004ce0:	602c      	strls	r4, [r5, #0]
 8004ce2:	e7c2      	b.n	8004c6a <prvAddNewTaskToReadyList+0xa2>
 8004ce4:	2000135c 	.word	0x2000135c
 8004ce8:	200011a8 	.word	0x200011a8
 8004cec:	200011b8 	.word	0x200011b8
 8004cf0:	2000137c 	.word	0x2000137c
 8004cf4:	20001390 	.word	0x20001390
 8004cf8:	20001600 	.word	0x20001600
 8004cfc:	20001634 	.word	0x20001634
 8004d00:	20001620 	.word	0x20001620
 8004d04:	200011ac 	.word	0x200011ac
 8004d08:	200011b4 	.word	0x200011b4
 8004d0c:	20001370 	.word	0x20001370
 8004d10:	20001374 	.word	0x20001374
 8004d14:	20001614 	.word	0x20001614
 8004d18:	e000ed20 	.word	0xe000ed20
 8004d1c:	2000134c 	.word	0x2000134c
 8004d20:	20001358 	.word	0x20001358
 8004d24:	e000ed04 	.word	0xe000ed04

08004d28 <prvUnlockQueue>:
 8004d28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d2c:	4604      	mov	r4, r0
 8004d2e:	f7ff fa59 	bl	80041e4 <vPortEnterCritical>
 8004d32:	f04f 0801 	mov.w	r8, #1
 8004d36:	f890 5045 	ldrb.w	r5, [r0, #69]	; 0x45
 8004d3a:	4f1b      	ldr	r7, [pc, #108]	; (8004da8 <prvUnlockQueue+0x80>)
 8004d3c:	b26d      	sxtb	r5, r5
 8004d3e:	f100 0624 	add.w	r6, r0, #36	; 0x24
 8004d42:	2d00      	cmp	r5, #0
 8004d44:	dc17      	bgt.n	8004d76 <prvUnlockQueue+0x4e>
 8004d46:	23ff      	movs	r3, #255	; 0xff
 8004d48:	f04f 0801 	mov.w	r8, #1
 8004d4c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004d50:	f7ff fa3c 	bl	80041cc <vPortExitCritical>
 8004d54:	f7ff fa46 	bl	80041e4 <vPortEnterCritical>
 8004d58:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 8004d5c:	4f12      	ldr	r7, [pc, #72]	; (8004da8 <prvUnlockQueue+0x80>)
 8004d5e:	b26d      	sxtb	r5, r5
 8004d60:	f104 0610 	add.w	r6, r4, #16
 8004d64:	2d00      	cmp	r5, #0
 8004d66:	dc12      	bgt.n	8004d8e <prvUnlockQueue+0x66>
 8004d68:	23ff      	movs	r3, #255	; 0xff
 8004d6a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8004d6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004d72:	f7ff ba2b 	b.w	80041cc <vPortExitCritical>
 8004d76:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d0e4      	beq.n	8004d46 <prvUnlockQueue+0x1e>
 8004d7c:	4630      	mov	r0, r6
 8004d7e:	f7ff fd33 	bl	80047e8 <xTaskRemoveFromEventList>
 8004d82:	b108      	cbz	r0, 8004d88 <prvUnlockQueue+0x60>
 8004d84:	f8c7 8000 	str.w	r8, [r7]
 8004d88:	3d01      	subs	r5, #1
 8004d8a:	b26d      	sxtb	r5, r5
 8004d8c:	e7d9      	b.n	8004d42 <prvUnlockQueue+0x1a>
 8004d8e:	6923      	ldr	r3, [r4, #16]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d0e9      	beq.n	8004d68 <prvUnlockQueue+0x40>
 8004d94:	4630      	mov	r0, r6
 8004d96:	f7ff fd27 	bl	80047e8 <xTaskRemoveFromEventList>
 8004d9a:	b108      	cbz	r0, 8004da0 <prvUnlockQueue+0x78>
 8004d9c:	f8c7 8000 	str.w	r8, [r7]
 8004da0:	3d01      	subs	r5, #1
 8004da2:	b26d      	sxtb	r5, r5
 8004da4:	e7de      	b.n	8004d64 <prvUnlockQueue+0x3c>
 8004da6:	bf00      	nop
 8004da8:	2000164c 	.word	0x2000164c

08004dac <xQueueSemaphoreTake>:
 8004dac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004db0:	b085      	sub	sp, #20
 8004db2:	4604      	mov	r4, r0
 8004db4:	9101      	str	r1, [sp, #4]
 8004db6:	b900      	cbnz	r0, 8004dba <xQueueSemaphoreTake+0xe>
 8004db8:	e7fe      	b.n	8004db8 <xQueueSemaphoreTake+0xc>
 8004dba:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8004dbc:	b105      	cbz	r5, 8004dc0 <xQueueSemaphoreTake+0x14>
 8004dbe:	e7fe      	b.n	8004dbe <xQueueSemaphoreTake+0x12>
 8004dc0:	4628      	mov	r0, r5
 8004dc2:	f8df 8260 	ldr.w	r8, [pc, #608]	; 8005024 <xQueueSemaphoreTake+0x278>
 8004dc6:	4f8f      	ldr	r7, [pc, #572]	; (8005004 <xQueueSemaphoreTake+0x258>)
 8004dc8:	f8df 9254 	ldr.w	r9, [pc, #596]	; 8005020 <xQueueSemaphoreTake+0x274>
 8004dcc:	e0ac      	b.n	8004f28 <xQueueSemaphoreTake+0x17c>
 8004dce:	9b01      	ldr	r3, [sp, #4]
 8004dd0:	b91b      	cbnz	r3, 8004dda <xQueueSemaphoreTake+0x2e>
 8004dd2:	2d00      	cmp	r5, #0
 8004dd4:	f000 8152 	beq.w	800507c <xQueueSemaphoreTake+0x2d0>
 8004dd8:	e7fe      	b.n	8004dd8 <xQueueSemaphoreTake+0x2c>
 8004dda:	b928      	cbnz	r0, 8004de8 <xQueueSemaphoreTake+0x3c>
 8004ddc:	f8d8 3000 	ldr.w	r3, [r8]
 8004de0:	9302      	str	r3, [sp, #8]
 8004de2:	4b89      	ldr	r3, [pc, #548]	; (8005008 <xQueueSemaphoreTake+0x25c>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	9303      	str	r3, [sp, #12]
 8004de8:	f7ff f9f0 	bl	80041cc <vPortExitCritical>
 8004dec:	f7ff faa0 	bl	8004330 <vTaskSuspendAll>
 8004df0:	f7ff f9f8 	bl	80041e4 <vPortEnterCritical>
 8004df4:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8004df8:	2bff      	cmp	r3, #255	; 0xff
 8004dfa:	bf04      	itt	eq
 8004dfc:	2300      	moveq	r3, #0
 8004dfe:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
 8004e02:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8004e06:	2bff      	cmp	r3, #255	; 0xff
 8004e08:	bf04      	itt	eq
 8004e0a:	2300      	moveq	r3, #0
 8004e0c:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
 8004e10:	f7ff f9dc 	bl	80041cc <vPortExitCritical>
 8004e14:	a901      	add	r1, sp, #4
 8004e16:	a802      	add	r0, sp, #8
 8004e18:	f7ff fa42 	bl	80042a0 <xTaskCheckForTimeOut>
 8004e1c:	2800      	cmp	r0, #0
 8004e1e:	f040 80c5 	bne.w	8004fac <xQueueSemaphoreTake+0x200>
 8004e22:	f7ff f9df 	bl	80041e4 <vPortEnterCritical>
 8004e26:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d175      	bne.n	8004f18 <xQueueSemaphoreTake+0x16c>
 8004e2c:	f7ff f9ce 	bl	80041cc <vPortExitCritical>
 8004e30:	6823      	ldr	r3, [r4, #0]
 8004e32:	4e76      	ldr	r6, [pc, #472]	; (800500c <xQueueSemaphoreTake+0x260>)
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d148      	bne.n	8004eca <xQueueSemaphoreTake+0x11e>
 8004e38:	f7ff f9d4 	bl	80041e4 <vPortEnterCritical>
 8004e3c:	6865      	ldr	r5, [r4, #4]
 8004e3e:	2d00      	cmp	r5, #0
 8004e40:	d040      	beq.n	8004ec4 <xQueueSemaphoreTake+0x118>
 8004e42:	6833      	ldr	r3, [r6, #0]
 8004e44:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 8004e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e48:	4299      	cmp	r1, r3
 8004e4a:	f080 80a7 	bcs.w	8004f9c <xQueueSemaphoreTake+0x1f0>
 8004e4e:	f04f 0a14 	mov.w	sl, #20
 8004e52:	69ab      	ldr	r3, [r5, #24]
 8004e54:	4a6e      	ldr	r2, [pc, #440]	; (8005010 <xQueueSemaphoreTake+0x264>)
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	bfa8      	it	ge
 8004e5a:	6833      	ldrge	r3, [r6, #0]
 8004e5c:	fb0a 2101 	mla	r1, sl, r1, r2
 8004e60:	bfa8      	it	ge
 8004e62:	6adb      	ldrge	r3, [r3, #44]	; 0x2c
 8004e64:	4693      	mov	fp, r2
 8004e66:	bfa4      	itt	ge
 8004e68:	f1c3 0305 	rsbge	r3, r3, #5
 8004e6c:	61ab      	strge	r3, [r5, #24]
 8004e6e:	696b      	ldr	r3, [r5, #20]
 8004e70:	428b      	cmp	r3, r1
 8004e72:	f040 808f 	bne.w	8004f94 <xQueueSemaphoreTake+0x1e8>
 8004e76:	1d29      	adds	r1, r5, #4
 8004e78:	4608      	mov	r0, r1
 8004e7a:	9100      	str	r1, [sp, #0]
 8004e7c:	f7ff fab8 	bl	80043f0 <uxListRemove>
 8004e80:	4b64      	ldr	r3, [pc, #400]	; (8005014 <xQueueSemaphoreTake+0x268>)
 8004e82:	9900      	ldr	r1, [sp, #0]
 8004e84:	b968      	cbnz	r0, 8004ea2 <xQueueSemaphoreTake+0xf6>
 8004e86:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8004e88:	fb0a fa00 	mul.w	sl, sl, r0
 8004e8c:	f85b 200a 	ldr.w	r2, [fp, sl]
 8004e90:	b93a      	cbnz	r2, 8004ea2 <xQueueSemaphoreTake+0xf6>
 8004e92:	f04f 0c01 	mov.w	ip, #1
 8004e96:	681a      	ldr	r2, [r3, #0]
 8004e98:	fa0c f000 	lsl.w	r0, ip, r0
 8004e9c:	ea22 0200 	bic.w	r2, r2, r0
 8004ea0:	601a      	str	r2, [r3, #0]
 8004ea2:	6832      	ldr	r2, [r6, #0]
 8004ea4:	f8d3 c000 	ldr.w	ip, [r3]
 8004ea8:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 8004eaa:	62e8      	str	r0, [r5, #44]	; 0x2c
 8004eac:	2501      	movs	r5, #1
 8004eae:	fa05 f200 	lsl.w	r2, r5, r0
 8004eb2:	ea42 020c 	orr.w	r2, r2, ip
 8004eb6:	601a      	str	r2, [r3, #0]
 8004eb8:	2314      	movs	r3, #20
 8004eba:	fb03 b000 	mla	r0, r3, r0, fp
 8004ebe:	f7ff fabe 	bl	800443e <vListInsertEnd>
 8004ec2:	2001      	movs	r0, #1
 8004ec4:	f7ff f982 	bl	80041cc <vPortExitCritical>
 8004ec8:	4605      	mov	r5, r0
 8004eca:	6831      	ldr	r1, [r6, #0]
 8004ecc:	f8dd a004 	ldr.w	sl, [sp, #4]
 8004ed0:	3118      	adds	r1, #24
 8004ed2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004ed6:	f7ff fa9b 	bl	8004410 <vListInsert>
 8004eda:	2101      	movs	r1, #1
 8004edc:	4650      	mov	r0, sl
 8004ede:	f7ff fb7b 	bl	80045d8 <prvAddCurrentTaskToDelayedList>
 8004ee2:	4620      	mov	r0, r4
 8004ee4:	f7ff ff20 	bl	8004d28 <prvUnlockQueue>
 8004ee8:	f7ff fd5c 	bl	80049a4 <xTaskResumeAll>
 8004eec:	b9d8      	cbnz	r0, 8004f26 <xQueueSemaphoreTake+0x17a>
 8004eee:	4b4a      	ldr	r3, [pc, #296]	; (8005018 <xQueueSemaphoreTake+0x26c>)
 8004ef0:	683a      	ldr	r2, [r7, #0]
 8004ef2:	601a      	str	r2, [r3, #0]
 8004ef4:	4b49      	ldr	r3, [pc, #292]	; (800501c <xQueueSemaphoreTake+0x270>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	b12b      	cbz	r3, 8004f06 <xQueueSemaphoreTake+0x15a>
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8004f00:	603b      	str	r3, [r7, #0]
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	603b      	str	r3, [r7, #0]
 8004f06:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004f0a:	f8c9 3000 	str.w	r3, [r9]
 8004f0e:	f3bf 8f4f 	dsb	sy
 8004f12:	f3bf 8f6f 	isb	sy
 8004f16:	e006      	b.n	8004f26 <xQueueSemaphoreTake+0x17a>
 8004f18:	f7ff f958 	bl	80041cc <vPortExitCritical>
 8004f1c:	4620      	mov	r0, r4
 8004f1e:	f7ff ff03 	bl	8004d28 <prvUnlockQueue>
 8004f22:	f7ff fd3f 	bl	80049a4 <xTaskResumeAll>
 8004f26:	2001      	movs	r0, #1
 8004f28:	f7ff f95c 	bl	80041e4 <vPortEnterCritical>
 8004f2c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	f43f af4d 	beq.w	8004dce <xQueueSemaphoreTake+0x22>
 8004f34:	3b01      	subs	r3, #1
 8004f36:	63a3      	str	r3, [r4, #56]	; 0x38
 8004f38:	6823      	ldr	r3, [r4, #0]
 8004f3a:	b943      	cbnz	r3, 8004f4e <xQueueSemaphoreTake+0x1a2>
 8004f3c:	4b33      	ldr	r3, [pc, #204]	; (800500c <xQueueSemaphoreTake+0x260>)
 8004f3e:	681a      	ldr	r2, [r3, #0]
 8004f40:	b11a      	cbz	r2, 8004f4a <xQueueSemaphoreTake+0x19e>
 8004f42:	6819      	ldr	r1, [r3, #0]
 8004f44:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8004f46:	3201      	adds	r2, #1
 8004f48:	650a      	str	r2, [r1, #80]	; 0x50
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	6063      	str	r3, [r4, #4]
 8004f4e:	6923      	ldr	r3, [r4, #16]
 8004f50:	b1cb      	cbz	r3, 8004f86 <xQueueSemaphoreTake+0x1da>
 8004f52:	f104 0010 	add.w	r0, r4, #16
 8004f56:	f7ff fc47 	bl	80047e8 <xTaskRemoveFromEventList>
 8004f5a:	b1a0      	cbz	r0, 8004f86 <xQueueSemaphoreTake+0x1da>
 8004f5c:	4b29      	ldr	r3, [pc, #164]	; (8005004 <xQueueSemaphoreTake+0x258>)
 8004f5e:	4a2e      	ldr	r2, [pc, #184]	; (8005018 <xQueueSemaphoreTake+0x26c>)
 8004f60:	6819      	ldr	r1, [r3, #0]
 8004f62:	6011      	str	r1, [r2, #0]
 8004f64:	4a2d      	ldr	r2, [pc, #180]	; (800501c <xQueueSemaphoreTake+0x270>)
 8004f66:	6812      	ldr	r2, [r2, #0]
 8004f68:	b12a      	cbz	r2, 8004f76 <xQueueSemaphoreTake+0x1ca>
 8004f6a:	681a      	ldr	r2, [r3, #0]
 8004f6c:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
 8004f70:	601a      	str	r2, [r3, #0]
 8004f72:	681a      	ldr	r2, [r3, #0]
 8004f74:	601a      	str	r2, [r3, #0]
 8004f76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f7a:	4b29      	ldr	r3, [pc, #164]	; (8005020 <xQueueSemaphoreTake+0x274>)
 8004f7c:	601a      	str	r2, [r3, #0]
 8004f7e:	f3bf 8f4f 	dsb	sy
 8004f82:	f3bf 8f6f 	isb	sy
 8004f86:	f7ff f921 	bl	80041cc <vPortExitCritical>
 8004f8a:	2501      	movs	r5, #1
 8004f8c:	4628      	mov	r0, r5
 8004f8e:	b005      	add	sp, #20
 8004f90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f94:	6833      	ldr	r3, [r6, #0]
 8004f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f98:	62eb      	str	r3, [r5, #44]	; 0x2c
 8004f9a:	e792      	b.n	8004ec2 <xQueueSemaphoreTake+0x116>
 8004f9c:	6832      	ldr	r2, [r6, #0]
 8004f9e:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8004fa0:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 8004fa2:	4283      	cmp	r3, r0
 8004fa4:	bf2c      	ite	cs
 8004fa6:	2000      	movcs	r0, #0
 8004fa8:	2001      	movcc	r0, #1
 8004faa:	e78b      	b.n	8004ec4 <xQueueSemaphoreTake+0x118>
 8004fac:	4620      	mov	r0, r4
 8004fae:	f7ff febb 	bl	8004d28 <prvUnlockQueue>
 8004fb2:	f7ff fcf7 	bl	80049a4 <xTaskResumeAll>
 8004fb6:	f7ff f915 	bl	80041e4 <vPortEnterCritical>
 8004fba:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004fbc:	b113      	cbz	r3, 8004fc4 <xQueueSemaphoreTake+0x218>
 8004fbe:	f7ff f905 	bl	80041cc <vPortExitCritical>
 8004fc2:	e7b0      	b.n	8004f26 <xQueueSemaphoreTake+0x17a>
 8004fc4:	f7ff f902 	bl	80041cc <vPortExitCritical>
 8004fc8:	2d00      	cmp	r5, #0
 8004fca:	d0df      	beq.n	8004f8c <xQueueSemaphoreTake+0x1e0>
 8004fcc:	f7ff f90a 	bl	80041e4 <vPortEnterCritical>
 8004fd0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004fd2:	b11b      	cbz	r3, 8004fdc <xQueueSemaphoreTake+0x230>
 8004fd4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f1c3 0305 	rsb	r3, r3, #5
 8004fdc:	6864      	ldr	r4, [r4, #4]
 8004fde:	2c00      	cmp	r4, #0
 8004fe0:	d04c      	beq.n	800507c <xQueueSemaphoreTake+0x2d0>
 8004fe2:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8004fe4:	b901      	cbnz	r1, 8004fe8 <xQueueSemaphoreTake+0x23c>
 8004fe6:	e7fe      	b.n	8004fe6 <xQueueSemaphoreTake+0x23a>
 8004fe8:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8004fea:	4293      	cmp	r3, r2
 8004fec:	bf38      	it	cc
 8004fee:	4613      	movcc	r3, r2
 8004ff0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d042      	beq.n	800507c <xQueueSemaphoreTake+0x2d0>
 8004ff6:	2901      	cmp	r1, #1
 8004ff8:	d140      	bne.n	800507c <xQueueSemaphoreTake+0x2d0>
 8004ffa:	4904      	ldr	r1, [pc, #16]	; (800500c <xQueueSemaphoreTake+0x260>)
 8004ffc:	6809      	ldr	r1, [r1, #0]
 8004ffe:	428c      	cmp	r4, r1
 8005000:	d112      	bne.n	8005028 <xQueueSemaphoreTake+0x27c>
 8005002:	e7fe      	b.n	8005002 <xQueueSemaphoreTake+0x256>
 8005004:	e000ed20 	.word	0xe000ed20
 8005008:	20001648 	.word	0x20001648
 800500c:	200011a8 	.word	0x200011a8
 8005010:	200011b8 	.word	0x200011b8
 8005014:	20001374 	.word	0x20001374
 8005018:	2000134c 	.word	0x2000134c
 800501c:	20001358 	.word	0x20001358
 8005020:	e000ed04 	.word	0xe000ed04
 8005024:	200015fc 	.word	0x200015fc
 8005028:	2714      	movs	r7, #20
 800502a:	69a1      	ldr	r1, [r4, #24]
 800502c:	4d15      	ldr	r5, [pc, #84]	; (8005084 <xQueueSemaphoreTake+0x2d8>)
 800502e:	2900      	cmp	r1, #0
 8005030:	fb07 5202 	mla	r2, r7, r2, r5
 8005034:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005036:	bfa4      	itt	ge
 8005038:	f1c3 0305 	rsbge	r3, r3, #5
 800503c:	61a3      	strge	r3, [r4, #24]
 800503e:	6963      	ldr	r3, [r4, #20]
 8005040:	4293      	cmp	r3, r2
 8005042:	d11b      	bne.n	800507c <xQueueSemaphoreTake+0x2d0>
 8005044:	f104 0804 	add.w	r8, r4, #4
 8005048:	4640      	mov	r0, r8
 800504a:	f7ff f9d1 	bl	80043f0 <uxListRemove>
 800504e:	4e0e      	ldr	r6, [pc, #56]	; (8005088 <xQueueSemaphoreTake+0x2dc>)
 8005050:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005052:	b940      	cbnz	r0, 8005066 <xQueueSemaphoreTake+0x2ba>
 8005054:	4357      	muls	r7, r2
 8005056:	59eb      	ldr	r3, [r5, r7]
 8005058:	b92b      	cbnz	r3, 8005066 <xQueueSemaphoreTake+0x2ba>
 800505a:	2101      	movs	r1, #1
 800505c:	6833      	ldr	r3, [r6, #0]
 800505e:	4091      	lsls	r1, r2
 8005060:	ea23 0301 	bic.w	r3, r3, r1
 8005064:	6033      	str	r3, [r6, #0]
 8005066:	2301      	movs	r3, #1
 8005068:	2014      	movs	r0, #20
 800506a:	6831      	ldr	r1, [r6, #0]
 800506c:	4093      	lsls	r3, r2
 800506e:	430b      	orrs	r3, r1
 8005070:	fb00 5002 	mla	r0, r0, r2, r5
 8005074:	4641      	mov	r1, r8
 8005076:	6033      	str	r3, [r6, #0]
 8005078:	f7ff f9e1 	bl	800443e <vListInsertEnd>
 800507c:	f7ff f8a6 	bl	80041cc <vPortExitCritical>
 8005080:	2500      	movs	r5, #0
 8005082:	e783      	b.n	8004f8c <xQueueSemaphoreTake+0x1e0>
 8005084:	200011b8 	.word	0x200011b8
 8005088:	20001374 	.word	0x20001374

0800508c <prvInsertBlockIntoFreeList>:
 800508c:	b510      	push	{r4, lr}
 800508e:	4b0f      	ldr	r3, [pc, #60]	; (80050cc <prvInsertBlockIntoFreeList+0x40>)
 8005090:	461a      	mov	r2, r3
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4283      	cmp	r3, r0
 8005096:	d3fb      	bcc.n	8005090 <prvInsertBlockIntoFreeList+0x4>
 8005098:	6854      	ldr	r4, [r2, #4]
 800509a:	1911      	adds	r1, r2, r4
 800509c:	4288      	cmp	r0, r1
 800509e:	bf01      	itttt	eq
 80050a0:	6841      	ldreq	r1, [r0, #4]
 80050a2:	4610      	moveq	r0, r2
 80050a4:	1909      	addeq	r1, r1, r4
 80050a6:	6051      	streq	r1, [r2, #4]
 80050a8:	6844      	ldr	r4, [r0, #4]
 80050aa:	1901      	adds	r1, r0, r4
 80050ac:	428b      	cmp	r3, r1
 80050ae:	d107      	bne.n	80050c0 <prvInsertBlockIntoFreeList+0x34>
 80050b0:	4907      	ldr	r1, [pc, #28]	; (80050d0 <prvInsertBlockIntoFreeList+0x44>)
 80050b2:	6809      	ldr	r1, [r1, #0]
 80050b4:	428b      	cmp	r3, r1
 80050b6:	bf1f      	itttt	ne
 80050b8:	6859      	ldrne	r1, [r3, #4]
 80050ba:	681b      	ldrne	r3, [r3, #0]
 80050bc:	1909      	addne	r1, r1, r4
 80050be:	6041      	strne	r1, [r0, #4]
 80050c0:	4290      	cmp	r0, r2
 80050c2:	6003      	str	r3, [r0, #0]
 80050c4:	bf18      	it	ne
 80050c6:	6010      	strne	r0, [r2, #0]
 80050c8:	bd10      	pop	{r4, pc}
 80050ca:	bf00      	nop
 80050cc:	20001618 	.word	0x20001618
 80050d0:	200011b0 	.word	0x200011b0

080050d4 <vPortFree>:
 80050d4:	b508      	push	{r3, lr}
 80050d6:	b1e8      	cbz	r0, 8005114 <vPortFree+0x40>
 80050d8:	4a0f      	ldr	r2, [pc, #60]	; (8005118 <vPortFree+0x44>)
 80050da:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80050de:	6812      	ldr	r2, [r2, #0]
 80050e0:	4213      	tst	r3, r2
 80050e2:	d100      	bne.n	80050e6 <vPortFree+0x12>
 80050e4:	e7fe      	b.n	80050e4 <vPortFree+0x10>
 80050e6:	f850 1c08 	ldr.w	r1, [r0, #-8]
 80050ea:	b101      	cbz	r1, 80050ee <vPortFree+0x1a>
 80050ec:	e7fe      	b.n	80050ec <vPortFree+0x18>
 80050ee:	ea23 0302 	bic.w	r3, r3, r2
 80050f2:	f840 3c04 	str.w	r3, [r0, #-4]
 80050f6:	f7ff f91b 	bl	8004330 <vTaskSuspendAll>
 80050fa:	4a08      	ldr	r2, [pc, #32]	; (800511c <vPortFree+0x48>)
 80050fc:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8005100:	6811      	ldr	r1, [r2, #0]
 8005102:	3808      	subs	r0, #8
 8005104:	440b      	add	r3, r1
 8005106:	6013      	str	r3, [r2, #0]
 8005108:	f7ff ffc0 	bl	800508c <prvInsertBlockIntoFreeList>
 800510c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8005110:	f7ff bc48 	b.w	80049a4 <xTaskResumeAll>
 8005114:	bd08      	pop	{r3, pc}
 8005116:	bf00      	nop
 8005118:	20001378 	.word	0x20001378
 800511c:	200013a4 	.word	0x200013a4

08005120 <prvDeleteTCB>:
 8005120:	b510      	push	{r4, lr}
 8005122:	f890 3065 	ldrb.w	r3, [r0, #101]	; 0x65
 8005126:	4604      	mov	r4, r0
 8005128:	b93b      	cbnz	r3, 800513a <prvDeleteTCB+0x1a>
 800512a:	6b00      	ldr	r0, [r0, #48]	; 0x30
 800512c:	f7ff ffd2 	bl	80050d4 <vPortFree>
 8005130:	4620      	mov	r0, r4
 8005132:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005136:	f7ff bfcd 	b.w	80050d4 <vPortFree>
 800513a:	2b01      	cmp	r3, #1
 800513c:	d0f9      	beq.n	8005132 <prvDeleteTCB+0x12>
 800513e:	2b02      	cmp	r3, #2
 8005140:	d000      	beq.n	8005144 <prvDeleteTCB+0x24>
 8005142:	e7fe      	b.n	8005142 <prvDeleteTCB+0x22>
 8005144:	bd10      	pop	{r4, pc}
	...

08005148 <vTaskDelete.constprop.0>:
 8005148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800514a:	4d2b      	ldr	r5, [pc, #172]	; (80051f8 <vTaskDelete.constprop.0+0xb0>)
 800514c:	f7ff f84a 	bl	80041e4 <vPortEnterCritical>
 8005150:	682c      	ldr	r4, [r5, #0]
 8005152:	1d26      	adds	r6, r4, #4
 8005154:	4630      	mov	r0, r6
 8005156:	f7ff f94b 	bl	80043f0 <uxListRemove>
 800515a:	b960      	cbnz	r0, 8005176 <vTaskDelete.constprop.0+0x2e>
 800515c:	2014      	movs	r0, #20
 800515e:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8005160:	4b26      	ldr	r3, [pc, #152]	; (80051fc <vTaskDelete.constprop.0+0xb4>)
 8005162:	4378      	muls	r0, r7
 8005164:	581b      	ldr	r3, [r3, r0]
 8005166:	b933      	cbnz	r3, 8005176 <vTaskDelete.constprop.0+0x2e>
 8005168:	2201      	movs	r2, #1
 800516a:	4925      	ldr	r1, [pc, #148]	; (8005200 <vTaskDelete.constprop.0+0xb8>)
 800516c:	40ba      	lsls	r2, r7
 800516e:	680b      	ldr	r3, [r1, #0]
 8005170:	ea23 0302 	bic.w	r3, r3, r2
 8005174:	600b      	str	r3, [r1, #0]
 8005176:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005178:	b11b      	cbz	r3, 8005182 <vTaskDelete.constprop.0+0x3a>
 800517a:	f104 0018 	add.w	r0, r4, #24
 800517e:	f7ff f937 	bl	80043f0 <uxListRemove>
 8005182:	4a20      	ldr	r2, [pc, #128]	; (8005204 <vTaskDelete.constprop.0+0xbc>)
 8005184:	6813      	ldr	r3, [r2, #0]
 8005186:	3301      	adds	r3, #1
 8005188:	6013      	str	r3, [r2, #0]
 800518a:	682b      	ldr	r3, [r5, #0]
 800518c:	429c      	cmp	r4, r3
 800518e:	d113      	bne.n	80051b8 <vTaskDelete.constprop.0+0x70>
 8005190:	4631      	mov	r1, r6
 8005192:	481d      	ldr	r0, [pc, #116]	; (8005208 <vTaskDelete.constprop.0+0xc0>)
 8005194:	f7ff f953 	bl	800443e <vListInsertEnd>
 8005198:	4a1c      	ldr	r2, [pc, #112]	; (800520c <vTaskDelete.constprop.0+0xc4>)
 800519a:	6813      	ldr	r3, [r2, #0]
 800519c:	3301      	adds	r3, #1
 800519e:	6013      	str	r3, [r2, #0]
 80051a0:	f7ff f814 	bl	80041cc <vPortExitCritical>
 80051a4:	4b1a      	ldr	r3, [pc, #104]	; (8005210 <vTaskDelete.constprop.0+0xc8>)
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	b32b      	cbz	r3, 80051f6 <vTaskDelete.constprop.0+0xae>
 80051aa:	682b      	ldr	r3, [r5, #0]
 80051ac:	429c      	cmp	r4, r3
 80051ae:	d122      	bne.n	80051f6 <vTaskDelete.constprop.0+0xae>
 80051b0:	4b18      	ldr	r3, [pc, #96]	; (8005214 <vTaskDelete.constprop.0+0xcc>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	b153      	cbz	r3, 80051cc <vTaskDelete.constprop.0+0x84>
 80051b6:	e7fe      	b.n	80051b6 <vTaskDelete.constprop.0+0x6e>
 80051b8:	4a17      	ldr	r2, [pc, #92]	; (8005218 <vTaskDelete.constprop.0+0xd0>)
 80051ba:	4620      	mov	r0, r4
 80051bc:	6813      	ldr	r3, [r2, #0]
 80051be:	3b01      	subs	r3, #1
 80051c0:	6013      	str	r3, [r2, #0]
 80051c2:	f7ff ffad 	bl	8005120 <prvDeleteTCB>
 80051c6:	f7ff f859 	bl	800427c <prvResetNextTaskUnblockTime>
 80051ca:	e7e9      	b.n	80051a0 <vTaskDelete.constprop.0+0x58>
 80051cc:	4b13      	ldr	r3, [pc, #76]	; (800521c <vTaskDelete.constprop.0+0xd4>)
 80051ce:	4a14      	ldr	r2, [pc, #80]	; (8005220 <vTaskDelete.constprop.0+0xd8>)
 80051d0:	6819      	ldr	r1, [r3, #0]
 80051d2:	6011      	str	r1, [r2, #0]
 80051d4:	4a13      	ldr	r2, [pc, #76]	; (8005224 <vTaskDelete.constprop.0+0xdc>)
 80051d6:	6812      	ldr	r2, [r2, #0]
 80051d8:	b12a      	cbz	r2, 80051e6 <vTaskDelete.constprop.0+0x9e>
 80051da:	681a      	ldr	r2, [r3, #0]
 80051dc:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
 80051e0:	601a      	str	r2, [r3, #0]
 80051e2:	681a      	ldr	r2, [r3, #0]
 80051e4:	601a      	str	r2, [r3, #0]
 80051e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051ea:	4b0f      	ldr	r3, [pc, #60]	; (8005228 <vTaskDelete.constprop.0+0xe0>)
 80051ec:	601a      	str	r2, [r3, #0]
 80051ee:	f3bf 8f4f 	dsb	sy
 80051f2:	f3bf 8f6f 	isb	sy
 80051f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80051f8:	200011a8 	.word	0x200011a8
 80051fc:	200011b8 	.word	0x200011b8
 8005200:	20001374 	.word	0x20001374
 8005204:	20001370 	.word	0x20001370
 8005208:	20001634 	.word	0x20001634
 800520c:	20001360 	.word	0x20001360
 8005210:	20001614 	.word	0x20001614
 8005214:	2000136c 	.word	0x2000136c
 8005218:	2000135c 	.word	0x2000135c
 800521c:	e000ed20 	.word	0xe000ed20
 8005220:	2000134c 	.word	0x2000134c
 8005224:	20001358 	.word	0x20001358
 8005228:	e000ed04 	.word	0xe000ed04

0800522c <pvPortMalloc>:
 800522c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005230:	4604      	mov	r4, r0
 8005232:	f7ff f87d 	bl	8004330 <vTaskSuspendAll>
 8005236:	4935      	ldr	r1, [pc, #212]	; (800530c <pvPortMalloc+0xe0>)
 8005238:	4d35      	ldr	r5, [pc, #212]	; (8005310 <pvPortMalloc+0xe4>)
 800523a:	680b      	ldr	r3, [r1, #0]
 800523c:	b9f3      	cbnz	r3, 800527c <pvPortMalloc+0x50>
 800523e:	2000      	movs	r0, #0
 8005240:	4b34      	ldr	r3, [pc, #208]	; (8005314 <pvPortMalloc+0xe8>)
 8005242:	4a35      	ldr	r2, [pc, #212]	; (8005318 <pvPortMalloc+0xec>)
 8005244:	f1a3 0708 	sub.w	r7, r3, #8
 8005248:	1ad2      	subs	r2, r2, r3
 800524a:	075e      	lsls	r6, r3, #29
 800524c:	bf18      	it	ne
 800524e:	3307      	addne	r3, #7
 8005250:	4e32      	ldr	r6, [pc, #200]	; (800531c <pvPortMalloc+0xf0>)
 8005252:	443a      	add	r2, r7
 8005254:	bf18      	it	ne
 8005256:	f023 0307 	bicne.w	r3, r3, #7
 800525a:	f022 0207 	bic.w	r2, r2, #7
 800525e:	6033      	str	r3, [r6, #0]
 8005260:	6070      	str	r0, [r6, #4]
 8005262:	e9c2 0000 	strd	r0, r0, [r2]
 8005266:	1ad0      	subs	r0, r2, r3
 8005268:	e9c3 2000 	strd	r2, r0, [r3]
 800526c:	4b2c      	ldr	r3, [pc, #176]	; (8005320 <pvPortMalloc+0xf4>)
 800526e:	600a      	str	r2, [r1, #0]
 8005270:	6018      	str	r0, [r3, #0]
 8005272:	4b2c      	ldr	r3, [pc, #176]	; (8005324 <pvPortMalloc+0xf8>)
 8005274:	6018      	str	r0, [r3, #0]
 8005276:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800527a:	602b      	str	r3, [r5, #0]
 800527c:	682f      	ldr	r7, [r5, #0]
 800527e:	4227      	tst	r7, r4
 8005280:	d13f      	bne.n	8005302 <pvPortMalloc+0xd6>
 8005282:	2c00      	cmp	r4, #0
 8005284:	d038      	beq.n	80052f8 <pvPortMalloc+0xcc>
 8005286:	f104 0308 	add.w	r3, r4, #8
 800528a:	0760      	lsls	r0, r4, #29
 800528c:	bf1c      	itt	ne
 800528e:	f023 0307 	bicne.w	r3, r3, #7
 8005292:	3308      	addne	r3, #8
 8005294:	2b00      	cmp	r3, #0
 8005296:	d034      	beq.n	8005302 <pvPortMalloc+0xd6>
 8005298:	4a22      	ldr	r2, [pc, #136]	; (8005324 <pvPortMalloc+0xf8>)
 800529a:	6816      	ldr	r6, [r2, #0]
 800529c:	4690      	mov	r8, r2
 800529e:	429e      	cmp	r6, r3
 80052a0:	d32f      	bcc.n	8005302 <pvPortMalloc+0xd6>
 80052a2:	4a1e      	ldr	r2, [pc, #120]	; (800531c <pvPortMalloc+0xf0>)
 80052a4:	6815      	ldr	r5, [r2, #0]
 80052a6:	6868      	ldr	r0, [r5, #4]
 80052a8:	4298      	cmp	r0, r3
 80052aa:	d201      	bcs.n	80052b0 <pvPortMalloc+0x84>
 80052ac:	682c      	ldr	r4, [r5, #0]
 80052ae:	b974      	cbnz	r4, 80052ce <pvPortMalloc+0xa2>
 80052b0:	6809      	ldr	r1, [r1, #0]
 80052b2:	42a9      	cmp	r1, r5
 80052b4:	d025      	beq.n	8005302 <pvPortMalloc+0xd6>
 80052b6:	6829      	ldr	r1, [r5, #0]
 80052b8:	6814      	ldr	r4, [r2, #0]
 80052ba:	6011      	str	r1, [r2, #0]
 80052bc:	1ac2      	subs	r2, r0, r3
 80052be:	2a10      	cmp	r2, #16
 80052c0:	f104 0408 	add.w	r4, r4, #8
 80052c4:	d90a      	bls.n	80052dc <pvPortMalloc+0xb0>
 80052c6:	18e8      	adds	r0, r5, r3
 80052c8:	0741      	lsls	r1, r0, #29
 80052ca:	d003      	beq.n	80052d4 <pvPortMalloc+0xa8>
 80052cc:	e7fe      	b.n	80052cc <pvPortMalloc+0xa0>
 80052ce:	462a      	mov	r2, r5
 80052d0:	4625      	mov	r5, r4
 80052d2:	e7e8      	b.n	80052a6 <pvPortMalloc+0x7a>
 80052d4:	6042      	str	r2, [r0, #4]
 80052d6:	606b      	str	r3, [r5, #4]
 80052d8:	f7ff fed8 	bl	800508c <prvInsertBlockIntoFreeList>
 80052dc:	2300      	movs	r3, #0
 80052de:	4910      	ldr	r1, [pc, #64]	; (8005320 <pvPortMalloc+0xf4>)
 80052e0:	686a      	ldr	r2, [r5, #4]
 80052e2:	6808      	ldr	r0, [r1, #0]
 80052e4:	1ab6      	subs	r6, r6, r2
 80052e6:	4286      	cmp	r6, r0
 80052e8:	ea47 0702 	orr.w	r7, r7, r2
 80052ec:	f8c8 6000 	str.w	r6, [r8]
 80052f0:	bf38      	it	cc
 80052f2:	600e      	strcc	r6, [r1, #0]
 80052f4:	606f      	str	r7, [r5, #4]
 80052f6:	602b      	str	r3, [r5, #0]
 80052f8:	f7ff fb54 	bl	80049a4 <xTaskResumeAll>
 80052fc:	0763      	lsls	r3, r4, #29
 80052fe:	d002      	beq.n	8005306 <pvPortMalloc+0xda>
 8005300:	e7fe      	b.n	8005300 <pvPortMalloc+0xd4>
 8005302:	2400      	movs	r4, #0
 8005304:	e7f8      	b.n	80052f8 <pvPortMalloc+0xcc>
 8005306:	4620      	mov	r0, r4
 8005308:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800530c:	200011b0 	.word	0x200011b0
 8005310:	20001378 	.word	0x20001378
 8005314:	20001650 	.word	0x20001650
 8005318:	20005000 	.word	0x20005000
 800531c:	20001618 	.word	0x20001618
 8005320:	200015f4 	.word	0x200015f4
 8005324:	200013a4 	.word	0x200013a4

08005328 <converterLeaveSHF>:

    return true;
}

static bool converterLeaveSHF(const ConverterManager* converter, const ConverterBand* band)
{
 8005328:	b510      	push	{r4, lr}
 800532a:	4604      	mov	r4, r0
    ConverterSHFConfig* config = (ConverterSHFConfig*)band->userData;

    /* Turn everything off */
    config->loTune(0, -127);
 800532c:	68cb      	ldr	r3, [r1, #12]
 800532e:	2000      	movs	r0, #0
 8005330:	f06f 017e 	mvn.w	r1, #126	; 0x7e
 8005334:	689b      	ldr	r3, [r3, #8]
 8005336:	4798      	blx	r3
    converter->setConverterGpio(converter, 0);
 8005338:	4620      	mov	r0, r4
 800533a:	2100      	movs	r1, #0
 800533c:	6a23      	ldr	r3, [r4, #32]
 800533e:	4798      	blx	r3

    return true;
}
 8005340:	2001      	movs	r0, #1
 8005342:	bd10      	pop	{r4, pc}

08005344 <converterTuneSHF>:
{
 8005344:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ConverterSHFConfig* config = (ConverterSHFConfig*)band->userData;
 8005348:	68ce      	ldr	r6, [r1, #12]
    if(tuneRequest->antennaInput) {
 800534a:	6853      	ldr	r3, [r2, #4]
{
 800534c:	4615      	mov	r5, r2
 800534e:	6814      	ldr	r4, [r2, #0]
    if(config->useHighSideMixing) {
 8005350:	7832      	ldrb	r2, [r6, #0]
        ioOut |= _BV(CONVERTER_IO_PIN_ANT_HIGH);
 8005352:	2b00      	cmp	r3, #0
{
 8005354:	4607      	mov	r7, r0
        ioOut |= _BV(CONVERTER_IO_PIN_ANT_HIGH);
 8005356:	bf14      	ite	ne
 8005358:	f04f 0842 	movne.w	r8, #66	; 0x42
 800535c:	f04f 0841 	moveq.w	r8, #65	; 0x41
    if(config->useHighSideMixing) {
 8005360:	6873      	ldr	r3, [r6, #4]
 8005362:	b1b2      	cbz	r2, 8005392 <converterTuneSHF+0x4e>
        loFreq = tuneRequest->inputFrequencyKHz + config->ifFrequencyKHz;
 8005364:	441c      	add	r4, r3
    if(!config->loTune(loFreq, 2)) {
 8005366:	2102      	movs	r1, #2
 8005368:	4620      	mov	r0, r4
 800536a:	68b3      	ldr	r3, [r6, #8]
 800536c:	4798      	blx	r3
 800536e:	b930      	cbnz	r0, 800537e <converterTuneSHF+0x3a>
        if(!config->loTune(loFreq, 2)) {
 8005370:	2102      	movs	r1, #2
 8005372:	68b3      	ldr	r3, [r6, #8]
 8005374:	0860      	lsrs	r0, r4, #1
 8005376:	4798      	blx	r3
 8005378:	b168      	cbz	r0, 8005396 <converterTuneSHF+0x52>
        ioOut |= _BV(CONVERTER_IO_PIN_MIX_X2);
 800537a:	f048 0820 	orr.w	r8, r8, #32
    converter->setConverterGpio(converter, ioOut);
 800537e:	4638      	mov	r0, r7
 8005380:	6a3b      	ldr	r3, [r7, #32]
 8005382:	4641      	mov	r1, r8
 8005384:	4798      	blx	r3
    tuneRequest->outputFrequencyKHz = config->ifFrequencyKHz;
 8005386:	6873      	ldr	r3, [r6, #4]
    return true;
 8005388:	2001      	movs	r0, #1
    tuneRequest->outputFrequencyKHz = config->ifFrequencyKHz;
 800538a:	60eb      	str	r3, [r5, #12]
    tuneRequest->spectrumInversion = config->useHighSideMixing;
 800538c:	7833      	ldrb	r3, [r6, #0]
 800538e:	742b      	strb	r3, [r5, #16]
    return true;
 8005390:	e002      	b.n	8005398 <converterTuneSHF+0x54>
        if(tuneRequest->inputFrequencyKHz < config->ifFrequencyKHz) {
 8005392:	42a3      	cmp	r3, r4
 8005394:	d902      	bls.n	800539c <converterTuneSHF+0x58>
            return false;
 8005396:	2000      	movs	r0, #0
}
 8005398:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        loFreq = tuneRequest->inputFrequencyKHz - config->ifFrequencyKHz;
 800539c:	1ae4      	subs	r4, r4, r3
 800539e:	e7e2      	b.n	8005366 <converterTuneSHF+0x22>

080053a0 <converterLeaveSW>:

    return true;
}

static bool converterLeaveSW(const ConverterManager* converter, const ConverterBand* band)
{
 80053a0:	b508      	push	{r3, lr}
    (void) converter;
    (void) band;

    /* Turn everything off */
    converter->setConverterGpio(converter, 0);
 80053a2:	2100      	movs	r1, #0
 80053a4:	6a03      	ldr	r3, [r0, #32]
 80053a6:	4798      	blx	r3

    return true;
}
 80053a8:	2001      	movs	r0, #1
 80053aa:	bd08      	pop	{r3, pc}

080053ac <converterTuneSW>:
{
 80053ac:	b510      	push	{r4, lr}
 80053ae:	4614      	mov	r4, r2
    converter->setConverterGpio(converter, _BV(CONVERTER_IO_PIN_MIX_SW_EN) | _BV(CONVERTER_IO_PIN_MIX_SW_LO));
 80053b0:	6a03      	ldr	r3, [r0, #32]
 80053b2:	f44f 7140 	mov.w	r1, #768	; 0x300
 80053b6:	4798      	blx	r3
    tuneRequest->outputFrequencyKHz = configCPU_CLOCK_HZ/1000 +tuneRequest->inputFrequencyKHz;
 80053b8:	6823      	ldr	r3, [r4, #0]
}
 80053ba:	2001      	movs	r0, #1
    tuneRequest->outputFrequencyKHz = configCPU_CLOCK_HZ/1000 +tuneRequest->inputFrequencyKHz;
 80053bc:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 80053c0:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80053c4:	60e3      	str	r3, [r4, #12]
    tuneRequest->spectrumInversion = false;
 80053c6:	2300      	movs	r3, #0
 80053c8:	7423      	strb	r3, [r4, #16]
}
 80053ca:	bd10      	pop	{r4, pc}

080053cc <converterTuneBypass>:


#include "converter.h"

static bool converterTuneBypass(const ConverterManager* converter, const ConverterBand* band, ConverterTuneRequest* tuneRequest)
{
 80053cc:	b510      	push	{r4, lr}
 80053ce:	4614      	mov	r4, r2
    (void) band;

    converter->setConverterGpio(converter, 0);
 80053d0:	6a03      	ldr	r3, [r0, #32]
 80053d2:	2100      	movs	r1, #0
 80053d4:	4798      	blx	r3

    tuneRequest->outputFrequencyKHz = tuneRequest->inputFrequencyKHz;
 80053d6:	6823      	ldr	r3, [r4, #0]
    tuneRequest->spectrumInversion = false;

    return true;
}
 80053d8:	2001      	movs	r0, #1
    tuneRequest->outputFrequencyKHz = tuneRequest->inputFrequencyKHz;
 80053da:	60e3      	str	r3, [r4, #12]
    tuneRequest->spectrumInversion = false;
 80053dc:	2300      	movs	r3, #0
 80053de:	7423      	strb	r3, [r4, #16]
}
 80053e0:	bd10      	pop	{r4, pc}

080053e2 <converterTune>:
#include "converter.h"
#include "shell.h"
#include "chprintf.h"

bool converterTune(ConverterManager* converter, ConverterTuneRequest* tuneRequest)
{
 80053e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    /* Iterate over all bands */
    for(uint8_t i=0; converter->bands[i].functions; i++) {
 80053e6:	f04f 0c14 	mov.w	ip, #20
{
 80053ea:	4604      	mov	r4, r0
 80053ec:	460d      	mov	r5, r1
    for(uint8_t i=0; converter->bands[i].functions; i++) {
 80053ee:	6941      	ldr	r1, [r0, #20]
 80053f0:	2000      	movs	r0, #0
 80053f2:	b2c6      	uxtb	r6, r0
 80053f4:	fb0c f806 	mul.w	r8, ip, r6
 80053f8:	eb01 0208 	add.w	r2, r1, r8
 80053fc:	6913      	ldr	r3, [r2, #16]
 80053fe:	b1b3      	cbz	r3, 800542e <converterTune+0x4c>
        if(_BV(i) & converter-> disabledBands) {
 8005400:	69e7      	ldr	r7, [r4, #28]
 8005402:	40f7      	lsrs	r7, r6
 8005404:	07fb      	lsls	r3, r7, #31
 8005406:	d41d      	bmi.n	8005444 <converterTune+0x62>
            continue;
        }

        uint32_t tmpFreq = tuneRequest->inputFrequencyKHz;

        if((tuneRequest->forceBand && tuneRequest->bandId == i) ||
 8005408:	7a2b      	ldrb	r3, [r5, #8]
 800540a:	b1a3      	cbz	r3, 8005436 <converterTune+0x54>
 800540c:	7a6b      	ldrb	r3, [r5, #9]
 800540e:	42b3      	cmp	r3, r6
 8005410:	d118      	bne.n	8005444 <converterTune+0x62>
                (!tuneRequest->forceBand &&
                 tmpFreq >= converter->bands[i].minFrequencyKHz &&
                 tmpFreq <= converter->bands[i].maxFrequencyKHz)) {


            if(converter->activeBand != 0xff && converter->activeBand != i) {
 8005412:	7e23      	ldrb	r3, [r4, #24]
 8005414:	2bff      	cmp	r3, #255	; 0xff
 8005416:	d117      	bne.n	8005448 <converterTune+0x66>
                    converter->bands[converter->activeBand].functions->converterLeaveBand(converter,
                            &converter->bands[converter->activeBand]);
                }
            }

            converter->activeBand = i;
 8005418:	7626      	strb	r6, [r4, #24]
            tuneRequest->bandId = i;
 800541a:	726e      	strb	r6, [r5, #9]

            bool retVal = converter->bands[i].functions->converterTuneBand(converter, &converter->bands[i], tuneRequest);
 800541c:	6961      	ldr	r1, [r4, #20]
 800541e:	462a      	mov	r2, r5
 8005420:	4441      	add	r1, r8
 8005422:	690b      	ldr	r3, [r1, #16]
 8005424:	4620      	mov	r0, r4
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	4798      	blx	r3
            if(retVal) {
 800542a:	4606      	mov	r6, r0
 800542c:	b9c0      	cbnz	r0, 8005460 <converterTune+0x7e>
    for(uint8_t i=0; converter->bands[i].functions; i++) {
 800542e:	2600      	movs	r6, #0
        }
    }


    return false;
}
 8005430:	4630      	mov	r0, r6
 8005432:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        uint32_t tmpFreq = tuneRequest->inputFrequencyKHz;
 8005436:	682f      	ldr	r7, [r5, #0]
                (!tuneRequest->forceBand &&
 8005438:	6853      	ldr	r3, [r2, #4]
 800543a:	42bb      	cmp	r3, r7
 800543c:	d802      	bhi.n	8005444 <converterTune+0x62>
                 tmpFreq >= converter->bands[i].minFrequencyKHz &&
 800543e:	6893      	ldr	r3, [r2, #8]
 8005440:	42bb      	cmp	r3, r7
 8005442:	d2e6      	bcs.n	8005412 <converterTune+0x30>
    for(uint8_t i=0; converter->bands[i].functions; i++) {
 8005444:	3001      	adds	r0, #1
 8005446:	e7d4      	b.n	80053f2 <converterTune+0x10>
            if(converter->activeBand != 0xff && converter->activeBand != i) {
 8005448:	42b3      	cmp	r3, r6
 800544a:	d0e5      	beq.n	8005418 <converterTune+0x36>
                if(converter->bands[converter->activeBand].functions->converterLeaveBand) {
 800544c:	2214      	movs	r2, #20
 800544e:	fb02 1103 	mla	r1, r2, r3, r1
 8005452:	690b      	ldr	r3, [r1, #16]
 8005454:	685b      	ldr	r3, [r3, #4]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d0de      	beq.n	8005418 <converterTune+0x36>
                    converter->bands[converter->activeBand].functions->converterLeaveBand(converter,
 800545a:	4620      	mov	r0, r4
 800545c:	4798      	blx	r3
 800545e:	e7db      	b.n	8005418 <converterTune+0x36>
                converter->currentTune = *tuneRequest;
 8005460:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005462:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005464:	682b      	ldr	r3, [r5, #0]
 8005466:	6023      	str	r3, [r4, #0]
 8005468:	e7e2      	b.n	8005430 <converterTune+0x4e>
	...

0800546c <gpioCPUInit>:
    .getValue = gpioCPUGetValue,
    .status = gpioCPUStatus
};

void gpioCPUInit(uint8_t gpioPortId, ioportid_t port)
{
 800546c:	b510      	push	{r4, lr}
    return true;
}

GPIOPort* gpioRegisterPortDriver(uint8_t index)
{
    if(index >= GPIODriverData.numPorts) {
 800546e:	4a0c      	ldr	r2, [pc, #48]	; (80054a0 <gpioCPUInit+0x34>)
 8005470:	7913      	ldrb	r3, [r2, #4]
 8005472:	4283      	cmp	r3, r0
 8005474:	d912      	bls.n	800549c <gpioCPUInit+0x30>
        return NULL;
    }
    if(GPIODriverData.registeredPorts & _BV(index)) {
 8005476:	6894      	ldr	r4, [r2, #8]
 8005478:	fa24 f300 	lsr.w	r3, r4, r0
 800547c:	07db      	lsls	r3, r3, #31
 800547e:	d40d      	bmi.n	800549c <gpioCPUInit+0x30>
        return NULL;
    }

    GPIODriverData.registeredPorts |= _BV(index);
 8005480:	2301      	movs	r3, #1
 8005482:	4083      	lsls	r3, r0
 8005484:	4323      	orrs	r3, r4
 8005486:	6093      	str	r3, [r2, #8]

    return &GPIODriverData.ports[index];
 8005488:	230c      	movs	r3, #12
 800548a:	4358      	muls	r0, r3
 800548c:	6813      	ldr	r3, [r2, #0]
    GPIOPort* portDriver = gpioRegisterPortDriver(gpioPortId);
    if(!portDriver) {
 800548e:	181a      	adds	r2, r3, r0
 8005490:	d004      	beq.n	800549c <gpioCPUInit+0x30>
        return;
    }

    portDriver->driver = port;
 8005492:	5019      	str	r1, [r3, r0]
    portDriver->functions = &gpioCPUFunctions;
 8005494:	4b03      	ldr	r3, [pc, #12]	; (80054a4 <gpioCPUInit+0x38>)
 8005496:	6093      	str	r3, [r2, #8]
    portDriver->numPins = 16;
 8005498:	2310      	movs	r3, #16
 800549a:	6053      	str	r3, [r2, #4]
}
 800549c:	bd10      	pop	{r4, pc}
 800549e:	bf00      	nop
 80054a0:	20000928 	.word	0x20000928
 80054a4:	0800c88c 	.word	0x0800c88c

080054a8 <gpioCPUGetValue>:
    *value = palReadPort((ioportid_t)driver->driver);
 80054a8:	6803      	ldr	r3, [r0, #0]
}
 80054aa:	2001      	movs	r0, #1
    *value = palReadPort((ioportid_t)driver->driver);
 80054ac:	689b      	ldr	r3, [r3, #8]
 80054ae:	600b      	str	r3, [r1, #0]
}
 80054b0:	4770      	bx	lr

080054b2 <gpioCPUSetValue>:
    palWriteGroup((ioportid_t)driver->driver, pinsToChange, 0, newValue);
 80054b2:	6803      	ldr	r3, [r0, #0]
 80054b4:	ea21 0002 	bic.w	r0, r1, r2
 80054b8:	400a      	ands	r2, r1
 80054ba:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80054be:	611a      	str	r2, [r3, #16]
}
 80054c0:	2001      	movs	r0, #1
 80054c2:	4770      	bx	lr

080054c4 <gpioCPUGetPinMode>:
{
 80054c4:	b538      	push	{r3, r4, r5, lr}
 80054c6:	4604      	mov	r4, r0
    syssts_t sts = osalSysGetStatusAndLockX();
 80054c8:	f7fe fe6e 	bl	80041a8 <ulPortEnterCriticalFromISR>
    cr = (uint64_t)(((ioportid_t)driver->driver)->CRH) << 32;
 80054cc:	6823      	ldr	r3, [r4, #0]
 80054ce:	685d      	ldr	r5, [r3, #4]
    cr |= ((ioportid_t)driver->driver)->CRL;
 80054d0:	681c      	ldr	r4, [r3, #0]
    osalSysRestoreStatusX(sts);
 80054d2:	f7fe fe5d 	bl	8004190 <vPortExitCriticalFromISR>
    uint8_t config = (cr >> (4*pin)) & 0xF;
 80054d6:	0089      	lsls	r1, r1, #2
 80054d8:	f1c1 0220 	rsb	r2, r1, #32
 80054dc:	f1a1 0320 	sub.w	r3, r1, #32
 80054e0:	fa05 f202 	lsl.w	r2, r5, r2
 80054e4:	fa24 f101 	lsr.w	r1, r4, r1
 80054e8:	fa25 f303 	lsr.w	r3, r5, r3
 80054ec:	4311      	orrs	r1, r2
 80054ee:	4319      	orrs	r1, r3
}
 80054f0:	4b02      	ldr	r3, [pc, #8]	; (80054fc <gpioCPUGetPinMode+0x38>)
    return cfgToMode[config];
 80054f2:	f001 010f 	and.w	r1, r1, #15
}
 80054f6:	5c58      	ldrb	r0, [r3, r1]
 80054f8:	bd38      	pop	{r3, r4, r5, pc}
 80054fa:	bf00      	nop
 80054fc:	0800c76c 	.word	0x0800c76c

08005500 <gpioCPUSetPinMode>:
    palSetPadMode((ioportid_t)driver->driver, pin, pinMode);
 8005500:	2301      	movs	r3, #1
    0xF,        /* PAL_MODE_STM32_ALTERNATE_OPENDRAIN, 50MHz.*/
  };
  uint32_t mh, ml, crh, crl, cfg;
  unsigned i;

  if (mode == PAL_MODE_INPUT_PULLUP)
 8005502:	2a03      	cmp	r2, #3
{
 8005504:	b5f0      	push	{r4, r5, r6, r7, lr}
    palSetPadMode((ioportid_t)driver->driver, pin, pinMode);
 8005506:	6800      	ldr	r0, [r0, #0]
 8005508:	fa03 f101 	lsl.w	r1, r3, r1
 800550c:	d129      	bne.n	8005562 <gpioCPUSetPinMode+0x62>
    port->BSRR = mask;
 800550e:	6101      	str	r1, [r0, #16]
  else if (mode == PAL_MODE_INPUT_PULLDOWN)
    port->BRR = mask;
  cfg = cfgtab[mode];
 8005510:	4b16      	ldr	r3, [pc, #88]	; (800556c <gpioCPUSetPinMode+0x6c>)
 8005512:	2608      	movs	r6, #8
 8005514:	5c9f      	ldrb	r7, [r3, r2]
  mh = ml = crh = crl = 0;
 8005516:	2300      	movs	r3, #0
 8005518:	461a      	mov	r2, r3
 800551a:	461d      	mov	r5, r3
 800551c:	461c      	mov	r4, r3
  for (i = 0; i < 8; i++) {
    ml <<= 4;
    mh <<= 4;
    crl <<= 4;
    crh <<= 4;
    if ((mask & 0x0080) == 0)
 800551e:	f011 0f80 	tst.w	r1, #128	; 0x80
    ml <<= 4;
 8005522:	ea4f 1404 	mov.w	r4, r4, lsl #4
    crl <<= 4;
 8005526:	ea4f 1202 	mov.w	r2, r2, lsl #4
    mh <<= 4;
 800552a:	ea4f 1505 	mov.w	r5, r5, lsl #4
    crh <<= 4;
 800552e:	ea4f 1303 	mov.w	r3, r3, lsl #4
      ml |= 0xf;
 8005532:	bf0c      	ite	eq
 8005534:	f044 040f 	orreq.w	r4, r4, #15
    else
      crl |= cfg;
 8005538:	433a      	orrne	r2, r7
    if ((mask & 0x8000) == 0)
 800553a:	f411 4f00 	tst.w	r1, #32768	; 0x8000
      mh |= 0xf;
 800553e:	bf0c      	ite	eq
 8005540:	f045 050f 	orreq.w	r5, r5, #15
    else
      crh |= cfg;
 8005544:	433b      	orrne	r3, r7
  for (i = 0; i < 8; i++) {
 8005546:	3e01      	subs	r6, #1
    mask <<= 1;
 8005548:	ea4f 0141 	mov.w	r1, r1, lsl #1
  for (i = 0; i < 8; i++) {
 800554c:	d1e7      	bne.n	800551e <gpioCPUSetPinMode+0x1e>
  }
  port->CRH = (port->CRH & mh) | crh;
 800554e:	6841      	ldr	r1, [r0, #4]
 8005550:	4029      	ands	r1, r5
 8005552:	430b      	orrs	r3, r1
 8005554:	6043      	str	r3, [r0, #4]
  port->CRL = (port->CRL & ml) | crl;
 8005556:	6803      	ldr	r3, [r0, #0]
 8005558:	4023      	ands	r3, r4
 800555a:	4313      	orrs	r3, r2
 800555c:	6003      	str	r3, [r0, #0]
}
 800555e:	2001      	movs	r0, #1
 8005560:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if (mode == PAL_MODE_INPUT_PULLDOWN)
 8005562:	2a04      	cmp	r2, #4
    port->BRR = mask;
 8005564:	bf08      	it	eq
 8005566:	6141      	streq	r1, [r0, #20]
 8005568:	e7d2      	b.n	8005510 <gpioCPUSetPinMode+0x10>
 800556a:	bf00      	nop
 800556c:	0800c77c 	.word	0x0800c77c

08005570 <gpioGetPortDriver>:
}

static const GPIOPort* gpioGetPortDriver(uint8_t index)
{
    if(index >= GPIODriverData.numPorts) {
 8005570:	4b04      	ldr	r3, [pc, #16]	; (8005584 <gpioGetPortDriver+0x14>)
 8005572:	791a      	ldrb	r2, [r3, #4]
 8005574:	4282      	cmp	r2, r0
        return &gpioDummyPort;
    }

    return &GPIODriverData.ports[index];
 8005576:	bf83      	ittte	hi
 8005578:	220c      	movhi	r2, #12
 800557a:	681b      	ldrhi	r3, [r3, #0]
 800557c:	fb02 3000 	mlahi	r0, r2, r0, r3
        return &gpioDummyPort;
 8005580:	4801      	ldrls	r0, [pc, #4]	; (8005588 <gpioGetPortDriver+0x18>)
}
 8005582:	4770      	bx	lr
 8005584:	20000928 	.word	0x20000928
 8005588:	0800c8bc 	.word	0x0800c8bc

0800558c <gpioPortIoDisable>:

    return value;
}

void gpioPortIoDisable(uint8_t gpioPort, bool disable)
{
 800558c:	b510      	push	{r4, lr}
    const GPIOPort* port = gpioGetPortDriver(gpioPort);
 800558e:	f7ff ffef 	bl	8005570 <gpioGetPortDriver>

    if(port->functions->busIoDisable) {
 8005592:	6883      	ldr	r3, [r0, #8]
 8005594:	691b      	ldr	r3, [r3, #16]
 8005596:	b113      	cbz	r3, 800559e <gpioPortIoDisable+0x12>
        port->functions->busIoDisable(port, disable);
    }
}
 8005598:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        port->functions->busIoDisable(port, disable);
 800559c:	4718      	bx	r3
}
 800559e:	bd10      	pop	{r4, pc}

080055a0 <gpioSetPinMode>:
{
 80055a0:	b510      	push	{r4, lr}
 80055a2:	4604      	mov	r4, r0
    const GPIOPort* port = gpioGetPortDriver(gpioPort);
 80055a4:	0a00      	lsrs	r0, r0, #8
 80055a6:	f7ff ffe3 	bl	8005570 <gpioGetPortDriver>
    return port->functions->setMode(port, gpioPin, mode);
 80055aa:	6883      	ldr	r3, [r0, #8]
 80055ac:	460a      	mov	r2, r1
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	b2e1      	uxtb	r1, r4
}
 80055b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return port->functions->setMode(port, gpioPin, mode);
 80055b6:	4718      	bx	r3

080055b8 <gpioGetPin>:
{
 80055b8:	b513      	push	{r0, r1, r4, lr}
 80055ba:	4604      	mov	r4, r0
    const GPIOPort* port = gpioGetPortDriver(gpioPort);
 80055bc:	0a00      	lsrs	r0, r0, #8
 80055be:	f7ff ffd7 	bl	8005570 <gpioGetPortDriver>
    uint32_t value = 0;
 80055c2:	2300      	movs	r3, #0
 80055c4:	9301      	str	r3, [sp, #4]
    port->functions->getValue(port, &value);
 80055c6:	6883      	ldr	r3, [r0, #8]
 80055c8:	a901      	add	r1, sp, #4
 80055ca:	68db      	ldr	r3, [r3, #12]
 80055cc:	4798      	blx	r3
    return (value >> gpioPin) & 1;
 80055ce:	9801      	ldr	r0, [sp, #4]
 80055d0:	b2e4      	uxtb	r4, r4
 80055d2:	40e0      	lsrs	r0, r4
}
 80055d4:	f000 0001 	and.w	r0, r0, #1
 80055d8:	b002      	add	sp, #8
 80055da:	bd10      	pop	{r4, pc}

080055dc <gpioSetPin>:
{
 80055dc:	b510      	push	{r4, lr}
 80055de:	4604      	mov	r4, r0
    const GPIOPort* port = gpioGetPortDriver(gpioPort);
 80055e0:	0a00      	lsrs	r0, r0, #8
 80055e2:	f7ff ffc5 	bl	8005570 <gpioGetPortDriver>
    return port->functions->setValue(port, 1<<gpioPin, on<<gpioPin);
 80055e6:	b2e4      	uxtb	r4, r4
 80055e8:	fa01 f204 	lsl.w	r2, r1, r4
 80055ec:	2101      	movs	r1, #1
 80055ee:	6883      	ldr	r3, [r0, #8]
 80055f0:	40a1      	lsls	r1, r4
 80055f2:	689b      	ldr	r3, [r3, #8]
}
 80055f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return port->functions->setValue(port, 1<<gpioPin, on<<gpioPin);
 80055f8:	4718      	bx	r3
	...

080055fc <usbShellTerminated>:
    shellStart((BaseSequentialStream*)&SD3, 128, "ShellTTL", NULL, NULL);
}

static volatile bool usbShellIsUp = false;
static void usbShellTerminated(void* param)
{
 80055fc:	b508      	push	{r3, lr}
    (void)param;

    gpioSetPin(GPIO_LED_USB, true);
 80055fe:	2101      	movs	r1, #1
 8005600:	f240 1003 	movw	r0, #259	; 0x103
 8005604:	f7ff ffea 	bl	80055dc <gpioSetPin>
    osalThreadSleepSeconds(1);
 8005608:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800560c:	f7ff faac 	bl	8004b68 <vTaskDelay>
    usbShellIsUp = false;
 8005610:	2200      	movs	r2, #0
 8005612:	4b01      	ldr	r3, [pc, #4]	; (8005618 <usbShellTerminated+0x1c>)
 8005614:	701a      	strb	r2, [r3, #0]
}
 8005616:	bd08      	pop	{r3, pc}
 8005618:	20001355 	.word	0x20001355

0800561c <syslogPut>:

    return n;
}

static msg_t syslogPut(void *instance, uint8_t b)
{
 800561c:	b507      	push	{r0, r1, r2, lr}
 800561e:	f88d 1007 	strb.w	r1, [sp, #7]
    (void)instance;

    packetQueuePutBytes(&syslogQueue, &b, 1);
 8005622:	f10d 0007 	add.w	r0, sp, #7
 8005626:	2101      	movs	r1, #1
 8005628:	f7fe fd42 	bl	80040b0 <packetQueuePutBytes.constprop.0>

    return MSG_OK;
}
 800562c:	2000      	movs	r0, #0
 800562e:	b003      	add	sp, #12
 8005630:	f85d fb04 	ldr.w	pc, [sp], #4

08005634 <syslogWrite>:
{
 8005634:	b510      	push	{r4, lr}
 8005636:	4614      	mov	r4, r2
 8005638:	4608      	mov	r0, r1
    packetQueuePutBytes(&syslogQueue, bp, n);
 800563a:	b291      	uxth	r1, r2
 800563c:	f7fe fd38 	bl	80040b0 <packetQueuePutBytes.constprop.0>
}
 8005640:	4620      	mov	r0, r4
 8005642:	bd10      	pop	{r4, pc}

08005644 <monitorKick>:
    xTaskCreate(taskPeriodicMon, "Monitor", stackSize, NULL, 1, &monThreadHandle );
}

void monitorKick(MonitorEntry* entry, bool active)
{
    if(entry->active == active) {
 8005644:	7c03      	ldrb	r3, [r0, #16]
{
 8005646:	b570      	push	{r4, r5, r6, lr}
    if(entry->active == active) {
 8005648:	428b      	cmp	r3, r1
 800564a:	d047      	beq.n	80056dc <monitorKick+0x98>
        return;
    }

    entry->active = active;

    if(monThreadHandle && active) {
 800564c:	4b24      	ldr	r3, [pc, #144]	; (80056e0 <monitorKick+0x9c>)
    entry->active = active;
 800564e:	7401      	strb	r1, [r0, #16]
    if(monThreadHandle && active) {
 8005650:	681c      	ldr	r4, [r3, #0]
 8005652:	2c00      	cmp	r4, #0
 8005654:	d042      	beq.n	80056dc <monitorKick+0x98>
 8005656:	2900      	cmp	r1, #0
 8005658:	d040      	beq.n	80056dc <monitorKick+0x98>
 800565a:	f7fe fdc3 	bl	80041e4 <vPortEnterCritical>
 800565e:	2202      	movs	r2, #2
 8005660:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
 8005664:	f884 2064 	strb.w	r2, [r4, #100]	; 0x64
 8005668:	2201      	movs	r2, #1
 800566a:	4293      	cmp	r3, r2
 800566c:	b2dd      	uxtb	r5, r3
 800566e:	6622      	str	r2, [r4, #96]	; 0x60
 8005670:	d130      	bne.n	80056d4 <monitorKick+0x90>
 8005672:	1d26      	adds	r6, r4, #4
 8005674:	4630      	mov	r0, r6
 8005676:	f7fe febb 	bl	80043f0 <uxListRemove>
 800567a:	2014      	movs	r0, #20
 800567c:	4a19      	ldr	r2, [pc, #100]	; (80056e4 <monitorKick+0xa0>)
 800567e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005680:	6811      	ldr	r1, [r2, #0]
 8005682:	409d      	lsls	r5, r3
 8005684:	430d      	orrs	r5, r1
 8005686:	6015      	str	r5, [r2, #0]
 8005688:	4a17      	ldr	r2, [pc, #92]	; (80056e8 <monitorKick+0xa4>)
 800568a:	4631      	mov	r1, r6
 800568c:	fb00 2003 	mla	r0, r0, r3, r2
 8005690:	f7fe fed5 	bl	800443e <vListInsertEnd>
 8005694:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005696:	b103      	cbz	r3, 800569a <monitorKick+0x56>
 8005698:	e7fe      	b.n	8005698 <monitorKick+0x54>
 800569a:	f7fe fdef 	bl	800427c <prvResetNextTaskUnblockTime>
 800569e:	4b13      	ldr	r3, [pc, #76]	; (80056ec <monitorKick+0xa8>)
 80056a0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056a6:	429a      	cmp	r2, r3
 80056a8:	d914      	bls.n	80056d4 <monitorKick+0x90>
 80056aa:	4b11      	ldr	r3, [pc, #68]	; (80056f0 <monitorKick+0xac>)
 80056ac:	4a11      	ldr	r2, [pc, #68]	; (80056f4 <monitorKick+0xb0>)
 80056ae:	6819      	ldr	r1, [r3, #0]
 80056b0:	6011      	str	r1, [r2, #0]
 80056b2:	4a11      	ldr	r2, [pc, #68]	; (80056f8 <monitorKick+0xb4>)
 80056b4:	6812      	ldr	r2, [r2, #0]
 80056b6:	b12a      	cbz	r2, 80056c4 <monitorKick+0x80>
 80056b8:	681a      	ldr	r2, [r3, #0]
 80056ba:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
 80056be:	601a      	str	r2, [r3, #0]
 80056c0:	681a      	ldr	r2, [r3, #0]
 80056c2:	601a      	str	r2, [r3, #0]
 80056c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056c8:	4b0c      	ldr	r3, [pc, #48]	; (80056fc <monitorKick+0xb8>)
 80056ca:	601a      	str	r2, [r3, #0]
 80056cc:	f3bf 8f4f 	dsb	sy
 80056d0:	f3bf 8f6f 	isb	sy
        xTaskNotify(monThreadHandle, 1, eSetValueWithOverwrite);
    }
}
 80056d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80056d8:	f7fe bd78 	b.w	80041cc <vPortExitCritical>
 80056dc:	bd70      	pop	{r4, r5, r6, pc}
 80056de:	bf00      	nop
 80056e0:	200011a4 	.word	0x200011a4
 80056e4:	20001374 	.word	0x20001374
 80056e8:	200011b8 	.word	0x200011b8
 80056ec:	200011a8 	.word	0x200011a8
 80056f0:	e000ed20 	.word	0xe000ed20
 80056f4:	2000134c 	.word	0x2000134c
 80056f8:	20001358 	.word	0x20001358
 80056fc:	e000ed04 	.word	0xe000ed04

08005700 <taskPeriodicMon>:
{
 8005700:	b507      	push	{r0, r1, r2, lr}
        MonitorEntry* entry = monThreadFirst;
 8005702:	4e0d      	ldr	r6, [pc, #52]	; (8005738 <taskPeriodicMon+0x38>)
        bool workToCome = false;
 8005704:	2500      	movs	r5, #0
        MonitorEntry* entry = monThreadFirst;
 8005706:	6834      	ldr	r4, [r6, #0]
        while(entry) {
 8005708:	b95c      	cbnz	r4, 8005722 <taskPeriodicMon+0x22>
        if(!workToCome) {
 800570a:	b92d      	cbnz	r5, 8005718 <taskPeriodicMon+0x18>
            xTaskNotifyWait(0, ULONG_MAX, (uint32_t*)&ulInterruptStatus, portMAX_DELAY);
 800570c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005710:	4628      	mov	r0, r5
 8005712:	a901      	add	r1, sp, #4
 8005714:	f7fe ffa6 	bl	8004664 <xTaskNotifyWait.constprop.0>
        osalThreadSleepSeconds(10);
 8005718:	f242 7010 	movw	r0, #10000	; 0x2710
 800571c:	f7ff fa24 	bl	8004b68 <vTaskDelay>
    for(;;) {
 8005720:	e7f0      	b.n	8005704 <taskPeriodicMon+0x4>
            if(entry->active) {
 8005722:	7c23      	ldrb	r3, [r4, #16]
 8005724:	b12b      	cbz	r3, 8005732 <taskPeriodicMon+0x32>
                if(entry->callback) {
 8005726:	6823      	ldr	r3, [r4, #0]
 8005728:	b11b      	cbz	r3, 8005732 <taskPeriodicMon+0x32>
                    entry->active = entry->callback(entry->param);
 800572a:	6860      	ldr	r0, [r4, #4]
 800572c:	4798      	blx	r3
 800572e:	7420      	strb	r0, [r4, #16]
                    workToCome |= entry->active;
 8005730:	4305      	orrs	r5, r0
            entry = entry->next;
 8005732:	68a4      	ldr	r4, [r4, #8]
 8005734:	e7e8      	b.n	8005708 <taskPeriodicMon+0x8>
 8005736:	bf00      	nop
 8005738:	200011a0 	.word	0x200011a0

0800573c <i2cSafeResultToString>:
}


const char* i2cSafeResultToString(i2c_result result)
{
    if(result == I2C_BUS_OK) return "OK";
 800573c:	b190      	cbz	r0, 8005764 <i2cSafeResultToString+0x28>
    else if(result == I2C_BUS_TIMEOUT) return "Timeout";
 800573e:	1c42      	adds	r2, r0, #1
 8005740:	d012      	beq.n	8005768 <i2cSafeResultToString+0x2c>
    else if(result == I2C_BUS_RESET) return "Transfer Error";
 8005742:	1c83      	adds	r3, r0, #2
 8005744:	d012      	beq.n	800576c <i2cSafeResultToString+0x30>
    else if(result == I2C_BUS_STUCK_SCL_PULLED_LOW) return "SCL stuck low";
 8005746:	2801      	cmp	r0, #1
 8005748:	d012      	beq.n	8005770 <i2cSafeResultToString+0x34>
    else if(result == I2C_BUS_STUCK_SDA_PULLED_LOW) return "SDA stuck low";
 800574a:	2802      	cmp	r0, #2
 800574c:	d012      	beq.n	8005774 <i2cSafeResultToString+0x38>
    else if(result == I2C_BUS_STUCK_SCL_PULLED_HIGH) return "SCL stuck high";
 800574e:	2803      	cmp	r0, #3
 8005750:	d012      	beq.n	8005778 <i2cSafeResultToString+0x3c>
    else if(result == I2C_BUS_STUCK_SDA_PULLED_HIGH) return "SDA stuck high";
 8005752:	2804      	cmp	r0, #4
 8005754:	d012      	beq.n	800577c <i2cSafeResultToString+0x40>
    else if(result == I2C_BUS_STUCK_SHORTED_TOGETHER) return "SDA/SCL shorted together";
    else return "Unknown";
 8005756:	4b0a      	ldr	r3, [pc, #40]	; (8005780 <i2cSafeResultToString+0x44>)
 8005758:	4a0a      	ldr	r2, [pc, #40]	; (8005784 <i2cSafeResultToString+0x48>)
 800575a:	2805      	cmp	r0, #5
 800575c:	bf0c      	ite	eq
 800575e:	4618      	moveq	r0, r3
 8005760:	4610      	movne	r0, r2
 8005762:	4770      	bx	lr
    if(result == I2C_BUS_OK) return "OK";
 8005764:	4808      	ldr	r0, [pc, #32]	; (8005788 <i2cSafeResultToString+0x4c>)
 8005766:	4770      	bx	lr
    else if(result == I2C_BUS_TIMEOUT) return "Timeout";
 8005768:	4808      	ldr	r0, [pc, #32]	; (800578c <i2cSafeResultToString+0x50>)
 800576a:	4770      	bx	lr
    else if(result == I2C_BUS_RESET) return "Transfer Error";
 800576c:	4808      	ldr	r0, [pc, #32]	; (8005790 <i2cSafeResultToString+0x54>)
 800576e:	4770      	bx	lr
    else if(result == I2C_BUS_STUCK_SCL_PULLED_LOW) return "SCL stuck low";
 8005770:	4808      	ldr	r0, [pc, #32]	; (8005794 <i2cSafeResultToString+0x58>)
 8005772:	4770      	bx	lr
    else if(result == I2C_BUS_STUCK_SDA_PULLED_LOW) return "SDA stuck low";
 8005774:	4808      	ldr	r0, [pc, #32]	; (8005798 <i2cSafeResultToString+0x5c>)
 8005776:	4770      	bx	lr
    else if(result == I2C_BUS_STUCK_SCL_PULLED_HIGH) return "SCL stuck high";
 8005778:	4808      	ldr	r0, [pc, #32]	; (800579c <i2cSafeResultToString+0x60>)
 800577a:	4770      	bx	lr
    else if(result == I2C_BUS_STUCK_SDA_PULLED_HIGH) return "SDA stuck high";
 800577c:	4808      	ldr	r0, [pc, #32]	; (80057a0 <i2cSafeResultToString+0x64>)
}
 800577e:	4770      	bx	lr
 8005780:	0800b8b4 	.word	0x0800b8b4
 8005784:	0800b912 	.word	0x0800b912
 8005788:	0800b8cd 	.word	0x0800b8cd
 800578c:	0800b8d0 	.word	0x0800b8d0
 8005790:	0800b8d8 	.word	0x0800b8d8
 8005794:	0800b8e7 	.word	0x0800b8e7
 8005798:	0800b904 	.word	0x0800b904
 800579c:	0800b8f5 	.word	0x0800b8f5
 80057a0:	0800b8a5 	.word	0x0800b8a5

080057a4 <i2cSafeDataGoLow>:
{
 80057a4:	b510      	push	{r4, lr}
 80057a6:	4604      	mov	r4, r0
    gpioSetPin(config->sdaPin, level);
 80057a8:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 80057aa:	2100      	movs	r1, #0
 80057ac:	89d8      	ldrh	r0, [r3, #14]
 80057ae:	f7ff ff15 	bl	80055dc <gpioSetPin>
    vPortBusyDelay(i2cSafe_CYCLE_DELAY);
 80057b2:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80057b6:	f7fe fc8d 	bl	80040d4 <vPortBusyDelay>
    return gpioGetPin(config->sdaPin);
 80057ba:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 80057bc:	89d8      	ldrh	r0, [r3, #14]
 80057be:	f7ff fefb 	bl	80055b8 <gpioGetPin>
    if(i2cSafeRawGetData(i2c)) {
 80057c2:	2800      	cmp	r0, #0
}
 80057c4:	bf14      	ite	ne
 80057c6:	2004      	movne	r0, #4
 80057c8:	2000      	moveq	r0, #0
 80057ca:	bd10      	pop	{r4, pc}

080057cc <i2cSafeDataGoHigh>:
{
 80057cc:	b510      	push	{r4, lr}
 80057ce:	4604      	mov	r4, r0
    gpioSetPin(config->sdaPin, level);
 80057d0:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 80057d2:	2101      	movs	r1, #1
 80057d4:	89d8      	ldrh	r0, [r3, #14]
 80057d6:	f7ff ff01 	bl	80055dc <gpioSetPin>
    vPortBusyDelay(i2cSafe_CYCLE_DELAY);
 80057da:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80057de:	f7fe fc79 	bl	80040d4 <vPortBusyDelay>
    return gpioGetPin(config->sdaPin);
 80057e2:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 80057e4:	89d8      	ldrh	r0, [r3, #14]
 80057e6:	f7ff fee7 	bl	80055b8 <gpioGetPin>
    if(!i2cSafeRawGetData(i2c)) {
 80057ea:	2800      	cmp	r0, #0
}
 80057ec:	bf0c      	ite	eq
 80057ee:	2002      	moveq	r0, #2
 80057f0:	2000      	movne	r0, #0
 80057f2:	bd10      	pop	{r4, pc}

080057f4 <i2cSafeClockGoLow>:
{
 80057f4:	b510      	push	{r4, lr}
 80057f6:	4604      	mov	r4, r0
    gpioSetPin(config->sclPin, level);
 80057f8:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 80057fa:	2100      	movs	r1, #0
 80057fc:	8998      	ldrh	r0, [r3, #12]
 80057fe:	f7ff feed 	bl	80055dc <gpioSetPin>
    vPortBusyDelay(i2cSafe_CYCLE_DELAY);
 8005802:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8005806:	f7fe fc65 	bl	80040d4 <vPortBusyDelay>
    return gpioGetPin(config->sclPin);
 800580a:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800580c:	8998      	ldrh	r0, [r3, #12]
 800580e:	f7ff fed3 	bl	80055b8 <gpioGetPin>
    if(i2cSafeRawGetClock(i2c)) {
 8005812:	2800      	cmp	r0, #0
}
 8005814:	bf14      	ite	ne
 8005816:	2003      	movne	r0, #3
 8005818:	2000      	moveq	r0, #0
 800581a:	bd10      	pop	{r4, pc}

0800581c <i2cSafeClockGoHigh>:
{
 800581c:	b538      	push	{r3, r4, r5, lr}
    gpioSetPin(config->sclPin, level);
 800581e:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 8005820:	2101      	movs	r1, #1
{
 8005822:	4605      	mov	r5, r0
    gpioSetPin(config->sclPin, level);
 8005824:	8998      	ldrh	r0, [r3, #12]
 8005826:	f7ff fed9 	bl	80055dc <gpioSetPin>
    vPortBusyDelay(i2cSafe_CYCLE_DELAY);
 800582a:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800582e:	f7fe fc51 	bl	80040d4 <vPortBusyDelay>
 8005832:	2406      	movs	r4, #6
    return gpioGetPin(config->sclPin);
 8005834:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 8005836:	8998      	ldrh	r0, [r3, #12]
 8005838:	f7ff febe 	bl	80055b8 <gpioGetPin>
    for(j=5; !i2cSafeRawGetClock(i2c); j--) {
 800583c:	b108      	cbz	r0, 8005842 <i2cSafeClockGoHigh+0x26>
    return I2C_BUS_OK;
 800583e:	2000      	movs	r0, #0
}
 8005840:	bd38      	pop	{r3, r4, r5, pc}
        osalThreadSleepMilliseconds(1);
 8005842:	2001      	movs	r0, #1
 8005844:	3c01      	subs	r4, #1
 8005846:	f7ff f98f 	bl	8004b68 <vTaskDelay>
        if(j == 0) {
 800584a:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 800584e:	d1f1      	bne.n	8005834 <i2cSafeClockGoHigh+0x18>
            return I2C_BUS_STUCK_SCL_PULLED_LOW;
 8005850:	2001      	movs	r0, #1
 8005852:	e7f5      	b.n	8005840 <i2cSafeClockGoHigh+0x24>

08005854 <osalSysUnlock.lto_priv.0>:
static inline void osalSysUnlock(void){
 8005854:	b508      	push	{r3, lr}
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static BaseType_t xPortIsCriticalSection( void ){
uint32_t ulBasePri;
	__asm volatile( "mrs %0, basepri" : "=r"( ulBasePri ) );
 8005856:	f3ef 8311 	mrs	r3, BASEPRI
	
	return (ulBasePri > 0)? pdTRUE : pdFALSE;
 800585a:	b12b      	cbz	r3, 8005868 <osalSysUnlock.lto_priv.0+0x14>
	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 800585c:	f3ef 8205 	mrs	r2, IPSR
	if( ulCurrentInterrupt == 0 )
 8005860:	b12a      	cbz	r2, 800586e <osalSysUnlock.lto_priv.0+0x1a>
    osalDbgCheckClassS();
 8005862:	f7fe fd6d 	bl	8004340 <vTaskEndScheduler>
 8005866:	e7fe      	b.n	8005866 <osalSysUnlock.lto_priv.0+0x12>
 8005868:	f7fe fd6a 	bl	8004340 <vTaskEndScheduler>
 800586c:	e7fe      	b.n	800586c <osalSysUnlock.lto_priv.0+0x18>
 800586e:	4b0e      	ldr	r3, [pc, #56]	; (80058a8 <osalSysUnlock.lto_priv.0+0x54>)
 8005870:	6819      	ldr	r1, [r3, #0]
 8005872:	601a      	str	r2, [r3, #0]
    if(uxYieldPending()) taskYIELD();
 8005874:	b1a1      	cbz	r1, 80058a0 <osalSysUnlock.lto_priv.0+0x4c>
 8005876:	4b0d      	ldr	r3, [pc, #52]	; (80058ac <osalSysUnlock.lto_priv.0+0x58>)
 8005878:	4a0d      	ldr	r2, [pc, #52]	; (80058b0 <osalSysUnlock.lto_priv.0+0x5c>)
 800587a:	6819      	ldr	r1, [r3, #0]
 800587c:	6011      	str	r1, [r2, #0]
 800587e:	4a0d      	ldr	r2, [pc, #52]	; (80058b4 <osalSysUnlock.lto_priv.0+0x60>)
 8005880:	6812      	ldr	r2, [r2, #0]
 8005882:	b12a      	cbz	r2, 8005890 <osalSysUnlock.lto_priv.0+0x3c>
 8005884:	681a      	ldr	r2, [r3, #0]
 8005886:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
 800588a:	601a      	str	r2, [r3, #0]
 800588c:	681a      	ldr	r2, [r3, #0]
 800588e:	601a      	str	r2, [r3, #0]
 8005890:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005894:	4b08      	ldr	r3, [pc, #32]	; (80058b8 <osalSysUnlock.lto_priv.0+0x64>)
 8005896:	601a      	str	r2, [r3, #0]
 8005898:	f3bf 8f4f 	dsb	sy
 800589c:	f3bf 8f6f 	isb	sy
}
 80058a0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    taskEXIT_CRITICAL();
 80058a4:	f7fe bc92 	b.w	80041cc <vPortExitCritical>
 80058a8:	2000164c 	.word	0x2000164c
 80058ac:	e000ed20 	.word	0xe000ed20
 80058b0:	2000134c 	.word	0x2000134c
 80058b4:	20001358 	.word	0x20001358
 80058b8:	e000ed04 	.word	0xe000ed04

080058bc <i2cSafeRawHardwareControl>:
{
 80058bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    i2cSafeConfig* config = (i2cSafeConfig*)i2c->i2cSafeConfig;
 80058c0:	6fc5      	ldr	r5, [r0, #124]	; 0x7c
{
 80058c2:	4604      	mov	r4, r0
 *
 * @api
 */
void i2cStart(I2CDriver *i2cp, const I2CConfig *config) {

  osalDbgCheck((i2cp != NULL) && (config != NULL));
 80058c4:	b915      	cbnz	r5, 80058cc <i2cSafeRawHardwareControl+0x10>
 80058c6:	f7fe fd3b 	bl	8004340 <vTaskEndScheduler>
 80058ca:	e7fe      	b.n	80058ca <i2cSafeRawHardwareControl+0xe>
  osalDbgAssert((i2cp->state == I2C_STOP) || (i2cp->state == I2C_READY) ||
 80058cc:	7803      	ldrb	r3, [r0, #0]
 80058ce:	1e5a      	subs	r2, r3, #1
 80058d0:	2a01      	cmp	r2, #1
 80058d2:	d904      	bls.n	80058de <i2cSafeRawHardwareControl+0x22>
 80058d4:	2b05      	cmp	r3, #5
 80058d6:	d002      	beq.n	80058de <i2cSafeRawHardwareControl+0x22>
 80058d8:	f7fe fd32 	bl	8004340 <vTaskEndScheduler>
 80058dc:	e7fe      	b.n	80058dc <i2cSafeRawHardwareControl+0x20>
                (i2cp->state == I2C_LOCKED), "invalid state");

  osalSysLock();
 80058de:	f7fe fc81 	bl	80041e4 <vPortEnterCritical>
 */
void i2c_lld_start(I2CDriver *i2cp) {
  I2C_TypeDef *dp = i2cp->i2c;

  /* If in stopped state then enables the I2C and DMA clocks.*/
  if (i2cp->state == I2C_STOP) {
 80058e2:	f894 8000 	ldrb.w	r8, [r4]
  I2C_TypeDef *dp = i2cp->i2c;
 80058e6:	6fa6      	ldr	r6, [r4, #120]	; 0x78
  if (i2cp->state == I2C_STOP) {
 80058e8:	f1b8 0f01 	cmp.w	r8, #1
  i2cp->config = config;
 80058ec:	6065      	str	r5, [r4, #4]
 80058ee:	d13a      	bne.n	8005966 <i2cSafeRawHardwareControl+0xaa>

    i2cp->txdmamode = STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE |
                      STM32_DMA_CR_MINC       | STM32_DMA_CR_DMEIE |
                      STM32_DMA_CR_TEIE       | STM32_DMA_CR_TCIE |
                      STM32_DMA_CR_DIR_M2P;
    i2cp->rxdmamode = STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE |
 80058f0:	238a      	movs	r3, #138	; 0x8a
 80058f2:	229a      	movs	r2, #154	; 0x9a
 80058f4:	e9c4 321a 	strd	r3, r2, [r4, #104]	; 0x68
                      STM32_DMA_CR_MINC       | STM32_DMA_CR_DMEIE |
                      STM32_DMA_CR_TEIE       | STM32_DMA_CR_TCIE |
                      STM32_DMA_CR_DIR_P2M;

#if STM32_I2C_USE_I2C1
    if (&I2CD1 == i2cp) {
 80058f8:	4b6c      	ldr	r3, [pc, #432]	; (8005aac <i2cSafeRawHardwareControl+0x1f0>)
 80058fa:	429c      	cmp	r4, r3
 80058fc:	d133      	bne.n	8005966 <i2cSafeRawHardwareControl+0xaa>
      bool b;

      rccResetI2C1();
 80058fe:	4f6c      	ldr	r7, [pc, #432]	; (8005ab0 <i2cSafeRawHardwareControl+0x1f4>)
      b = dmaStreamAllocate(i2cp->dmarx,
 8005900:	4622      	mov	r2, r4
      rccResetI2C1();
 8005902:	693b      	ldr	r3, [r7, #16]
      b = dmaStreamAllocate(i2cp->dmarx,
 8005904:	496b      	ldr	r1, [pc, #428]	; (8005ab4 <i2cSafeRawHardwareControl+0x1f8>)
      rccResetI2C1();
 8005906:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800590a:	613b      	str	r3, [r7, #16]
 800590c:	2300      	movs	r3, #0
      b = dmaStreamAllocate(i2cp->dmarx,
 800590e:	6f20      	ldr	r0, [r4, #112]	; 0x70
      rccResetI2C1();
 8005910:	613b      	str	r3, [r7, #16]
      b = dmaStreamAllocate(i2cp->dmarx,
 8005912:	f7fe fd21 	bl	8004358 <dmaStreamAllocate.constprop.0>
                            STM32_I2C_I2C1_IRQ_PRIORITY,
                            (stm32_dmaisr_t)i2c_lld_serve_rx_end_irq,
                            (void *)i2cp);
      osalDbgAssert(!b, "stream already allocated");
 8005916:	b110      	cbz	r0, 800591e <i2cSafeRawHardwareControl+0x62>
 8005918:	f7fe fd12 	bl	8004340 <vTaskEndScheduler>
 800591c:	e7fe      	b.n	800591c <i2cSafeRawHardwareControl+0x60>
      b = dmaStreamAllocate(i2cp->dmatx,
 800591e:	4622      	mov	r2, r4
 8005920:	4965      	ldr	r1, [pc, #404]	; (8005ab8 <i2cSafeRawHardwareControl+0x1fc>)
 8005922:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8005924:	f7fe fd18 	bl	8004358 <dmaStreamAllocate.constprop.0>
                            STM32_I2C_I2C1_IRQ_PRIORITY,
                            (stm32_dmaisr_t)i2c_lld_serve_tx_end_irq,
                            (void *)i2cp);
      osalDbgAssert(!b, "stream already allocated");
 8005928:	b110      	cbz	r0, 8005930 <i2cSafeRawHardwareControl+0x74>
 800592a:	f7fe fd09 	bl	8004340 <vTaskEndScheduler>
 800592e:	e7fe      	b.n	800592e <i2cSafeRawHardwareControl+0x72>
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8005930:	22c0      	movs	r2, #192	; 0xc0
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8005932:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
      rccEnableI2C1(FALSE);
 8005936:	69fb      	ldr	r3, [r7, #28]
 8005938:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800593c:	61fb      	str	r3, [r7, #28]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 800593e:	4b5f      	ldr	r3, [pc, #380]	; (8005abc <i2cSafeRawHardwareControl+0x200>)
 8005940:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8005944:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8005948:	6019      	str	r1, [r3, #0]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 800594a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800594e:	f8c3 8184 	str.w	r8, [r3, #388]	; 0x184
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8005952:	f8c3 8004 	str.w	r8, [r3, #4]
      nvicEnableVector(I2C1_EV_IRQn, STM32_I2C_I2C1_IRQ_PRIORITY);
      nvicEnableVector(I2C1_ER_IRQn, STM32_I2C_I2C1_IRQ_PRIORITY);

      i2cp->rxdmamode |= STM32_DMA_CR_CHSEL(I2C1_RX_DMA_CHANNEL) |
 8005956:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8005958:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 800595c:	66a3      	str	r3, [r4, #104]	; 0x68
                       STM32_DMA_CR_PL(STM32_I2C_I2C1_DMA_PRIORITY);
      i2cp->txdmamode |= STM32_DMA_CR_CHSEL(I2C1_TX_DMA_CHANNEL) |
 800595e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8005960:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8005964:	66e3      	str	r3, [r4, #108]	; 0x6c
    }
#endif /* STM32_I2C_USE_I2C3 */
  }

  /* I2C registers pointed by the DMA.*/
  dmaStreamSetPeripheral(i2cp->dmarx, &dp->DR);
 8005966:	6f23      	ldr	r3, [r4, #112]	; 0x70
  int32_t clock_speed = i2cp->config->clock_speed;
 8005968:	6867      	ldr	r7, [r4, #4]
  dmaStreamSetPeripheral(i2cp->dmarx, &dp->DR);
 800596a:	685a      	ldr	r2, [r3, #4]
 800596c:	f106 0310 	add.w	r3, r6, #16
 8005970:	6093      	str	r3, [r2, #8]
  dmaStreamSetPeripheral(i2cp->dmatx, &dp->DR);
 8005972:	6f62      	ldr	r2, [r4, #116]	; 0x74
  int32_t clock_speed = i2cp->config->clock_speed;
 8005974:	6879      	ldr	r1, [r7, #4]
  dmaStreamSetPeripheral(i2cp->dmatx, &dp->DR);
 8005976:	6852      	ldr	r2, [r2, #4]
  osalDbgCheck((i2cp != NULL) &&
 8005978:	1e48      	subs	r0, r1, #1
  dmaStreamSetPeripheral(i2cp->dmatx, &dp->DR);
 800597a:	6093      	str	r3, [r2, #8]

  /* Reset i2c peripheral.*/
  dp->CR1 = I2C_CR1_SWRST;
 800597c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  dp->CR1 = 0;
  dp->CR2 = I2C_CR2_ITERREN | I2C_CR2_DMAEN;
 8005980:	f44f 6210 	mov.w	r2, #2304	; 0x900
  dp->CR1 = I2C_CR1_SWRST;
 8005984:	6033      	str	r3, [r6, #0]
  dp->CR1 = 0;
 8005986:	2300      	movs	r3, #0
 8005988:	6033      	str	r3, [r6, #0]
  dp->CR2 = I2C_CR2_ITERREN | I2C_CR2_DMAEN;
 800598a:	6072      	str	r2, [r6, #4]
  osalDbgCheck((i2cp != NULL) &&
 800598c:	4a4c      	ldr	r2, [pc, #304]	; (8005ac0 <i2cSafeRawHardwareControl+0x204>)
 800598e:	4290      	cmp	r0, r2
 8005990:	d902      	bls.n	8005998 <i2cSafeRawHardwareControl+0xdc>
 8005992:	f7fe fcd5 	bl	8004340 <vTaskEndScheduler>
 8005996:	e7fe      	b.n	8005996 <i2cSafeRawHardwareControl+0xda>
  I2C_TypeDef *dp = i2cp->i2c;
 8005998:	6fa0      	ldr	r0, [r4, #120]	; 0x78
  i2cdutycycle_t duty = i2cp->config->duty_cycle;
 800599a:	7a3a      	ldrb	r2, [r7, #8]
  dp->CR2 &= (uint16_t)~I2C_CR2_FREQ;
 800599c:	f8d0 c004 	ldr.w	ip, [r0, #4]
 80059a0:	f02c 0c3f 	bic.w	ip, ip, #63	; 0x3f
 80059a4:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
 80059a8:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80059ac:	f8c0 c004 	str.w	ip, [r0, #4]
  dp->CR2 |= (uint16_t)I2C_CLK_FREQ;
 80059b0:	f8d0 c004 	ldr.w	ip, [r0, #4]
 80059b4:	f04c 0c24 	orr.w	ip, ip, #36	; 0x24
 80059b8:	f8c0 c004 	str.w	ip, [r0, #4]
  if (clock_speed <= 100000) {
 80059bc:	f8df c108 	ldr.w	ip, [pc, #264]	; 8005ac8 <i2cSafeRawHardwareControl+0x20c>
 80059c0:	4561      	cmp	r1, ip
 80059c2:	d839      	bhi.n	8005a38 <i2cSafeRawHardwareControl+0x17c>
    osalDbgAssert(duty == STD_DUTY_CYCLE, "invalid standard mode duty cycle");
 80059c4:	2a01      	cmp	r2, #1
 80059c6:	d002      	beq.n	80059ce <i2cSafeRawHardwareControl+0x112>
 80059c8:	f7fe fcba 	bl	8004340 <vTaskEndScheduler>
 80059cc:	e7fe      	b.n	80059cc <i2cSafeRawHardwareControl+0x110>
    osalDbgAssert((STM32_PCLK1 % (clock_speed * 2)) == 0,
 80059ce:	4a3d      	ldr	r2, [pc, #244]	; (8005ac4 <i2cSafeRawHardwareControl+0x208>)
 80059d0:	0049      	lsls	r1, r1, #1
 80059d2:	fbb2 f3f1 	udiv	r3, r2, r1
 80059d6:	fb01 2113 	mls	r1, r1, r3, r2
 80059da:	b111      	cbz	r1, 80059e2 <i2cSafeRawHardwareControl+0x126>
 80059dc:	f7fe fcb0 	bl	8004340 <vTaskEndScheduler>
 80059e0:	e7fe      	b.n	80059e0 <i2cSafeRawHardwareControl+0x124>
    clock_div = (uint16_t)(STM32_PCLK1 / (clock_speed * 2));
 80059e2:	b29b      	uxth	r3, r3
    osalDbgAssert(clock_div >= 0x04,
 80059e4:	2b03      	cmp	r3, #3
 80059e6:	d802      	bhi.n	80059ee <i2cSafeRawHardwareControl+0x132>
 80059e8:	f7fe fcaa 	bl	8004340 <vTaskEndScheduler>
 80059ec:	e7fe      	b.n	80059ec <i2cSafeRawHardwareControl+0x130>
    dp->TRISE = I2C_CLK_FREQ + 1;
 80059ee:	2225      	movs	r2, #37	; 0x25
  osalDbgAssert((clock_div <= I2C_CCR_CCR), "the selected clock is too low");
 80059f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    dp->TRISE = I2C_CLK_FREQ + 1;
 80059f4:	6202      	str	r2, [r0, #32]
  osalDbgAssert((clock_div <= I2C_CCR_CCR), "the selected clock is too low");
 80059f6:	d24d      	bcs.n	8005a94 <i2cSafeRawHardwareControl+0x1d8>
  dp->CCR = regCCR;
 80059f8:	61c3      	str	r3, [r0, #28]
  i2copmode_t opmode = i2cp->config->op_mode;
 80059fa:	783a      	ldrb	r2, [r7, #0]
  regCR1 = dp->CR1;
 80059fc:	6803      	ldr	r3, [r0, #0]
  switch (opmode) {
 80059fe:	2a02      	cmp	r2, #2
  regCR1 = dp->CR1;
 8005a00:	b29b      	uxth	r3, r3
  switch (opmode) {
 8005a02:	d04a      	beq.n	8005a9a <i2cSafeRawHardwareControl+0x1de>
 8005a04:	2a03      	cmp	r2, #3
 8005a06:	d04e      	beq.n	8005aa6 <i2cSafeRawHardwareControl+0x1ea>
 8005a08:	2a01      	cmp	r2, #1
 8005a0a:	d102      	bne.n	8005a12 <i2cSafeRawHardwareControl+0x156>
    regCR1 &= (uint16_t)~(I2C_CR1_SMBUS|I2C_CR1_SMBTYPE);
 8005a0c:	f023 030a 	bic.w	r3, r3, #10
 8005a10:	b29b      	uxth	r3, r3
  dp->CR1 = regCR1;
 8005a12:	6003      	str	r3, [r0, #0]
  /* Setup I2C parameters.*/
  i2c_lld_set_clock(i2cp);
  i2c_lld_set_opmode(i2cp);

  /* Ready to go.*/
  dp->CR1 |= I2C_CR1_PE;
 8005a14:	6833      	ldr	r3, [r6, #0]
 8005a16:	f043 0301 	orr.w	r3, r3, #1
 8005a1a:	6033      	str	r3, [r6, #0]
  i2c_lld_start(i2cp);
  i2cp->state = I2C_READY;
 8005a1c:	2302      	movs	r3, #2
 8005a1e:	7023      	strb	r3, [r4, #0]
  osalSysUnlock();
 8005a20:	f7ff ff18 	bl	8005854 <osalSysUnlock.lto_priv.0>
    gpioSetPinMode(config->sclPin, config->peripheralMode);
 8005a24:	7c29      	ldrb	r1, [r5, #16]
 8005a26:	89a8      	ldrh	r0, [r5, #12]
 8005a28:	f7ff fdba 	bl	80055a0 <gpioSetPinMode>
    gpioSetPinMode(config->sdaPin, config->peripheralMode);
 8005a2c:	7c29      	ldrb	r1, [r5, #16]
 8005a2e:	89e8      	ldrh	r0, [r5, #14]
}
 8005a30:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    gpioSetPinMode(config->sdaPin, config->peripheralMode);
 8005a34:	f7ff bdb4 	b.w	80055a0 <gpioSetPinMode>
  else if (clock_speed <= 400000) {
 8005a38:	f8df c090 	ldr.w	ip, [pc, #144]	; 8005acc <i2cSafeRawHardwareControl+0x210>
 8005a3c:	4561      	cmp	r1, ip
 8005a3e:	dcdb      	bgt.n	80059f8 <i2cSafeRawHardwareControl+0x13c>
    osalDbgAssert((duty == FAST_DUTY_CYCLE_2) ||
 8005a40:	1e93      	subs	r3, r2, #2
 8005a42:	2b01      	cmp	r3, #1
 8005a44:	d902      	bls.n	8005a4c <i2cSafeRawHardwareControl+0x190>
 8005a46:	f7fe fc7b 	bl	8004340 <vTaskEndScheduler>
 8005a4a:	e7fe      	b.n	8005a4a <i2cSafeRawHardwareControl+0x18e>
    if (duty == FAST_DUTY_CYCLE_2) {
 8005a4c:	2a02      	cmp	r2, #2
 8005a4e:	4b1d      	ldr	r3, [pc, #116]	; (8005ac4 <i2cSafeRawHardwareControl+0x208>)
 8005a50:	d110      	bne.n	8005a74 <i2cSafeRawHardwareControl+0x1b8>
      osalDbgAssert((STM32_PCLK1 % (clock_speed * 3)) == 0,
 8005a52:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8005a56:	fbb3 f2f1 	udiv	r2, r3, r1
 8005a5a:	fb01 3312 	mls	r3, r1, r2, r3
 8005a5e:	b113      	cbz	r3, 8005a66 <i2cSafeRawHardwareControl+0x1aa>
 8005a60:	f7fe fc6e 	bl	8004340 <vTaskEndScheduler>
 8005a64:	e7fe      	b.n	8005a64 <i2cSafeRawHardwareControl+0x1a8>
      clock_div = (uint16_t)(STM32_PCLK1 / (clock_speed * 3));
 8005a66:	b292      	uxth	r2, r2
    regCCR |= (I2C_CCR_FS | (clock_div & I2C_CCR_CCR));
 8005a68:	4313      	orrs	r3, r2
    dp->TRISE = (I2C_CLK_FREQ * 300 / 1000) + 1;
 8005a6a:	220b      	movs	r2, #11
    regCCR |= (I2C_CCR_FS | (clock_div & I2C_CCR_CCR));
 8005a6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    dp->TRISE = (I2C_CLK_FREQ * 300 / 1000) + 1;
 8005a70:	6202      	str	r2, [r0, #32]
  osalDbgAssert((clock_div <= I2C_CCR_CCR), "the selected clock is too low");
 8005a72:	e7c1      	b.n	80059f8 <i2cSafeRawHardwareControl+0x13c>
      osalDbgAssert((STM32_PCLK1 % (clock_speed * 25)) == 0,
 8005a74:	f04f 0c19 	mov.w	ip, #25
 8005a78:	fb0c f101 	mul.w	r1, ip, r1
 8005a7c:	fbb3 f2f1 	udiv	r2, r3, r1
 8005a80:	fb01 3112 	mls	r1, r1, r2, r3
 8005a84:	b111      	cbz	r1, 8005a8c <i2cSafeRawHardwareControl+0x1d0>
 8005a86:	f7fe fc5b 	bl	8004340 <vTaskEndScheduler>
 8005a8a:	e7fe      	b.n	8005a8a <i2cSafeRawHardwareControl+0x1ce>
      regCCR |= I2C_CCR_DUTY;
 8005a8c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
      clock_div = (uint16_t)(STM32_PCLK1 / (clock_speed * 25));
 8005a90:	b292      	uxth	r2, r2
      regCCR |= I2C_CCR_DUTY;
 8005a92:	e7e9      	b.n	8005a68 <i2cSafeRawHardwareControl+0x1ac>
  osalDbgAssert((clock_div <= I2C_CCR_CCR), "the selected clock is too low");
 8005a94:	f7fe fc54 	bl	8004340 <vTaskEndScheduler>
 8005a98:	e7fe      	b.n	8005a98 <i2cSafeRawHardwareControl+0x1dc>
    regCR1 &= (uint16_t)~(I2C_CR1_SMBTYPE);
 8005a9a:	f023 0308 	bic.w	r3, r3, #8
 8005a9e:	b29b      	uxth	r3, r3
 8005aa0:	f043 0302 	orr.w	r3, r3, #2
    break;
 8005aa4:	e7b5      	b.n	8005a12 <i2cSafeRawHardwareControl+0x156>
    regCR1 |= (I2C_CR1_SMBUS|I2C_CR1_SMBTYPE);
 8005aa6:	f043 030a 	orr.w	r3, r3, #10
    break;
 8005aaa:	e7b2      	b.n	8005a12 <i2cSafeRawHardwareControl+0x156>
 8005aac:	20000934 	.word	0x20000934
 8005ab0:	40021000 	.word	0x40021000
 8005ab4:	080065ff 	.word	0x080065ff
 8005ab8:	080065b3 	.word	0x080065b3
 8005abc:	e000e100 	.word	0xe000e100
 8005ac0:	003d08ff 	.word	0x003d08ff
 8005ac4:	02255100 	.word	0x02255100
 8005ac8:	000186a0 	.word	0x000186a0
 8005acc:	00061a80 	.word	0x00061a80

08005ad0 <sofNeededCallback>:
static void sofNeededCallback(USBDriver *usbp, bool enable)
{
    (void) usbp;
    static bool sofEnabled = true;

    if(!allowDisableSOF && !enable) return;
 8005ad0:	4b0c      	ldr	r3, [pc, #48]	; (8005b04 <sofNeededCallback+0x34>)
{
 8005ad2:	b510      	push	{r4, lr}
    if(!allowDisableSOF && !enable) return;
 8005ad4:	781b      	ldrb	r3, [r3, #0]
 8005ad6:	b903      	cbnz	r3, 8005ada <sofNeededCallback+0xa>
 8005ad8:	b199      	cbz	r1, 8005b02 <sofNeededCallback+0x32>
    if(sofEnabled == enable) return;
 8005ada:	4c0b      	ldr	r4, [pc, #44]	; (8005b08 <sofNeededCallback+0x38>)
 8005adc:	7822      	ldrb	r2, [r4, #0]
 8005ade:	428a      	cmp	r2, r1
 8005ae0:	d00f      	beq.n	8005b02 <sofNeededCallback+0x32>

    syssts_t basepri = osalSysGetStatusAndLockX();
 8005ae2:	f7fe fb61 	bl	80041a8 <ulPortEnterCriticalFromISR>

    if(enable) {
 8005ae6:	4b09      	ldr	r3, [pc, #36]	; (8005b0c <sofNeededCallback+0x3c>)
        STM32_USB->CNTR |= CNTR_SOFM;
 8005ae8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    if(enable) {
 8005aea:	b139      	cbz	r1, 8005afc <sofNeededCallback+0x2c>
        STM32_USB->CNTR |= CNTR_SOFM;
 8005aec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    } else {
        STM32_USB->CNTR &=~ CNTR_SOFM;
 8005af0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    sofEnabled = enable;
 8005af2:	7021      	strb	r1, [r4, #0]

    osalSysRestoreStatusX(basepri);
}
 8005af4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    osalSysRestoreStatusX(basepri);
 8005af8:	f7fe bb4a 	b.w	8004190 <vPortExitCriticalFromISR>
        STM32_USB->CNTR &=~ CNTR_SOFM;
 8005afc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005b00:	e7f6      	b.n	8005af0 <sofNeededCallback+0x20>
}
 8005b02:	bd10      	pop	{r4, pc}
 8005b04:	20000800 	.word	0x20000800
 8005b08:	20000911 	.word	0x20000911
 8005b0c:	40005c00 	.word	0x40005c00

08005b10 <get_descriptor>:
    switch (dtype) {
 8005b10:	2902      	cmp	r1, #2
{
 8005b12:	4613      	mov	r3, r2
 8005b14:	b570      	push	{r4, r5, r6, lr}
    switch (dtype) {
 8005b16:	d053      	beq.n	8005bc0 <get_descriptor+0xb0>
 8005b18:	2903      	cmp	r1, #3
 8005b1a:	d004      	beq.n	8005b26 <get_descriptor+0x16>
            return &vcom_device_descriptor;
 8005b1c:	2901      	cmp	r1, #1
 8005b1e:	482a      	ldr	r0, [pc, #168]	; (8005bc8 <get_descriptor+0xb8>)
 8005b20:	bf18      	it	ne
 8005b22:	2000      	movne	r0, #0
}
 8005b24:	bd70      	pop	{r4, r5, r6, pc}
            if (dindex < 3)
 8005b26:	2a02      	cmp	r2, #2
 8005b28:	d803      	bhi.n	8005b32 <get_descriptor+0x22>
                return &vcom_strings[dindex];
 8005b2a:	4828      	ldr	r0, [pc, #160]	; (8005bcc <get_descriptor+0xbc>)
 8005b2c:	eb00 00c2 	add.w	r0, r0, r2, lsl #3
 8005b30:	e7f8      	b.n	8005b24 <get_descriptor+0x14>
            if (dindex == 3) {
 8005b32:	2a03      	cmp	r2, #3
 8005b34:	d146      	bne.n	8005bc4 <get_descriptor+0xb4>
    if(serialString[0]) {
 8005b36:	4926      	ldr	r1, [pc, #152]	; (8005bd0 <get_descriptor+0xc0>)
 8005b38:	780a      	ldrb	r2, [r1, #0]
 8005b3a:	b10a      	cbz	r2, 8005b40 <get_descriptor+0x30>
                return &vcom_strings[dindex];
 8005b3c:	4825      	ldr	r0, [pc, #148]	; (8005bd4 <get_descriptor+0xc4>)
 8005b3e:	e7f1      	b.n	8005b24 <get_descriptor+0x14>
    serialString[0] = USB_DESC_BYTE(sizeof(serialString));
 8005b40:	2084      	movs	r0, #132	; 0x84
    serialString[1] = USB_DESC_BYTE(USB_DESCRIPTOR_STRING);
 8005b42:	460c      	mov	r4, r1
    serialString[0] = USB_DESC_BYTE(sizeof(serialString));
 8005b44:	7008      	strb	r0, [r1, #0]
        serialString[3+i]=0;
 8005b46:	4616      	mov	r6, r2
 8005b48:	4608      	mov	r0, r1
    serialString[1] = USB_DESC_BYTE(USB_DESCRIPTOR_STRING);
 8005b4a:	704b      	strb	r3, [r1, #1]
        serialString[2+i]=hexNibble((idReg[i>>2] >> (4*((i>>1)%2))) & 0xF);
 8005b4c:	0893      	lsrs	r3, r2, #2
 8005b4e:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8005b52:	f6a3 0318 	subw	r3, r3, #2072	; 0x818
 8005b56:	781b      	ldrb	r3, [r3, #0]
 8005b58:	f3c2 0540 	ubfx	r5, r2, #1, #1
 8005b5c:	00ad      	lsls	r5, r5, #2
 8005b5e:	412b      	asrs	r3, r5
 8005b60:	f003 030f 	and.w	r3, r3, #15
}

char hexNibble(unsigned char a)
{
    a&=0xF;
    if(a<10) {
 8005b64:	2b09      	cmp	r3, #9
 8005b66:	f102 0202 	add.w	r2, r2, #2
        return '0'+a;
 8005b6a:	bf94      	ite	ls
 8005b6c:	3330      	addls	r3, #48	; 0x30
    } else {
        return 'a'+a-10;
 8005b6e:	3357      	addhi	r3, #87	; 0x57
    for(i=0; i<48; i+=2) {
 8005b70:	2a30      	cmp	r2, #48	; 0x30
        serialString[2+i]=hexNibble((idReg[i>>2] >> (4*((i>>1)%2))) & 0xF);
 8005b72:	70a3      	strb	r3, [r4, #2]
        serialString[3+i]=0;
 8005b74:	70e6      	strb	r6, [r4, #3]
    for(i=0; i<48; i+=2) {
 8005b76:	f104 0402 	add.w	r4, r4, #2
 8005b7a:	d1e7      	bne.n	8005b4c <get_descriptor+0x3c>
    serialString[50]='-';
 8005b7c:	232d      	movs	r3, #45	; 0x2d
    serialString[51]=0;
 8005b7e:	f881 6033 	strb.w	r6, [r1, #51]	; 0x33
    serialString[50]='-';
 8005b82:	f881 3032 	strb.w	r3, [r1, #50]	; 0x32
        serialString[53+i]=0;
 8005b86:	2400      	movs	r4, #0
    serialString[51]=0;
 8005b88:	2114      	movs	r1, #20
 8005b8a:	4d13      	ldr	r5, [pc, #76]	; (8005bd8 <get_descriptor+0xc8>)
        serialString[52+i]=hexNibble(*buildId >> 4);
 8005b8c:	f815 3f01 	ldrb.w	r3, [r5, #1]!
        serialString[53+i]=0;
 8005b90:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
        serialString[52+i]=hexNibble(*buildId >> 4);
 8005b94:	091a      	lsrs	r2, r3, #4
    if(a<10) {
 8005b96:	2b9f      	cmp	r3, #159	; 0x9f
        serialString[54+i]=hexNibble(*buildId & 0xF);
 8005b98:	f003 030f 	and.w	r3, r3, #15
        return '0'+a;
 8005b9c:	bf94      	ite	ls
 8005b9e:	3230      	addls	r2, #48	; 0x30
        return 'a'+a-10;
 8005ba0:	3257      	addhi	r2, #87	; 0x57
    if(a<10) {
 8005ba2:	2b09      	cmp	r3, #9
        return '0'+a;
 8005ba4:	bf94      	ite	ls
 8005ba6:	3330      	addls	r3, #48	; 0x30
        return 'a'+a-10;
 8005ba8:	3357      	addhi	r3, #87	; 0x57
    for(i=0; i<80; i+=4) {
 8005baa:	3901      	subs	r1, #1
        serialString[52+i]=hexNibble(*buildId >> 4);
 8005bac:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34
        serialString[54+i]=hexNibble(*buildId & 0xF);
 8005bb0:	f880 3036 	strb.w	r3, [r0, #54]	; 0x36
        serialString[55+i]=0;
 8005bb4:	f880 4037 	strb.w	r4, [r0, #55]	; 0x37
    for(i=0; i<80; i+=4) {
 8005bb8:	f100 0004 	add.w	r0, r0, #4
 8005bbc:	d1e6      	bne.n	8005b8c <get_descriptor+0x7c>
 8005bbe:	e7bd      	b.n	8005b3c <get_descriptor+0x2c>
    switch (dtype) {
 8005bc0:	4806      	ldr	r0, [pc, #24]	; (8005bdc <get_descriptor+0xcc>)
 8005bc2:	e7af      	b.n	8005b24 <get_descriptor+0x14>
    return NULL;
 8005bc4:	2000      	movs	r0, #0
 8005bc6:	e7ad      	b.n	8005b24 <get_descriptor+0x14>
 8005bc8:	0800ca84 	.word	0x0800ca84
 8005bcc:	0800cb34 	.word	0x0800cb34
 8005bd0:	20001231 	.word	0x20001231
 8005bd4:	0800cb4c 	.word	0x0800cb4c
 8005bd8:	0800cbbf 	.word	0x0800cbbf
 8005bdc:	0800ca38 	.word	0x0800ca38

08005be0 <osalSysUnlockFromISR.lto_priv.0>:
    taskEXIT_CRITICAL_FROM_ISR(uxSavedInterruptStatus);
 8005be0:	4b01      	ldr	r3, [pc, #4]	; (8005be8 <osalSysUnlockFromISR.lto_priv.0+0x8>)
 8005be2:	6818      	ldr	r0, [r3, #0]
 8005be4:	f7fe bad4 	b.w	8004190 <vPortExitCriticalFromISR>
 8005be8:	20001368 	.word	0x20001368

08005bec <osalSysLockFromISR.lto_priv.0>:
{
 8005bec:	b508      	push	{r3, lr}
    uxSavedInterruptStatus = taskENTER_CRITICAL_FROM_ISR();
 8005bee:	f7fe fadb 	bl	80041a8 <ulPortEnterCriticalFromISR>
 8005bf2:	4b01      	ldr	r3, [pc, #4]	; (8005bf8 <osalSysLockFromISR.lto_priv.0+0xc>)
 8005bf4:	6018      	str	r0, [r3, #0]
}
 8005bf6:	bd08      	pop	{r3, pc}
 8005bf8:	20001368 	.word	0x20001368

08005bfc <runInThreadBody>:
{
 8005bfc:	b508      	push	{r3, lr}
    func();
 8005bfe:	4780      	blx	r0
}
 8005c00:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    vTaskDelete(NULL);
 8005c04:	f7ff baa0 	b.w	8005148 <vTaskDelete.constprop.0>

08005c08 <notify3>:

#if STM32_SERIAL_USE_USART3 || defined(__DOXYGEN__)
static void notify3(io_queue_t *qp) {

  (void)qp;
  USART3->CR1 |= USART_CR1_TXEIE;
 8005c08:	4a02      	ldr	r2, [pc, #8]	; (8005c14 <notify3+0xc>)
 8005c0a:	68d3      	ldr	r3, [r2, #12]
 8005c0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c10:	60d3      	str	r3, [r2, #12]
}
 8005c12:	4770      	bx	lr
 8005c14:	40004800 	.word	0x40004800

08005c18 <systemEnableMCO>:
}


void systemEnableMCO(bool enable)
{
    if(enable) {
 8005c18:	4b04      	ldr	r3, [pc, #16]	; (8005c2c <systemEnableMCO+0x14>)
        RCC->CFGR |= STM32_MCOSEL_SYSCLK;
 8005c1a:	685a      	ldr	r2, [r3, #4]
    if(enable) {
 8005c1c:	b118      	cbz	r0, 8005c26 <systemEnableMCO+0xe>
        RCC->CFGR |= STM32_MCOSEL_SYSCLK;
 8005c1e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
    } else {
        RCC->CFGR &=~ STM32_MCOSEL_SYSCLK;
 8005c22:	605a      	str	r2, [r3, #4]
    }
}
 8005c24:	4770      	bx	lr
        RCC->CFGR &=~ STM32_MCOSEL_SYSCLK;
 8005c26:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8005c2a:	e7fa      	b.n	8005c22 <systemEnableMCO+0xa>
 8005c2c:	40021000 	.word	0x40021000

08005c30 <converterSetGpio>:
{
 8005c30:	b570      	push	{r4, r5, r6, lr}
    gpioValues |= bandSpecificGpioSettings[converter->activeBand];
 8005c32:	4b34      	ldr	r3, [pc, #208]	; (8005d04 <converterSetGpio+0xd4>)
 8005c34:	7e02      	ldrb	r2, [r0, #24]
    const GPIOPort* port = gpioGetPortDriver(gpioPort);
 8005c36:	2003      	movs	r0, #3
 8005c38:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 8005c3c:	430c      	orrs	r4, r1
 8005c3e:	f7ff fc97 	bl	8005570 <gpioGetPortDriver>
    return port->functions->setValue(port, ~0, value);
 8005c42:	6883      	ldr	r3, [r0, #8]
 8005c44:	b2e2      	uxtb	r2, r4
 8005c46:	689b      	ldr	r3, [r3, #8]
 8005c48:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005c4c:	4798      	blx	r3
    gpioSetPin(GPIO_MIX_SW_EN, (gpioValues & _BV(CONVERTER_IO_PIN_MIX_SW_EN)) == 0);
 8005c4e:	f484 7180 	eor.w	r1, r4, #256	; 0x100
 8005c52:	f3c1 2100 	ubfx	r1, r1, #8, #1
 8005c56:	f44f 7084 	mov.w	r0, #264	; 0x108
 8005c5a:	f7ff fcbf 	bl	80055dc <gpioSetPin>
    systemEnableMCO((gpioValues & _BV(CONVERTER_IO_PIN_MIX_SW_LO)) > 0);
 8005c5e:	f3c4 2040 	ubfx	r0, r4, #9, #1
 8005c62:	f7ff ffd9 	bl	8005c18 <systemEnableMCO>
    mixBlinkDelay += (gpioValues & _BV(CONVERTER_IO_PIN_LED1))? 100:0;
 8005c66:	f414 6180 	ands.w	r1, r4, #1024	; 0x400
 8005c6a:	bf18      	it	ne
 8005c6c:	2164      	movne	r1, #100	; 0x64
    mixBlinkDelay += (gpioValues & _BV(CONVERTER_IO_PIN_LED2))? 200:0;
 8005c6e:	f414 6400 	ands.w	r4, r4, #2048	; 0x800
 8005c72:	bf18      	it	ne
 8005c74:	24c8      	movne	r4, #200	; 0xc8
    mixLedDelay = mixBlinkDelay;
 8005c76:	4b24      	ldr	r3, [pc, #144]	; (8005d08 <converterSetGpio+0xd8>)
    mixBlinkDelay += (gpioValues & _BV(CONVERTER_IO_PIN_LED2))? 200:0;
 8005c78:	440c      	add	r4, r1
    mixLedDelay = mixBlinkDelay;
 8005c7a:	601c      	str	r4, [r3, #0]
    vTaskResume(mixLedTaskHandle);
 8005c7c:	4b23      	ldr	r3, [pc, #140]	; (8005d0c <converterSetGpio+0xdc>)
 8005c7e:	681c      	ldr	r4, [r3, #0]
 8005c80:	b904      	cbnz	r4, 8005c84 <converterSetGpio+0x54>
 8005c82:	e7fe      	b.n	8005c82 <converterSetGpio+0x52>
 8005c84:	4d22      	ldr	r5, [pc, #136]	; (8005d10 <converterSetGpio+0xe0>)
 8005c86:	682b      	ldr	r3, [r5, #0]
 8005c88:	429c      	cmp	r4, r3
 8005c8a:	d03a      	beq.n	8005d02 <converterSetGpio+0xd2>
 8005c8c:	f7fe faaa 	bl	80041e4 <vPortEnterCritical>
 8005c90:	6962      	ldr	r2, [r4, #20]
 8005c92:	4b20      	ldr	r3, [pc, #128]	; (8005d14 <converterSetGpio+0xe4>)
 8005c94:	429a      	cmp	r2, r3
 8005c96:	d130      	bne.n	8005cfa <converterSetGpio+0xca>
 8005c98:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005c9a:	4a1f      	ldr	r2, [pc, #124]	; (8005d18 <converterSetGpio+0xe8>)
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d02c      	beq.n	8005cfa <converterSetGpio+0xca>
 8005ca0:	bb5b      	cbnz	r3, 8005cfa <converterSetGpio+0xca>
 8005ca2:	1d26      	adds	r6, r4, #4
 8005ca4:	4630      	mov	r0, r6
 8005ca6:	f7fe fba3 	bl	80043f0 <uxListRemove>
 8005caa:	2301      	movs	r3, #1
 8005cac:	491b      	ldr	r1, [pc, #108]	; (8005d1c <converterSetGpio+0xec>)
 8005cae:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005cb0:	6808      	ldr	r0, [r1, #0]
 8005cb2:	4093      	lsls	r3, r2
 8005cb4:	4303      	orrs	r3, r0
 8005cb6:	2014      	movs	r0, #20
 8005cb8:	600b      	str	r3, [r1, #0]
 8005cba:	4b19      	ldr	r3, [pc, #100]	; (8005d20 <converterSetGpio+0xf0>)
 8005cbc:	4631      	mov	r1, r6
 8005cbe:	fb00 3002 	mla	r0, r0, r2, r3
 8005cc2:	f7fe fbbc 	bl	800443e <vListInsertEnd>
 8005cc6:	682b      	ldr	r3, [r5, #0]
 8005cc8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ccc:	429a      	cmp	r2, r3
 8005cce:	d314      	bcc.n	8005cfa <converterSetGpio+0xca>
 8005cd0:	4b14      	ldr	r3, [pc, #80]	; (8005d24 <converterSetGpio+0xf4>)
 8005cd2:	4a15      	ldr	r2, [pc, #84]	; (8005d28 <converterSetGpio+0xf8>)
 8005cd4:	6819      	ldr	r1, [r3, #0]
 8005cd6:	6011      	str	r1, [r2, #0]
 8005cd8:	4a14      	ldr	r2, [pc, #80]	; (8005d2c <converterSetGpio+0xfc>)
 8005cda:	6812      	ldr	r2, [r2, #0]
 8005cdc:	b12a      	cbz	r2, 8005cea <converterSetGpio+0xba>
 8005cde:	681a      	ldr	r2, [r3, #0]
 8005ce0:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
 8005ce4:	601a      	str	r2, [r3, #0]
 8005ce6:	681a      	ldr	r2, [r3, #0]
 8005ce8:	601a      	str	r2, [r3, #0]
 8005cea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005cee:	4b10      	ldr	r3, [pc, #64]	; (8005d30 <converterSetGpio+0x100>)
 8005cf0:	601a      	str	r2, [r3, #0]
 8005cf2:	f3bf 8f4f 	dsb	sy
 8005cf6:	f3bf 8f6f 	isb	sy
}
 8005cfa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005cfe:	f7fe ba65 	b.w	80041cc <vPortExitCritical>
 8005d02:	bd70      	pop	{r4, r5, r6, pc}
 8005d04:	0800c754 	.word	0x0800c754
 8005d08:	20001198 	.word	0x20001198
 8005d0c:	2000119c 	.word	0x2000119c
 8005d10:	200011a8 	.word	0x200011a8
 8005d14:	20001620 	.word	0x20001620
 8005d18:	20001600 	.word	0x20001600
 8005d1c:	20001374 	.word	0x20001374
 8005d20:	200011b8 	.word	0x200011b8
 8005d24:	e000ed20 	.word	0xe000ed20
 8005d28:	2000134c 	.word	0x2000134c
 8005d2c:	20001358 	.word	0x20001358
 8005d30:	e000ed04 	.word	0xe000ed04

08005d34 <mac2870LockCallback>:
    if(locked) {
 8005d34:	b120      	cbz	r0, 8005d40 <mac2870LockCallback+0xc>
        gpioSetPin(GPIO_LED_LOCK, false);
 8005d36:	2100      	movs	r1, #0
        gpioSetPin(GPIO_LED_LOCK, true);
 8005d38:	f44f 7082 	mov.w	r0, #260	; 0x104
 8005d3c:	f7ff bc4e 	b.w	80055dc <gpioSetPin>
 8005d40:	2101      	movs	r1, #1
 8005d42:	e7f9      	b.n	8005d38 <mac2870LockCallback+0x4>

08005d44 <NVIC_SystemReset.lto_priv.0>:
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8005d44:	f3bf 8f4f 	dsb	sy
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8005d48:	4905      	ldr	r1, [pc, #20]	; (8005d60 <NVIC_SystemReset.lto_priv.0+0x1c>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8005d4a:	4b06      	ldr	r3, [pc, #24]	; (8005d64 <NVIC_SystemReset.lto_priv.0+0x20>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8005d4c:	68ca      	ldr	r2, [r1, #12]
 8005d4e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8005d52:	4313      	orrs	r3, r2
 8005d54:	60cb      	str	r3, [r1, #12]
 8005d56:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 8005d5a:	bf00      	nop
 8005d5c:	e7fd      	b.n	8005d5a <NVIC_SystemReset.lto_priv.0+0x16>
 8005d5e:	bf00      	nop
 8005d60:	e000ed00 	.word	0xe000ed00
 8005d64:	05fa0004 	.word	0x05fa0004

08005d68 <shellCommandRegister>:
    {"license", cmdLicense, NULL},
    {"sanity", cmdSanity, NULL},
};

void shellCommandRegister(char* name, shellcmd_t function, void* user)
{
 8005d68:	b5f0      	push	{r4, r5, r6, r7, lr}
    /* -1 since there should be a final line with NULL, NULL, NULL */
    if(shellCommandsIndex >= sizeof(shellCommands)/sizeof(ShellCommand)-1) {
 8005d6a:	4d07      	ldr	r5, [pc, #28]	; (8005d88 <shellCommandRegister+0x20>)
 8005d6c:	782b      	ldrb	r3, [r5, #0]
 8005d6e:	2b0d      	cmp	r3, #13
 8005d70:	d808      	bhi.n	8005d84 <shellCommandRegister+0x1c>
        return;
    }
    shellCommands[shellCommandsIndex].sc_name = name;
 8005d72:	240c      	movs	r4, #12
 8005d74:	435c      	muls	r4, r3
 8005d76:	4f05      	ldr	r7, [pc, #20]	; (8005d8c <shellCommandRegister+0x24>)
    shellCommands[shellCommandsIndex].sc_function = function;
    shellCommands[shellCommandsIndex].sc_user = user;
    shellCommandsIndex++;
 8005d78:	3301      	adds	r3, #1
    shellCommands[shellCommandsIndex].sc_name = name;
 8005d7a:	193e      	adds	r6, r7, r4
    shellCommands[shellCommandsIndex].sc_user = user;
 8005d7c:	e9c6 1201 	strd	r1, r2, [r6, #4]
    shellCommands[shellCommandsIndex].sc_name = name;
 8005d80:	5138      	str	r0, [r7, r4]
    shellCommandsIndex++;
 8005d82:	702b      	strb	r3, [r5, #0]
}
 8005d84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d86:	bf00      	nop
 8005d88:	20000910 	.word	0x20000910
 8005d8c:	2000085c 	.word	0x2000085c

08005d90 <strToInt>:

    return (result>=base)? -1 : result;
}

int32_t strToInt(char* string, uint8_t base)
{
 8005d90:	b570      	push	{r4, r5, r6, lr}
    uint32_t value = 0;
    bool invert = false;
    unsigned int i = 0;

    if(string[0] == '\0') {
 8005d92:	7803      	ldrb	r3, [r0, #0]
 8005d94:	b1e3      	cbz	r3, 8005dd0 <strToInt+0x40>
        return -1;
    }

    if(string[0] == '-') {
 8005d96:	2b2d      	cmp	r3, #45	; 0x2d
 8005d98:	d127      	bne.n	8005dea <strToInt+0x5a>
        invert = true;
        i++;
 8005d9a:	2401      	movs	r4, #1
    bool invert = false;
 8005d9c:	4625      	mov	r5, r4
 8005d9e:	4404      	add	r4, r0
        invert = true;
 8005da0:	2000      	movs	r0, #0
 8005da2:	e01b      	b.n	8005ddc <strToInt+0x4c>
    if(input >= '0' && input <= '9') {
 8005da4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8005da8:	b2db      	uxtb	r3, r3
 8005daa:	2b09      	cmp	r3, #9
    input &=~ 0x20;
 8005dac:	f002 02df 	and.w	r2, r2, #223	; 0xdf
    }

    for(; string[i]; i++) {
        value *= base;
 8005db0:	fb00 f601 	mul.w	r6, r0, r1
        result = input - '0';
 8005db4:	bf98      	it	ls
 8005db6:	b258      	sxtbls	r0, r3
    if(input >= 'A' && input <= 'Z') {
 8005db8:	f1a2 0341 	sub.w	r3, r2, #65	; 0x41
    int8_t result = -1;
 8005dbc:	bf88      	it	hi
 8005dbe:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
    if(input >= 'A' && input <= 'Z') {
 8005dc2:	2b19      	cmp	r3, #25
 8005dc4:	d807      	bhi.n	8005dd6 <strToInt+0x46>
        result = input - 'A' + 10;
 8005dc6:	3a37      	subs	r2, #55	; 0x37
 8005dc8:	b2d3      	uxtb	r3, r2
    if(result >= base) {
 8005dca:	4299      	cmp	r1, r3
        result = input - 'A' + 10;
 8005dcc:	b250      	sxtb	r0, r2
    if(result >= base) {
 8005dce:	d804      	bhi.n	8005dda <strToInt+0x4a>
        return -1;
 8005dd0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005dd4:	e008      	b.n	8005de8 <strToInt+0x58>

        int8_t ci = charToInt(string[i], base);
        if(ci < 0) {
 8005dd6:	1c43      	adds	r3, r0, #1
 8005dd8:	d006      	beq.n	8005de8 <strToInt+0x58>
            return -1;
        }

        value += ci;
 8005dda:	4430      	add	r0, r6
    for(; string[i]; i++) {
 8005ddc:	f814 2b01 	ldrb.w	r2, [r4], #1
 8005de0:	2a00      	cmp	r2, #0
 8005de2:	d1df      	bne.n	8005da4 <strToInt+0x14>
    }

    return (invert)? -value : value;
 8005de4:	b105      	cbz	r5, 8005de8 <strToInt+0x58>
 8005de6:	4240      	negs	r0, r0
}
 8005de8:	bd70      	pop	{r4, r5, r6, pc}
    unsigned int i = 0;
 8005dea:	2400      	movs	r4, #0
 8005dec:	e7d6      	b.n	8005d9c <strToInt+0xc>

08005dee <_get.lto_priv.2>:

static msg_t _get(void *ip) {
  uint8_t b;
  MemoryStream *msp = ip;

  if (msp->eos - msp->offset <= 0)
 8005dee:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 8005df2:	429a      	cmp	r2, r3
    return MSG_RESET;
  b = *(msp->buffer + msp->offset);
 8005df4:	bf1f      	itttt	ne
 8005df6:	6842      	ldrne	r2, [r0, #4]
 8005df8:	5cd2      	ldrbne	r2, [r2, r3]
  msp->offset += 1;
 8005dfa:	3301      	addne	r3, #1
 8005dfc:	6103      	strne	r3, [r0, #16]
  return b;
 8005dfe:	bf14      	ite	ne
 8005e00:	4610      	movne	r0, r2
    return MSG_RESET;
 8005e02:	f06f 0001 	mvneq.w	r0, #1
}
 8005e06:	4770      	bx	lr

08005e08 <_put.lto_priv.2>:
  if (msp->size - msp->eos <= 0)
 8005e08:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
 8005e0c:	429a      	cmp	r2, r3
  *(msp->buffer + msp->eos) = b;
 8005e0e:	bf1f      	itttt	ne
 8005e10:	6842      	ldrne	r2, [r0, #4]
 8005e12:	54d1      	strbne	r1, [r2, r3]
  msp->eos += 1;
 8005e14:	68c3      	ldrne	r3, [r0, #12]
 8005e16:	3301      	addne	r3, #1
 8005e18:	bf1a      	itte	ne
 8005e1a:	60c3      	strne	r3, [r0, #12]
  return MSG_OK;
 8005e1c:	2000      	movne	r0, #0
    return MSG_RESET;
 8005e1e:	f06f 0001 	mvneq.w	r0, #1
}
 8005e22:	4770      	bx	lr

08005e24 <chvprintf>:
 * @return              The number of bytes that would have been
 *                      written to @p chp if no stream error occurs
 *
 * @api
 */
int chvprintf(BaseSequentialStream *chp, const char *fmt, va_list ap) {
 8005e24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e28:	460b      	mov	r3, r1
 8005e2a:	4680      	mov	r8, r0
 8005e2c:	4614      	mov	r4, r2
  char *p, *s, c, filler;
  int i, precision, width;
  int n = 0;
 8005e2e:	f04f 0900 	mov.w	r9, #0
int chvprintf(BaseSequentialStream *chp, const char *fmt, va_list ap) {
 8005e32:	b087      	sub	sp, #28
#else
  char tmpbuf[MAX_FILLER + 1];
#endif

  while (true) {
    c = *fmt++;
 8005e34:	461f      	mov	r7, r3
 8005e36:	f817 1b01 	ldrb.w	r1, [r7], #1
    if (c == 0)
 8005e3a:	2900      	cmp	r1, #0
 8005e3c:	f000 8152 	beq.w	80060e4 <chvprintf+0x2c0>
      return n;
    if (c != '%') {
 8005e40:	2925      	cmp	r1, #37	; 0x25
 8005e42:	d007      	beq.n	8005e54 <chvprintf+0x30>
      streamPut(chp, (uint8_t)c);
 8005e44:	f8d8 3000 	ldr.w	r3, [r8]
 8005e48:	4640      	mov	r0, r8
 8005e4a:	689b      	ldr	r3, [r3, #8]
 8005e4c:	4798      	blx	r3
      n++;
 8005e4e:	f109 0901 	add.w	r9, r9, #1
      continue;
 8005e52:	e112      	b.n	800607a <chvprintf+0x256>
    }
    p = tmpbuf;
    s = tmpbuf;
    left_align = FALSE;
    if (*fmt == '-') {
 8005e54:	785a      	ldrb	r2, [r3, #1]
    filler = ' ';
    if (*fmt == '0') {
      fmt++;
      filler = '0';
    }
    width = 0;
 8005e56:	f04f 0b00 	mov.w	fp, #0
    if (*fmt == '-') {
 8005e5a:	2a2d      	cmp	r2, #45	; 0x2d
      fmt++;
 8005e5c:	bf08      	it	eq
 8005e5e:	1c9f      	addeq	r7, r3, #2
    if (*fmt == '0') {
 8005e60:	f897 a000 	ldrb.w	sl, [r7]
      left_align = TRUE;
 8005e64:	bf0c      	ite	eq
 8005e66:	2301      	moveq	r3, #1
    left_align = FALSE;
 8005e68:	2300      	movne	r3, #0
    if (*fmt == '0') {
 8005e6a:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
    filler = ' ';
 8005e6e:	bf18      	it	ne
 8005e70:	f04f 0a20 	movne.w	sl, #32
    left_align = FALSE;
 8005e74:	9301      	str	r3, [sp, #4]
    if (*fmt == '0') {
 8005e76:	bf08      	it	eq
 8005e78:	3701      	addeq	r7, #1
    while (TRUE) {
      c = *fmt++;
 8005e7a:	f817 2b01 	ldrb.w	r2, [r7], #1
      if (c >= '0' && c <= '9')
 8005e7e:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8005e82:	b2c9      	uxtb	r1, r1
 8005e84:	2909      	cmp	r1, #9
 8005e86:	d904      	bls.n	8005e92 <chvprintf+0x6e>
        c -= '0';
      else if (c == '*')
 8005e88:	2a2a      	cmp	r2, #42	; 0x2a
 8005e8a:	d106      	bne.n	8005e9a <chvprintf+0x76>
        c = va_arg(ap, int);
 8005e8c:	f854 1b04 	ldr.w	r1, [r4], #4
 8005e90:	b2c9      	uxtb	r1, r1
      else
        break;
      width = width * 10 + c;
 8005e92:	230a      	movs	r3, #10
 8005e94:	fb03 1b0b 	mla	fp, r3, fp, r1
    while (TRUE) {
 8005e98:	e7ef      	b.n	8005e7a <chvprintf+0x56>
    }
    precision = 0;
    if (c == '.') {
 8005e9a:	2a2e      	cmp	r2, #46	; 0x2e
    precision = 0;
 8005e9c:	f04f 0100 	mov.w	r1, #0
    if (c == '.') {
 8005ea0:	d10f      	bne.n	8005ec2 <chvprintf+0x9e>
      while (TRUE) {
        c = *fmt++;
 8005ea2:	f817 2b01 	ldrb.w	r2, [r7], #1
        if (c >= '0' && c <= '9')
 8005ea6:	f1a2 0030 	sub.w	r0, r2, #48	; 0x30
 8005eaa:	b2c0      	uxtb	r0, r0
 8005eac:	2809      	cmp	r0, #9
 8005eae:	d904      	bls.n	8005eba <chvprintf+0x96>
          c -= '0';
        else if (c == '*')
 8005eb0:	2a2a      	cmp	r2, #42	; 0x2a
 8005eb2:	d106      	bne.n	8005ec2 <chvprintf+0x9e>
          c = va_arg(ap, int);
 8005eb4:	f854 0b04 	ldr.w	r0, [r4], #4
 8005eb8:	b2c0      	uxtb	r0, r0
        else
          break;
        precision *= 10;
        precision += c;
 8005eba:	230a      	movs	r3, #10
 8005ebc:	fb03 0101 	mla	r1, r3, r1, r0
      while (TRUE) {
 8005ec0:	e7ef      	b.n	8005ea2 <chvprintf+0x7e>
      }
    }
    /* Long modifier.*/
    if (c == 'l' || c == 'L') {
 8005ec2:	f002 00df 	and.w	r0, r2, #223	; 0xdf
 8005ec6:	284c      	cmp	r0, #76	; 0x4c
 8005ec8:	d115      	bne.n	8005ef6 <chvprintf+0xd2>
      is_long = TRUE;
      if (*fmt)
 8005eca:	7838      	ldrb	r0, [r7, #0]
 8005ecc:	b108      	cbz	r0, 8005ed2 <chvprintf+0xae>
 8005ece:	4602      	mov	r2, r0
 8005ed0:	3701      	adds	r7, #1
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
 8005ed2:	2a64      	cmp	r2, #100	; 0x64
 8005ed4:	d06f      	beq.n	8005fb6 <chvprintf+0x192>
 8005ed6:	f200 80e3 	bhi.w	80060a0 <chvprintf+0x27c>
 8005eda:	2a58      	cmp	r2, #88	; 0x58
 8005edc:	f000 80d9 	beq.w	8006092 <chvprintf+0x26e>
 8005ee0:	d821      	bhi.n	8005f26 <chvprintf+0x102>
 8005ee2:	2a4f      	cmp	r2, #79	; 0x4f
 8005ee4:	f000 80b5 	beq.w	8006052 <chvprintf+0x22e>
 8005ee8:	f200 80d5 	bhi.w	8006096 <chvprintf+0x272>
 8005eec:	2a44      	cmp	r2, #68	; 0x44
 8005eee:	d062      	beq.n	8005fb6 <chvprintf+0x192>
 8005ef0:	2a49      	cmp	r2, #73	; 0x49
 8005ef2:	d060      	beq.n	8005fb6 <chvprintf+0x192>
 8005ef4:	e010      	b.n	8005f18 <chvprintf+0xf4>
      is_long = (c >= 'A') && (c <= 'Z');
 8005ef6:	f1a2 0041 	sub.w	r0, r2, #65	; 0x41
    switch (c) {
 8005efa:	2a64      	cmp	r2, #100	; 0x64
      is_long = (c >= 'A') && (c <= 'Z');
 8005efc:	b2c0      	uxtb	r0, r0
    switch (c) {
 8005efe:	d056      	beq.n	8005fae <chvprintf+0x18a>
 8005f00:	d81e      	bhi.n	8005f40 <chvprintf+0x11c>
 8005f02:	2a55      	cmp	r2, #85	; 0x55
 8005f04:	f000 8096 	beq.w	8006034 <chvprintf+0x210>
 8005f08:	d80a      	bhi.n	8005f20 <chvprintf+0xfc>
 8005f0a:	2a49      	cmp	r2, #73	; 0x49
 8005f0c:	d04f      	beq.n	8005fae <chvprintf+0x18a>
 8005f0e:	2a4f      	cmp	r2, #79	; 0x4f
 8005f10:	f000 809b 	beq.w	800604a <chvprintf+0x226>
 8005f14:	2a44      	cmp	r2, #68	; 0x44
 8005f16:	d04a      	beq.n	8005fae <chvprintf+0x18a>
      else
        l = va_arg(ap, unsigned int);
      p = ch_ltoa(p, l, c);
      break;
    default:
      *p++ = c;
 8005f18:	4626      	mov	r6, r4
 8005f1a:	f88d 200c 	strb.w	r2, [sp, #12]
      break;
 8005f1e:	e00b      	b.n	8005f38 <chvprintf+0x114>
    switch (c) {
 8005f20:	2a58      	cmp	r2, #88	; 0x58
 8005f22:	f000 8094 	beq.w	800604e <chvprintf+0x22a>
 8005f26:	2a63      	cmp	r2, #99	; 0x63
 8005f28:	d1f6      	bne.n	8005f18 <chvprintf+0xf4>
      *p++ = va_arg(ap, int);
 8005f2a:	4626      	mov	r6, r4
      filler = ' ';
 8005f2c:	f04f 0a20 	mov.w	sl, #32
      *p++ = va_arg(ap, int);
 8005f30:	f856 2b04 	ldr.w	r2, [r6], #4
 8005f34:	f88d 200c 	strb.w	r2, [sp, #12]
    s = tmpbuf;
 8005f38:	ad03      	add	r5, sp, #12
      *p++ = c;
 8005f3a:	f10d 000d 	add.w	r0, sp, #13
 8005f3e:	e04c      	b.n	8005fda <chvprintf+0x1b6>
    switch (c) {
 8005f40:	2a69      	cmp	r2, #105	; 0x69
 8005f42:	d034      	beq.n	8005fae <chvprintf+0x18a>
 8005f44:	f1a2 056f 	sub.w	r5, r2, #111	; 0x6f
 8005f48:	b2ee      	uxtb	r6, r5
 8005f4a:	2e09      	cmp	r6, #9
 8005f4c:	d8e4      	bhi.n	8005f18 <chvprintf+0xf4>
 8005f4e:	2d09      	cmp	r5, #9
 8005f50:	d8e2      	bhi.n	8005f18 <chvprintf+0xf4>
 8005f52:	a301      	add	r3, pc, #4	; (adr r3, 8005f58 <chvprintf+0x134>)
 8005f54:	f853 f025 	ldr.w	pc, [r3, r5, lsl #2]
 8005f58:	0800604b 	.word	0x0800604b
 8005f5c:	08005f19 	.word	0x08005f19
 8005f60:	08005f19 	.word	0x08005f19
 8005f64:	08005f19 	.word	0x08005f19
 8005f68:	08005f81 	.word	0x08005f81
 8005f6c:	08005f19 	.word	0x08005f19
 8005f70:	08006035 	.word	0x08006035
 8005f74:	08005f19 	.word	0x08005f19
 8005f78:	08005f19 	.word	0x08005f19
 8005f7c:	0800604f 	.word	0x0800604f
      if ((s = va_arg(ap, char *)) == 0)
 8005f80:	4626      	mov	r6, r4
        s = "(null)";
 8005f82:	4b5a      	ldr	r3, [pc, #360]	; (80060ec <chvprintf+0x2c8>)
      if ((s = va_arg(ap, char *)) == 0)
 8005f84:	f856 5b04 	ldr.w	r5, [r6], #4
        precision = 32767;
 8005f88:	f647 72ff 	movw	r2, #32767	; 0x7fff
        s = "(null)";
 8005f8c:	2d00      	cmp	r5, #0
 8005f8e:	bf08      	it	eq
 8005f90:	461d      	moveq	r5, r3
        precision = 32767;
 8005f92:	2900      	cmp	r1, #0
 8005f94:	bf08      	it	eq
 8005f96:	4611      	moveq	r1, r2
 8005f98:	4628      	mov	r0, r5
 8005f9a:	4429      	add	r1, r5
      for (p = s; *p && (--precision >= 0); p++)
 8005f9c:	7802      	ldrb	r2, [r0, #0]
 8005f9e:	b10a      	cbz	r2, 8005fa4 <chvprintf+0x180>
 8005fa0:	4288      	cmp	r0, r1
 8005fa2:	d102      	bne.n	8005faa <chvprintf+0x186>
      filler = ' ';
 8005fa4:	f04f 0a20 	mov.w	sl, #32
 8005fa8:	e017      	b.n	8005fda <chvprintf+0x1b6>
      for (p = s; *p && (--precision >= 0); p++)
 8005faa:	3001      	adds	r0, #1
 8005fac:	e7f6      	b.n	8005f9c <chvprintf+0x178>
      if (is_long)
 8005fae:	2819      	cmp	r0, #25
 8005fb0:	f104 0604 	add.w	r6, r4, #4
 8005fb4:	d83c      	bhi.n	8006030 <chvprintf+0x20c>
        l = va_arg(ap, long);
 8005fb6:	4626      	mov	r6, r4
 8005fb8:	f856 1b04 	ldr.w	r1, [r6], #4
      if (l < 0) {
 8005fbc:	2900      	cmp	r1, #0
        *p++ = '-';
 8005fbe:	bfbc      	itt	lt
 8005fc0:	222d      	movlt	r2, #45	; 0x2d
 8005fc2:	f88d 200c 	strblt.w	r2, [sp, #12]
  return long_to_string_with_divisor(p, num, radix, 0);
 8005fc6:	f04f 020a 	mov.w	r2, #10
        l = -l;
 8005fca:	bfba      	itte	lt
 8005fcc:	4249      	neglt	r1, r1
        *p++ = '-';
 8005fce:	f10d 000d 	addlt.w	r0, sp, #13
    p = tmpbuf;
 8005fd2:	a803      	addge	r0, sp, #12
  return long_to_string_with_divisor(p, num, radix, 0);
 8005fd4:	f7fd ffe8 	bl	8003fa8 <long_to_string_with_divisor.constprop.0>
    s = tmpbuf;
 8005fd8:	ad03      	add	r5, sp, #12
    }
    i = (int)(p - s);
 8005fda:	1b44      	subs	r4, r0, r5
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
 8005fdc:	9901      	ldr	r1, [sp, #4]
    if ((width -= i) < 0)
 8005fde:	ebab 0304 	sub.w	r3, fp, r4
 8005fe2:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
    if (left_align == FALSE)
 8005fe6:	2900      	cmp	r1, #0
 8005fe8:	d149      	bne.n	800607e <chvprintf+0x25a>
      width = -width;
    if (width < 0) {
 8005fea:	2b00      	cmp	r3, #0
      width = -width;
 8005fec:	f1c2 0b00 	rsb	fp, r2, #0
    if (width < 0) {
 8005ff0:	dd1c      	ble.n	800602c <chvprintf+0x208>
      if (*s == '-' && filler == '0') {
 8005ff2:	7829      	ldrb	r1, [r5, #0]
 8005ff4:	292d      	cmp	r1, #45	; 0x2d
 8005ff6:	d10d      	bne.n	8006014 <chvprintf+0x1f0>
 8005ff8:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
 8005ffc:	d10a      	bne.n	8006014 <chvprintf+0x1f0>
        streamPut(chp, (uint8_t)*s++);
 8005ffe:	f8d8 3000 	ldr.w	r3, [r8]
 8006002:	4640      	mov	r0, r8
 8006004:	689b      	ldr	r3, [r3, #8]
 8006006:	9201      	str	r2, [sp, #4]
 8006008:	4798      	blx	r3
 800600a:	9a01      	ldr	r2, [sp, #4]
 800600c:	3c01      	subs	r4, #1
 800600e:	f109 0901 	add.w	r9, r9, #1
 8006012:	3501      	adds	r5, #1
        n++;
        i--;
      }
      do {
        streamPut(chp, (uint8_t)filler);
 8006014:	f8d8 3000 	ldr.w	r3, [r8]
 8006018:	4651      	mov	r1, sl
 800601a:	4640      	mov	r0, r8
 800601c:	689b      	ldr	r3, [r3, #8]
 800601e:	9201      	str	r2, [sp, #4]
 8006020:	4798      	blx	r3
        n++;
      } while (++width != 0);
 8006022:	f11b 0b01 	adds.w	fp, fp, #1
 8006026:	9a01      	ldr	r2, [sp, #4]
 8006028:	d1f4      	bne.n	8006014 <chvprintf+0x1f0>
 800602a:	4491      	add	r9, r2
    if (left_align == FALSE)
 800602c:	4623      	mov	r3, r4
 800602e:	e01b      	b.n	8006068 <chvprintf+0x244>
        l = va_arg(ap, int);
 8006030:	6821      	ldr	r1, [r4, #0]
 8006032:	e7c3      	b.n	8005fbc <chvprintf+0x198>
      c = 10;
 8006034:	220a      	movs	r2, #10
      if (is_long)
 8006036:	4626      	mov	r6, r4
 8006038:	2819      	cmp	r0, #25
 800603a:	f856 1b04 	ldr.w	r1, [r6], #4
 800603e:	d802      	bhi.n	8006046 <chvprintf+0x222>
        l = va_arg(ap, unsigned long);
 8006040:	4626      	mov	r6, r4
 8006042:	f856 1b04 	ldr.w	r1, [r6], #4
  return long_to_string_with_divisor(p, num, radix, 0);
 8006046:	a803      	add	r0, sp, #12
 8006048:	e7c4      	b.n	8005fd4 <chvprintf+0x1b0>
      c = 8;
 800604a:	2208      	movs	r2, #8
 800604c:	e7f3      	b.n	8006036 <chvprintf+0x212>
    switch (c) {
 800604e:	2210      	movs	r2, #16
 8006050:	e7f1      	b.n	8006036 <chvprintf+0x212>
 8006052:	2208      	movs	r2, #8
 8006054:	e7f4      	b.n	8006040 <chvprintf+0x21c>
    }
    while (--i >= 0) {
      streamPut(chp, (uint8_t)*s++);
 8006056:	f8d8 2000 	ldr.w	r2, [r8]
 800605a:	4640      	mov	r0, r8
 800605c:	6892      	ldr	r2, [r2, #8]
 800605e:	f815 1b01 	ldrb.w	r1, [r5], #1
 8006062:	9301      	str	r3, [sp, #4]
 8006064:	4790      	blx	r2
      n++;
 8006066:	9b01      	ldr	r3, [sp, #4]
    while (--i >= 0) {
 8006068:	3b01      	subs	r3, #1
 800606a:	d5f4      	bpl.n	8006056 <chvprintf+0x232>
 800606c:	2c00      	cmp	r4, #0
 800606e:	bfa8      	it	ge
 8006070:	44a1      	addge	r9, r4
 8006072:	465d      	mov	r5, fp
    }

    while (width) {
 8006074:	b92d      	cbnz	r5, 8006082 <chvprintf+0x25e>
 8006076:	4634      	mov	r4, r6
 8006078:	44d9      	add	r9, fp
 800607a:	463b      	mov	r3, r7
 800607c:	e6da      	b.n	8005e34 <chvprintf+0x10>
    if (left_align == FALSE)
 800607e:	4693      	mov	fp, r2
 8006080:	e7d4      	b.n	800602c <chvprintf+0x208>
      streamPut(chp, (uint8_t)filler);
 8006082:	f8d8 3000 	ldr.w	r3, [r8]
 8006086:	4651      	mov	r1, sl
 8006088:	4640      	mov	r0, r8
 800608a:	689b      	ldr	r3, [r3, #8]
 800608c:	4798      	blx	r3
      n++;
      width--;
 800608e:	3d01      	subs	r5, #1
 8006090:	e7f0      	b.n	8006074 <chvprintf+0x250>
    switch (c) {
 8006092:	2210      	movs	r2, #16
 8006094:	e7d4      	b.n	8006040 <chvprintf+0x21c>
 8006096:	2a55      	cmp	r2, #85	; 0x55
 8006098:	f47f af3e 	bne.w	8005f18 <chvprintf+0xf4>
      c = 10;
 800609c:	220a      	movs	r2, #10
      if (is_long)
 800609e:	e7cf      	b.n	8006040 <chvprintf+0x21c>
    switch (c) {
 80060a0:	2a69      	cmp	r2, #105	; 0x69
 80060a2:	d088      	beq.n	8005fb6 <chvprintf+0x192>
 80060a4:	f1a2 006f 	sub.w	r0, r2, #111	; 0x6f
 80060a8:	b2c5      	uxtb	r5, r0
 80060aa:	2d09      	cmp	r5, #9
 80060ac:	f63f af34 	bhi.w	8005f18 <chvprintf+0xf4>
 80060b0:	2809      	cmp	r0, #9
 80060b2:	f63f af31 	bhi.w	8005f18 <chvprintf+0xf4>
 80060b6:	a301      	add	r3, pc, #4	; (adr r3, 80060bc <chvprintf+0x298>)
 80060b8:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
 80060bc:	08006053 	.word	0x08006053
 80060c0:	08005f19 	.word	0x08005f19
 80060c4:	08005f19 	.word	0x08005f19
 80060c8:	08005f19 	.word	0x08005f19
 80060cc:	08005f81 	.word	0x08005f81
 80060d0:	08005f19 	.word	0x08005f19
 80060d4:	0800609d 	.word	0x0800609d
 80060d8:	08005f19 	.word	0x08005f19
 80060dc:	08005f19 	.word	0x08005f19
 80060e0:	08006093 	.word	0x08006093
    }
  }
}
 80060e4:	4648      	mov	r0, r9
 80060e6:	b007      	add	sp, #28
 80060e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060ec:	0800b91a 	.word	0x0800b91a

080060f0 <usb_lld_init_endpoint>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_init_endpoint(USBDriver *usbp, usbep_t ep) {
 80060f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint16_t epr;
  stm32_usb_descriptor_t *dp;
  const USBEndpointConfig *epcp = usbp->epc[ep];
 80060f2:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 80060f6:	68de      	ldr	r6, [r3, #12]

  /* Setting the endpoint type. Note that isochronous endpoints cannot be
     bidirectional because it uses double buffering and both transmit and
     receive descriptor fields are used for either direction.*/
  switch (epcp->ep_mode & USB_EP_MODE_TYPE) {
 80060f8:	6833      	ldr	r3, [r6, #0]
 80060fa:	f003 0303 	and.w	r3, r3, #3
 80060fe:	2b02      	cmp	r3, #2
 8006100:	d006      	beq.n	8006110 <usb_lld_init_endpoint+0x20>
 8006102:	2b03      	cmp	r3, #3
 8006104:	d022      	beq.n	800614c <usb_lld_init_endpoint+0x5c>
 8006106:	2b01      	cmp	r3, #1
 8006108:	d123      	bne.n	8006152 <usb_lld_init_endpoint+0x62>
    osalDbgAssert((epcp->in_state == NULL) || (epcp->out_state == NULL),
                  "isochronous EP cannot be IN and OUT");
    epr = EPR_EP_TYPE_ISO;
    break;
#else
    osalDbgAssert(false, "isochronous support disabled");
 800610a:	f7fe f919 	bl	8004340 <vTaskEndScheduler>
 800610e:	e7fe      	b.n	800610e <usb_lld_init_endpoint+0x1e>
#endif
  case USB_EP_MODE_TYPE_BULK:
    epr = EPR_EP_TYPE_BULK;
 8006110:	2200      	movs	r2, #0
    break;
  default:
    epr = EPR_EP_TYPE_CONTROL;
  }

  dp = USB_GET_DESCRIPTOR(ep);
 8006112:	4b33      	ldr	r3, [pc, #204]	; (80061e0 <usb_lld_init_endpoint+0xf0>)
 8006114:	ea4f 1c01 	mov.w	ip, r1, lsl #4
 8006118:	6d1c      	ldr	r4, [r3, #80]	; 0x50

  /* IN endpoint handling.*/
  if (epcp->in_state != NULL) {
 800611a:	6973      	ldr	r3, [r6, #20]
  dp = USB_GET_DESCRIPTOR(ep);
 800611c:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 8006120:	f504 44c0 	add.w	r4, r4, #24576	; 0x6000
 8006124:	eb04 1501 	add.w	r5, r4, r1, lsl #4
  if (epcp->in_state != NULL) {
 8006128:	b1d3      	cbz	r3, 8006160 <usb_lld_init_endpoint+0x70>
    dp->TXCOUNT0 = 0;
 800612a:	2300      	movs	r3, #0
 800612c:	606b      	str	r3, [r5, #4]
    dp->TXADDR0  = usb_pm_alloc(usbp, epcp->in_maxsize);
 800612e:	8a33      	ldrh	r3, [r6, #16]
  next = usbp->pmnext;
 8006130:	f8d0 7084 	ldr.w	r7, [r0, #132]	; 0x84
  usbp->pmnext += (size + 1) & ~1;
 8006134:	3301      	adds	r3, #1
 8006136:	f023 0301 	bic.w	r3, r3, #1
 800613a:	443b      	add	r3, r7
  osalDbgAssert(usbp->pmnext <= STM32_USB_PMA_SIZE, "PMA overflow");
 800613c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  usbp->pmnext += (size + 1) & ~1;
 8006140:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  osalDbgAssert(usbp->pmnext <= STM32_USB_PMA_SIZE, "PMA overflow");
 8006144:	d908      	bls.n	8006158 <usb_lld_init_endpoint+0x68>
 8006146:	f7fe f8fb 	bl	8004340 <vTaskEndScheduler>
 800614a:	e7fe      	b.n	800614a <usb_lld_init_endpoint+0x5a>
  switch (epcp->ep_mode & USB_EP_MODE_TYPE) {
 800614c:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8006150:	e7df      	b.n	8006112 <usb_lld_init_endpoint+0x22>
    epr = EPR_EP_TYPE_CONTROL;
 8006152:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006156:	e7dc      	b.n	8006112 <usb_lld_init_endpoint+0x22>
    dp->TXADDR0  = usb_pm_alloc(usbp, epcp->in_maxsize);
 8006158:	f84c 7004 	str.w	r7, [ip, r4]
    }
    else {
      epr |= EPR_STAT_TX_NAK;
    }
#else
    epr |= EPR_STAT_TX_NAK;
 800615c:	f042 0220 	orr.w	r2, r2, #32
#endif
  }

  /* OUT endpoint handling.*/
  if (epcp->out_state != NULL) {
 8006160:	69b3      	ldr	r3, [r6, #24]
 8006162:	b32b      	cbz	r3, 80061b0 <usb_lld_init_endpoint+0xc0>
    uint16_t nblocks;

    /* Endpoint size and address initialization.*/
    if (epcp->out_maxsize > 62)
 8006164:	8a74      	ldrh	r4, [r6, #18]
 8006166:	2c3e      	cmp	r4, #62	; 0x3e
 8006168:	f104 33ff 	add.w	r3, r4, #4294967295	; 0xffffffff
 800616c:	d916      	bls.n	800619c <usb_lld_init_endpoint+0xac>
      nblocks = (((((epcp->out_maxsize - 1) | 0x1f) + 1) / 32) << 10) |
 800616e:	f043 031f 	orr.w	r3, r3, #31
 8006172:	4e1c      	ldr	r6, [pc, #112]	; (80061e4 <usb_lld_init_endpoint+0xf4>)
 8006174:	3301      	adds	r3, #1
 8006176:	115b      	asrs	r3, r3, #5
 8006178:	ea46 2383 	orr.w	r3, r6, r3, lsl #10
 800617c:	b29b      	uxth	r3, r3
                0x8000;
    else
      nblocks = ((((epcp->out_maxsize - 1) | 1) + 1) / 2) << 10;
    dp->RXCOUNT0 = nblocks;
 800617e:	60eb      	str	r3, [r5, #12]
  next = usbp->pmnext;
 8006180:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
  usbp->pmnext += (size + 1) & ~1;
 8006184:	3401      	adds	r4, #1
 8006186:	f024 0401 	bic.w	r4, r4, #1
 800618a:	441c      	add	r4, r3
  osalDbgAssert(usbp->pmnext <= STM32_USB_PMA_SIZE, "PMA overflow");
 800618c:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
  usbp->pmnext += (size + 1) & ~1;
 8006190:	f8c0 4084 	str.w	r4, [r0, #132]	; 0x84
  osalDbgAssert(usbp->pmnext <= STM32_USB_PMA_SIZE, "PMA overflow");
 8006194:	d909      	bls.n	80061aa <usb_lld_init_endpoint+0xba>
 8006196:	f7fe f8d3 	bl	8004340 <vTaskEndScheduler>
 800619a:	e7fe      	b.n	800619a <usb_lld_init_endpoint+0xaa>
      nblocks = ((((epcp->out_maxsize - 1) | 1) + 1) / 2) << 10;
 800619c:	f043 0301 	orr.w	r3, r3, #1
 80061a0:	3301      	adds	r3, #1
 80061a2:	025b      	lsls	r3, r3, #9
 80061a4:	f403 437c 	and.w	r3, r3, #64512	; 0xfc00
 80061a8:	e7e9      	b.n	800617e <usb_lld_init_endpoint+0x8e>
    dp->RXADDR0  = usb_pm_alloc(usbp, epcp->out_maxsize);
 80061aa:	60ab      	str	r3, [r5, #8]
    }
    else {
      epr |= EPR_STAT_RX_NAK;
    }
#else
    epr |= EPR_STAT_RX_NAK;
 80061ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
#endif
  }

  /* EPxR register setup.*/
  EPR_SET(ep, epr | ep);
 80061b0:	f248 0480 	movw	r4, #32896	; 0x8080
  EPR_TOGGLE(ep, epr);
 80061b4:	f647 0370 	movw	r3, #30832	; 0x7870
  EPR_SET(ep, epr | ep);
 80061b8:	ea42 0001 	orr.w	r0, r2, r1
 80061bc:	f420 4078 	bic.w	r0, r0, #63488	; 0xf800
 80061c0:	0089      	lsls	r1, r1, #2
 80061c2:	f020 00f0 	bic.w	r0, r0, #240	; 0xf0
 80061c6:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 80061ca:	f501 41b8 	add.w	r1, r1, #23552	; 0x5c00
 80061ce:	4320      	orrs	r0, r4
 80061d0:	6008      	str	r0, [r1, #0]
  EPR_TOGGLE(ep, epr);
 80061d2:	6808      	ldr	r0, [r1, #0]
 80061d4:	4013      	ands	r3, r2
 80061d6:	4043      	eors	r3, r0
 80061d8:	4323      	orrs	r3, r4
 80061da:	600b      	str	r3, [r1, #0]
}
 80061dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80061de:	bf00      	nop
 80061e0:	40005c00 	.word	0x40005c00
 80061e4:	ffff8000 	.word	0xffff8000

080061e8 <_usb_reset.constprop.0>:
 */
void _usb_reset(USBDriver *usbp) {
  unsigned i;

  /* State transition.*/
  usbp->state         = USB_READY;
 80061e8:	2302      	movs	r3, #2
void _usb_reset(USBDriver *usbp) {
 80061ea:	b570      	push	{r4, r5, r6, lr}
  STM32_USB->DADDR  = DADDR_EF;
 80061ec:	2280      	movs	r2, #128	; 0x80

  /* Resetting internal state.*/
  usbp->status        = 0;
 80061ee:	2500      	movs	r5, #0
  usbp->state         = USB_READY;
 80061f0:	4c15      	ldr	r4, [pc, #84]	; (8006248 <_usb_reset.constprop.0+0x60>)
  usb_lld_init_endpoint(usbp, 0);
 80061f2:	4629      	mov	r1, r5
 80061f4:	7023      	strb	r3, [r4, #0]
  STM32_USB->BTABLE = BTABLE_ADDR;
 80061f6:	4b15      	ldr	r3, [pc, #84]	; (800624c <_usb_reset.constprop.0+0x64>)
  usbp->status        = 0;
 80061f8:	67e5      	str	r5, [r4, #124]	; 0x7c
#endif
    usbp->epc[i] = NULL;
  }

  /* EP0 state machine initialization.*/
  usbp->ep0state = USB_EP0_WAITING_SETUP;
 80061fa:	f884 5064 	strb.w	r5, [r4, #100]	; 0x64
    usbp->epc[i] = NULL;
 80061fe:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006202:	e9c4 5506 	strd	r5, r5, [r4, #24]
 8006206:	e9c4 5508 	strd	r5, r5, [r4, #32]
  usbp->transmitting  = 0;
 800620a:	60a5      	str	r5, [r4, #8]
    usbp->epc[i] = NULL;
 800620c:	62a5      	str	r5, [r4, #40]	; 0x28
 800620e:	651d      	str	r5, [r3, #80]	; 0x50
  STM32_USB->ISTR   = 0;
 8006210:	645d      	str	r5, [r3, #68]	; 0x44
  STM32_USB->DADDR  = DADDR_EF;
 8006212:	64da      	str	r2, [r3, #76]	; 0x4c
  if (usbp->config->sof_cb != NULL)
 8006214:	6862      	ldr	r2, [r4, #4]
  usb_lld_init_endpoint(usbp, 0);
 8006216:	4620      	mov	r0, r4
  if (usbp->config->sof_cb != NULL)
 8006218:	68d2      	ldr	r2, [r2, #12]
    cntr |= CNTR_SOFM;
 800621a:	42aa      	cmp	r2, r5
 800621c:	bf0c      	ite	eq
 800621e:	f44f 421c 	moveq.w	r2, #39936	; 0x9c00
 8006222:	f44f 421e 	movne.w	r2, #40448	; 0x9e00
  STM32_USB->CNTR = cntr;
 8006226:	641a      	str	r2, [r3, #64]	; 0x40
  usbp->pmnext = 64;
 8006228:	2340      	movs	r3, #64	; 0x40
 800622a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  usbp->epc[0] = &ep0config;
 800622e:	4b08      	ldr	r3, [pc, #32]	; (8006250 <_usb_reset.constprop.0+0x68>)
 8006230:	60e3      	str	r3, [r4, #12]
  usb_lld_init_endpoint(usbp, 0);
 8006232:	f7ff ff5d 	bl	80060f0 <usb_lld_init_endpoint>

  /* Low level reset.*/
  usb_lld_reset(usbp);

  /* Notification of reset event.*/
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_RESET);
 8006236:	6863      	ldr	r3, [r4, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	b123      	cbz	r3, 8006246 <_usb_reset.constprop.0+0x5e>
 800623c:	4629      	mov	r1, r5
 800623e:	4620      	mov	r0, r4
}
 8006240:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_RESET);
 8006244:	4718      	bx	r3
}
 8006246:	bd70      	pop	{r4, r5, r6, pc}
 8006248:	20000f54 	.word	0x20000f54
 800624c:	40005c00 	.word	0x40005c00
 8006250:	0800c820 	.word	0x0800c820

08006254 <usb_packet_write_from_buffer>:
  stm32_usb_descriptor_t *udp = USB_GET_DESCRIPTOR(ep);
 8006254:	4b0d      	ldr	r3, [pc, #52]	; (800628c <usb_packet_write_from_buffer+0x38>)
                                         size_t n) {
 8006256:	b510      	push	{r4, lr}
  stm32_usb_descriptor_t *udp = USB_GET_DESCRIPTOR(ep);
 8006258:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800625a:	0104      	lsls	r4, r0, #4
 800625c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006260:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8006264:	eb03 1000 	add.w	r0, r3, r0, lsl #4
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);
 8006268:	58e3      	ldr	r3, [r4, r3]
 800626a:	4411      	add	r1, r2
 800626c:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8006270:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8006274:	005b      	lsls	r3, r3, #1
  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
 8006276:	6042      	str	r2, [r0, #4]
  while (i > 0) {
 8006278:	2a00      	cmp	r2, #0
 800627a:	eba1 0002 	sub.w	r0, r1, r2
 800627e:	dc00      	bgt.n	8006282 <usb_packet_write_from_buffer+0x2e>
}
 8006280:	bd10      	pop	{r4, pc}
    w |= *buf++ << 8;
 8006282:	8800      	ldrh	r0, [r0, #0]
    i -= 2;
 8006284:	3a02      	subs	r2, #2
    w |= *buf++ << 8;
 8006286:	f843 0b04 	str.w	r0, [r3], #4
    i -= 2;
 800628a:	e7f5      	b.n	8006278 <usb_packet_write_from_buffer+0x24>
 800628c:	40005c00 	.word	0x40005c00

08006290 <Vector90>:
OSAL_IRQ_HANDLER(STM32_USB1_LP_HANDLER) {
 8006290:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  istr = STM32_USB->ISTR;
 8006294:	4d8e      	ldr	r5, [pc, #568]	; (80064d0 <Vector90+0x240>)
 8006296:	6c6c      	ldr	r4, [r5, #68]	; 0x44
  if (istr & ISTR_RESET) {
 8006298:	0566      	lsls	r6, r4, #21
 800629a:	d504      	bpl.n	80062a6 <Vector90+0x16>
    STM32_USB->ISTR = ~ISTR_RESET;
 800629c:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 80062a0:	646b      	str	r3, [r5, #68]	; 0x44
    _usb_reset(usbp);
 80062a2:	f7ff ffa1 	bl	80061e8 <_usb_reset.constprop.0>
  if (istr & ISTR_SUSP) {
 80062a6:	0520      	lsls	r0, r4, #20
 80062a8:	d511      	bpl.n	80062ce <Vector90+0x3e>
    STM32_USB->CNTR |= CNTR_FSUSP;
 80062aa:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 */
void _usb_suspend(USBDriver *usbp) {
  /* No state change, suspend always returns to previous state. */

  /* State transition.*/
  usbp->saved_state = usbp->state;
 80062ac:	4889      	ldr	r0, [pc, #548]	; (80064d4 <Vector90+0x244>)
 80062ae:	f043 0308 	orr.w	r3, r3, #8
 80062b2:	642b      	str	r3, [r5, #64]	; 0x40
    STM32_USB->ISTR = ~ISTR_SUSP;
 80062b4:	f46f 6300 	mvn.w	r3, #2048	; 0x800
 80062b8:	646b      	str	r3, [r5, #68]	; 0x44
 80062ba:	7803      	ldrb	r3, [r0, #0]
 80062bc:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  usbp->state       = USB_SUSPENDED;
 80062c0:	2305      	movs	r3, #5
 80062c2:	7003      	strb	r3, [r0, #0]

  /* Notification of suspend event.*/
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_SUSPEND);
 80062c4:	6843      	ldr	r3, [r0, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	b10b      	cbz	r3, 80062ce <Vector90+0x3e>
 80062ca:	2104      	movs	r1, #4
 80062cc:	4798      	blx	r3
  if (istr & ISTR_WKUP) {
 80062ce:	04e1      	lsls	r1, r4, #19
 80062d0:	d514      	bpl.n	80062fc <Vector90+0x6c>
    uint32_t fnr = STM32_USB->FNR;
 80062d2:	4b7f      	ldr	r3, [pc, #508]	; (80064d0 <Vector90+0x240>)
 80062d4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    if (!(fnr & FNR_RXDP)) {
 80062d6:	0412      	lsls	r2, r2, #16
 80062d8:	d40c      	bmi.n	80062f4 <Vector90+0x64>
      STM32_USB->CNTR &= ~CNTR_FSUSP;
 80062da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 * @notapi
 */
void _usb_wakeup(USBDriver *usbp) {

  /* State transition, returning to the previous state.*/
  usbp->state = usbp->saved_state;
 80062dc:	487d      	ldr	r0, [pc, #500]	; (80064d4 <Vector90+0x244>)
 80062de:	f022 0208 	bic.w	r2, r2, #8
 80062e2:	641a      	str	r2, [r3, #64]	; 0x40
 80062e4:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 80062e8:	7003      	strb	r3, [r0, #0]

  /* Notification of suspend event.*/
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_WAKEUP);
 80062ea:	6843      	ldr	r3, [r0, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	b10b      	cbz	r3, 80062f4 <Vector90+0x64>
 80062f0:	2105      	movs	r1, #5
 80062f2:	4798      	blx	r3
    STM32_USB->ISTR = ~ISTR_WKUP;
 80062f4:	f46f 5280 	mvn.w	r2, #4096	; 0x1000
 80062f8:	4b75      	ldr	r3, [pc, #468]	; (80064d0 <Vector90+0x240>)
 80062fa:	645a      	str	r2, [r3, #68]	; 0x44
  if (istr & ISTR_SOF) {
 80062fc:	05a3      	lsls	r3, r4, #22
 80062fe:	d508      	bpl.n	8006312 <Vector90+0x82>
    _usb_isr_invoke_sof_cb(usbp);
 8006300:	4874      	ldr	r0, [pc, #464]	; (80064d4 <Vector90+0x244>)
 8006302:	6843      	ldr	r3, [r0, #4]
 8006304:	68db      	ldr	r3, [r3, #12]
 8006306:	b103      	cbz	r3, 800630a <Vector90+0x7a>
 8006308:	4798      	blx	r3
    STM32_USB->ISTR = ~ISTR_SOF;
 800630a:	f46f 7200 	mvn.w	r2, #512	; 0x200
 800630e:	4b70      	ldr	r3, [pc, #448]	; (80064d0 <Vector90+0x240>)
 8006310:	645a      	str	r2, [r3, #68]	; 0x44
  const USBEndpointConfig *epcp = usbp->epc[ep];
 8006312:	4e70      	ldr	r6, [pc, #448]	; (80064d4 <Vector90+0x244>)
    EPR_CLEAR_CTR_TX(ep);
 8006314:	4d70      	ldr	r5, [pc, #448]	; (80064d8 <Vector90+0x248>)
  while (istr & ISTR_CTR) {
 8006316:	f414 4100 	ands.w	r1, r4, #32768	; 0x8000
 800631a:	d11a      	bne.n	8006352 <Vector90+0xc2>
 800631c:	4b6f      	ldr	r3, [pc, #444]	; (80064dc <Vector90+0x24c>)
 800631e:	681a      	ldr	r2, [r3, #0]
 8006320:	6019      	str	r1, [r3, #0]
  OSAL_IRQ_EPILOGUE();
 8006322:	b1a2      	cbz	r2, 800634e <Vector90+0xbe>
 8006324:	4b6e      	ldr	r3, [pc, #440]	; (80064e0 <Vector90+0x250>)
 8006326:	4a6f      	ldr	r2, [pc, #444]	; (80064e4 <Vector90+0x254>)
 8006328:	6819      	ldr	r1, [r3, #0]
 800632a:	6011      	str	r1, [r2, #0]
 800632c:	4a6e      	ldr	r2, [pc, #440]	; (80064e8 <Vector90+0x258>)
 800632e:	6812      	ldr	r2, [r2, #0]
 8006330:	b12a      	cbz	r2, 800633e <Vector90+0xae>
 8006332:	681a      	ldr	r2, [r3, #0]
 8006334:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
 8006338:	601a      	str	r2, [r3, #0]
 800633a:	681a      	ldr	r2, [r3, #0]
 800633c:	601a      	str	r2, [r3, #0]
 800633e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006342:	4b6a      	ldr	r3, [pc, #424]	; (80064ec <Vector90+0x25c>)
 8006344:	601a      	str	r2, [r3, #0]
 8006346:	f3bf 8f4f 	dsb	sy
 800634a:	f3bf 8f6f 	isb	sy
}
 800634e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    usb_serve_endpoints(usbp, istr & ISTR_EP_ID_MASK);
 8006352:	f004 040f 	and.w	r4, r4, #15
static void usb_serve_endpoints(USBDriver *usbp, uint32_t ep) {
 8006356:	00a7      	lsls	r7, r4, #2
 8006358:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 800635c:	f507 47b8 	add.w	r7, r7, #23552	; 0x5c00
  uint32_t epr = STM32_USB->EPR[ep];
 8006360:	f8d7 a000 	ldr.w	sl, [r7]
  const USBEndpointConfig *epcp = usbp->epc[ep];
 8006364:	f104 0902 	add.w	r9, r4, #2
 8006368:	eb06 0389 	add.w	r3, r6, r9, lsl #2
  if (epr & EPR_CTR_TX) {
 800636c:	f01a 0f80 	tst.w	sl, #128	; 0x80
  const USBEndpointConfig *epcp = usbp->epc[ep];
 8006370:	f8d3 8004 	ldr.w	r8, [r3, #4]
  if (epr & EPR_CTR_TX) {
 8006374:	d025      	beq.n	80063c2 <Vector90+0x132>
    EPR_CLEAR_CTR_TX(ep);
 8006376:	683a      	ldr	r2, [r7, #0]
    USBInEndpointState *isp = epcp->in_state;
 8006378:	f8d8 3014 	ldr.w	r3, [r8, #20]
    EPR_CLEAR_CTR_TX(ep);
 800637c:	402a      	ands	r2, r5
 800637e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006382:	603a      	str	r2, [r7, #0]
    isp->txcnt += isp->txlast;
 8006384:	68d9      	ldr	r1, [r3, #12]
 8006386:	685a      	ldr	r2, [r3, #4]
    n = isp->txsize - isp->txcnt;
 8006388:	6818      	ldr	r0, [r3, #0]
    isp->txcnt += isp->txlast;
 800638a:	440a      	add	r2, r1
    if (n > 0) {
 800638c:	1a80      	subs	r0, r0, r2
    isp->txcnt += isp->txlast;
 800638e:	605a      	str	r2, [r3, #4]
    if (n > 0) {
 8006390:	d02c      	beq.n	80063ec <Vector90+0x15c>
      if (n > epcp->in_maxsize)
 8006392:	f8b8 2010 	ldrh.w	r2, [r8, #16]
 8006396:	4282      	cmp	r2, r0
 8006398:	bf28      	it	cs
 800639a:	4602      	movcs	r2, r0
      isp->txbuf += isp->txlast;
 800639c:	6898      	ldr	r0, [r3, #8]
 800639e:	4401      	add	r1, r0
      isp->txlast = n;
 80063a0:	e9c3 1202 	strd	r1, r2, [r3, #8]
      usb_packet_write_from_buffer(ep, isp->txbuf, n);
 80063a4:	4620      	mov	r0, r4
 80063a6:	f7ff ff55 	bl	8006254 <usb_packet_write_from_buffer>
      EPR_SET_STAT_TX(ep, EPR_STAT_TX_VALID);
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
 80063b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80063b4:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 80063b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063c0:	603b      	str	r3, [r7, #0]
  if (epr & EPR_CTR_RX) {
 80063c2:	f41a 4f00 	tst.w	sl, #32768	; 0x8000
 80063c6:	d06a      	beq.n	800649e <Vector90+0x20e>
    EPR_CLEAR_CTR_RX(ep);
 80063c8:	683b      	ldr	r3, [r7, #0]
    if (epr & EPR_SETUP) {
 80063ca:	f41a 6f00 	tst.w	sl, #2048	; 0x800
    EPR_CLEAR_CTR_RX(ep);
 80063ce:	ea03 0305 	and.w	r3, r3, r5
 80063d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063d6:	603b      	str	r3, [r7, #0]
 80063d8:	b2e1      	uxtb	r1, r4
    if (epr & EPR_SETUP) {
 80063da:	d016      	beq.n	800640a <Vector90+0x17a>
      _usb_isr_invoke_setup_cb(usbp, ep);
 80063dc:	eb06 0989 	add.w	r9, r6, r9, lsl #2
 80063e0:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80063e4:	685b      	ldr	r3, [r3, #4]
        _usb_isr_invoke_out_cb(usbp, ep);
 80063e6:	4630      	mov	r0, r6
 80063e8:	4798      	blx	r3
 80063ea:	e058      	b.n	800649e <Vector90+0x20e>
      _usb_isr_invoke_in_cb(usbp, ep);
 80063ec:	2301      	movs	r3, #1
 80063ee:	fa03 f204 	lsl.w	r2, r3, r4
 80063f2:	8933      	ldrh	r3, [r6, #8]
 80063f4:	ea23 0302 	bic.w	r3, r3, r2
 80063f8:	8133      	strh	r3, [r6, #8]
 80063fa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d0df      	beq.n	80063c2 <Vector90+0x132>
 8006402:	4621      	mov	r1, r4
 8006404:	4630      	mov	r0, r6
 8006406:	4798      	blx	r3
 8006408:	e7db      	b.n	80063c2 <Vector90+0x132>
      USBOutEndpointState *osp = epcp->out_state;
 800640a:	f8d8 2018 	ldr.w	r2, [r8, #24]
  stm32_usb_descriptor_t *udp = USB_GET_DESCRIPTOR(ep);
 800640e:	4b30      	ldr	r3, [pc, #192]	; (80064d0 <Vector90+0x240>)
      n = usb_packet_read_to_buffer(ep, osp->rxbuf);
 8006410:	f8d2 c008 	ldr.w	ip, [r2, #8]
  stm32_usb_descriptor_t *udp = USB_GET_DESCRIPTOR(ep);
 8006414:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006416:	46e1      	mov	r9, ip
 8006418:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800641c:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8006420:	eb03 1004 	add.w	r0, r3, r4, lsl #4
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->RXADDR0);
 8006424:	6883      	ldr	r3, [r0, #8]
  n = (size_t)udp->RXCOUNT0 & RXCOUNT_COUNT_MASK;
 8006426:	f8d0 e00c 	ldr.w	lr, [r0, #12]
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->RXADDR0);
 800642a:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
  n = (size_t)udp->RXCOUNT0 & RXCOUNT_COUNT_MASK;
 800642e:	f3ce 0009 	ubfx	r0, lr, #0, #10
 8006432:	f3ce 0e48 	ubfx	lr, lr, #1, #9
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->RXADDR0);
 8006436:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
  while (i >= 2) {
 800643a:	ea4f 0a8e 	mov.w	sl, lr, lsl #2
 800643e:	eb0a 0a43 	add.w	sl, sl, r3, lsl #1
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->RXADDR0);
 8006442:	005b      	lsls	r3, r3, #1
  while (i >= 2) {
 8006444:	4553      	cmp	r3, sl
 8006446:	f109 0902 	add.w	r9, r9, #2
 800644a:	d12b      	bne.n	80064a4 <Vector90+0x214>
  if (i >= 1) {
 800644c:	f06f 0901 	mvn.w	r9, #1
 8006450:	fb09 090e 	mla	r9, r9, lr, r0
 8006454:	f1b9 0f00 	cmp.w	r9, #0
 8006458:	d002      	beq.n	8006460 <Vector90+0x1d0>
    *buf = (uint8_t)*pmap;
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f80c 301e 	strb.w	r3, [ip, lr, lsl #1]
      osp->rxbuf += n;
 8006460:	6893      	ldr	r3, [r2, #8]
 8006462:	4403      	add	r3, r0
 8006464:	6093      	str	r3, [r2, #8]
      osp->rxcnt  += n;
 8006466:	6853      	ldr	r3, [r2, #4]
 8006468:	4403      	add	r3, r0
 800646a:	6053      	str	r3, [r2, #4]
      osp->rxsize -= n;
 800646c:	6813      	ldr	r3, [r2, #0]
 800646e:	1a1b      	subs	r3, r3, r0
 8006470:	6013      	str	r3, [r2, #0]
      osp->rxpkts -= 1;
 8006472:	8993      	ldrh	r3, [r2, #12]
 8006474:	3b01      	subs	r3, #1
 8006476:	b29b      	uxth	r3, r3
 8006478:	8193      	strh	r3, [r2, #12]
      if ((n < epcp->out_maxsize) || (osp->rxpkts == 0)) {
 800647a:	f8b8 2012 	ldrh.w	r2, [r8, #18]
 800647e:	4282      	cmp	r2, r0
 8006480:	d800      	bhi.n	8006484 <Vector90+0x1f4>
 8006482:	b9c3      	cbnz	r3, 80064b6 <Vector90+0x226>
        _usb_isr_invoke_out_cb(usbp, ep);
 8006484:	2301      	movs	r3, #1
 8006486:	fa03 f204 	lsl.w	r2, r3, r4
 800648a:	8973      	ldrh	r3, [r6, #10]
 800648c:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 8006490:	ea23 0302 	bic.w	r3, r3, r2
 8006494:	8173      	strh	r3, [r6, #10]
 8006496:	68e3      	ldr	r3, [r4, #12]
 8006498:	68db      	ldr	r3, [r3, #12]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d1a3      	bne.n	80063e6 <Vector90+0x156>
    istr = STM32_USB->ISTR;
 800649e:	4b0c      	ldr	r3, [pc, #48]	; (80064d0 <Vector90+0x240>)
 80064a0:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 80064a2:	e738      	b.n	8006316 <Vector90+0x86>
    uint32_t w = *pmap++;
 80064a4:	f853 bb04 	ldr.w	fp, [r3], #4
    *buf++ = (uint8_t)w;
 80064a8:	f809 bc02 	strb.w	fp, [r9, #-2]
    *buf++ = (uint8_t)(w >> 8);
 80064ac:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 80064b0:	f809 bc01 	strb.w	fp, [r9, #-1]
    i -= 2;
 80064b4:	e7c6      	b.n	8006444 <Vector90+0x1b4>
        EPR_SET_STAT_RX(ep, EPR_STAT_RX_VALID);
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80064bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064c0:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80064c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064cc:	603b      	str	r3, [r7, #0]
 80064ce:	e7e6      	b.n	800649e <Vector90+0x20e>
 80064d0:	40005c00 	.word	0x40005c00
 80064d4:	20000f54 	.word	0x20000f54
 80064d8:	ffff070f 	.word	0xffff070f
 80064dc:	2000164c 	.word	0x2000164c
 80064e0:	e000ed20 	.word	0xe000ed20
 80064e4:	2000134c 	.word	0x2000134c
 80064e8:	20001358 	.word	0x20001358
 80064ec:	e000ed04 	.word	0xe000ed04

080064f0 <Vector6C.part.0>:
    if(uxYieldPending()) taskYIELD();
 80064f0:	4b0a      	ldr	r3, [pc, #40]	; (800651c <Vector6C.part.0+0x2c>)
 80064f2:	4a0b      	ldr	r2, [pc, #44]	; (8006520 <Vector6C.part.0+0x30>)
 80064f4:	6819      	ldr	r1, [r3, #0]
 80064f6:	6011      	str	r1, [r2, #0]
 80064f8:	4a0a      	ldr	r2, [pc, #40]	; (8006524 <Vector6C.part.0+0x34>)
 80064fa:	6812      	ldr	r2, [r2, #0]
 80064fc:	b12a      	cbz	r2, 800650a <Vector6C.part.0+0x1a>
 80064fe:	681a      	ldr	r2, [r3, #0]
 8006500:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
 8006504:	601a      	str	r2, [r3, #0]
 8006506:	681a      	ldr	r2, [r3, #0]
 8006508:	601a      	str	r2, [r3, #0]
 800650a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800650e:	4b06      	ldr	r3, [pc, #24]	; (8006528 <Vector6C.part.0+0x38>)
 8006510:	601a      	str	r2, [r3, #0]
 8006512:	f3bf 8f4f 	dsb	sy
 8006516:	f3bf 8f6f 	isb	sy
}
 800651a:	4770      	bx	lr
 800651c:	e000ed20 	.word	0xe000ed20
 8006520:	2000134c 	.word	0x2000134c
 8006524:	20001358 	.word	0x20001358
 8006528:	e000ed04 	.word	0xe000ed04

0800652c <spi_lld_serve_tx_interrupt>:
 * @brief   Shared end-of-tx service routine.
 *
 * @param[in] spip      pointer to the @p SPIDriver object
 * @param[in] flags     pre-shifted content of the ISR register
 */
static void spi_lld_serve_tx_interrupt(SPIDriver *spip, uint32_t flags) {
 800652c:	b508      	push	{r3, lr}

  /* DMA errors handling.*/
#if defined(STM32_SPI_DMA_ERROR_HOOK)
  (void)spip;
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 800652e:	070b      	lsls	r3, r1, #28
 8006530:	d502      	bpl.n	8006538 <spi_lld_serve_tx_interrupt+0xc>
    STM32_SPI_DMA_ERROR_HOOK(spip);
 8006532:	f7fd ff05 	bl	8004340 <vTaskEndScheduler>
 8006536:	e7fe      	b.n	8006536 <spi_lld_serve_tx_interrupt+0xa>
  }
#else
  (void)spip;
  (void)flags;
#endif
}
 8006538:	bd08      	pop	{r3, pc}

0800653a <spi_lld_serve_rx_interrupt>:
static void spi_lld_serve_rx_interrupt(SPIDriver *spip, uint32_t flags) {
 800653a:	b538      	push	{r3, r4, r5, lr}
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 800653c:	070b      	lsls	r3, r1, #28
static void spi_lld_serve_rx_interrupt(SPIDriver *spip, uint32_t flags) {
 800653e:	4604      	mov	r4, r0
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8006540:	d502      	bpl.n	8006548 <spi_lld_serve_rx_interrupt+0xe>
    STM32_SPI_DMA_ERROR_HOOK(spip);
 8006542:	f7fd fefd 	bl	8004340 <vTaskEndScheduler>
 8006546:	e7fe      	b.n	8006546 <spi_lld_serve_rx_interrupt+0xc>
  dmaStreamDisable(spip->dmatx);
 8006548:	6e83      	ldr	r3, [r0, #104]	; 0x68
 800654a:	6859      	ldr	r1, [r3, #4]
 800654c:	680a      	ldr	r2, [r1, #0]
 800654e:	f022 020f 	bic.w	r2, r2, #15
 8006552:	600a      	str	r2, [r1, #0]
 8006554:	7c1a      	ldrb	r2, [r3, #16]
 8006556:	6819      	ldr	r1, [r3, #0]
 8006558:	230e      	movs	r3, #14
 800655a:	fa03 f202 	lsl.w	r2, r3, r2
 800655e:	604a      	str	r2, [r1, #4]
  dmaStreamDisable(spip->dmarx);
 8006560:	6e42      	ldr	r2, [r0, #100]	; 0x64
 8006562:	6855      	ldr	r5, [r2, #4]
 8006564:	6829      	ldr	r1, [r5, #0]
 8006566:	f021 010f 	bic.w	r1, r1, #15
 800656a:	6029      	str	r1, [r5, #0]
 800656c:	6811      	ldr	r1, [r2, #0]
 800656e:	7c12      	ldrb	r2, [r2, #16]
 8006570:	4093      	lsls	r3, r2
 8006572:	604b      	str	r3, [r1, #4]
  _spi_isr_code(spip);
 8006574:	6843      	ldr	r3, [r0, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	b12b      	cbz	r3, 8006586 <spi_lld_serve_rx_interrupt+0x4c>
 800657a:	2204      	movs	r2, #4
 800657c:	7002      	strb	r2, [r0, #0]
 800657e:	4798      	blx	r3
 8006580:	7823      	ldrb	r3, [r4, #0]
 8006582:	2b04      	cmp	r3, #4
 8006584:	d101      	bne.n	800658a <spi_lld_serve_rx_interrupt+0x50>
 8006586:	2302      	movs	r3, #2
 8006588:	7023      	strb	r3, [r4, #0]
 800658a:	f7ff fb2f 	bl	8005bec <osalSysLockFromISR.lto_priv.0>
	__asm volatile( "mrs %0, basepri" : "=r"( ulBasePri ) );
 800658e:	f3ef 8311 	mrs	r3, BASEPRI
	return (ulBasePri > 0)? pdTRUE : pdFALSE;
 8006592:	b12b      	cbz	r3, 80065a0 <spi_lld_serve_rx_interrupt+0x66>
    if(*thread_reference) {
 8006594:	68a0      	ldr	r0, [r4, #8]
 8006596:	b930      	cbnz	r0, 80065a6 <spi_lld_serve_rx_interrupt+0x6c>
}
 8006598:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  _spi_isr_code(spip);
 800659c:	f7ff bb20 	b.w	8005be0 <osalSysUnlockFromISR.lto_priv.0>
    osalDbgCheckClassI();
 80065a0:	f7fd fece 	bl	8004340 <vTaskEndScheduler>
 80065a4:	e7fe      	b.n	80065a4 <spi_lld_serve_rx_interrupt+0x6a>
        xTaskNotifyFromISR( *thread_reference, msg, eSetValueWithOverwrite, NULL );
 80065a6:	2100      	movs	r1, #0
 80065a8:	f7fd ff56 	bl	8004458 <xTaskGenericNotifyFromISR.constprop.0>
        *thread_reference = NULL;
 80065ac:	2300      	movs	r3, #0
 80065ae:	60a3      	str	r3, [r4, #8]
 80065b0:	e7f2      	b.n	8006598 <spi_lld_serve_rx_interrupt+0x5e>

080065b2 <i2c_lld_serve_tx_end_irq>:
static void i2c_lld_serve_tx_end_irq(I2CDriver *i2cp, uint32_t flags) {
 80065b2:	b508      	push	{r3, lr}
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 80065b4:	070b      	lsls	r3, r1, #28
 80065b6:	d502      	bpl.n	80065be <i2c_lld_serve_tx_end_irq+0xc>
    STM32_I2C_DMA_ERROR_HOOK(i2cp);
 80065b8:	f7fd fec2 	bl	8004340 <vTaskEndScheduler>
 80065bc:	e7fe      	b.n	80065bc <i2c_lld_serve_tx_end_irq+0xa>
  dmaStreamDisable(i2cp->dmatx);
 80065be:	e9d0 311d 	ldrd	r3, r1, [r0, #116]	; 0x74
 80065c2:	6858      	ldr	r0, [r3, #4]
 80065c4:	6802      	ldr	r2, [r0, #0]
 80065c6:	f022 020f 	bic.w	r2, r2, #15
 80065ca:	6002      	str	r2, [r0, #0]
 80065cc:	7c18      	ldrb	r0, [r3, #16]
 80065ce:	681a      	ldr	r2, [r3, #0]
 80065d0:	230e      	movs	r3, #14
 80065d2:	4083      	lsls	r3, r0
 80065d4:	6053      	str	r3, [r2, #4]
  dp->CR2 |= I2C_CR2_ITEVTEN;
 80065d6:	684b      	ldr	r3, [r1, #4]
 80065d8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80065dc:	604b      	str	r3, [r1, #4]
}
 80065de:	bd08      	pop	{r3, pc}

080065e0 <osalThreadResumeI.lto_priv.0>:
{
 80065e0:	b510      	push	{r4, lr}
 80065e2:	4604      	mov	r4, r0
	__asm volatile( "mrs %0, basepri" : "=r"( ulBasePri ) );
 80065e4:	f3ef 8311 	mrs	r3, BASEPRI
	return (ulBasePri > 0)? pdTRUE : pdFALSE;
 80065e8:	b133      	cbz	r3, 80065f8 <osalThreadResumeI.lto_priv.0+0x18>
    if(*thread_reference) {
 80065ea:	6800      	ldr	r0, [r0, #0]
 80065ec:	b118      	cbz	r0, 80065f6 <osalThreadResumeI.lto_priv.0+0x16>
        xTaskNotifyFromISR( *thread_reference, msg, eSetValueWithOverwrite, NULL );
 80065ee:	f7fd ff33 	bl	8004458 <xTaskGenericNotifyFromISR.constprop.0>
        *thread_reference = NULL;
 80065f2:	2300      	movs	r3, #0
 80065f4:	6023      	str	r3, [r4, #0]
    }
}
 80065f6:	bd10      	pop	{r4, pc}
    osalDbgCheckClassI();
 80065f8:	f7fd fea2 	bl	8004340 <vTaskEndScheduler>
 80065fc:	e7fe      	b.n	80065fc <osalThreadResumeI.lto_priv.0+0x1c>

080065fe <i2c_lld_serve_rx_end_irq>:
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 80065fe:	f011 0108 	ands.w	r1, r1, #8
static void i2c_lld_serve_rx_end_irq(I2CDriver *i2cp, uint32_t flags) {
 8006602:	b538      	push	{r3, r4, r5, lr}
 8006604:	4604      	mov	r4, r0
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8006606:	d002      	beq.n	800660e <i2c_lld_serve_rx_end_irq+0x10>
    STM32_I2C_DMA_ERROR_HOOK(i2cp);
 8006608:	f7fd fe9a 	bl	8004340 <vTaskEndScheduler>
 800660c:	e7fe      	b.n	800660c <i2c_lld_serve_rx_end_irq+0xe>
  dmaStreamDisable(i2cp->dmarx);
 800660e:	6f02      	ldr	r2, [r0, #112]	; 0x70
  I2C_TypeDef *dp = i2cp->i2c;
 8006610:	6f83      	ldr	r3, [r0, #120]	; 0x78
  dmaStreamDisable(i2cp->dmarx);
 8006612:	6855      	ldr	r5, [r2, #4]
 8006614:	6828      	ldr	r0, [r5, #0]
 8006616:	f020 000f 	bic.w	r0, r0, #15
 800661a:	6028      	str	r0, [r5, #0]
 800661c:	7c15      	ldrb	r5, [r2, #16]
 800661e:	6810      	ldr	r0, [r2, #0]
 8006620:	220e      	movs	r2, #14
 8006622:	40aa      	lsls	r2, r5
 8006624:	6042      	str	r2, [r0, #4]
  dp->CR2 &= ~I2C_CR2_LAST;
 8006626:	685a      	ldr	r2, [r3, #4]
 8006628:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800662c:	605a      	str	r2, [r3, #4]
  dp->CR1 &= ~I2C_CR1_ACK;
 800662e:	681a      	ldr	r2, [r3, #0]
 8006630:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006634:	601a      	str	r2, [r3, #0]
  dp->CR1 |= I2C_CR1_STOP;
 8006636:	681a      	ldr	r2, [r3, #0]
 8006638:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800663c:	601a      	str	r2, [r3, #0]
  _i2c_wakeup_isr(i2cp);
 800663e:	f7ff fad5 	bl	8005bec <osalSysLockFromISR.lto_priv.0>
 8006642:	f104 0060 	add.w	r0, r4, #96	; 0x60
 8006646:	f7ff ffcb 	bl	80065e0 <osalThreadResumeI.lto_priv.0>
}
 800664a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  _i2c_wakeup_isr(i2cp);
 800664e:	f7ff bac7 	b.w	8005be0 <osalSysUnlockFromISR.lto_priv.0>
	...

08006654 <VectorC0>:
OSAL_IRQ_HANDLER(STM32_I2C1_ERROR_HANDLER) {
 8006654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint16_t sr = I2CD1.i2c->SR1;
 8006656:	4b35      	ldr	r3, [pc, #212]	; (800672c <VectorC0+0xd8>)
 8006658:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800665a:	6951      	ldr	r1, [r2, #20]
  I2CD1.i2c->SR1 = ~(sr & I2C_ERROR_MASK);
 800665c:	f401 445f 	and.w	r4, r1, #57088	; 0xdf00
 8006660:	43e4      	mvns	r4, r4
 8006662:	6154      	str	r4, [r2, #20]
  dmaStreamDisable(i2cp->dmatx);
 8006664:	6f5c      	ldr	r4, [r3, #116]	; 0x74
  uint16_t sr = I2CD1.i2c->SR1;
 8006666:	b288      	uxth	r0, r1
  dmaStreamDisable(i2cp->dmatx);
 8006668:	6866      	ldr	r6, [r4, #4]
 800666a:	6835      	ldr	r5, [r6, #0]
 800666c:	f025 050f 	bic.w	r5, r5, #15
 8006670:	6035      	str	r5, [r6, #0]
 8006672:	7c25      	ldrb	r5, [r4, #16]
 8006674:	6826      	ldr	r6, [r4, #0]
 8006676:	240e      	movs	r4, #14
 8006678:	fa04 f505 	lsl.w	r5, r4, r5
 800667c:	6075      	str	r5, [r6, #4]
  dmaStreamDisable(i2cp->dmarx);
 800667e:	6f1d      	ldr	r5, [r3, #112]	; 0x70
 8006680:	686f      	ldr	r7, [r5, #4]
 8006682:	683e      	ldr	r6, [r7, #0]
 8006684:	f026 060f 	bic.w	r6, r6, #15
 8006688:	603e      	str	r6, [r7, #0]
 800668a:	682e      	ldr	r6, [r5, #0]
 800668c:	7c2d      	ldrb	r5, [r5, #16]
 800668e:	40ac      	lsls	r4, r5
 8006690:	6074      	str	r4, [r6, #4]
  i2cp->numInterrupts++;
 8006692:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 8006696:	3401      	adds	r4, #1
 8006698:	f8c3 4080 	str.w	r4, [r3, #128]	; 0x80
  if (sr & I2C_SR1_BERR)                            /* Bus error.           */
 800669c:	f411 7480 	ands.w	r4, r1, #256	; 0x100
    i2cp->errors |= I2C_BUS_ERROR;
 80066a0:	bf18      	it	ne
 80066a2:	2401      	movne	r4, #1
  if (sr & I2C_SR1_ARLO)                            /* Arbitration lost.    */
 80066a4:	0587      	lsls	r7, r0, #22
    i2cp->errors |= I2C_BUS_ERROR;
 80066a6:	609c      	str	r4, [r3, #8]
    i2cp->errors |= I2C_ARBITRATION_LOST;
 80066a8:	bf42      	ittt	mi
 80066aa:	689c      	ldrmi	r4, [r3, #8]
 80066ac:	f044 0402 	orrmi.w	r4, r4, #2
 80066b0:	609c      	strmi	r4, [r3, #8]
  if (sr & I2C_SR1_AF) {                            /* Acknowledge fail.    */
 80066b2:	0546      	lsls	r6, r0, #21
 80066b4:	d50b      	bpl.n	80066ce <VectorC0+0x7a>
    i2cp->i2c->CR2 &= ~I2C_CR2_ITEVTEN;
 80066b6:	6855      	ldr	r5, [r2, #4]
 80066b8:	689c      	ldr	r4, [r3, #8]
 80066ba:	f425 7500 	bic.w	r5, r5, #512	; 0x200
 80066be:	6055      	str	r5, [r2, #4]
    i2cp->i2c->CR1 |= I2C_CR1_STOP;                 /* Setting stop bit.    */
 80066c0:	6815      	ldr	r5, [r2, #0]
    i2cp->errors |= I2C_ACK_FAILURE;
 80066c2:	f044 0404 	orr.w	r4, r4, #4
    i2cp->i2c->CR1 |= I2C_CR1_STOP;                 /* Setting stop bit.    */
 80066c6:	f445 7500 	orr.w	r5, r5, #512	; 0x200
 80066ca:	6015      	str	r5, [r2, #0]
    i2cp->errors |= I2C_ACK_FAILURE;
 80066cc:	609c      	str	r4, [r3, #8]
  if (sr & I2C_SR1_OVR)                             /* Overrun.             */
 80066ce:	0505      	lsls	r5, r0, #20
    i2cp->errors |= I2C_OVERRUN;
 80066d0:	bf42      	ittt	mi
 80066d2:	689a      	ldrmi	r2, [r3, #8]
 80066d4:	f042 0208 	orrmi.w	r2, r2, #8
 80066d8:	609a      	strmi	r2, [r3, #8]
  if (sr & I2C_SR1_TIMEOUT)                         /* SMBus Timeout.       */
 80066da:	0444      	lsls	r4, r0, #17
    i2cp->errors |= I2C_TIMEOUT;
 80066dc:	bf42      	ittt	mi
 80066de:	689a      	ldrmi	r2, [r3, #8]
 80066e0:	f042 0220 	orrmi.w	r2, r2, #32
 80066e4:	609a      	strmi	r2, [r3, #8]
  if (sr & I2C_SR1_PECERR)                          /* PEC error.           */
 80066e6:	04c0      	lsls	r0, r0, #19
    i2cp->errors |= I2C_PEC_ERROR;
 80066e8:	bf42      	ittt	mi
 80066ea:	689a      	ldrmi	r2, [r3, #8]
 80066ec:	f042 0210 	orrmi.w	r2, r2, #16
 80066f0:	609a      	strmi	r2, [r3, #8]
  if (sr & I2C_SR1_SMBALERT)                        /* SMBus alert.         */
 80066f2:	0409      	lsls	r1, r1, #16
 80066f4:	689a      	ldr	r2, [r3, #8]
 80066f6:	d50c      	bpl.n	8006712 <VectorC0+0xbe>
    i2cp->errors |= I2C_SMB_ALERT;
 80066f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80066fc:	609a      	str	r2, [r3, #8]
    _i2c_wakeup_error_isr(i2cp);
 80066fe:	f7ff fa75 	bl	8005bec <osalSysLockFromISR.lto_priv.0>
 8006702:	f06f 0101 	mvn.w	r1, #1
 8006706:	480a      	ldr	r0, [pc, #40]	; (8006730 <VectorC0+0xdc>)
 8006708:	f7ff ff6a 	bl	80065e0 <osalThreadResumeI.lto_priv.0>
 800670c:	f7ff fa68 	bl	8005be0 <osalSysUnlockFromISR.lto_priv.0>
 8006710:	e001      	b.n	8006716 <VectorC0+0xc2>
  if (i2cp->errors != I2C_NO_ERROR)
 8006712:	2a00      	cmp	r2, #0
 8006714:	d1f3      	bne.n	80066fe <VectorC0+0xaa>
 8006716:	2100      	movs	r1, #0
 8006718:	4b06      	ldr	r3, [pc, #24]	; (8006734 <VectorC0+0xe0>)
 800671a:	681a      	ldr	r2, [r3, #0]
 800671c:	6019      	str	r1, [r3, #0]
  OSAL_IRQ_EPILOGUE();
 800671e:	b11a      	cbz	r2, 8006728 <VectorC0+0xd4>
}
 8006720:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006724:	f7ff bee4 	b.w	80064f0 <Vector6C.part.0>
 8006728:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800672a:	bf00      	nop
 800672c:	20000934 	.word	0x20000934
 8006730:	20000994 	.word	0x20000994
 8006734:	2000164c 	.word	0x2000164c

08006738 <VectorBC>:
OSAL_IRQ_HANDLER(STM32_I2C1_EVENT_HANDLER) {
 8006738:	b570      	push	{r4, r5, r6, lr}
  I2C_TypeDef *dp = i2cp->i2c;
 800673a:	4d4e      	ldr	r5, [pc, #312]	; (8006874 <VectorBC+0x13c>)
 800673c:	6fac      	ldr	r4, [r5, #120]	; 0x78
  i2cp->numInterrupts++;
 800673e:	f8d5 2080 	ldr.w	r2, [r5, #128]	; 0x80
  uint32_t regSR2 = dp->SR2;
 8006742:	69a3      	ldr	r3, [r4, #24]
  uint32_t event = dp->SR1;
 8006744:	6966      	ldr	r6, [r4, #20]
  i2cp->numInterrupts++;
 8006746:	3201      	adds	r2, #1
  if ((event & I2C_SR1_BERR) || (i2cp->numInterrupts>=30)) {
 8006748:	f416 7f80 	tst.w	r6, #256	; 0x100
 800674c:	4629      	mov	r1, r5
  i2cp->numInterrupts++;
 800674e:	f8c5 2080 	str.w	r2, [r5, #128]	; 0x80
  if ((event & I2C_SR1_BERR) || (i2cp->numInterrupts>=30)) {
 8006752:	d101      	bne.n	8006758 <VectorBC+0x20>
 8006754:	2a1d      	cmp	r2, #29
 8006756:	d91c      	bls.n	8006792 <VectorBC+0x5a>
    dp->SR1 &= ~I2C_SR1_BERR;
 8006758:	6963      	ldr	r3, [r4, #20]
 800675a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800675e:	6163      	str	r3, [r4, #20]
    dp->CR2 &=~ I2C_CR2_ITEVTEN | I2C_CR2_ITERREN | I2C_CR2_ITBUFEN;
 8006760:	6863      	ldr	r3, [r4, #4]
 8006762:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006766:	6063      	str	r3, [r4, #4]
    i2cp->errors = I2C_BUS_ERROR;
 8006768:	2301      	movs	r3, #1
 800676a:	608b      	str	r3, [r1, #8]
    _i2c_wakeup_error_isr(i2cp);
 800676c:	f7ff fa3e 	bl	8005bec <osalSysLockFromISR.lto_priv.0>
 8006770:	f06f 0101 	mvn.w	r1, #1
 8006774:	4840      	ldr	r0, [pc, #256]	; (8006878 <VectorBC+0x140>)
 8006776:	f7ff ff33 	bl	80065e0 <osalThreadResumeI.lto_priv.0>
 800677a:	f7ff fa31 	bl	8005be0 <osalSysUnlockFromISR.lto_priv.0>
 800677e:	2100      	movs	r1, #0
 8006780:	4b3e      	ldr	r3, [pc, #248]	; (800687c <VectorBC+0x144>)
 8006782:	681a      	ldr	r2, [r3, #0]
 8006784:	6019      	str	r1, [r3, #0]
  OSAL_IRQ_EPILOGUE();
 8006786:	2a00      	cmp	r2, #0
 8006788:	d072      	beq.n	8006870 <VectorBC+0x138>
}
 800678a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800678e:	f7ff beaf 	b.w	80064f0 <Vector6C.part.0>
  switch (I2C_EV_MASK & (event | (regSR2 << 16))) {
 8006792:	4a3b      	ldr	r2, [pc, #236]	; (8006880 <VectorBC+0x148>)
 8006794:	ea46 4303 	orr.w	r3, r6, r3, lsl #16
 8006798:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800679c:	4293      	cmp	r3, r2
 800679e:	d030      	beq.n	8006802 <VectorBC+0xca>
 80067a0:	d80a      	bhi.n	80067b8 <VectorBC+0x80>
 80067a2:	3a07      	subs	r2, #7
 80067a4:	4293      	cmp	r3, r2
 80067a6:	d01d      	beq.n	80067e4 <VectorBC+0xac>
 80067a8:	3201      	adds	r2, #1
 80067aa:	4293      	cmp	r3, r2
 80067ac:	d02e      	beq.n	800680c <VectorBC+0xd4>
  if (event & (I2C_SR1_ADDR | I2C_SR1_ADD10))
 80067ae:	f016 0f0a 	tst.w	r6, #10
    (void)dp->SR2;
 80067b2:	bf18      	it	ne
 80067b4:	69a3      	ldrne	r3, [r4, #24]
 80067b6:	e7e2      	b.n	800677e <VectorBC+0x46>
  switch (I2C_EV_MASK & (event | (regSR2 << 16))) {
 80067b8:	4a32      	ldr	r2, [pc, #200]	; (8006884 <VectorBC+0x14c>)
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d03c      	beq.n	8006838 <VectorBC+0x100>
 80067be:	3202      	adds	r2, #2
 80067c0:	4293      	cmp	r3, r2
 80067c2:	d1f4      	bne.n	80067ae <VectorBC+0x76>
    if (dmaStreamGetTransactionSize(i2cp->dmarx) > 0) {
 80067c4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80067c6:	685b      	ldr	r3, [r3, #4]
 80067c8:	6859      	ldr	r1, [r3, #4]
 80067ca:	2900      	cmp	r1, #0
 80067cc:	d03f      	beq.n	800684e <VectorBC+0x116>
      i2cp->addr |= 0x01;
 80067ce:	f8b5 3064 	ldrh.w	r3, [r5, #100]	; 0x64
 80067d2:	f043 0301 	orr.w	r3, r3, #1
 80067d6:	f8a5 3064 	strh.w	r3, [r5, #100]	; 0x64
      dp->CR1 |= I2C_CR1_START | I2C_CR1_ACK;
 80067da:	6823      	ldr	r3, [r4, #0]
 80067dc:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
 80067e0:	6023      	str	r3, [r4, #0]
 80067e2:	e7cc      	b.n	800677e <VectorBC+0x46>
    if ((i2cp->addr >> 8) > 0) { 
 80067e4:	f8b5 2064 	ldrh.w	r2, [r5, #100]	; 0x64
 80067e8:	0a13      	lsrs	r3, r2, #8
 80067ea:	d008      	beq.n	80067fe <VectorBC+0xc6>
      dp->DR = 0xF0 | (0x6 & (i2cp->addr >> 8)) | (0x1 & i2cp->addr);
 80067ec:	f003 0306 	and.w	r3, r3, #6
 80067f0:	f002 0201 	and.w	r2, r2, #1
 80067f4:	4313      	orrs	r3, r2
 80067f6:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
    dp->DR = (0xFF & (i2cp->addr >> 1));
 80067fa:	6123      	str	r3, [r4, #16]
 80067fc:	e7d7      	b.n	80067ae <VectorBC+0x76>
      dp->DR = i2cp->addr;
 80067fe:	6122      	str	r2, [r4, #16]
 8006800:	e7d5      	b.n	80067ae <VectorBC+0x76>
    dp->DR = (0xFF & (i2cp->addr >> 1));
 8006802:	f8b5 3064 	ldrh.w	r3, [r5, #100]	; 0x64
 8006806:	f3c3 0347 	ubfx	r3, r3, #1, #8
 800680a:	e7f6      	b.n	80067fa <VectorBC+0xc2>
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 800680c:	6863      	ldr	r3, [r4, #4]
 800680e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006812:	6063      	str	r3, [r4, #4]
    dmaStreamEnable(i2cp->dmarx);
 8006814:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8006816:	685b      	ldr	r3, [r3, #4]
 8006818:	681a      	ldr	r2, [r3, #0]
 800681a:	f042 0201 	orr.w	r2, r2, #1
 800681e:	601a      	str	r2, [r3, #0]
    dp->CR2 |= I2C_CR2_LAST;                 /* Needed in receiver mode. */
 8006820:	6862      	ldr	r2, [r4, #4]
 8006822:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006826:	6062      	str	r2, [r4, #4]
    if (dmaStreamGetTransactionSize(i2cp->dmarx) < 2)
 8006828:	685b      	ldr	r3, [r3, #4]
 800682a:	2b01      	cmp	r3, #1
 800682c:	d8bf      	bhi.n	80067ae <VectorBC+0x76>
      dp->CR1 &= ~I2C_CR1_ACK;
 800682e:	6823      	ldr	r3, [r4, #0]
 8006830:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006834:	6023      	str	r3, [r4, #0]
 8006836:	e7ba      	b.n	80067ae <VectorBC+0x76>
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 8006838:	6863      	ldr	r3, [r4, #4]
 800683a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800683e:	6063      	str	r3, [r4, #4]
    dmaStreamEnable(i2cp->dmatx);
 8006840:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8006842:	685a      	ldr	r2, [r3, #4]
 8006844:	6813      	ldr	r3, [r2, #0]
 8006846:	f043 0301 	orr.w	r3, r3, #1
 800684a:	6013      	str	r3, [r2, #0]
 800684c:	e7af      	b.n	80067ae <VectorBC+0x76>
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 800684e:	6863      	ldr	r3, [r4, #4]
 8006850:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006854:	6063      	str	r3, [r4, #4]
    dp->CR1 |= I2C_CR1_STOP;
 8006856:	6823      	ldr	r3, [r4, #0]
 8006858:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800685c:	6023      	str	r3, [r4, #0]
    _i2c_wakeup_isr(i2cp);
 800685e:	f7ff f9c5 	bl	8005bec <osalSysLockFromISR.lto_priv.0>
 8006862:	f105 0060 	add.w	r0, r5, #96	; 0x60
 8006866:	f7ff febb 	bl	80065e0 <osalThreadResumeI.lto_priv.0>
 800686a:	f7ff f9b9 	bl	8005be0 <osalSysUnlockFromISR.lto_priv.0>
 800686e:	e79e      	b.n	80067ae <VectorBC+0x76>
}
 8006870:	bd70      	pop	{r4, r5, r6, pc}
 8006872:	bf00      	nop
 8006874:	20000934 	.word	0x20000934
 8006878:	20000994 	.word	0x20000994
 800687c:	2000164c 	.word	0x2000164c
 8006880:	00030008 	.word	0x00030008
 8006884:	00070082 	.word	0x00070082

08006888 <dmaStreamRelease>:
 *
 * @param[in] dmastp    pointer to a stm32_dma_stream_t structure
 *
 * @special
 */
void dmaStreamRelease(const stm32_dma_stream_t *dmastp) {
 8006888:	b570      	push	{r4, r5, r6, lr}

  osalDbgCheck(dmastp != NULL);
 800688a:	b910      	cbnz	r0, 8006892 <dmaStreamRelease+0xa>
 800688c:	f7fd fd58 	bl	8004340 <vTaskEndScheduler>
 8006890:	e7fe      	b.n	8006890 <dmaStreamRelease+0x8>

  /* Check if the streams is not taken.*/
  osalDbgAssert((dma_streams_mask & (1 << dmastp->selfindex)) != 0U,
 8006892:	2501      	movs	r5, #1
 8006894:	4a15      	ldr	r2, [pc, #84]	; (80068ec <dmaStreamRelease+0x64>)
 8006896:	7c46      	ldrb	r6, [r0, #17]
 8006898:	6813      	ldr	r3, [r2, #0]
 800689a:	fa05 f106 	lsl.w	r1, r5, r6
 800689e:	4219      	tst	r1, r3
 80068a0:	d102      	bne.n	80068a8 <dmaStreamRelease+0x20>
 80068a2:	f7fd fd4d 	bl	8004340 <vTaskEndScheduler>
 80068a6:	e7fe      	b.n	80068a6 <dmaStreamRelease+0x1e>
                "not allocated");

  /* Marks the stream as not allocated.*/
  dma_streams_mask &= ~(1U << dmastp->selfindex);
 80068a8:	ea23 0301 	bic.w	r3, r3, r1

  /* Disables the associated IRQ vector if it is no more in use.*/
  if ((dma_streams_mask & dmastp->cmask) == 0U) {
 80068ac:	6881      	ldr	r1, [r0, #8]
  dma_streams_mask &= ~(1U << dmastp->selfindex);
 80068ae:	6013      	str	r3, [r2, #0]
  if ((dma_streams_mask & dmastp->cmask) == 0U) {
 80068b0:	ea13 0401 	ands.w	r4, r3, r1
 80068b4:	d10b      	bne.n	80068ce <dmaStreamRelease+0x46>
    nvicDisableVector(dmastp->vector);
 80068b6:	7c82      	ldrb	r2, [r0, #18]
 *
 * @param[in] n         the interrupt number
 */
void nvicDisableVector(uint32_t n) {

  NVIC->ICER[n >> 5U] = 1U << (n & 0x1FU);
 80068b8:	f002 011f 	and.w	r1, r2, #31
 80068bc:	408d      	lsls	r5, r1
 80068be:	0950      	lsrs	r0, r2, #5
 80068c0:	490b      	ldr	r1, [pc, #44]	; (80068f0 <dmaStreamRelease+0x68>)
 80068c2:	3020      	adds	r0, #32
 80068c4:	f841 5020 	str.w	r5, [r1, r0, lsl #2]
#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = 0U;
 80068c8:	4411      	add	r1, r2
 80068ca:	f881 4300 	strb.w	r4, [r1, #768]	; 0x300
  }

  /* Removes the DMA handler.*/
  _stm32_dma_isr_redir[dmastp->selfindex].dma_func  = NULL;
 80068ce:	2100      	movs	r1, #0
 80068d0:	4a08      	ldr	r2, [pc, #32]	; (80068f4 <dmaStreamRelease+0x6c>)
  _stm32_dma_isr_redir[dmastp->selfindex].dma_param = NULL;

  /* Shutting down clocks that are no more required, if any.*/
  if ((dma_streams_mask & STM32_DMA1_STREAMS_MASK) == 0U) {
 80068d2:	065b      	lsls	r3, r3, #25
  _stm32_dma_isr_redir[dmastp->selfindex].dma_func  = NULL;
 80068d4:	f842 1036 	str.w	r1, [r2, r6, lsl #3]
  _stm32_dma_isr_redir[dmastp->selfindex].dma_param = NULL;
 80068d8:	eb02 02c6 	add.w	r2, r2, r6, lsl #3
 80068dc:	6051      	str	r1, [r2, #4]
    rccDisableDMA1(false);
 80068de:	bf01      	itttt	eq
 80068e0:	4a05      	ldreq	r2, [pc, #20]	; (80068f8 <dmaStreamRelease+0x70>)
 80068e2:	6953      	ldreq	r3, [r2, #20]
 80068e4:	f023 0301 	biceq.w	r3, r3, #1
 80068e8:	6153      	streq	r3, [r2, #20]
#if STM32_DMA2_NUM_CHANNELS > 0
  if ((dma_streams_mask & STM32_DMA2_STREAMS_MASK) == 0U) {
    rccDisableDMA2(false);
  }
#endif
}
 80068ea:	bd70      	pop	{r4, r5, r6, pc}
 80068ec:	20001044 	.word	0x20001044
 80068f0:	e000e100 	.word	0xe000e100
 80068f4:	20000fe8 	.word	0x20000fe8
 80068f8:	40021000 	.word	0x40021000

080068fc <Vector84>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH7_HANDLER) {
 80068fc:	b508      	push	{r3, lr}
  dmaServeInterrupt(STM32_DMA1_STREAM7);
 80068fe:	4b0d      	ldr	r3, [pc, #52]	; (8006934 <Vector84+0x38>)
 8006900:	4a0d      	ldr	r2, [pc, #52]	; (8006938 <Vector84+0x3c>)
 8006902:	6819      	ldr	r1, [r3, #0]
 8006904:	6812      	ldr	r2, [r2, #0]
 8006906:	0e09      	lsrs	r1, r1, #24
 8006908:	f001 010e 	and.w	r1, r1, #14
 800690c:	420a      	tst	r2, r1
 800690e:	d006      	beq.n	800691e <Vector84+0x22>
 8006910:	060a      	lsls	r2, r1, #24
 8006912:	605a      	str	r2, [r3, #4]
 8006914:	4a09      	ldr	r2, [pc, #36]	; (800693c <Vector84+0x40>)
 8006916:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8006918:	b10b      	cbz	r3, 800691e <Vector84+0x22>
 800691a:	6b50      	ldr	r0, [r2, #52]	; 0x34
 800691c:	4798      	blx	r3
 800691e:	2100      	movs	r1, #0
 8006920:	4b07      	ldr	r3, [pc, #28]	; (8006940 <Vector84+0x44>)
 8006922:	681a      	ldr	r2, [r3, #0]
 8006924:	6019      	str	r1, [r3, #0]
  OSAL_IRQ_EPILOGUE();
 8006926:	b11a      	cbz	r2, 8006930 <Vector84+0x34>
}
 8006928:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800692c:	f7ff bde0 	b.w	80064f0 <Vector6C.part.0>
 8006930:	bd08      	pop	{r3, pc}
 8006932:	bf00      	nop
 8006934:	40020000 	.word	0x40020000
 8006938:	40020080 	.word	0x40020080
 800693c:	20000fe8 	.word	0x20000fe8
 8006940:	2000164c 	.word	0x2000164c

08006944 <Vector80>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH6_HANDLER) {
 8006944:	b508      	push	{r3, lr}
  dmaServeInterrupt(STM32_DMA1_STREAM6);
 8006946:	4b0d      	ldr	r3, [pc, #52]	; (800697c <Vector80+0x38>)
 8006948:	4a0d      	ldr	r2, [pc, #52]	; (8006980 <Vector80+0x3c>)
 800694a:	6819      	ldr	r1, [r3, #0]
 800694c:	6812      	ldr	r2, [r2, #0]
 800694e:	0d09      	lsrs	r1, r1, #20
 8006950:	f001 010e 	and.w	r1, r1, #14
 8006954:	420a      	tst	r2, r1
 8006956:	d006      	beq.n	8006966 <Vector80+0x22>
 8006958:	050a      	lsls	r2, r1, #20
 800695a:	605a      	str	r2, [r3, #4]
 800695c:	4a09      	ldr	r2, [pc, #36]	; (8006984 <Vector80+0x40>)
 800695e:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8006960:	b10b      	cbz	r3, 8006966 <Vector80+0x22>
 8006962:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 8006964:	4798      	blx	r3
 8006966:	2100      	movs	r1, #0
 8006968:	4b07      	ldr	r3, [pc, #28]	; (8006988 <Vector80+0x44>)
 800696a:	681a      	ldr	r2, [r3, #0]
 800696c:	6019      	str	r1, [r3, #0]
  OSAL_IRQ_EPILOGUE();
 800696e:	b11a      	cbz	r2, 8006978 <Vector80+0x34>
}
 8006970:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8006974:	f7ff bdbc 	b.w	80064f0 <Vector6C.part.0>
 8006978:	bd08      	pop	{r3, pc}
 800697a:	bf00      	nop
 800697c:	40020000 	.word	0x40020000
 8006980:	4002006c 	.word	0x4002006c
 8006984:	20000fe8 	.word	0x20000fe8
 8006988:	2000164c 	.word	0x2000164c

0800698c <Vector7C>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH5_HANDLER) {
 800698c:	b508      	push	{r3, lr}
  dmaServeInterrupt(STM32_DMA1_STREAM5);
 800698e:	4b0d      	ldr	r3, [pc, #52]	; (80069c4 <Vector7C+0x38>)
 8006990:	4a0d      	ldr	r2, [pc, #52]	; (80069c8 <Vector7C+0x3c>)
 8006992:	6819      	ldr	r1, [r3, #0]
 8006994:	6812      	ldr	r2, [r2, #0]
 8006996:	0c09      	lsrs	r1, r1, #16
 8006998:	f001 010e 	and.w	r1, r1, #14
 800699c:	420a      	tst	r2, r1
 800699e:	d006      	beq.n	80069ae <Vector7C+0x22>
 80069a0:	040a      	lsls	r2, r1, #16
 80069a2:	605a      	str	r2, [r3, #4]
 80069a4:	4a09      	ldr	r2, [pc, #36]	; (80069cc <Vector7C+0x40>)
 80069a6:	6a13      	ldr	r3, [r2, #32]
 80069a8:	b10b      	cbz	r3, 80069ae <Vector7C+0x22>
 80069aa:	6a50      	ldr	r0, [r2, #36]	; 0x24
 80069ac:	4798      	blx	r3
 80069ae:	2100      	movs	r1, #0
 80069b0:	4b07      	ldr	r3, [pc, #28]	; (80069d0 <Vector7C+0x44>)
 80069b2:	681a      	ldr	r2, [r3, #0]
 80069b4:	6019      	str	r1, [r3, #0]
  OSAL_IRQ_EPILOGUE();
 80069b6:	b11a      	cbz	r2, 80069c0 <Vector7C+0x34>
}
 80069b8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80069bc:	f7ff bd98 	b.w	80064f0 <Vector6C.part.0>
 80069c0:	bd08      	pop	{r3, pc}
 80069c2:	bf00      	nop
 80069c4:	40020000 	.word	0x40020000
 80069c8:	40020058 	.word	0x40020058
 80069cc:	20000fe8 	.word	0x20000fe8
 80069d0:	2000164c 	.word	0x2000164c

080069d4 <Vector78>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH4_HANDLER) {
 80069d4:	b508      	push	{r3, lr}
  dmaServeInterrupt(STM32_DMA1_STREAM4);
 80069d6:	4b0d      	ldr	r3, [pc, #52]	; (8006a0c <Vector78+0x38>)
 80069d8:	4a0d      	ldr	r2, [pc, #52]	; (8006a10 <Vector78+0x3c>)
 80069da:	6819      	ldr	r1, [r3, #0]
 80069dc:	6812      	ldr	r2, [r2, #0]
 80069de:	0b09      	lsrs	r1, r1, #12
 80069e0:	f001 010e 	and.w	r1, r1, #14
 80069e4:	420a      	tst	r2, r1
 80069e6:	d006      	beq.n	80069f6 <Vector78+0x22>
 80069e8:	030a      	lsls	r2, r1, #12
 80069ea:	605a      	str	r2, [r3, #4]
 80069ec:	4a09      	ldr	r2, [pc, #36]	; (8006a14 <Vector78+0x40>)
 80069ee:	6993      	ldr	r3, [r2, #24]
 80069f0:	b10b      	cbz	r3, 80069f6 <Vector78+0x22>
 80069f2:	69d0      	ldr	r0, [r2, #28]
 80069f4:	4798      	blx	r3
 80069f6:	2100      	movs	r1, #0
 80069f8:	4b07      	ldr	r3, [pc, #28]	; (8006a18 <Vector78+0x44>)
 80069fa:	681a      	ldr	r2, [r3, #0]
 80069fc:	6019      	str	r1, [r3, #0]
  OSAL_IRQ_EPILOGUE();
 80069fe:	b11a      	cbz	r2, 8006a08 <Vector78+0x34>
}
 8006a00:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8006a04:	f7ff bd74 	b.w	80064f0 <Vector6C.part.0>
 8006a08:	bd08      	pop	{r3, pc}
 8006a0a:	bf00      	nop
 8006a0c:	40020000 	.word	0x40020000
 8006a10:	40020044 	.word	0x40020044
 8006a14:	20000fe8 	.word	0x20000fe8
 8006a18:	2000164c 	.word	0x2000164c

08006a1c <Vector74>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH3_HANDLER) {
 8006a1c:	b508      	push	{r3, lr}
  dmaServeInterrupt(STM32_DMA1_STREAM3);
 8006a1e:	4b0d      	ldr	r3, [pc, #52]	; (8006a54 <Vector74+0x38>)
 8006a20:	4a0d      	ldr	r2, [pc, #52]	; (8006a58 <Vector74+0x3c>)
 8006a22:	6819      	ldr	r1, [r3, #0]
 8006a24:	6812      	ldr	r2, [r2, #0]
 8006a26:	0a09      	lsrs	r1, r1, #8
 8006a28:	f001 010e 	and.w	r1, r1, #14
 8006a2c:	420a      	tst	r2, r1
 8006a2e:	d006      	beq.n	8006a3e <Vector74+0x22>
 8006a30:	020a      	lsls	r2, r1, #8
 8006a32:	605a      	str	r2, [r3, #4]
 8006a34:	4a09      	ldr	r2, [pc, #36]	; (8006a5c <Vector74+0x40>)
 8006a36:	6913      	ldr	r3, [r2, #16]
 8006a38:	b10b      	cbz	r3, 8006a3e <Vector74+0x22>
 8006a3a:	6950      	ldr	r0, [r2, #20]
 8006a3c:	4798      	blx	r3
 8006a3e:	2100      	movs	r1, #0
 8006a40:	4b07      	ldr	r3, [pc, #28]	; (8006a60 <Vector74+0x44>)
 8006a42:	681a      	ldr	r2, [r3, #0]
 8006a44:	6019      	str	r1, [r3, #0]
  OSAL_IRQ_EPILOGUE();
 8006a46:	b11a      	cbz	r2, 8006a50 <Vector74+0x34>
}
 8006a48:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8006a4c:	f7ff bd50 	b.w	80064f0 <Vector6C.part.0>
 8006a50:	bd08      	pop	{r3, pc}
 8006a52:	bf00      	nop
 8006a54:	40020000 	.word	0x40020000
 8006a58:	40020030 	.word	0x40020030
 8006a5c:	20000fe8 	.word	0x20000fe8
 8006a60:	2000164c 	.word	0x2000164c

08006a64 <Vector70>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH2_HANDLER) {
 8006a64:	b508      	push	{r3, lr}
  dmaServeInterrupt(STM32_DMA1_STREAM2);
 8006a66:	4b0d      	ldr	r3, [pc, #52]	; (8006a9c <Vector70+0x38>)
 8006a68:	4a0d      	ldr	r2, [pc, #52]	; (8006aa0 <Vector70+0x3c>)
 8006a6a:	6819      	ldr	r1, [r3, #0]
 8006a6c:	6812      	ldr	r2, [r2, #0]
 8006a6e:	0909      	lsrs	r1, r1, #4
 8006a70:	f001 010e 	and.w	r1, r1, #14
 8006a74:	420a      	tst	r2, r1
 8006a76:	d006      	beq.n	8006a86 <Vector70+0x22>
 8006a78:	010a      	lsls	r2, r1, #4
 8006a7a:	605a      	str	r2, [r3, #4]
 8006a7c:	4a09      	ldr	r2, [pc, #36]	; (8006aa4 <Vector70+0x40>)
 8006a7e:	6893      	ldr	r3, [r2, #8]
 8006a80:	b10b      	cbz	r3, 8006a86 <Vector70+0x22>
 8006a82:	68d0      	ldr	r0, [r2, #12]
 8006a84:	4798      	blx	r3
 8006a86:	2100      	movs	r1, #0
 8006a88:	4b07      	ldr	r3, [pc, #28]	; (8006aa8 <Vector70+0x44>)
 8006a8a:	681a      	ldr	r2, [r3, #0]
 8006a8c:	6019      	str	r1, [r3, #0]
  OSAL_IRQ_EPILOGUE();
 8006a8e:	b11a      	cbz	r2, 8006a98 <Vector70+0x34>
}
 8006a90:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8006a94:	f7ff bd2c 	b.w	80064f0 <Vector6C.part.0>
 8006a98:	bd08      	pop	{r3, pc}
 8006a9a:	bf00      	nop
 8006a9c:	40020000 	.word	0x40020000
 8006aa0:	4002001c 	.word	0x4002001c
 8006aa4:	20000fe8 	.word	0x20000fe8
 8006aa8:	2000164c 	.word	0x2000164c

08006aac <Vector6C>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH1_HANDLER) {
 8006aac:	b508      	push	{r3, lr}
  dmaServeInterrupt(STM32_DMA1_STREAM1);
 8006aae:	4b0c      	ldr	r3, [pc, #48]	; (8006ae0 <Vector6C+0x34>)
 8006ab0:	4a0c      	ldr	r2, [pc, #48]	; (8006ae4 <Vector6C+0x38>)
 8006ab2:	6819      	ldr	r1, [r3, #0]
 8006ab4:	6812      	ldr	r2, [r2, #0]
 8006ab6:	f001 010e 	and.w	r1, r1, #14
 8006aba:	420a      	tst	r2, r1
 8006abc:	d005      	beq.n	8006aca <Vector6C+0x1e>
 8006abe:	4a0a      	ldr	r2, [pc, #40]	; (8006ae8 <Vector6C+0x3c>)
 8006ac0:	6059      	str	r1, [r3, #4]
 8006ac2:	6813      	ldr	r3, [r2, #0]
 8006ac4:	b10b      	cbz	r3, 8006aca <Vector6C+0x1e>
 8006ac6:	6850      	ldr	r0, [r2, #4]
 8006ac8:	4798      	blx	r3
 8006aca:	2100      	movs	r1, #0
 8006acc:	4b07      	ldr	r3, [pc, #28]	; (8006aec <Vector6C+0x40>)
 8006ace:	681a      	ldr	r2, [r3, #0]
 8006ad0:	6019      	str	r1, [r3, #0]
  OSAL_IRQ_EPILOGUE();
 8006ad2:	b11a      	cbz	r2, 8006adc <Vector6C+0x30>
}
 8006ad4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8006ad8:	f7ff bd0a 	b.w	80064f0 <Vector6C.part.0>
 8006adc:	bd08      	pop	{r3, pc}
 8006ade:	bf00      	nop
 8006ae0:	40020000 	.word	0x40020000
 8006ae4:	40020008 	.word	0x40020008
 8006ae8:	20000fe8 	.word	0x20000fe8
 8006aec:	2000164c 	.word	0x2000164c

08006af0 <usbStartTransmitI>:
                       const uint8_t *buf, size_t n) {
 8006af0:	b570      	push	{r4, r5, r6, lr}
 8006af2:	460c      	mov	r4, r1
 8006af4:	4611      	mov	r1, r2
	__asm volatile( "mrs %0, basepri" : "=r"( ulBasePri ) );
 8006af6:	f3ef 8211 	mrs	r2, BASEPRI
	return (ulBasePri > 0)? pdTRUE : pdFALSE;
 8006afa:	b11a      	cbz	r2, 8006b04 <usbStartTransmitI+0x14>
  osalDbgCheck((usbp != NULL) && (ep <= (usbep_t)USB_MAX_ENDPOINTS));
 8006afc:	b928      	cbnz	r0, 8006b0a <usbStartTransmitI+0x1a>
 8006afe:	f7fd fc1f 	bl	8004340 <vTaskEndScheduler>
 8006b02:	e7fe      	b.n	8006b02 <usbStartTransmitI+0x12>
  osalDbgCheckClassI();
 8006b04:	f7fd fc1c 	bl	8004340 <vTaskEndScheduler>
 8006b08:	e7fe      	b.n	8006b08 <usbStartTransmitI+0x18>
  osalDbgCheck((usbp != NULL) && (ep <= (usbep_t)USB_MAX_ENDPOINTS));
 8006b0a:	2c07      	cmp	r4, #7
 8006b0c:	d8f7      	bhi.n	8006afe <usbStartTransmitI+0xe>
  osalDbgAssert(!usbGetTransmitStatusI(usbp, ep), "already transmitting");
 8006b0e:	2501      	movs	r5, #1
 8006b10:	8906      	ldrh	r6, [r0, #8]
 8006b12:	40a5      	lsls	r5, r4
 8006b14:	b2aa      	uxth	r2, r5
 8006b16:	4035      	ands	r5, r6
 8006b18:	d002      	beq.n	8006b20 <usbStartTransmitI+0x30>
 8006b1a:	f7fd fc11 	bl	8004340 <vTaskEndScheduler>
 8006b1e:	e7fe      	b.n	8006b1e <usbStartTransmitI+0x2e>
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8006b20:	4316      	orrs	r6, r2
 8006b22:	8106      	strh	r6, [r0, #8]
  isp = usbp->epc[ep]->in_state;
 8006b24:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 8006b28:	68c2      	ldr	r2, [r0, #12]
 8006b2a:	6950      	ldr	r0, [r2, #20]
  size_t n;
  USBInEndpointState *isp = usbp->epc[ep]->in_state;

  /* Transfer initialization.*/
  n = isp->txsize;
  if (n > (size_t)usbp->epc[ep]->in_maxsize)
 8006b2c:	8a12      	ldrh	r2, [r2, #16]
  isp->txcnt  = 0;
 8006b2e:	e9c0 3500 	strd	r3, r5, [r0]
 8006b32:	429a      	cmp	r2, r3
 8006b34:	bf28      	it	cs
 8006b36:	461a      	movcs	r2, r3
  isp->txbuf  = buf;
 8006b38:	6081      	str	r1, [r0, #8]
    n = (size_t)usbp->epc[ep]->in_maxsize;

  isp->txlast = n;
 8006b3a:	60c2      	str	r2, [r0, #12]
  usb_packet_write_from_buffer(ep, isp->txbuf, n);
 8006b3c:	4620      	mov	r0, r4
 8006b3e:	00a4      	lsls	r4, r4, #2
 8006b40:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 8006b44:	f504 44b8 	add.w	r4, r4, #23552	; 0x5c00
 8006b48:	f7ff fb84 	bl	8006254 <usb_packet_write_from_buffer>

  EPR_SET_STAT_TX(ep, EPR_STAT_TX_VALID);
 8006b4c:	6823      	ldr	r3, [r4, #0]
 8006b4e:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
 8006b52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b56:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 8006b5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b62:	6023      	str	r3, [r4, #0]
}
 8006b64:	bd70      	pop	{r4, r5, r6, pc}
	...

08006b68 <_usb_ep0out>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number, always zero
 *
 * @notapi
 */
void _usb_ep0out(USBDriver *usbp, usbep_t ep) {
 8006b68:	b510      	push	{r4, lr}
 8006b6a:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
 8006b6e:	4604      	mov	r4, r0
 8006b70:	2b06      	cmp	r3, #6
 8006b72:	d83f      	bhi.n	8006bf4 <_usb_ep0out+0x8c>
 8006b74:	e8df f003 	tbb	[pc, r3]
 8006b78:	131e1e1e 	.word	0x131e1e1e
 8006b7c:	1e04      	.short	0x1e04
 8006b7e:	21          	.byte	0x21
 8006b7f:	00          	.byte	0x00

  (void)ep;
  switch (usbp->ep0state) {
  case USB_EP0_RX:
    /* Receive phase over, sending the zero sized status packet.*/
    usbp->ep0state = USB_EP0_SENDING_STS;
 8006b80:	2305      	movs	r3, #5
 8006b82:	f880 3064 	strb.w	r3, [r0, #100]	; 0x64
#if (USB_EP0_STATUS_STAGE == USB_EP0_STATUS_STAGE_SW)
    osalSysLockFromISR();
 8006b86:	f7ff f831 	bl	8005bec <osalSysLockFromISR.lto_priv.0>
    usbStartTransmitI(usbp, 0, NULL, 0);
 8006b8a:	2300      	movs	r3, #0
 8006b8c:	4620      	mov	r0, r4
 8006b8e:	461a      	mov	r2, r3
 8006b90:	4619      	mov	r1, r3
 8006b92:	f7ff ffad 	bl	8006af0 <usbStartTransmitI>
    usbp->ep0state = USB_EP0_ERROR;
    return;
  default:
    osalDbgAssert(false, "EP0 state machine invalid state");
  }
}
 8006b96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    osalSysUnlockFromISR();
 8006b9a:	f7ff b821 	b.w	8005be0 <osalSysUnlockFromISR.lto_priv.0>
    if (usbGetReceiveTransactionSizeX(usbp, 0) != 0U) {
 8006b9e:	68c3      	ldr	r3, [r0, #12]
 8006ba0:	699b      	ldr	r3, [r3, #24]
 8006ba2:	685b      	ldr	r3, [r3, #4]
 8006ba4:	b92b      	cbnz	r3, 8006bb2 <_usb_ep0out+0x4a>
    if (usbp->ep0endcb != NULL) {
 8006ba6:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8006ba8:	b103      	cbz	r3, 8006bac <_usb_ep0out+0x44>
      usbp->ep0endcb(usbp);
 8006baa:	4798      	blx	r3
    usbp->ep0state = USB_EP0_WAITING_SETUP;
 8006bac:	2300      	movs	r3, #0
    usbp->ep0state = USB_EP0_ERROR;
 8006bae:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
}
 8006bb2:	bd10      	pop	{r4, pc}
    osalDbgAssert(false, "EP0 state machine error");
 8006bb4:	f7fd fbc4 	bl	8004340 <vTaskEndScheduler>
 8006bb8:	e7fe      	b.n	8006bb8 <_usb_ep0out+0x50>
 */
void usb_lld_stall_in(USBDriver *usbp, usbep_t ep) {

  (void)usbp;

  EPR_SET_STAT_TX(ep, EPR_STAT_TX_STALL);
 8006bba:	f248 0080 	movw	r0, #32896	; 0x8080
 8006bbe:	490f      	ldr	r1, [pc, #60]	; (8006bfc <_usb_ep0out+0x94>)
 8006bc0:	680b      	ldr	r3, [r1, #0]
 8006bc2:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
 8006bc6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006bca:	f083 0210 	eor.w	r2, r3, #16
 8006bce:	4302      	orrs	r2, r0
 8006bd0:	600a      	str	r2, [r1, #0]
  EPR_SET_STAT_RX(ep, EPR_STAT_RX_STALL);
 8006bd2:	680b      	ldr	r3, [r1, #0]
 8006bd4:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8006bd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bdc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006be0:	4303      	orrs	r3, r0
 8006be2:	600b      	str	r3, [r1, #0]
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_STALLED);
 8006be4:	6863      	ldr	r3, [r4, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	b113      	cbz	r3, 8006bf0 <_usb_ep0out+0x88>
 8006bea:	2106      	movs	r1, #6
 8006bec:	4620      	mov	r0, r4
 8006bee:	4798      	blx	r3
    usbp->ep0state = USB_EP0_ERROR;
 8006bf0:	2306      	movs	r3, #6
 8006bf2:	e7dc      	b.n	8006bae <_usb_ep0out+0x46>
    osalDbgAssert(false, "EP0 state machine invalid state");
 8006bf4:	f7fd fba4 	bl	8004340 <vTaskEndScheduler>
 8006bf8:	e7fe      	b.n	8006bf8 <_usb_ep0out+0x90>
 8006bfa:	bf00      	nop
 8006bfc:	40005c00 	.word	0x40005c00

08006c00 <usbStartReceiveI>:
                      uint8_t *buf, size_t n) {
 8006c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm volatile( "mrs %0, basepri" : "=r"( ulBasePri ) );
 8006c02:	f3ef 8411 	mrs	r4, BASEPRI
	return (ulBasePri > 0)? pdTRUE : pdFALSE;
 8006c06:	b11c      	cbz	r4, 8006c10 <usbStartReceiveI+0x10>
  osalDbgCheck((usbp != NULL) && (ep <= (usbep_t)USB_MAX_ENDPOINTS));
 8006c08:	b928      	cbnz	r0, 8006c16 <usbStartReceiveI+0x16>
 8006c0a:	f7fd fb99 	bl	8004340 <vTaskEndScheduler>
 8006c0e:	e7fe      	b.n	8006c0e <usbStartReceiveI+0xe>
  osalDbgCheckClassI();
 8006c10:	f7fd fb96 	bl	8004340 <vTaskEndScheduler>
 8006c14:	e7fe      	b.n	8006c14 <usbStartReceiveI+0x14>
  osalDbgCheck((usbp != NULL) && (ep <= (usbep_t)USB_MAX_ENDPOINTS));
 8006c16:	2907      	cmp	r1, #7
 8006c18:	d8f7      	bhi.n	8006c0a <usbStartReceiveI+0xa>
  osalDbgAssert(!usbGetReceiveStatusI(usbp, ep), "already receiving");
 8006c1a:	2401      	movs	r4, #1
 8006c1c:	8946      	ldrh	r6, [r0, #10]
 8006c1e:	fa04 f501 	lsl.w	r5, r4, r1
 8006c22:	b2af      	uxth	r7, r5
 8006c24:	4035      	ands	r5, r6
 8006c26:	d002      	beq.n	8006c2e <usbStartReceiveI+0x2e>
 8006c28:	f7fd fb8a 	bl	8004340 <vTaskEndScheduler>
 8006c2c:	e7fe      	b.n	8006c2c <usbStartReceiveI+0x2c>
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8006c2e:	433e      	orrs	r6, r7
 8006c30:	8146      	strh	r6, [r0, #10]
  osp = usbp->epc[ep]->out_state;
 8006c32:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8006c36:	68c6      	ldr	r6, [r0, #12]
 8006c38:	69b0      	ldr	r0, [r6, #24]
  osp->rxcnt  = 0;
 8006c3a:	e9c0 3500 	strd	r3, r5, [r0]
  osp->rxbuf  = buf;
 8006c3e:	6082      	str	r2, [r0, #8]
  if (osp->rxsize == 0)         /* Special case for zero sized packets.*/
 8006c40:	b1c3      	cbz	r3, 8006c74 <usbStartReceiveI+0x74>
    osp->rxpkts = (uint16_t)((osp->rxsize + usbp->epc[ep]->out_maxsize - 1) /
 8006c42:	8a72      	ldrh	r2, [r6, #18]
 8006c44:	3b01      	subs	r3, #1
 8006c46:	4413      	add	r3, r2
 8006c48:	fbb3 f3f2 	udiv	r3, r3, r2
 8006c4c:	b29b      	uxth	r3, r3
 8006c4e:	0089      	lsls	r1, r1, #2
 8006c50:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8006c54:	f501 41b8 	add.w	r1, r1, #23552	; 0x5c00
 8006c58:	8183      	strh	r3, [r0, #12]
  EPR_SET_STAT_RX(ep, EPR_STAT_RX_VALID);
 8006c5a:	680b      	ldr	r3, [r1, #0]
 8006c5c:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8006c60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c64:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8006c68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c70:	600b      	str	r3, [r1, #0]
}
 8006c72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    osp->rxpkts = 1;
 8006c74:	4623      	mov	r3, r4
 8006c76:	e7ea      	b.n	8006c4e <usbStartReceiveI+0x4e>

08006c78 <_usb_ep0in>:
void _usb_ep0in(USBDriver *usbp, usbep_t ep) {
 8006c78:	b510      	push	{r4, lr}
 8006c7a:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
 8006c7e:	4604      	mov	r4, r0
 8006c80:	2b06      	cmp	r3, #6
 8006c82:	d856      	bhi.n	8006d32 <_usb_ep0in+0xba>
 8006c84:	e8df f003 	tbb	[pc, r3]
 8006c88:	35210435 	.word	0x35210435
 8006c8c:	3035      	.short	0x3035
 8006c8e:	38          	.byte	0x38
 8006c8f:	00          	.byte	0x00
  hw |= (uint16_t)*p << 8U;
 8006c90:	f890 107b 	ldrb.w	r1, [r0, #123]	; 0x7b
 8006c94:	f890 207a 	ldrb.w	r2, [r0, #122]	; 0x7a
    if ((usbp->ep0n < max) &&
 8006c98:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
    max = (size_t)get_hword(&usbp->setup[6]);
 8006c9a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    if ((usbp->ep0n < max) &&
 8006c9e:	4293      	cmp	r3, r2
 8006ca0:	d213      	bcs.n	8006cca <_usb_ep0in+0x52>
        ((usbp->ep0n % usbp->epc[0]->in_maxsize) == 0U)) {
 8006ca2:	68c2      	ldr	r2, [r0, #12]
 8006ca4:	8a12      	ldrh	r2, [r2, #16]
 8006ca6:	fbb3 f1f2 	udiv	r1, r3, r2
 8006caa:	fb02 3111 	mls	r1, r2, r1, r3
    if ((usbp->ep0n < max) &&
 8006cae:	b961      	cbnz	r1, 8006cca <_usb_ep0in+0x52>
      osalSysLockFromISR();
 8006cb0:	f7fe ff9c 	bl	8005bec <osalSysLockFromISR.lto_priv.0>
      usbStartTransmitI(usbp, 0, NULL, 0);
 8006cb4:	4620      	mov	r0, r4
 8006cb6:	460b      	mov	r3, r1
 8006cb8:	460a      	mov	r2, r1
 8006cba:	f7ff ff19 	bl	8006af0 <usbStartTransmitI>
      osalSysUnlockFromISR();
 8006cbe:	f7fe ff8f 	bl	8005be0 <osalSysUnlockFromISR.lto_priv.0>
      usbp->ep0state = USB_EP0_WAITING_TX0;
 8006cc2:	2302      	movs	r3, #2
    usbp->ep0state = USB_EP0_ERROR;
 8006cc4:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
}
 8006cc8:	bd10      	pop	{r4, pc}
    usbp->ep0state = USB_EP0_WAITING_STS;
 8006cca:	2303      	movs	r3, #3
 8006ccc:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
    osalSysLockFromISR();
 8006cd0:	f7fe ff8c 	bl	8005bec <osalSysLockFromISR.lto_priv.0>
    usbStartReceiveI(usbp, 0, NULL, 0);
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	4620      	mov	r0, r4
 8006cd8:	461a      	mov	r2, r3
 8006cda:	4619      	mov	r1, r3
 8006cdc:	f7ff ff90 	bl	8006c00 <usbStartReceiveI>
}
 8006ce0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    osalSysUnlockFromISR();
 8006ce4:	f7fe bf7c 	b.w	8005be0 <osalSysUnlockFromISR.lto_priv.0>
    if (usbp->ep0endcb != NULL) {
 8006ce8:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8006cea:	b103      	cbz	r3, 8006cee <_usb_ep0in+0x76>
      usbp->ep0endcb(usbp);
 8006cec:	4798      	blx	r3
    usbp->ep0state = USB_EP0_WAITING_SETUP;
 8006cee:	2300      	movs	r3, #0
 8006cf0:	e7e8      	b.n	8006cc4 <_usb_ep0in+0x4c>
    osalDbgAssert(false, "EP0 state machine error");
 8006cf2:	f7fd fb25 	bl	8004340 <vTaskEndScheduler>
 8006cf6:	e7fe      	b.n	8006cf6 <_usb_ep0in+0x7e>
  EPR_SET_STAT_TX(ep, EPR_STAT_TX_STALL);
 8006cf8:	f248 0080 	movw	r0, #32896	; 0x8080
 8006cfc:	490e      	ldr	r1, [pc, #56]	; (8006d38 <_usb_ep0in+0xc0>)
 8006cfe:	680b      	ldr	r3, [r1, #0]
 8006d00:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
 8006d04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d08:	f083 0210 	eor.w	r2, r3, #16
 8006d0c:	4302      	orrs	r2, r0
 8006d0e:	600a      	str	r2, [r1, #0]
  EPR_SET_STAT_RX(ep, EPR_STAT_RX_STALL);
 8006d10:	680b      	ldr	r3, [r1, #0]
 8006d12:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8006d16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d1a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006d1e:	4303      	orrs	r3, r0
 8006d20:	600b      	str	r3, [r1, #0]
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_STALLED);
 8006d22:	6863      	ldr	r3, [r4, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	b113      	cbz	r3, 8006d2e <_usb_ep0in+0xb6>
 8006d28:	2106      	movs	r1, #6
 8006d2a:	4620      	mov	r0, r4
 8006d2c:	4798      	blx	r3
    usbp->ep0state = USB_EP0_ERROR;
 8006d2e:	2306      	movs	r3, #6
 8006d30:	e7c8      	b.n	8006cc4 <_usb_ep0in+0x4c>
    osalDbgAssert(false, "EP0 state machine invalid state");
 8006d32:	f7fd fb05 	bl	8004340 <vTaskEndScheduler>
 8006d36:	e7fe      	b.n	8006d36 <_usb_ep0in+0xbe>
 8006d38:	40005c00 	.word	0x40005c00

08006d3c <_usb_ep0setup>:
  usbp->ep0state = USB_EP0_WAITING_SETUP;
 8006d3c:	2300      	movs	r3, #0
void _usb_ep0setup(USBDriver *usbp, usbep_t ep) {
 8006d3e:	b570      	push	{r4, r5, r6, lr}
 8006d40:	4604      	mov	r4, r0
  usbp->ep0state = USB_EP0_WAITING_SETUP;
 8006d42:	f880 3064 	strb.w	r3, [r0, #100]	; 0x64
  udp = USB_GET_DESCRIPTOR(ep);
 8006d46:	4bbb      	ldr	r3, [pc, #748]	; (8007034 <_usb_ep0setup+0x2f8>)
  usbReadSetup(usbp, ep, usbp->setup);
 8006d48:	f100 0274 	add.w	r2, r0, #116	; 0x74
 8006d4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d4e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006d52:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8006d56:	eb03 1301 	add.w	r3, r3, r1, lsl #4
  pmap = USB_ADDR2PTR(udp->RXADDR0);
 8006d5a:	689b      	ldr	r3, [r3, #8]
 8006d5c:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8006d60:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8006d64:	005b      	lsls	r3, r3, #1
 8006d66:	f103 0110 	add.w	r1, r3, #16
 8006d6a:	4618      	mov	r0, r3
    *(uint16_t *)buf = (uint16_t)*pmap++;
 8006d6c:	3304      	adds	r3, #4
 8006d6e:	6800      	ldr	r0, [r0, #0]
  for (n = 0; n < 4; n++) {
 8006d70:	428b      	cmp	r3, r1
    *(uint16_t *)buf = (uint16_t)*pmap++;
 8006d72:	f822 0b02 	strh.w	r0, [r2], #2
  for (n = 0; n < 4; n++) {
 8006d76:	d1f8      	bne.n	8006d6a <_usb_ep0setup+0x2e>
  if ((usbp->config->requests_hook_cb == NULL) ||
 8006d78:	6863      	ldr	r3, [r4, #4]
 8006d7a:	689b      	ldr	r3, [r3, #8]
 8006d7c:	bb1b      	cbnz	r3, 8006dc6 <_usb_ep0setup+0x8a>
    if (((usbp->setup[0] & USB_RTYPE_TYPE_MASK) != USB_RTYPE_TYPE_STD) ||
 8006d7e:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 8006d82:	f013 0560 	ands.w	r5, r3, #96	; 0x60
 8006d86:	d044      	beq.n	8006e12 <_usb_ep0setup+0xd6>
  EPR_SET_STAT_TX(ep, EPR_STAT_TX_STALL);
 8006d88:	f248 0080 	movw	r0, #32896	; 0x8080
 8006d8c:	49a9      	ldr	r1, [pc, #676]	; (8007034 <_usb_ep0setup+0x2f8>)
 8006d8e:	680b      	ldr	r3, [r1, #0]
 8006d90:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
 8006d94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d98:	f083 0210 	eor.w	r2, r3, #16
 8006d9c:	4302      	orrs	r2, r0
 8006d9e:	600a      	str	r2, [r1, #0]
  EPR_SET_STAT_RX(ep, EPR_STAT_RX_STALL);
 8006da0:	680b      	ldr	r3, [r1, #0]
 8006da2:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8006da6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006daa:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006dae:	4303      	orrs	r3, r0
 8006db0:	600b      	str	r3, [r1, #0]
      _usb_isr_invoke_event_cb(usbp, USB_EVENT_STALLED);
 8006db2:	6863      	ldr	r3, [r4, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	b113      	cbz	r3, 8006dbe <_usb_ep0setup+0x82>
 8006db8:	2106      	movs	r1, #6
 8006dba:	4620      	mov	r0, r4
 8006dbc:	4798      	blx	r3
      usbp->ep0state = USB_EP0_ERROR;
 8006dbe:	2306      	movs	r3, #6
 8006dc0:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
}
 8006dc4:	bd70      	pop	{r4, r5, r6, pc}
      !(usbp->config->requests_hook_cb(usbp))) {
 8006dc6:	4620      	mov	r0, r4
 8006dc8:	4798      	blx	r3
  if ((usbp->config->requests_hook_cb == NULL) ||
 8006dca:	2800      	cmp	r0, #0
 8006dcc:	d0d7      	beq.n	8006d7e <_usb_ep0setup+0x42>
  hw |= (uint16_t)*p << 8U;
 8006dce:	f894 207b 	ldrb.w	r2, [r4, #123]	; 0x7b
 8006dd2:	f894 307a 	ldrb.w	r3, [r4, #122]	; 0x7a
  max = (size_t)get_hword(&usbp->setup[6]);
 8006dd6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  if (usbp->ep0n > max) {
 8006dda:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8006ddc:	429a      	cmp	r2, r3
    usbp->ep0n = max;
 8006dde:	bf88      	it	hi
 8006de0:	66e3      	strhi	r3, [r4, #108]	; 0x6c
  if ((usbp->setup[0] & USB_RTYPE_DIR_MASK) == USB_RTYPE_DIR_DEV2HOST) {
 8006de2:	f994 3074 	ldrsb.w	r3, [r4, #116]	; 0x74
 8006de6:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	f280 815a 	bge.w	80070a2 <_usb_ep0setup+0x366>
    if (usbp->ep0n != 0U) {
 8006dee:	2900      	cmp	r1, #0
 8006df0:	f000 814b 	beq.w	800708a <_usb_ep0setup+0x34e>
      usbp->ep0state = USB_EP0_TX;
 8006df4:	2301      	movs	r3, #1
 8006df6:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
      osalSysLockFromISR();
 8006dfa:	f7fe fef7 	bl	8005bec <osalSysLockFromISR.lto_priv.0>
      usbStartTransmitI(usbp, 0, usbp->ep0next, usbp->ep0n);
 8006dfe:	e9d4 231a 	ldrd	r2, r3, [r4, #104]	; 0x68
 8006e02:	2100      	movs	r1, #0
 8006e04:	4620      	mov	r0, r4
 8006e06:	f7ff fe73 	bl	8006af0 <usbStartTransmitI>
}
 8006e0a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      osalSysUnlockFromISR();
 8006e0e:	f7fe bee7 	b.w	8005be0 <osalSysUnlockFromISR.lto_priv.0>
           ((uint32_t)usbp->setup[1] << 8U))) {
 8006e12:	f894 2075 	ldrb.w	r2, [r4, #117]	; 0x75
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 8006e16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
                                        USB_RTYPE_TYPE_MASK)) |
 8006e1a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 8006e1e:	f240 3202 	movw	r2, #770	; 0x302
 8006e22:	4293      	cmp	r3, r2
 8006e24:	f000 8110 	beq.w	8007048 <_usb_ep0setup+0x30c>
 8006e28:	d821      	bhi.n	8006e6e <_usb_ep0setup+0x132>
 8006e2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e2e:	d04c      	beq.n	8006eca <_usb_ep0setup+0x18e>
 8006e30:	d80d      	bhi.n	8006e4e <_usb_ep0setup+0x112>
 8006e32:	2b01      	cmp	r3, #1
 8006e34:	d043      	beq.n	8006ebe <_usb_ep0setup+0x182>
 8006e36:	2b02      	cmp	r3, #2
 8006e38:	f000 80b1 	beq.w	8006f9e <_usb_ep0setup+0x262>
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d1a3      	bne.n	8006d88 <_usb_ep0setup+0x4c>
    usbSetupTransfer(usbp, (uint8_t *)&usbp->status, 2, NULL);
 8006e40:	f104 027c 	add.w	r2, r4, #124	; 0x7c
 8006e44:	66a2      	str	r2, [r4, #104]	; 0x68
 8006e46:	2202      	movs	r2, #2
 8006e48:	66e2      	str	r2, [r4, #108]	; 0x6c
    usbSetupTransfer(usbp, NULL, 0, set_address);
 8006e4a:	6723      	str	r3, [r4, #112]	; 0x70
    return true;
 8006e4c:	e7bf      	b.n	8006dce <_usb_ep0setup+0x92>
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 8006e4e:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
 8006e52:	f000 80be 	beq.w	8006fd2 <_usb_ep0setup+0x296>
 8006e56:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006e5a:	d195      	bne.n	8006d88 <_usb_ep0setup+0x4c>
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
 8006e5c:	f894 3076 	ldrb.w	r3, [r4, #118]	; 0x76
 8006e60:	2b01      	cmp	r3, #1
 8006e62:	d191      	bne.n	8006d88 <_usb_ep0setup+0x4c>
      usbp->status |= 2U;
 8006e64:	f8b4 307c 	ldrh.w	r3, [r4, #124]	; 0x7c
 8006e68:	f043 0302 	orr.w	r3, r3, #2
 8006e6c:	e036      	b.n	8006edc <_usb_ep0setup+0x1a0>
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 8006e6e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e72:	d03d      	beq.n	8006ef0 <_usb_ep0setup+0x1b4>
 8006e74:	d81b      	bhi.n	8006eae <_usb_ep0setup+0x172>
 8006e76:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8006e7a:	d035      	beq.n	8006ee8 <_usb_ep0setup+0x1ac>
 8006e7c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006e80:	d182      	bne.n	8006d88 <_usb_ep0setup+0x4c>
  hw |= (uint16_t)*p << 8U;
 8006e82:	f894 2079 	ldrb.w	r2, [r4, #121]	; 0x79
    dp = usbp->config->get_descriptor_cb(usbp, usbp->setup[3],
 8006e86:	6861      	ldr	r1, [r4, #4]
  hw |= (uint16_t)*p << 8U;
 8006e88:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    dp = usbp->config->get_descriptor_cb(usbp, usbp->setup[3],
 8006e8c:	684e      	ldr	r6, [r1, #4]
 8006e8e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8006e92:	4620      	mov	r0, r4
 8006e94:	f894 2076 	ldrb.w	r2, [r4, #118]	; 0x76
 8006e98:	f894 1077 	ldrb.w	r1, [r4, #119]	; 0x77
 8006e9c:	47b0      	blx	r6
    if (dp == NULL) {
 8006e9e:	2800      	cmp	r0, #0
 8006ea0:	f43f af72 	beq.w	8006d88 <_usb_ep0setup+0x4c>
    usbSetupTransfer(usbp, (uint8_t *)dp->ud_string, dp->ud_size, NULL);
 8006ea4:	6843      	ldr	r3, [r0, #4]
 8006ea6:	66a3      	str	r3, [r4, #104]	; 0x68
 8006ea8:	6803      	ldr	r3, [r0, #0]
    usbSetupTransfer(usbp, &usbp->configuration, 1, NULL);
 8006eaa:	66e3      	str	r3, [r4, #108]	; 0x6c
 8006eac:	e01a      	b.n	8006ee4 <_usb_ep0setup+0x1a8>
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 8006eae:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
 8006eb2:	d022      	beq.n	8006efa <_usb_ep0setup+0x1be>
 8006eb4:	f640 4202 	movw	r2, #3074	; 0xc02
 8006eb8:	4293      	cmp	r3, r2
 8006eba:	f47f af65 	bne.w	8006d88 <_usb_ep0setup+0x4c>
    usbSetupTransfer(usbp, (uint8_t *)zero_status, 2, NULL);
 8006ebe:	4b5e      	ldr	r3, [pc, #376]	; (8007038 <_usb_ep0setup+0x2fc>)
        usbSetupTransfer(usbp, (uint8_t *)halted_status, 2, NULL);
 8006ec0:	66a3      	str	r3, [r4, #104]	; 0x68
 8006ec2:	2302      	movs	r3, #2
 8006ec4:	66e3      	str	r3, [r4, #108]	; 0x6c
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	e7bf      	b.n	8006e4a <_usb_ep0setup+0x10e>
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
 8006eca:	f894 3076 	ldrb.w	r3, [r4, #118]	; 0x76
 8006ece:	2b01      	cmp	r3, #1
 8006ed0:	f47f af5a 	bne.w	8006d88 <_usb_ep0setup+0x4c>
      usbp->status &= ~2U;
 8006ed4:	f8b4 307c 	ldrh.w	r3, [r4, #124]	; 0x7c
 8006ed8:	f023 0302 	bic.w	r3, r3, #2
      usbSetupTransfer(usbp, NULL, 0, NULL);
 8006edc:	e9c4 551a 	strd	r5, r5, [r4, #104]	; 0x68
      usbp->status |= 2U;
 8006ee0:	f8a4 307c 	strh.w	r3, [r4, #124]	; 0x7c
    usbSetupTransfer(usbp, &usbp->configuration, 1, NULL);
 8006ee4:	6725      	str	r5, [r4, #112]	; 0x70
    return true;
 8006ee6:	e772      	b.n	8006dce <_usb_ep0setup+0x92>
    usbSetupTransfer(usbp, NULL, 0, set_address);
 8006ee8:	e9c4 551a 	strd	r5, r5, [r4, #104]	; 0x68
 8006eec:	4b53      	ldr	r3, [pc, #332]	; (800703c <_usb_ep0setup+0x300>)
 8006eee:	e7ac      	b.n	8006e4a <_usb_ep0setup+0x10e>
    usbSetupTransfer(usbp, &usbp->configuration, 1, NULL);
 8006ef0:	f104 037f 	add.w	r3, r4, #127	; 0x7f
 8006ef4:	66a3      	str	r3, [r4, #104]	; 0x68
 8006ef6:	2301      	movs	r3, #1
 8006ef8:	e7d7      	b.n	8006eaa <_usb_ep0setup+0x16e>
    if (usbp->configuration != usbp->setup[2]) {
 8006efa:	f894 207f 	ldrb.w	r2, [r4, #127]	; 0x7f
 8006efe:	f894 3076 	ldrb.w	r3, [r4, #118]	; 0x76
 8006f02:	429a      	cmp	r2, r3
 8006f04:	d047      	beq.n	8006f96 <_usb_ep0setup+0x25a>
      if (usbp->state == USB_ACTIVE) {
 8006f06:	7823      	ldrb	r3, [r4, #0]
 8006f08:	2b04      	cmp	r3, #4
 8006f0a:	d137      	bne.n	8006f7c <_usb_ep0setup+0x240>
        osalSysLockFromISR ();
 8006f0c:	f7fe fe6e 	bl	8005bec <osalSysLockFromISR.lto_priv.0>
	__asm volatile( "mrs %0, basepri" : "=r"( ulBasePri ) );
 8006f10:	f3ef 8311 	mrs	r3, BASEPRI
	return (ulBasePri > 0)? pdTRUE : pdFALSE;
 8006f14:	b913      	cbnz	r3, 8006f1c <_usb_ep0setup+0x1e0>
  osalDbgCheckClassI();
 8006f16:	f7fd fa13 	bl	8004340 <vTaskEndScheduler>
 8006f1a:	e7fe      	b.n	8006f1a <_usb_ep0setup+0x1de>
  osalDbgAssert(usbp->state == USB_ACTIVE, "invalid state");
 8006f1c:	7823      	ldrb	r3, [r4, #0]
 8006f1e:	2b04      	cmp	r3, #4
 8006f20:	d002      	beq.n	8006f28 <_usb_ep0setup+0x1ec>
 8006f22:	f7fd fa0d 	bl	8004340 <vTaskEndScheduler>
 8006f26:	e7fe      	b.n	8006f26 <_usb_ep0setup+0x1ea>
  usbp->transmitting &= 1U;
 8006f28:	68a3      	ldr	r3, [r4, #8]
  for (i = 1; i <= USB_ENDOPOINTS_NUMBER; i++) {
 8006f2a:	2201      	movs	r2, #1
 8006f2c:	f003 1301 	and.w	r3, r3, #65537	; 0x10001
 8006f30:	60a3      	str	r3, [r4, #8]
    usbp->epc[i] = NULL;
 8006f32:	2300      	movs	r3, #0
 8006f34:	e9c4 3304 	strd	r3, r3, [r4, #16]
 8006f38:	e9c4 3306 	strd	r3, r3, [r4, #24]
 8006f3c:	e9c4 3308 	strd	r3, r3, [r4, #32]
 8006f40:	62a3      	str	r3, [r4, #40]	; 0x28
  usbp->pmnext = 64;
 8006f42:	2340      	movs	r3, #64	; 0x40
    EPR_TOGGLE(i, 0);
 8006f44:	f248 0080 	movw	r0, #32896	; 0x8080
  usbp->pmnext = 64;
 8006f48:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    EPR_TOGGLE(i, 0);
 8006f4c:	0093      	lsls	r3, r2, #2
 8006f4e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006f52:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8006f56:	6819      	ldr	r1, [r3, #0]
  for (i = 1; i <= USB_ENDOPOINTS_NUMBER; i++) {
 8006f58:	3201      	adds	r2, #1
    EPR_TOGGLE(i, 0);
 8006f5a:	4301      	orrs	r1, r0
  for (i = 1; i <= USB_ENDOPOINTS_NUMBER; i++) {
 8006f5c:	2a08      	cmp	r2, #8
    EPR_TOGGLE(i, 0);
 8006f5e:	6019      	str	r1, [r3, #0]
    EPR_SET(i, 0);
 8006f60:	6018      	str	r0, [r3, #0]
  for (i = 1; i <= USB_ENDOPOINTS_NUMBER; i++) {
 8006f62:	d1f3      	bne.n	8006f4c <_usb_ep0setup+0x210>
        osalSysUnlockFromISR ();
 8006f64:	f7fe fe3c 	bl	8005be0 <osalSysUnlockFromISR.lto_priv.0>
        usbp->configuration = 0U;
 8006f68:	2300      	movs	r3, #0
        usbp->state = USB_SELECTED;
 8006f6a:	2103      	movs	r1, #3
        usbp->configuration = 0U;
 8006f6c:	f884 307f 	strb.w	r3, [r4, #127]	; 0x7f
        _usb_isr_invoke_event_cb(usbp, USB_EVENT_UNCONFIGURED);
 8006f70:	6863      	ldr	r3, [r4, #4]
        usbp->state = USB_SELECTED;
 8006f72:	7021      	strb	r1, [r4, #0]
        _usb_isr_invoke_event_cb(usbp, USB_EVENT_UNCONFIGURED);
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	b10b      	cbz	r3, 8006f7c <_usb_ep0setup+0x240>
 8006f78:	4620      	mov	r0, r4
 8006f7a:	4798      	blx	r3
      if (usbp->setup[2] != 0U) {
 8006f7c:	f894 3076 	ldrb.w	r3, [r4, #118]	; 0x76
 8006f80:	b14b      	cbz	r3, 8006f96 <_usb_ep0setup+0x25a>
        usbp->configuration = usbp->setup[2];
 8006f82:	f884 307f 	strb.w	r3, [r4, #127]	; 0x7f
        usbp->state = USB_ACTIVE;
 8006f86:	2304      	movs	r3, #4
 8006f88:	7023      	strb	r3, [r4, #0]
        _usb_isr_invoke_event_cb(usbp, USB_EVENT_CONFIGURED);
 8006f8a:	6863      	ldr	r3, [r4, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	b113      	cbz	r3, 8006f96 <_usb_ep0setup+0x25a>
 8006f90:	2102      	movs	r1, #2
 8006f92:	4620      	mov	r0, r4
 8006f94:	4798      	blx	r3
    usbSetupTransfer(usbp, NULL, 0, NULL);
 8006f96:	2300      	movs	r3, #0
 8006f98:	e9c4 331a 	strd	r3, r3, [r4, #104]	; 0x68
 8006f9c:	e755      	b.n	8006e4a <_usb_ep0setup+0x10e>
    if ((usbp->setup[4] & 0x80U) != 0U) {
 8006f9e:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
 8006fa2:	f003 020f 	and.w	r2, r3, #15
 8006fa6:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006faa:	4b22      	ldr	r3, [pc, #136]	; (8007034 <_usb_ep0setup+0x2f8>)
  switch (STM32_USB->EPR[ep] & EPR_STAT_TX_MASK) {
 8006fac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fb0:	d008      	beq.n	8006fc4 <_usb_ep0setup+0x288>
 8006fb2:	f013 0330 	ands.w	r3, r3, #48	; 0x30
 8006fb6:	f43f aee7 	beq.w	8006d88 <_usb_ep0setup+0x4c>
 8006fba:	2b10      	cmp	r3, #16
        usbSetupTransfer(usbp, (uint8_t *)active_status, 2, NULL);
 8006fbc:	bf14      	ite	ne
 8006fbe:	4b20      	ldrne	r3, [pc, #128]	; (8007040 <_usb_ep0setup+0x304>)
        usbSetupTransfer(usbp, (uint8_t *)halted_status, 2, NULL);
 8006fc0:	4b20      	ldreq	r3, [pc, #128]	; (8007044 <_usb_ep0setup+0x308>)
 8006fc2:	e77d      	b.n	8006ec0 <_usb_ep0setup+0x184>
  switch (STM32_USB->EPR[ep] & EPR_STAT_RX_MASK) {
 8006fc4:	f413 5340 	ands.w	r3, r3, #12288	; 0x3000
 8006fc8:	f43f aede 	beq.w	8006d88 <_usb_ep0setup+0x4c>
 8006fcc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fd0:	e7f4      	b.n	8006fbc <_usb_ep0setup+0x280>
    if (usbp->setup[2] != USB_FEATURE_ENDPOINT_HALT) {
 8006fd2:	f894 3076 	ldrb.w	r3, [r4, #118]	; 0x76
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	f47f aed6 	bne.w	8006d88 <_usb_ep0setup+0x4c>
    if ((usbp->setup[4] & 0x0FU) != 0U) {
 8006fdc:	f894 2078 	ldrb.w	r2, [r4, #120]	; 0x78
 8006fe0:	f012 030f 	ands.w	r3, r2, #15
 8006fe4:	d0d7      	beq.n	8006f96 <_usb_ep0setup+0x25a>
      if ((usbp->setup[4] & 0x80U) != 0U) {
 8006fe6:	009b      	lsls	r3, r3, #2
 8006fe8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006fec:	f012 0f80 	tst.w	r2, #128	; 0x80
 8006ff0:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00

  (void)usbp;

  /* Makes sure to not put to NAK an endpoint that is already
     transferring.*/
  if ((STM32_USB->EPR[ep] & EPR_STAT_TX_MASK) != EPR_STAT_TX_VALID)
 8006ff4:	681a      	ldr	r2, [r3, #0]
 8006ff6:	d00d      	beq.n	8007014 <_usb_ep0setup+0x2d8>
 8006ff8:	f002 0230 	and.w	r2, r2, #48	; 0x30
 8006ffc:	2a30      	cmp	r2, #48	; 0x30
 8006ffe:	d0ca      	beq.n	8006f96 <_usb_ep0setup+0x25a>
    EPR_SET_STAT_TX(ep, EPR_STAT_TX_NAK);
 8007000:	681a      	ldr	r2, [r3, #0]
 8007002:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
 8007006:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800700a:	f082 0220 	eor.w	r2, r2, #32
  EPR_SET_STAT_TX(ep, EPR_STAT_TX_STALL);
 800700e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007012:	e00b      	b.n	800702c <_usb_ep0setup+0x2f0>
  if ((STM32_USB->EPR[ep] & EPR_STAT_RX_MASK) != EPR_STAT_RX_VALID)
 8007014:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
 8007018:	f5b2 5f40 	cmp.w	r2, #12288	; 0x3000
 800701c:	d0bb      	beq.n	8006f96 <_usb_ep0setup+0x25a>
    EPR_SET_STAT_TX(ep, EPR_STAT_RX_NAK);
 800701e:	681a      	ldr	r2, [r3, #0]
 8007020:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
 8007024:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007028:	f442 4220 	orr.w	r2, r2, #40960	; 0xa000
  EPR_SET_STAT_TX(ep, EPR_STAT_TX_STALL);
 800702c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007030:	601a      	str	r2, [r3, #0]
 8007032:	e7b0      	b.n	8006f96 <_usb_ep0setup+0x25a>
 8007034:	40005c00 	.word	0x40005c00
 8007038:	0800cbac 	.word	0x0800cbac
 800703c:	080070c5 	.word	0x080070c5
 8007040:	0800c750 	.word	0x0800c750
 8007044:	0800c8c8 	.word	0x0800c8c8
    if (usbp->setup[2] != USB_FEATURE_ENDPOINT_HALT) {
 8007048:	f894 3076 	ldrb.w	r3, [r4, #118]	; 0x76
 800704c:	2b00      	cmp	r3, #0
 800704e:	f47f ae9b 	bne.w	8006d88 <_usb_ep0setup+0x4c>
    if ((usbp->setup[4] & 0x0FU) != 0U) {
 8007052:	f894 2078 	ldrb.w	r2, [r4, #120]	; 0x78
 8007056:	f012 030f 	ands.w	r3, r2, #15
 800705a:	d09c      	beq.n	8006f96 <_usb_ep0setup+0x25a>
      if ((usbp->setup[4] & 0x80U) != 0U) {
 800705c:	009b      	lsls	r3, r3, #2
 800705e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007062:	f012 0f80 	tst.w	r2, #128	; 0x80
 8007066:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 800706a:	681a      	ldr	r2, [r3, #0]
 800706c:	d006      	beq.n	800707c <_usb_ep0setup+0x340>
 800706e:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
 8007072:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007076:	f082 0210 	eor.w	r2, r2, #16
 800707a:	e7c8      	b.n	800700e <_usb_ep0setup+0x2d2>
  EPR_SET_STAT_RX(ep, EPR_STAT_RX_STALL);
 800707c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007080:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8007084:	f482 5280 	eor.w	r2, r2, #4096	; 0x1000
 8007088:	e7c1      	b.n	800700e <_usb_ep0setup+0x2d2>
      usbp->ep0state = USB_EP0_WAITING_STS;
 800708a:	2303      	movs	r3, #3
 800708c:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
      osalSysLockFromISR();
 8007090:	f7fe fdac 	bl	8005bec <osalSysLockFromISR.lto_priv.0>
      usbStartReceiveI(usbp, 0, NULL, 0);
 8007094:	460b      	mov	r3, r1
 8007096:	460a      	mov	r2, r1
      usbStartReceiveI(usbp, 0, usbp->ep0next, usbp->ep0n);
 8007098:	2100      	movs	r1, #0
 800709a:	4620      	mov	r0, r4
 800709c:	f7ff fdb0 	bl	8006c00 <usbStartReceiveI>
      osalSysUnlockFromISR();
 80070a0:	e6b3      	b.n	8006e0a <_usb_ep0setup+0xce>
    if (usbp->ep0n != 0U) {
 80070a2:	b139      	cbz	r1, 80070b4 <_usb_ep0setup+0x378>
      usbp->ep0state = USB_EP0_RX;
 80070a4:	2304      	movs	r3, #4
 80070a6:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
      osalSysLockFromISR();
 80070aa:	f7fe fd9f 	bl	8005bec <osalSysLockFromISR.lto_priv.0>
      usbStartReceiveI(usbp, 0, usbp->ep0next, usbp->ep0n);
 80070ae:	e9d4 231a 	ldrd	r2, r3, [r4, #104]	; 0x68
 80070b2:	e7f1      	b.n	8007098 <_usb_ep0setup+0x35c>
      usbp->ep0state = USB_EP0_SENDING_STS;
 80070b4:	2305      	movs	r3, #5
 80070b6:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
      osalSysLockFromISR();
 80070ba:	f7fe fd97 	bl	8005bec <osalSysLockFromISR.lto_priv.0>
      usbStartTransmitI(usbp, 0, NULL, 0);
 80070be:	460b      	mov	r3, r1
 80070c0:	460a      	mov	r2, r1
 80070c2:	e69e      	b.n	8006e02 <_usb_ep0setup+0xc6>

080070c4 <set_address>:
  usbp->address = usbp->setup[2];
 80070c4:	f890 3076 	ldrb.w	r3, [r0, #118]	; 0x76
  STM32_USB->DADDR = (uint32_t)(usbp->address) | DADDR_EF;
 80070c8:	4a07      	ldr	r2, [pc, #28]	; (80070e8 <set_address+0x24>)
 80070ca:	f880 307e 	strb.w	r3, [r0, #126]	; 0x7e
 80070ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
static void set_address(USBDriver *usbp) {
 80070d2:	b510      	push	{r4, lr}
 80070d4:	64d3      	str	r3, [r2, #76]	; 0x4c
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_ADDRESS);
 80070d6:	6843      	ldr	r3, [r0, #4]
static void set_address(USBDriver *usbp) {
 80070d8:	4604      	mov	r4, r0
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_ADDRESS);
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	b10b      	cbz	r3, 80070e2 <set_address+0x1e>
 80070de:	2101      	movs	r1, #1
 80070e0:	4798      	blx	r3
  usbp->state = USB_SELECTED;
 80070e2:	2303      	movs	r3, #3
 80070e4:	7023      	strb	r3, [r4, #0]
}
 80070e6:	bd10      	pop	{r4, pc}
 80070e8:	40005c00 	.word	0x40005c00

080070ec <spiReceive.part.0>:
  osalDbgCheck((spip != NULL) && (n > 0U) && (rxbuf != NULL));

  osalSysLock();
  osalDbgAssert(spip->state == SPI_READY, "not ready");
  osalDbgAssert(spip->config->end_cb == NULL, "has callback");
  spiStartReceiveI(spip, n, rxbuf);
 80070ec:	2303      	movs	r3, #3
void spiReceive(SPIDriver *spip, size_t n, void *rxbuf) {
 80070ee:	b510      	push	{r4, lr}
  spiStartReceiveI(spip, n, rxbuf);
 80070f0:	7003      	strb	r3, [r0, #0]
 */
void spi_lld_receive(SPIDriver *spip, size_t n, void *rxbuf) {

  osalDbgAssert(n < 65536, "unsupported DMA transfer size");

  dmaStreamSetMemory0(spip->dmarx, rxbuf);
 80070f2:	6e43      	ldr	r3, [r0, #100]	; 0x64
 80070f4:	3008      	adds	r0, #8
 80070f6:	685c      	ldr	r4, [r3, #4]
  dmaStreamSetTransactionSize(spip->dmarx, n);
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode | STM32_DMA_CR_MINC);
 80070f8:	6e43      	ldr	r3, [r0, #100]	; 0x64
  dmaStreamSetMemory0(spip->dmarx, rxbuf);
 80070fa:	60e2      	str	r2, [r4, #12]
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode | STM32_DMA_CR_MINC);
 80070fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  dmaStreamSetTransactionSize(spip->dmarx, n);
 8007100:	6061      	str	r1, [r4, #4]
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode | STM32_DMA_CR_MINC);
 8007102:	6023      	str	r3, [r4, #0]

  dmaStreamSetMemory0(spip->dmatx, &dummytx);
 8007104:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8007106:	4a0b      	ldr	r2, [pc, #44]	; (8007134 <spiReceive.part.0+0x48>)
 8007108:	685b      	ldr	r3, [r3, #4]
 800710a:	60da      	str	r2, [r3, #12]
  dmaStreamSetTransactionSize(spip->dmatx, n);
  dmaStreamSetMode(spip->dmatx, spip->txdmamode);
 800710c:	6e82      	ldr	r2, [r0, #104]	; 0x68
  dmaStreamSetTransactionSize(spip->dmatx, n);
 800710e:	6059      	str	r1, [r3, #4]
  dmaStreamSetMode(spip->dmatx, spip->txdmamode);
 8007110:	601a      	str	r2, [r3, #0]

  dmaStreamEnable(spip->dmarx);
 8007112:	6822      	ldr	r2, [r4, #0]
 8007114:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007118:	f042 0201 	orr.w	r2, r2, #1
 800711c:	6022      	str	r2, [r4, #0]
  dmaStreamEnable(spip->dmatx);
 800711e:	681a      	ldr	r2, [r3, #0]
 8007120:	f042 0201 	orr.w	r2, r2, #1
 8007124:	601a      	str	r2, [r3, #0]
 8007126:	f7fd faef 	bl	8004708 <osalThreadSuspendTimeoutS>
  (void) osalThreadSuspendS(&spip->thread);
  osalSysUnlock();
}
 800712a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  osalSysUnlock();
 800712e:	f7fe bb91 	b.w	8005854 <osalSysUnlock.lto_priv.0>
 8007132:	bf00      	nop
 8007134:	0800c81c 	.word	0x0800c81c

08007138 <sduInterruptTransmitted>:
 */
void sduInterruptTransmitted(USBDriver *usbp, usbep_t ep) {

  (void)usbp;
  (void)ep;
}
 8007138:	4770      	bx	lr
	...

0800713c <sduRequestsHook>:
  if ((usbp->setup[0] & USB_RTYPE_TYPE_MASK) == USB_RTYPE_TYPE_CLASS) {
 800713c:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
bool sduRequestsHook(USBDriver *usbp) {
 8007140:	4603      	mov	r3, r0
  if ((usbp->setup[0] & USB_RTYPE_TYPE_MASK) == USB_RTYPE_TYPE_CLASS) {
 8007142:	f002 0260 	and.w	r2, r2, #96	; 0x60
 8007146:	2a20      	cmp	r2, #32
 8007148:	d114      	bne.n	8007174 <sduRequestsHook+0x38>
    switch (usbp->setup[1]) {
 800714a:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
 800714e:	2000      	movs	r0, #0
 8007150:	2a21      	cmp	r2, #33	; 0x21
 8007152:	d802      	bhi.n	800715a <sduRequestsHook+0x1e>
 8007154:	2a1f      	cmp	r2, #31
 8007156:	d803      	bhi.n	8007160 <sduRequestsHook+0x24>
 8007158:	4770      	bx	lr
 800715a:	2a22      	cmp	r2, #34	; 0x22
 800715c:	d007      	beq.n	800716e <sduRequestsHook+0x32>
 800715e:	4770      	bx	lr
      usbSetupTransfer(usbp, (uint8_t *)&linecoding, sizeof(linecoding), NULL);
 8007160:	4a05      	ldr	r2, [pc, #20]	; (8007178 <sduRequestsHook+0x3c>)
 8007162:	669a      	str	r2, [r3, #104]	; 0x68
 8007164:	2207      	movs	r2, #7
 8007166:	66da      	str	r2, [r3, #108]	; 0x6c
      usbSetupTransfer(usbp, NULL, 0, NULL);
 8007168:	6718      	str	r0, [r3, #112]	; 0x70
      return true;
 800716a:	2001      	movs	r0, #1
 800716c:	4770      	bx	lr
      usbSetupTransfer(usbp, NULL, 0, NULL);
 800716e:	e9c3 001a 	strd	r0, r0, [r3, #104]	; 0x68
 8007172:	e7f9      	b.n	8007168 <sduRequestsHook+0x2c>
  return false;
 8007174:	2000      	movs	r0, #0
}
 8007176:	4770      	bx	lr
 8007178:	20000850 	.word	0x20000850

0800717c <sdu_start_receive>:
static bool sdu_start_receive(SerialUSBDriver *sdup) {
 800717c:	b538      	push	{r3, r4, r5, lr}
  if ((usbGetDriverStateI(sdup->config->usbp) != USB_ACTIVE) ||
 800717e:	f8d0 1498 	ldr.w	r1, [r0, #1176]	; 0x498
static bool sdu_start_receive(SerialUSBDriver *sdup) {
 8007182:	4603      	mov	r3, r0
  if ((usbGetDriverStateI(sdup->config->usbp) != USB_ACTIVE) ||
 8007184:	680c      	ldr	r4, [r1, #0]
 8007186:	7822      	ldrb	r2, [r4, #0]
 8007188:	2a04      	cmp	r2, #4
 800718a:	d11e      	bne.n	80071ca <sdu_start_receive+0x4e>
 800718c:	7d02      	ldrb	r2, [r0, #20]
 800718e:	2a02      	cmp	r2, #2
 8007190:	d11b      	bne.n	80071ca <sdu_start_receive+0x4e>
  if (usbGetReceiveStatusI(sdup->config->usbp, sdup->config->bulk_in)) {
 8007192:	2001      	movs	r0, #1
 8007194:	790a      	ldrb	r2, [r1, #4]
 8007196:	8965      	ldrh	r5, [r4, #10]
 8007198:	fa00 f202 	lsl.w	r2, r0, r2
 800719c:	422a      	tst	r2, r5
 800719e:	d110      	bne.n	80071c2 <sdu_start_receive+0x46>
	__asm volatile( "mrs %0, basepri" : "=r"( ulBasePri ) );
 80071a0:	f3ef 8211 	mrs	r2, BASEPRI
	return (ulBasePri > 0)? pdTRUE : pdFALSE;
 80071a4:	b172      	cbz	r2, 80071c4 <sdu_start_receive+0x48>
 */
uint8_t *ibqGetEmptyBufferI(input_buffers_queue_t *ibqp) {

  osalDbgCheckClassI();

  if (ibqIsFullI(ibqp)) {
 80071a6:	e9d3 250a 	ldrd	r2, r5, [r3, #40]	; 0x28
 80071aa:	42aa      	cmp	r2, r5
 80071ac:	d101      	bne.n	80071b2 <sdu_start_receive+0x36>
 80071ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071b0:	b93b      	cbnz	r3, 80071c2 <sdu_start_receive+0x46>
  usbStartReceiveI(sdup->config->usbp, sdup->config->bulk_out,
 80071b2:	4620      	mov	r0, r4
 80071b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80071b8:	7949      	ldrb	r1, [r1, #5]
 80071ba:	3204      	adds	r2, #4
 80071bc:	f7ff fd20 	bl	8006c00 <usbStartReceiveI>
  return false;
 80071c0:	2000      	movs	r0, #0
}
 80071c2:	bd38      	pop	{r3, r4, r5, pc}
  osalDbgCheckClassI();
 80071c4:	f7fd f8bc 	bl	8004340 <vTaskEndScheduler>
 80071c8:	e7fe      	b.n	80071c8 <sdu_start_receive+0x4c>
    return true;
 80071ca:	2001      	movs	r0, #1
 80071cc:	e7f9      	b.n	80071c2 <sdu_start_receive+0x46>

080071ce <ibnotify>:
  (void) sdu_start_receive(sdup);
 80071ce:	6b40      	ldr	r0, [r0, #52]	; 0x34
 80071d0:	f7ff bfd4 	b.w	800717c <sdu_start_receive>

080071d4 <sduDataReceived>:
  SerialUSBDriver *sdup = usbp->out_params[ep - 1U];
 80071d4:	3111      	adds	r1, #17
void sduDataReceived(USBDriver *usbp, usbep_t ep) {
 80071d6:	b510      	push	{r4, lr}
  SerialUSBDriver *sdup = usbp->out_params[ep - 1U];
 80071d8:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
  if (sdup == NULL) {
 80071dc:	2c00      	cmp	r4, #0
 80071de:	d03d      	beq.n	800725c <sduDataReceived+0x88>
  osalSysLockFromISR();
 80071e0:	f7fe fd04 	bl	8005bec <osalSysLockFromISR.lto_priv.0>
  chnAddFlagsI(sdup, CHN_INPUT_AVAILABLE);
 80071e4:	2104      	movs	r1, #4
 80071e6:	1860      	adds	r0, r4, r1
 80071e8:	f7fd f98d 	bl	8004506 <osalEventBroadcastFlagsI>
	__asm volatile( "mrs %0, basepri" : "=r"( ulBasePri ) );
 80071ec:	f3ef 8311 	mrs	r3, BASEPRI
	return (ulBasePri > 0)? pdTRUE : pdFALSE;
 80071f0:	b163      	cbz	r3, 800720c <sduDataReceived+0x38>
                     usbGetReceiveTransactionSizeX(sdup->config->usbp,
 80071f2:	f8d4 2498 	ldr.w	r2, [r4, #1176]	; 0x498
 80071f6:	6813      	ldr	r3, [r2, #0]
 80071f8:	7952      	ldrb	r2, [r2, #5]
 80071fa:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80071fe:	68db      	ldr	r3, [r3, #12]
  ibqPostFullBufferI(&sdup->ibqueue,
 8007200:	699b      	ldr	r3, [r3, #24]
 8007202:	685a      	ldr	r2, [r3, #4]
 */
void ibqPostFullBufferI(input_buffers_queue_t *ibqp, size_t size) {

  osalDbgCheckClassI();

  osalDbgCheck((size > 0U) && (size <= (ibqp->bsize - sizeof (size_t))));
 8007204:	b92a      	cbnz	r2, 8007212 <sduDataReceived+0x3e>
 8007206:	f7fd f89b 	bl	8004340 <vTaskEndScheduler>
 800720a:	e7fe      	b.n	800720a <sduDataReceived+0x36>
  osalDbgCheckClassI();
 800720c:	f7fd f898 	bl	8004340 <vTaskEndScheduler>
 8007210:	e7fe      	b.n	8007210 <sduDataReceived+0x3c>
  osalDbgCheck((size > 0U) && (size <= (ibqp->bsize - sizeof (size_t))));
 8007212:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007214:	3b04      	subs	r3, #4
 8007216:	429a      	cmp	r2, r3
 8007218:	d8f5      	bhi.n	8007206 <sduDataReceived+0x32>
  osalDbgAssert(!ibqIsFullI(ibqp), "buffers queue full");
 800721a:	e9d4 310a 	ldrd	r3, r1, [r4, #40]	; 0x28
 800721e:	428b      	cmp	r3, r1
 8007220:	d104      	bne.n	800722c <sduDataReceived+0x58>
 8007222:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007224:	b111      	cbz	r1, 800722c <sduDataReceived+0x58>
 8007226:	f7fd f88b 	bl	8004340 <vTaskEndScheduler>
 800722a:	e7fe      	b.n	800722a <sduDataReceived+0x56>

  /* Writing size field in the buffer.*/
  *((size_t *)ibqp->bwrptr) = size;
 800722c:	601a      	str	r2, [r3, #0]

  /* Posting the buffer in the queue.*/
  ibqp->bcounter++;
 800722e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8007230:	3201      	adds	r2, #1
 8007232:	6262      	str	r2, [r4, #36]	; 0x24
  ibqp->bwrptr += ibqp->bsize;
 8007234:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8007236:	4413      	add	r3, r2
  if (ibqp->bwrptr >= ibqp->btop) {
 8007238:	6b22      	ldr	r2, [r4, #48]	; 0x30
  ibqp->bwrptr += ibqp->bsize;
 800723a:	62a3      	str	r3, [r4, #40]	; 0x28
  if (ibqp->bwrptr >= ibqp->btop) {
 800723c:	4293      	cmp	r3, r2
 800723e:	d20a      	bcs.n	8007256 <sduDataReceived+0x82>
    ibqp->bwrptr = ibqp->buffers;
  }

  /* Waking up one waiting thread, if any.*/
  osalThreadDequeueNextI(&ibqp->waiting, MSG_OK);
 8007240:	f104 0018 	add.w	r0, r4, #24
 8007244:	f7fd f9b7 	bl	80045b6 <osalThreadDequeueNextI.constprop.0>
  (void) sdu_start_receive(sdup);
 8007248:	4620      	mov	r0, r4
 800724a:	f7ff ff97 	bl	800717c <sdu_start_receive>
}
 800724e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  osalSysUnlockFromISR();
 8007252:	f7fe bcc5 	b.w	8005be0 <osalSysUnlockFromISR.lto_priv.0>
    ibqp->bwrptr = ibqp->buffers;
 8007256:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007258:	62a3      	str	r3, [r4, #40]	; 0x28
 800725a:	e7f1      	b.n	8007240 <sduDataReceived+0x6c>
}
 800725c:	bd10      	pop	{r4, pc}
	...

08007260 <osalOsRescheduleS.lto_priv.1>:
{
 8007260:	b508      	push	{r3, lr}
	__asm volatile( "mrs %0, basepri" : "=r"( ulBasePri ) );
 8007262:	f3ef 8311 	mrs	r3, BASEPRI
	return (ulBasePri > 0)? pdTRUE : pdFALSE;
 8007266:	b12b      	cbz	r3, 8007274 <osalOsRescheduleS.lto_priv.1+0x14>
	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 8007268:	f3ef 8205 	mrs	r2, IPSR
	if( ulCurrentInterrupt == 0 )
 800726c:	b12a      	cbz	r2, 800727a <osalOsRescheduleS.lto_priv.1+0x1a>
    osalDbgCheckClassS();
 800726e:	f7fd f867 	bl	8004340 <vTaskEndScheduler>
 8007272:	e7fe      	b.n	8007272 <osalOsRescheduleS.lto_priv.1+0x12>
 8007274:	f7fd f864 	bl	8004340 <vTaskEndScheduler>
 8007278:	e7fe      	b.n	8007278 <osalOsRescheduleS.lto_priv.1+0x18>
 800727a:	4b04      	ldr	r3, [pc, #16]	; (800728c <osalOsRescheduleS.lto_priv.1+0x2c>)
 800727c:	6819      	ldr	r1, [r3, #0]
 800727e:	601a      	str	r2, [r3, #0]
    if(uxYieldPending()) taskYIELD();
 8007280:	b119      	cbz	r1, 800728a <osalOsRescheduleS.lto_priv.1+0x2a>
}
 8007282:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8007286:	f7ff b933 	b.w	80064f0 <Vector6C.part.0>
 800728a:	bd08      	pop	{r3, pc}
 800728c:	2000164c 	.word	0x2000164c

08007290 <i2cAcquireBus>:
 *
 * @param[in] i2cp      pointer to the @p I2CDriver object
 *
 * @api
 */
void i2cAcquireBus(I2CDriver *i2cp) {
 8007290:	b508      	push	{r3, lr}

  osalDbgCheck(i2cp != NULL);
 8007292:	b910      	cbnz	r0, 800729a <i2cAcquireBus+0xa>
 8007294:	f7fd f854 	bl	8004340 <vTaskEndScheduler>
 8007298:	e7fe      	b.n	8007298 <i2cAcquireBus+0x8>
    xSemaphoreTake(mutex->handle, portMAX_DELAY);
 800729a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff

  osalMutexLock(&i2cp->mutex);
}
 800729e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80072a2:	68c0      	ldr	r0, [r0, #12]
 80072a4:	f7fd bd82 	b.w	8004dac <xQueueSemaphoreTake>

080072a8 <oqWriteTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t oqWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
                      size_t n, systime_t timeout) {
 80072a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072ac:	4604      	mov	r4, r0
 80072ae:	460d      	mov	r5, r1
 80072b0:	461f      	mov	r7, r3
  systime_t deadline;
  qnotify_t nfy = oqp->q_notify;
  size_t w = 0;

  osalDbgCheck(n > 0U);
 80072b2:	4616      	mov	r6, r2
 80072b4:	b912      	cbnz	r2, 80072bc <oqWriteTimeout+0x14>
 80072b6:	f7fd f843 	bl	8004340 <vTaskEndScheduler>
 80072ba:	e7fe      	b.n	80072ba <oqWriteTimeout+0x12>
  qnotify_t nfy = oqp->q_notify;
 80072bc:	f8d0 a01c 	ldr.w	sl, [r0, #28]

  osalSysLock();
 80072c0:	f7fc ff90 	bl	80041e4 <vPortEnterCritical>
 80072c4:	f7fc ff0e 	bl	80040e4 <vPortValidateInterruptPriority>
 80072c8:	4b1f      	ldr	r3, [pc, #124]	; (8007348 <oqWriteTimeout+0xa0>)
  size_t w = 0;
 80072ca:	f04f 0900 	mov.w	r9, #0
 80072ce:	4698      	mov	r8, r3
 80072d0:	681a      	ldr	r2, [r3, #0]
    msg_t msg;

    while (oqIsFullI(oqp)) {
      /* TIME_INFINITE and TIME_IMMEDIATE are handled differently, no
         deadline.*/
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
 80072d2:	f107 3bff 	add.w	fp, r7, #4294967295	; 0xffffffff
  deadline = osalOsGetSystemTimeX() + timeout;
 80072d6:	18ba      	adds	r2, r7, r2
 80072d8:	9201      	str	r2, [sp, #4]
    while (oqIsFullI(oqp)) {
 80072da:	68a3      	ldr	r3, [r4, #8]
 80072dc:	b1e3      	cbz	r3, 8007318 <oqWriteTimeout+0x70>
        return w;
      }
    }

    /* Putting the character into the queue.*/
    oqp->q_counter--;
 80072de:	68a3      	ldr	r3, [r4, #8]
 80072e0:	3b01      	subs	r3, #1
 80072e2:	60a3      	str	r3, [r4, #8]
    *oqp->q_wrptr++ = *bp++;
 80072e4:	6963      	ldr	r3, [r4, #20]
 80072e6:	1c5a      	adds	r2, r3, #1
 80072e8:	6162      	str	r2, [r4, #20]
 80072ea:	f815 2b01 	ldrb.w	r2, [r5], #1
 80072ee:	701a      	strb	r2, [r3, #0]
    if (oqp->q_wrptr >= oqp->q_top) {
 80072f0:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 80072f4:	429a      	cmp	r2, r3
      oqp->q_wrptr = oqp->q_buffer;
 80072f6:	bf24      	itt	cs
 80072f8:	68e3      	ldrcs	r3, [r4, #12]
 80072fa:	6163      	strcs	r3, [r4, #20]
    }

    /* Inform the low side that the queue has at least one character available.*/
    if (nfy != NULL) {
 80072fc:	f1ba 0f00 	cmp.w	sl, #0
 8007300:	d001      	beq.n	8007306 <oqWriteTimeout+0x5e>
      nfy(oqp);
 8007302:	4620      	mov	r0, r4
 8007304:	47d0      	blx	sl
    }

    /* Giving a preemption chance in a controlled point.*/
    osalSysUnlock();
 8007306:	f7fe faa5 	bl	8005854 <osalSysUnlock.lto_priv.0>

    w++;
    if (--n == 0U) {
 800730a:	3e01      	subs	r6, #1
    w++;
 800730c:	f109 0901 	add.w	r9, r9, #1
    if (--n == 0U) {
 8007310:	d016      	beq.n	8007340 <oqWriteTimeout+0x98>
      return w;
    }

    osalSysLock();
 8007312:	f7fc ff67 	bl	80041e4 <vPortEnterCritical>
  while (true) {
 8007316:	e7e0      	b.n	80072da <oqWriteTimeout+0x32>
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
 8007318:	f11b 0f03 	cmn.w	fp, #3
 800731c:	d906      	bls.n	800732c <oqWriteTimeout+0x84>
        msg = osalThreadEnqueueTimeoutS(&oqp->q_waiting, timeout);
 800731e:	4639      	mov	r1, r7
        msg = osalThreadEnqueueTimeoutS(&oqp->q_waiting, next_timeout);
 8007320:	4620      	mov	r0, r4
 8007322:	f7fd fa1b 	bl	800475c <osalThreadEnqueueTimeoutS>
      if (msg != MSG_OK) {
 8007326:	2800      	cmp	r0, #0
 8007328:	d0d7      	beq.n	80072da <oqWriteTimeout+0x32>
 800732a:	e007      	b.n	800733c <oqWriteTimeout+0x94>
 800732c:	f7fc feda 	bl	80040e4 <vPortValidateInterruptPriority>
 8007330:	f8d8 1000 	ldr.w	r1, [r8]
        systime_t next_timeout = deadline - osalOsGetSystemTimeX();
 8007334:	9b01      	ldr	r3, [sp, #4]
 8007336:	1a59      	subs	r1, r3, r1
        if (next_timeout > timeout) {
 8007338:	428f      	cmp	r7, r1
 800733a:	d2f1      	bcs.n	8007320 <oqWriteTimeout+0x78>
        osalSysUnlock();
 800733c:	f7fe fa8a 	bl	8005854 <osalSysUnlock.lto_priv.0>
  }
}
 8007340:	4648      	mov	r0, r9
 8007342:	b003      	add	sp, #12
 8007344:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007348:	20001648 	.word	0x20001648

0800734c <_writet.lto_priv.0>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
}

static size_t _writet(void *ip, const uint8_t *bp, size_t n, systime_t timeout) {

  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp, n, timeout);
 800734c:	303c      	adds	r0, #60	; 0x3c
 800734e:	f7ff bfab 	b.w	80072a8 <oqWriteTimeout>

08007352 <_write.lto_priv.0>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp,
 8007352:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007356:	303c      	adds	r0, #60	; 0x3c
 8007358:	f7ff bfa6 	b.w	80072a8 <oqWriteTimeout>

0800735c <oqPutTimeout>:
msg_t oqPutTimeout(output_queue_t *oqp, uint8_t b, systime_t timeout) {
 800735c:	b570      	push	{r4, r5, r6, lr}
 800735e:	4604      	mov	r4, r0
 8007360:	460d      	mov	r5, r1
 8007362:	4616      	mov	r6, r2
  osalSysLock();
 8007364:	f7fc ff3e 	bl	80041e4 <vPortEnterCritical>
  while (oqIsFullI(oqp)) {
 8007368:	68a3      	ldr	r3, [r4, #8]
 800736a:	b1a3      	cbz	r3, 8007396 <oqPutTimeout+0x3a>
  oqp->q_counter--;
 800736c:	68a3      	ldr	r3, [r4, #8]
 800736e:	3b01      	subs	r3, #1
 8007370:	60a3      	str	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
 8007372:	6963      	ldr	r3, [r4, #20]
 8007374:	1c5a      	adds	r2, r3, #1
 8007376:	6162      	str	r2, [r4, #20]
 8007378:	701d      	strb	r5, [r3, #0]
  if (oqp->q_wrptr >= oqp->q_top) {
 800737a:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800737e:	429a      	cmp	r2, r3
    oqp->q_wrptr = oqp->q_buffer;
 8007380:	bf24      	itt	cs
 8007382:	68e3      	ldrcs	r3, [r4, #12]
 8007384:	6163      	strcs	r3, [r4, #20]
  if (oqp->q_notify != NULL) {
 8007386:	69e3      	ldr	r3, [r4, #28]
 8007388:	b10b      	cbz	r3, 800738e <oqPutTimeout+0x32>
    oqp->q_notify(oqp);
 800738a:	4620      	mov	r0, r4
 800738c:	4798      	blx	r3
  osalSysUnlock();
 800738e:	f7fe fa61 	bl	8005854 <osalSysUnlock.lto_priv.0>
 8007392:	2000      	movs	r0, #0
 8007394:	e007      	b.n	80073a6 <oqPutTimeout+0x4a>
    msg_t msg = osalThreadEnqueueTimeoutS(&oqp->q_waiting, timeout);
 8007396:	4631      	mov	r1, r6
 8007398:	4620      	mov	r0, r4
 800739a:	f7fd f9df 	bl	800475c <osalThreadEnqueueTimeoutS>
    if (msg < MSG_OK) {
 800739e:	2800      	cmp	r0, #0
 80073a0:	dae2      	bge.n	8007368 <oqPutTimeout+0xc>
      osalSysUnlock();
 80073a2:	f7fe fa57 	bl	8005854 <osalSysUnlock.lto_priv.0>
}
 80073a6:	bd70      	pop	{r4, r5, r6, pc}

080073a8 <_putt.lto_priv.0>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, timeout);
 80073a8:	303c      	adds	r0, #60	; 0x3c
 80073aa:	f7ff bfd7 	b.w	800735c <oqPutTimeout>

080073ae <_put.lto_priv.0>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
 80073ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80073b2:	303c      	adds	r0, #60	; 0x3c
 80073b4:	f7ff bfd2 	b.w	800735c <oqPutTimeout>

080073b8 <iqReadTimeout>:
                     size_t n, systime_t timeout) {
 80073b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073bc:	4604      	mov	r4, r0
 80073be:	460d      	mov	r5, r1
 80073c0:	461f      	mov	r7, r3
  osalDbgCheck(n > 0U);
 80073c2:	4616      	mov	r6, r2
 80073c4:	b912      	cbnz	r2, 80073cc <iqReadTimeout+0x14>
 80073c6:	f7fc ffbb 	bl	8004340 <vTaskEndScheduler>
 80073ca:	e7fe      	b.n	80073ca <iqReadTimeout+0x12>
  qnotify_t nfy = iqp->q_notify;
 80073cc:	f8d0 a01c 	ldr.w	sl, [r0, #28]
  osalSysLock();
 80073d0:	f7fc ff08 	bl	80041e4 <vPortEnterCritical>
 80073d4:	f7fc fe86 	bl	80040e4 <vPortValidateInterruptPriority>
 80073d8:	4b1f      	ldr	r3, [pc, #124]	; (8007458 <iqReadTimeout+0xa0>)
  size_t r = 0;
 80073da:	f04f 0900 	mov.w	r9, #0
 80073de:	4698      	mov	r8, r3
 80073e0:	681a      	ldr	r2, [r3, #0]
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
 80073e2:	f107 3bff 	add.w	fp, r7, #4294967295	; 0xffffffff
  deadline = osalOsGetSystemTimeX() + timeout;
 80073e6:	18ba      	adds	r2, r7, r2
 80073e8:	9201      	str	r2, [sp, #4]
    while (iqIsEmptyI(iqp)) {
 80073ea:	68a3      	ldr	r3, [r4, #8]
 80073ec:	b1e3      	cbz	r3, 8007428 <iqReadTimeout+0x70>
    iqp->q_counter--;
 80073ee:	68a3      	ldr	r3, [r4, #8]
 80073f0:	3b01      	subs	r3, #1
 80073f2:	60a3      	str	r3, [r4, #8]
    *bp++ = *iqp->q_rdptr++;
 80073f4:	69a3      	ldr	r3, [r4, #24]
 80073f6:	1c5a      	adds	r2, r3, #1
 80073f8:	61a2      	str	r2, [r4, #24]
 80073fa:	781b      	ldrb	r3, [r3, #0]
 80073fc:	f805 3b01 	strb.w	r3, [r5], #1
    if (iqp->q_rdptr >= iqp->q_top) {
 8007400:	6923      	ldr	r3, [r4, #16]
 8007402:	69a2      	ldr	r2, [r4, #24]
 8007404:	429a      	cmp	r2, r3
      iqp->q_rdptr = iqp->q_buffer;
 8007406:	bf24      	itt	cs
 8007408:	68e3      	ldrcs	r3, [r4, #12]
 800740a:	61a3      	strcs	r3, [r4, #24]
    if (nfy != NULL) {
 800740c:	f1ba 0f00 	cmp.w	sl, #0
 8007410:	d001      	beq.n	8007416 <iqReadTimeout+0x5e>
      nfy(iqp);
 8007412:	4620      	mov	r0, r4
 8007414:	47d0      	blx	sl
    osalSysUnlock();
 8007416:	f7fe fa1d 	bl	8005854 <osalSysUnlock.lto_priv.0>
    if (--n == 0U) {
 800741a:	3e01      	subs	r6, #1
    r++;
 800741c:	f109 0901 	add.w	r9, r9, #1
    if (--n == 0U) {
 8007420:	d016      	beq.n	8007450 <iqReadTimeout+0x98>
    osalSysLock();
 8007422:	f7fc fedf 	bl	80041e4 <vPortEnterCritical>
  while (true) {
 8007426:	e7e0      	b.n	80073ea <iqReadTimeout+0x32>
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
 8007428:	f11b 0f03 	cmn.w	fp, #3
 800742c:	d906      	bls.n	800743c <iqReadTimeout+0x84>
        msg = osalThreadEnqueueTimeoutS(&iqp->q_waiting, timeout);
 800742e:	4639      	mov	r1, r7
        msg = osalThreadEnqueueTimeoutS(&iqp->q_waiting, next_timeout);
 8007430:	4620      	mov	r0, r4
 8007432:	f7fd f993 	bl	800475c <osalThreadEnqueueTimeoutS>
      if (msg != MSG_OK) {
 8007436:	2800      	cmp	r0, #0
 8007438:	d0d7      	beq.n	80073ea <iqReadTimeout+0x32>
 800743a:	e007      	b.n	800744c <iqReadTimeout+0x94>
 800743c:	f7fc fe52 	bl	80040e4 <vPortValidateInterruptPriority>
 8007440:	f8d8 1000 	ldr.w	r1, [r8]
        systime_t next_timeout = deadline - osalOsGetSystemTimeX();
 8007444:	9b01      	ldr	r3, [sp, #4]
 8007446:	1a59      	subs	r1, r3, r1
        if (next_timeout > timeout) {
 8007448:	428f      	cmp	r7, r1
 800744a:	d2f1      	bcs.n	8007430 <iqReadTimeout+0x78>
        osalSysUnlock();
 800744c:	f7fe fa02 	bl	8005854 <osalSysUnlock.lto_priv.0>
}
 8007450:	4648      	mov	r0, r9
 8007452:	b003      	add	sp, #12
 8007454:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007458:	20001648 	.word	0x20001648

0800745c <_readt.lto_priv.0>:
}

static size_t _readt(void *ip, uint8_t *bp, size_t n, systime_t timeout) {

  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp, n, timeout);
 800745c:	3018      	adds	r0, #24
 800745e:	f7ff bfab 	b.w	80073b8 <iqReadTimeout>

08007462 <_read.lto_priv.0>:
  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp,
 8007462:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007466:	3018      	adds	r0, #24
 8007468:	f7ff bfa6 	b.w	80073b8 <iqReadTimeout>

0800746c <iqGetTimeout>:
msg_t iqGetTimeout(input_queue_t *iqp, systime_t timeout) {
 800746c:	b538      	push	{r3, r4, r5, lr}
 800746e:	4604      	mov	r4, r0
 8007470:	460d      	mov	r5, r1
  osalSysLock();
 8007472:	f7fc feb7 	bl	80041e4 <vPortEnterCritical>
  while (iqIsEmptyI(iqp)) {
 8007476:	68a3      	ldr	r3, [r4, #8]
 8007478:	b19b      	cbz	r3, 80074a2 <iqGetTimeout+0x36>
  iqp->q_counter--;
 800747a:	68a3      	ldr	r3, [r4, #8]
  b = *iqp->q_rdptr++;
 800747c:	69a2      	ldr	r2, [r4, #24]
  iqp->q_counter--;
 800747e:	3b01      	subs	r3, #1
 8007480:	60a3      	str	r3, [r4, #8]
  b = *iqp->q_rdptr++;
 8007482:	1c53      	adds	r3, r2, #1
 8007484:	61a3      	str	r3, [r4, #24]
 8007486:	7815      	ldrb	r5, [r2, #0]
  if (iqp->q_rdptr >= iqp->q_top) {
 8007488:	6922      	ldr	r2, [r4, #16]
 800748a:	4293      	cmp	r3, r2
    iqp->q_rdptr = iqp->q_buffer;
 800748c:	bf24      	itt	cs
 800748e:	68e3      	ldrcs	r3, [r4, #12]
 8007490:	61a3      	strcs	r3, [r4, #24]
  if (iqp->q_notify != NULL) {
 8007492:	69e3      	ldr	r3, [r4, #28]
 8007494:	b10b      	cbz	r3, 800749a <iqGetTimeout+0x2e>
    iqp->q_notify(iqp);
 8007496:	4620      	mov	r0, r4
 8007498:	4798      	blx	r3
  osalSysUnlock();
 800749a:	f7fe f9db 	bl	8005854 <osalSysUnlock.lto_priv.0>
  return (msg_t)b;
 800749e:	4628      	mov	r0, r5
 80074a0:	e007      	b.n	80074b2 <iqGetTimeout+0x46>
    msg_t msg = osalThreadEnqueueTimeoutS(&iqp->q_waiting, timeout);
 80074a2:	4629      	mov	r1, r5
 80074a4:	4620      	mov	r0, r4
 80074a6:	f7fd f959 	bl	800475c <osalThreadEnqueueTimeoutS>
    if (msg < MSG_OK) {
 80074aa:	2800      	cmp	r0, #0
 80074ac:	dae3      	bge.n	8007476 <iqGetTimeout+0xa>
      osalSysUnlock();
 80074ae:	f7fe f9d1 	bl	8005854 <osalSysUnlock.lto_priv.0>
}
 80074b2:	bd38      	pop	{r3, r4, r5, pc}

080074b4 <_gett.lto_priv.0>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
 80074b4:	3018      	adds	r0, #24
 80074b6:	f7ff bfd9 	b.w	800746c <iqGetTimeout>

080074ba <_get.lto_priv.0>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, TIME_INFINITE);
 80074ba:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80074be:	3018      	adds	r0, #24
 80074c0:	f7ff bfd4 	b.w	800746c <iqGetTimeout>

080074c4 <obqPostFullBufferS>:
 * @param[in] obqp      pointer to the @p output_buffers_queue_t object
 * @param[in] size      used size of the buffer, cannot be zero
 *
 * @sclass
 */
void obqPostFullBufferS(output_buffers_queue_t *obqp, size_t size) {
 80074c4:	b510      	push	{r4, lr}
	__asm volatile( "mrs %0, basepri" : "=r"( ulBasePri ) );
 80074c6:	f3ef 8311 	mrs	r3, BASEPRI
	return (ulBasePri > 0)? pdTRUE : pdFALSE;
 80074ca:	b12b      	cbz	r3, 80074d8 <obqPostFullBufferS+0x14>
	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 80074cc:	f3ef 8305 	mrs	r3, IPSR
	if( ulCurrentInterrupt == 0 )
 80074d0:	b12b      	cbz	r3, 80074de <obqPostFullBufferS+0x1a>

  osalDbgCheckClassS();
 80074d2:	f7fc ff35 	bl	8004340 <vTaskEndScheduler>
 80074d6:	e7fe      	b.n	80074d6 <obqPostFullBufferS+0x12>
 80074d8:	f7fc ff32 	bl	8004340 <vTaskEndScheduler>
 80074dc:	e7fe      	b.n	80074dc <obqPostFullBufferS+0x18>
  osalDbgCheck((size > 0U) && (size <= (obqp->bsize - sizeof (size_t))));
 80074de:	b119      	cbz	r1, 80074e8 <obqPostFullBufferS+0x24>
 80074e0:	69c3      	ldr	r3, [r0, #28]
 80074e2:	3b04      	subs	r3, #4
 80074e4:	428b      	cmp	r3, r1
 80074e6:	d202      	bcs.n	80074ee <obqPostFullBufferS+0x2a>
 80074e8:	f7fc ff2a 	bl	8004340 <vTaskEndScheduler>
 80074ec:	e7fe      	b.n	80074ec <obqPostFullBufferS+0x28>
  osalDbgAssert(!obqIsFullI(obqp), "buffers queue full");
 80074ee:	68c3      	ldr	r3, [r0, #12]
 80074f0:	b913      	cbnz	r3, 80074f8 <obqPostFullBufferS+0x34>
 80074f2:	f7fc ff25 	bl	8004340 <vTaskEndScheduler>
 80074f6:	e7fe      	b.n	80074f6 <obqPostFullBufferS+0x32>

  /* Writing size field in the buffer.*/
  *((size_t *)obqp->bwrptr) = size;
 80074f8:	6903      	ldr	r3, [r0, #16]
 80074fa:	6019      	str	r1, [r3, #0]

  /* Posting the buffer in the queue.*/
  obqp->bcounter--;
 80074fc:	68c2      	ldr	r2, [r0, #12]
 80074fe:	3a01      	subs	r2, #1
 8007500:	60c2      	str	r2, [r0, #12]
  obqp->bwrptr += obqp->bsize;
 8007502:	69c2      	ldr	r2, [r0, #28]
 8007504:	4413      	add	r3, r2
  if (obqp->bwrptr >= obqp->btop) {
 8007506:	6982      	ldr	r2, [r0, #24]
  obqp->bwrptr += obqp->bsize;
 8007508:	6103      	str	r3, [r0, #16]
  if (obqp->bwrptr >= obqp->btop) {
 800750a:	4293      	cmp	r3, r2
    obqp->bwrptr = obqp->buffers;
 800750c:	bf24      	itt	cs
 800750e:	6a43      	ldrcs	r3, [r0, #36]	; 0x24
 8007510:	6103      	strcs	r3, [r0, #16]
  }

  /* No "current" buffer.*/
  obqp->ptr = NULL;
 8007512:	2300      	movs	r3, #0
 8007514:	6283      	str	r3, [r0, #40]	; 0x28

  /* Notifying the buffer release.*/
  if (obqp->notify != NULL) {
 8007516:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8007518:	b113      	cbz	r3, 8007520 <obqPostFullBufferS+0x5c>
    obqp->notify(obqp);
  }
}
 800751a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    obqp->notify(obqp);
 800751e:	4718      	bx	r3
}
 8007520:	bd10      	pop	{r4, pc}

08007522 <obqGetEmptyBufferTimeoutS>:
                                systime_t timeout) {
 8007522:	b538      	push	{r3, r4, r5, lr}
 8007524:	4604      	mov	r4, r0
 8007526:	460d      	mov	r5, r1
	__asm volatile( "mrs %0, basepri" : "=r"( ulBasePri ) );
 8007528:	f3ef 8311 	mrs	r3, BASEPRI
	return (ulBasePri > 0)? pdTRUE : pdFALSE;
 800752c:	b12b      	cbz	r3, 800753a <obqGetEmptyBufferTimeoutS+0x18>
	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 800752e:	f3ef 8305 	mrs	r3, IPSR
	if( ulCurrentInterrupt == 0 )
 8007532:	b16b      	cbz	r3, 8007550 <obqGetEmptyBufferTimeoutS+0x2e>
  osalDbgCheckClassS();
 8007534:	f7fc ff04 	bl	8004340 <vTaskEndScheduler>
 8007538:	e7fe      	b.n	8007538 <obqGetEmptyBufferTimeoutS+0x16>
 800753a:	f7fc ff01 	bl	8004340 <vTaskEndScheduler>
 800753e:	e7fe      	b.n	800753e <obqGetEmptyBufferTimeoutS+0x1c>
    if (obqp->suspended) {
 8007540:	7a23      	ldrb	r3, [r4, #8]
 8007542:	b9ab      	cbnz	r3, 8007570 <obqGetEmptyBufferTimeoutS+0x4e>
    msg_t msg = osalThreadEnqueueTimeoutS(&obqp->waiting, timeout);
 8007544:	4629      	mov	r1, r5
 8007546:	4620      	mov	r0, r4
 8007548:	f7fd f908 	bl	800475c <osalThreadEnqueueTimeoutS>
    if (msg < MSG_OK) {
 800754c:	2800      	cmp	r0, #0
 800754e:	db0e      	blt.n	800756e <obqGetEmptyBufferTimeoutS+0x4c>
  while (obqIsFullI(obqp)) {
 8007550:	68e3      	ldr	r3, [r4, #12]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d0f4      	beq.n	8007540 <obqGetEmptyBufferTimeoutS+0x1e>
  osalDbgAssert(!obqIsFullI(obqp), "still full");
 8007556:	68e3      	ldr	r3, [r4, #12]
 8007558:	b913      	cbnz	r3, 8007560 <obqGetEmptyBufferTimeoutS+0x3e>
 800755a:	f7fc fef1 	bl	8004340 <vTaskEndScheduler>
 800755e:	e7fe      	b.n	800755e <obqGetEmptyBufferTimeoutS+0x3c>
  obqp->top = obqp->bwrptr + obqp->bsize;
 8007560:	2000      	movs	r0, #0
  obqp->ptr = obqp->bwrptr + sizeof (size_t);
 8007562:	6923      	ldr	r3, [r4, #16]
 8007564:	1d1a      	adds	r2, r3, #4
 8007566:	62a2      	str	r2, [r4, #40]	; 0x28
  obqp->top = obqp->bwrptr + obqp->bsize;
 8007568:	69e2      	ldr	r2, [r4, #28]
 800756a:	4413      	add	r3, r2
 800756c:	62e3      	str	r3, [r4, #44]	; 0x2c
}
 800756e:	bd38      	pop	{r3, r4, r5, pc}
      return MSG_RESET;
 8007570:	f06f 0001 	mvn.w	r0, #1
 8007574:	e7fb      	b.n	800756e <obqGetEmptyBufferTimeoutS+0x4c>

08007576 <obqPutTimeout>:
 *                      suspended state.
 *
 * @api
 */
msg_t obqPutTimeout(output_buffers_queue_t *obqp, uint8_t b,
                    systime_t timeout) {
 8007576:	b538      	push	{r3, r4, r5, lr}
 8007578:	4604      	mov	r4, r0
 800757a:	460d      	mov	r5, r1
 800757c:	4610      	mov	r0, r2
  msg_t msg;

  osalSysLock();
 800757e:	f7fc fe31 	bl	80041e4 <vPortEnterCritical>

  /* This condition indicates that a new buffer must be acquired.*/
  if (obqp->ptr == NULL) {
 8007582:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007584:	b93b      	cbnz	r3, 8007596 <obqPutTimeout+0x20>
    msg = obqGetEmptyBufferTimeoutS(obqp, timeout);
 8007586:	4601      	mov	r1, r0
 8007588:	4620      	mov	r0, r4
 800758a:	f7ff ffca 	bl	8007522 <obqGetEmptyBufferTimeoutS>
    if (msg != MSG_OK) {
 800758e:	b110      	cbz	r0, 8007596 <obqPutTimeout+0x20>
      osalSysUnlock();
 8007590:	f7fe f960 	bl	8005854 <osalSysUnlock.lto_priv.0>
    obqPostFullBufferS(obqp, obqp->bsize - sizeof (size_t));
  }

  osalSysUnlock();
  return MSG_OK;
}
 8007594:	bd38      	pop	{r3, r4, r5, pc}
  *obqp->ptr = b;
 8007596:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007598:	701d      	strb	r5, [r3, #0]
  obqp->ptr++;
 800759a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  if (obqp->ptr >= obqp->top) {
 800759c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  obqp->ptr++;
 800759e:	3301      	adds	r3, #1
  if (obqp->ptr >= obqp->top) {
 80075a0:	4293      	cmp	r3, r2
  obqp->ptr++;
 80075a2:	62a3      	str	r3, [r4, #40]	; 0x28
  if (obqp->ptr >= obqp->top) {
 80075a4:	d304      	bcc.n	80075b0 <obqPutTimeout+0x3a>
    obqPostFullBufferS(obqp, obqp->bsize - sizeof (size_t));
 80075a6:	69e1      	ldr	r1, [r4, #28]
 80075a8:	4620      	mov	r0, r4
 80075aa:	3904      	subs	r1, #4
 80075ac:	f7ff ff8a 	bl	80074c4 <obqPostFullBufferS>
  osalSysUnlock();
 80075b0:	f7fe f950 	bl	8005854 <osalSysUnlock.lto_priv.0>
  return MSG_OK;
 80075b4:	2000      	movs	r0, #0
 80075b6:	e7ed      	b.n	8007594 <obqPutTimeout+0x1e>

080075b8 <_putt.lto_priv.1>:
static msg_t _putt(void *ip, uint8_t b, systime_t timeout) {
 80075b8:	b570      	push	{r4, r5, r6, lr}
 80075ba:	4616      	mov	r6, r2
  if(sdup->config->sofCallback) sdup->config->sofCallback(sdup->config->usbp, true);
 80075bc:	f8d0 2498 	ldr.w	r2, [r0, #1176]	; 0x498
static msg_t _putt(void *ip, uint8_t b, systime_t timeout) {
 80075c0:	4604      	mov	r4, r0
  if(sdup->config->sofCallback) sdup->config->sofCallback(sdup->config->usbp, true);
 80075c2:	6893      	ldr	r3, [r2, #8]
static msg_t _putt(void *ip, uint8_t b, systime_t timeout) {
 80075c4:	460d      	mov	r5, r1
  if(sdup->config->sofCallback) sdup->config->sofCallback(sdup->config->usbp, true);
 80075c6:	b113      	cbz	r3, 80075ce <_putt.lto_priv.1+0x16>
 80075c8:	2101      	movs	r1, #1
 80075ca:	6810      	ldr	r0, [r2, #0]
 80075cc:	4798      	blx	r3
  return obqPutTimeout(&((SerialUSBDriver *)ip)->obqueue, b, timeout);
 80075ce:	4632      	mov	r2, r6
 80075d0:	4629      	mov	r1, r5
 80075d2:	f104 0050 	add.w	r0, r4, #80	; 0x50
}
 80075d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return obqPutTimeout(&((SerialUSBDriver *)ip)->obqueue, b, timeout);
 80075da:	f7ff bfcc 	b.w	8007576 <obqPutTimeout>

080075de <_put.lto_priv.1>:
  if(sdup->config->sofCallback) sdup->config->sofCallback(sdup->config->usbp, true);
 80075de:	f8d0 2498 	ldr.w	r2, [r0, #1176]	; 0x498
static msg_t _put(void *ip, uint8_t b) {
 80075e2:	b538      	push	{r3, r4, r5, lr}
  if(sdup->config->sofCallback) sdup->config->sofCallback(sdup->config->usbp, true);
 80075e4:	6893      	ldr	r3, [r2, #8]
static msg_t _put(void *ip, uint8_t b) {
 80075e6:	4604      	mov	r4, r0
 80075e8:	460d      	mov	r5, r1
  if(sdup->config->sofCallback) sdup->config->sofCallback(sdup->config->usbp, true);
 80075ea:	b113      	cbz	r3, 80075f2 <_put.lto_priv.1+0x14>
 80075ec:	2101      	movs	r1, #1
 80075ee:	6810      	ldr	r0, [r2, #0]
 80075f0:	4798      	blx	r3
  return obqPutTimeout(&((SerialUSBDriver *)ip)->obqueue, b, TIME_INFINITE);
 80075f2:	4629      	mov	r1, r5
 80075f4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80075f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
}
 80075fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return obqPutTimeout(&((SerialUSBDriver *)ip)->obqueue, b, TIME_INFINITE);
 8007600:	f7ff bfb9 	b.w	8007576 <obqPutTimeout>

08007604 <obqGetFullBufferI>:
                           size_t *sizep) {
 8007604:	b508      	push	{r3, lr}
 8007606:	4603      	mov	r3, r0
	__asm volatile( "mrs %0, basepri" : "=r"( ulBasePri ) );
 8007608:	f3ef 8211 	mrs	r2, BASEPRI
	return (ulBasePri > 0)? pdTRUE : pdFALSE;
 800760c:	b15a      	cbz	r2, 8007626 <obqGetFullBufferI+0x22>
  if (obqIsEmptyI(obqp)) {
 800760e:	e9d0 2004 	ldrd	r2, r0, [r0, #16]
 8007612:	4282      	cmp	r2, r0
 8007614:	d101      	bne.n	800761a <obqGetFullBufferI+0x16>
 8007616:	68db      	ldr	r3, [r3, #12]
 8007618:	b91b      	cbnz	r3, 8007622 <obqGetFullBufferI+0x1e>
  *sizep = *((size_t *)obqp->brdptr);
 800761a:	f850 3b04 	ldr.w	r3, [r0], #4
 800761e:	600b      	str	r3, [r1, #0]
}
 8007620:	bd08      	pop	{r3, pc}
    return NULL;
 8007622:	2000      	movs	r0, #0
 8007624:	e7fc      	b.n	8007620 <obqGetFullBufferI+0x1c>
  osalDbgCheckClassI();
 8007626:	f7fc fe8b 	bl	8004340 <vTaskEndScheduler>
 800762a:	e7fe      	b.n	800762a <obqGetFullBufferI+0x26>

0800762c <sof_handler>:
{
 800762c:	b513      	push	{r0, r1, r4, lr}
  if ((usbGetDriverStateI(sdup->config->usbp) != USB_ACTIVE) ||
 800762e:	4c28      	ldr	r4, [pc, #160]	; (80076d0 <sof_handler+0xa4>)
    osalSysLockFromISR();
 8007630:	f7fe fadc 	bl	8005bec <osalSysLockFromISR.lto_priv.0>
 8007634:	f8d4 1498 	ldr.w	r1, [r4, #1176]	; 0x498
 8007638:	6808      	ldr	r0, [r1, #0]
 800763a:	7803      	ldrb	r3, [r0, #0]
 800763c:	2b04      	cmp	r3, #4
 800763e:	d138      	bne.n	80076b2 <sof_handler+0x86>
 8007640:	7d23      	ldrb	r3, [r4, #20]
 8007642:	2b02      	cmp	r3, #2
 8007644:	d135      	bne.n	80076b2 <sof_handler+0x86>
  if (usbGetTransmitStatusI(sdup->config->usbp, sdup->config->bulk_in)) {
 8007646:	2301      	movs	r3, #1
 8007648:	790a      	ldrb	r2, [r1, #4]
 800764a:	4093      	lsls	r3, r2
 800764c:	8902      	ldrh	r2, [r0, #8]
 800764e:	4213      	tst	r3, r2
 8007650:	d12f      	bne.n	80076b2 <sof_handler+0x86>
	__asm volatile( "mrs %0, basepri" : "=r"( ulBasePri ) );
 8007652:	f3ef 8311 	mrs	r3, BASEPRI
	return (ulBasePri > 0)? pdTRUE : pdFALSE;
 8007656:	b313      	cbz	r3, 800769e <sof_handler+0x72>

  osalDbgCheckClassI();

  /* If queue is empty and there is a buffer partially filled and
     it is not being written.*/
  if (obqIsEmptyI(obqp) && (obqp->ptr != NULL)) {
 8007658:	e9d4 3218 	ldrd	r3, r2, [r4, #96]	; 0x60
 800765c:	4293      	cmp	r3, r2
 800765e:	d130      	bne.n	80076c2 <sof_handler+0x96>
 8007660:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8007662:	2a00      	cmp	r2, #0
 8007664:	d02d      	beq.n	80076c2 <sof_handler+0x96>
 8007666:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 8007668:	b35a      	cbz	r2, 80076c2 <sof_handler+0x96>
    size_t size = (size_t)obqp->ptr - ((size_t)obqp->bwrptr + sizeof (size_t));
 800766a:	3a04      	subs	r2, #4

    if (size > 0U) {
 800766c:	1ad2      	subs	r2, r2, r3
 800766e:	d028      	beq.n	80076c2 <sof_handler+0x96>

      /* Writing size field in the buffer.*/
      *((size_t *)obqp->bwrptr) = size;
 8007670:	601a      	str	r2, [r3, #0]

      /* Posting the buffer in the queue.*/
      obqp->bcounter--;
 8007672:	6de2      	ldr	r2, [r4, #92]	; 0x5c
    uint8_t *buf = obqGetFullBufferI(&sdup->obqueue, &n);
 8007674:	4817      	ldr	r0, [pc, #92]	; (80076d4 <sof_handler+0xa8>)
 8007676:	3a01      	subs	r2, #1
 8007678:	65e2      	str	r2, [r4, #92]	; 0x5c
      obqp->bwrptr += obqp->bsize;
 800767a:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800767c:	a901      	add	r1, sp, #4
 800767e:	4413      	add	r3, r2
      if (obqp->bwrptr >= obqp->btop) {
 8007680:	6ea2      	ldr	r2, [r4, #104]	; 0x68
      obqp->bwrptr += obqp->bsize;
 8007682:	6623      	str	r3, [r4, #96]	; 0x60
      if (obqp->bwrptr >= obqp->btop) {
 8007684:	4293      	cmp	r3, r2
        obqp->bwrptr = obqp->buffers;
 8007686:	bf24      	itt	cs
 8007688:	6f63      	ldrcs	r3, [r4, #116]	; 0x74
 800768a:	6623      	strcs	r3, [r4, #96]	; 0x60
      }

      /* No "current" buffer.*/
      obqp->ptr = NULL;
 800768c:	2300      	movs	r3, #0
 800768e:	67a3      	str	r3, [r4, #120]	; 0x78
 8007690:	f7ff ffb8 	bl	8007604 <obqGetFullBufferI>
    osalDbgAssert(buf != NULL, "queue is empty");
 8007694:	4602      	mov	r2, r0
 8007696:	b928      	cbnz	r0, 80076a4 <sof_handler+0x78>
 8007698:	f7fc fe52 	bl	8004340 <vTaskEndScheduler>
 800769c:	e7fe      	b.n	800769c <sof_handler+0x70>
  osalDbgCheckClassI();
 800769e:	f7fc fe4f 	bl	8004340 <vTaskEndScheduler>
 80076a2:	e7fe      	b.n	80076a2 <sof_handler+0x76>
    usbStartTransmitI(sdup->config->usbp, sdup->config->bulk_in, buf, n);
 80076a4:	f8d4 0498 	ldr.w	r0, [r4, #1176]	; 0x498
 80076a8:	9b01      	ldr	r3, [sp, #4]
 80076aa:	7901      	ldrb	r1, [r0, #4]
 80076ac:	6800      	ldr	r0, [r0, #0]
 80076ae:	f7ff fa1f 	bl	8006af0 <usbStartTransmitI>
    sofCounter++;
 80076b2:	4a09      	ldr	r2, [pc, #36]	; (80076d8 <sof_handler+0xac>)
 80076b4:	6813      	ldr	r3, [r2, #0]
 80076b6:	3301      	adds	r3, #1
 80076b8:	6013      	str	r3, [r2, #0]
    osalSysUnlockFromISR();
 80076ba:	f7fe fa91 	bl	8005be0 <osalSysUnlockFromISR.lto_priv.0>
}
 80076be:	b002      	add	sp, #8
 80076c0:	bd10      	pop	{r4, pc}
    if(sdup->config->sofCallback) sdup->config->sofCallback(sdup->config->usbp, false);
 80076c2:	688b      	ldr	r3, [r1, #8]
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d0f4      	beq.n	80076b2 <sof_handler+0x86>
 80076c8:	2100      	movs	r1, #0
 80076ca:	4798      	blx	r3
 80076cc:	e7f1      	b.n	80076b2 <sof_handler+0x86>
 80076ce:	bf00      	nop
 80076d0:	20000a44 	.word	0x20000a44
 80076d4:	20000a94 	.word	0x20000a94
 80076d8:	200012c8 	.word	0x200012c8

080076dc <obnotify>:
static void obnotify(io_buffers_queue_t *bqp) {
 80076dc:	b513      	push	{r0, r1, r4, lr}
  SerialUSBDriver *sdup = bqGetLinkX(bqp);
 80076de:	6b44      	ldr	r4, [r0, #52]	; 0x34
  if ((usbGetDriverStateI(sdup->config->usbp) != USB_ACTIVE) ||
 80076e0:	f8d4 3498 	ldr.w	r3, [r4, #1176]	; 0x498
 80076e4:	681a      	ldr	r2, [r3, #0]
 80076e6:	7811      	ldrb	r1, [r2, #0]
 80076e8:	2904      	cmp	r1, #4
 80076ea:	d116      	bne.n	800771a <obnotify+0x3e>
 80076ec:	7d21      	ldrb	r1, [r4, #20]
 80076ee:	2902      	cmp	r1, #2
 80076f0:	d113      	bne.n	800771a <obnotify+0x3e>
  if (!usbGetTransmitStatusI(sdup->config->usbp, sdup->config->bulk_in)) {
 80076f2:	7919      	ldrb	r1, [r3, #4]
 80076f4:	2301      	movs	r3, #1
 80076f6:	8912      	ldrh	r2, [r2, #8]
 80076f8:	408b      	lsls	r3, r1
 80076fa:	4213      	tst	r3, r2
 80076fc:	d10d      	bne.n	800771a <obnotify+0x3e>
    uint8_t *buf = obqGetFullBufferI(&sdup->obqueue, &n);
 80076fe:	a901      	add	r1, sp, #4
 8007700:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007704:	f7ff ff7e 	bl	8007604 <obqGetFullBufferI>
    if (buf != NULL) {
 8007708:	4602      	mov	r2, r0
 800770a:	b130      	cbz	r0, 800771a <obnotify+0x3e>
      usbStartTransmitI(sdup->config->usbp, sdup->config->bulk_in, buf, n);
 800770c:	f8d4 0498 	ldr.w	r0, [r4, #1176]	; 0x498
 8007710:	9b01      	ldr	r3, [sp, #4]
 8007712:	7901      	ldrb	r1, [r0, #4]
 8007714:	6800      	ldr	r0, [r0, #0]
 8007716:	f7ff f9eb 	bl	8006af0 <usbStartTransmitI>
}
 800771a:	b002      	add	sp, #8
 800771c:	bd10      	pop	{r4, pc}

0800771e <sduDataTransmitted>:
  SerialUSBDriver *sdup = usbp->in_params[ep - 1U];
 800771e:	eb00 0381 	add.w	r3, r0, r1, lsl #2
void sduDataTransmitted(USBDriver *usbp, usbep_t ep) {
 8007722:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  SerialUSBDriver *sdup = usbp->in_params[ep - 1U];
 8007726:	6a9c      	ldr	r4, [r3, #40]	; 0x28
void sduDataTransmitted(USBDriver *usbp, usbep_t ep) {
 8007728:	4605      	mov	r5, r0
 800772a:	460e      	mov	r6, r1
  if (sdup == NULL) {
 800772c:	2c00      	cmp	r4, #0
 800772e:	d035      	beq.n	800779c <sduDataTransmitted+0x7e>
  osalSysLockFromISR();
 8007730:	f7fe fa5c 	bl	8005bec <osalSysLockFromISR.lto_priv.0>
  chnAddFlagsI(sdup, CHN_OUTPUT_EMPTY);
 8007734:	eb05 0786 	add.w	r7, r5, r6, lsl #2
 8007738:	2108      	movs	r1, #8
 800773a:	1d20      	adds	r0, r4, #4
 800773c:	f7fc fee3 	bl	8004506 <osalEventBroadcastFlagsI>
  if (usbp->epc[ep]->in_state->txsize > 0U) {
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	f104 0850 	add.w	r8, r4, #80	; 0x50
 8007746:	695b      	ldr	r3, [r3, #20]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	b1d3      	cbz	r3, 8007782 <sduDataTransmitted+0x64>
	__asm volatile( "mrs %0, basepri" : "=r"( ulBasePri ) );
 800774c:	f3ef 8311 	mrs	r3, BASEPRI
	return (ulBasePri > 0)? pdTRUE : pdFALSE;
 8007750:	b143      	cbz	r3, 8007764 <sduDataTransmitted+0x46>
  osalDbgAssert(!obqIsEmptyI(obqp), "buffers queue empty");
 8007752:	e9d4 2318 	ldrd	r2, r3, [r4, #96]	; 0x60
 8007756:	429a      	cmp	r2, r3
 8007758:	d107      	bne.n	800776a <sduDataTransmitted+0x4c>
 800775a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800775c:	b12a      	cbz	r2, 800776a <sduDataTransmitted+0x4c>
 800775e:	f7fc fdef 	bl	8004340 <vTaskEndScheduler>
 8007762:	e7fe      	b.n	8007762 <sduDataTransmitted+0x44>
  osalDbgCheckClassI();
 8007764:	f7fc fdec 	bl	8004340 <vTaskEndScheduler>
 8007768:	e7fe      	b.n	8007768 <sduDataTransmitted+0x4a>
  obqp->bcounter++;
 800776a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800776c:	3201      	adds	r2, #1
 800776e:	65e2      	str	r2, [r4, #92]	; 0x5c
  obqp->brdptr += obqp->bsize;
 8007770:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8007772:	4413      	add	r3, r2
  if (obqp->brdptr >= obqp->btop) {
 8007774:	6ea2      	ldr	r2, [r4, #104]	; 0x68
  obqp->brdptr += obqp->bsize;
 8007776:	6663      	str	r3, [r4, #100]	; 0x64
  if (obqp->brdptr >= obqp->btop) {
 8007778:	4293      	cmp	r3, r2
 800777a:	d212      	bcs.n	80077a2 <sduDataTransmitted+0x84>
  osalThreadDequeueNextI(&obqp->waiting, MSG_OK);
 800777c:	4640      	mov	r0, r8
 800777e:	f7fc ff1a 	bl	80045b6 <osalThreadDequeueNextI.constprop.0>
  buf = obqGetFullBufferI(&sdup->obqueue, &n);
 8007782:	4640      	mov	r0, r8
 8007784:	a901      	add	r1, sp, #4
 8007786:	f7ff ff3d 	bl	8007604 <obqGetFullBufferI>
  if (buf != NULL) {
 800778a:	4602      	mov	r2, r0
 800778c:	b160      	cbz	r0, 80077a8 <sduDataTransmitted+0x8a>
    usbStartTransmitI(usbp, ep, buf, n);
 800778e:	9b01      	ldr	r3, [sp, #4]
    usbStartTransmitI(usbp, ep, usbp->setup, 0);
 8007790:	4631      	mov	r1, r6
 8007792:	4628      	mov	r0, r5
 8007794:	f7ff f9ac 	bl	8006af0 <usbStartTransmitI>
  osalSysUnlockFromISR();
 8007798:	f7fe fa22 	bl	8005be0 <osalSysUnlockFromISR.lto_priv.0>
}
 800779c:	b002      	add	sp, #8
 800779e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    obqp->brdptr = obqp->buffers;
 80077a2:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80077a4:	6663      	str	r3, [r4, #100]	; 0x64
 80077a6:	e7e9      	b.n	800777c <sduDataTransmitted+0x5e>
  else if ((usbp->epc[ep]->in_state->txsize > 0U) &&
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	695a      	ldr	r2, [r3, #20]
 80077ac:	6812      	ldr	r2, [r2, #0]
 80077ae:	b132      	cbz	r2, 80077be <sduDataTransmitted+0xa0>
            ((size_t)usbp->epc[ep]->in_maxsize - 1U)) == 0U)) {
 80077b0:	8a1b      	ldrh	r3, [r3, #16]
 80077b2:	3b01      	subs	r3, #1
  else if ((usbp->epc[ep]->in_state->txsize > 0U) &&
 80077b4:	4013      	ands	r3, r2
 80077b6:	d102      	bne.n	80077be <sduDataTransmitted+0xa0>
    usbStartTransmitI(usbp, ep, usbp->setup, 0);
 80077b8:	f105 0274 	add.w	r2, r5, #116	; 0x74
 80077bc:	e7e8      	b.n	8007790 <sduDataTransmitted+0x72>
    if(sdup->config->sofCallback) sdup->config->sofCallback(sdup->config->usbp, true);
 80077be:	f8d4 2498 	ldr.w	r2, [r4, #1176]	; 0x498
 80077c2:	6893      	ldr	r3, [r2, #8]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d0e7      	beq.n	8007798 <sduDataTransmitted+0x7a>
 80077c8:	2101      	movs	r1, #1
 80077ca:	6810      	ldr	r0, [r2, #0]
 80077cc:	4798      	blx	r3
 80077ce:	e7e3      	b.n	8007798 <sduDataTransmitted+0x7a>

080077d0 <ibqReleaseEmptyBufferS>:
  void ibqReleaseEmptyBufferS(input_buffers_queue_t *ibqp) {
 80077d0:	b510      	push	{r4, lr}
	__asm volatile( "mrs %0, basepri" : "=r"( ulBasePri ) );
 80077d2:	f3ef 8311 	mrs	r3, BASEPRI
	return (ulBasePri > 0)? pdTRUE : pdFALSE;
 80077d6:	b12b      	cbz	r3, 80077e4 <ibqReleaseEmptyBufferS+0x14>
	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 80077d8:	f3ef 8305 	mrs	r3, IPSR
	if( ulCurrentInterrupt == 0 )
 80077dc:	b12b      	cbz	r3, 80077ea <ibqReleaseEmptyBufferS+0x1a>
  osalDbgCheckClassS();
 80077de:	f7fc fdaf 	bl	8004340 <vTaskEndScheduler>
 80077e2:	e7fe      	b.n	80077e2 <ibqReleaseEmptyBufferS+0x12>
 80077e4:	f7fc fdac 	bl	8004340 <vTaskEndScheduler>
 80077e8:	e7fe      	b.n	80077e8 <ibqReleaseEmptyBufferS+0x18>
  osalDbgAssert(!ibqIsEmptyI(ibqp), "buffers queue empty");
 80077ea:	68c3      	ldr	r3, [r0, #12]
 80077ec:	b913      	cbnz	r3, 80077f4 <ibqReleaseEmptyBufferS+0x24>
 80077ee:	f7fc fda7 	bl	8004340 <vTaskEndScheduler>
 80077f2:	e7fe      	b.n	80077f2 <ibqReleaseEmptyBufferS+0x22>
  ibqp->bcounter--;
 80077f4:	68c3      	ldr	r3, [r0, #12]
  ibqp->brdptr += ibqp->bsize;
 80077f6:	69c2      	ldr	r2, [r0, #28]
  ibqp->bcounter--;
 80077f8:	3b01      	subs	r3, #1
 80077fa:	60c3      	str	r3, [r0, #12]
  ibqp->brdptr += ibqp->bsize;
 80077fc:	6943      	ldr	r3, [r0, #20]
 80077fe:	4413      	add	r3, r2
  if (ibqp->brdptr >= ibqp->btop) {
 8007800:	6982      	ldr	r2, [r0, #24]
  ibqp->brdptr += ibqp->bsize;
 8007802:	6143      	str	r3, [r0, #20]
  if (ibqp->brdptr >= ibqp->btop) {
 8007804:	4293      	cmp	r3, r2
    ibqp->brdptr = ibqp->buffers;
 8007806:	bf24      	itt	cs
 8007808:	6a43      	ldrcs	r3, [r0, #36]	; 0x24
 800780a:	6143      	strcs	r3, [r0, #20]
  ibqp->ptr = NULL;
 800780c:	2300      	movs	r3, #0
 800780e:	6283      	str	r3, [r0, #40]	; 0x28
  if (ibqp->notify != NULL) {
 8007810:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8007812:	b113      	cbz	r3, 800781a <ibqReleaseEmptyBufferS+0x4a>
}
 8007814:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ibqp->notify(ibqp);
 8007818:	4718      	bx	r3
}
 800781a:	bd10      	pop	{r4, pc}

0800781c <ibqGetFullBufferTimeoutS>:
                                 systime_t timeout) {
 800781c:	b538      	push	{r3, r4, r5, lr}
 800781e:	4604      	mov	r4, r0
 8007820:	460d      	mov	r5, r1
	__asm volatile( "mrs %0, basepri" : "=r"( ulBasePri ) );
 8007822:	f3ef 8311 	mrs	r3, BASEPRI
	return (ulBasePri > 0)? pdTRUE : pdFALSE;
 8007826:	b12b      	cbz	r3, 8007834 <ibqGetFullBufferTimeoutS+0x18>
	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 8007828:	f3ef 8305 	mrs	r3, IPSR
	if( ulCurrentInterrupt == 0 )
 800782c:	b16b      	cbz	r3, 800784a <ibqGetFullBufferTimeoutS+0x2e>
  osalDbgCheckClassS();
 800782e:	f7fc fd87 	bl	8004340 <vTaskEndScheduler>
 8007832:	e7fe      	b.n	8007832 <ibqGetFullBufferTimeoutS+0x16>
 8007834:	f7fc fd84 	bl	8004340 <vTaskEndScheduler>
 8007838:	e7fe      	b.n	8007838 <ibqGetFullBufferTimeoutS+0x1c>
    if (ibqp->suspended) {
 800783a:	7a23      	ldrb	r3, [r4, #8]
 800783c:	b9ab      	cbnz	r3, 800786a <ibqGetFullBufferTimeoutS+0x4e>
    msg_t msg = osalThreadEnqueueTimeoutS(&ibqp->waiting, timeout);
 800783e:	4629      	mov	r1, r5
 8007840:	4620      	mov	r0, r4
 8007842:	f7fc ff8b 	bl	800475c <osalThreadEnqueueTimeoutS>
    if (msg < MSG_OK) {
 8007846:	2800      	cmp	r0, #0
 8007848:	db0e      	blt.n	8007868 <ibqGetFullBufferTimeoutS+0x4c>
  while (ibqIsEmptyI(ibqp)) {
 800784a:	68e3      	ldr	r3, [r4, #12]
 800784c:	2b00      	cmp	r3, #0
 800784e:	d0f4      	beq.n	800783a <ibqGetFullBufferTimeoutS+0x1e>
  osalDbgAssert(!ibqIsEmptyI(ibqp), "still empty");
 8007850:	68e3      	ldr	r3, [r4, #12]
 8007852:	b913      	cbnz	r3, 800785a <ibqGetFullBufferTimeoutS+0x3e>
 8007854:	f7fc fd74 	bl	8004340 <vTaskEndScheduler>
 8007858:	e7fe      	b.n	8007858 <ibqGetFullBufferTimeoutS+0x3c>
  ibqp->top = ibqp->ptr + *((size_t *)ibqp->brdptr);
 800785a:	2000      	movs	r0, #0
  ibqp->ptr = ibqp->brdptr + sizeof (size_t);
 800785c:	6962      	ldr	r2, [r4, #20]
 800785e:	1d13      	adds	r3, r2, #4
  ibqp->top = ibqp->ptr + *((size_t *)ibqp->brdptr);
 8007860:	6812      	ldr	r2, [r2, #0]
  ibqp->ptr = ibqp->brdptr + sizeof (size_t);
 8007862:	62a3      	str	r3, [r4, #40]	; 0x28
  ibqp->top = ibqp->ptr + *((size_t *)ibqp->brdptr);
 8007864:	4413      	add	r3, r2
 8007866:	62e3      	str	r3, [r4, #44]	; 0x2c
}
 8007868:	bd38      	pop	{r3, r4, r5, pc}
      return MSG_RESET;
 800786a:	f06f 0001 	mvn.w	r0, #1
 800786e:	e7fb      	b.n	8007868 <ibqGetFullBufferTimeoutS+0x4c>

08007870 <ibqGetTimeout>:
msg_t ibqGetTimeout(input_buffers_queue_t *ibqp, systime_t timeout) {
 8007870:	b538      	push	{r3, r4, r5, lr}
 8007872:	4604      	mov	r4, r0
 8007874:	4608      	mov	r0, r1
  osalSysLock();
 8007876:	f7fc fcb5 	bl	80041e4 <vPortEnterCritical>
  if (ibqp->ptr == NULL) {
 800787a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800787c:	b94b      	cbnz	r3, 8007892 <ibqGetTimeout+0x22>
    msg = ibqGetFullBufferTimeoutS(ibqp, timeout);
 800787e:	4601      	mov	r1, r0
 8007880:	4620      	mov	r0, r4
 8007882:	f7ff ffcb 	bl	800781c <ibqGetFullBufferTimeoutS>
    if (msg != MSG_OK) {
 8007886:	4605      	mov	r5, r0
 8007888:	b118      	cbz	r0, 8007892 <ibqGetTimeout+0x22>
  osalSysUnlock();
 800788a:	f7fd ffe3 	bl	8005854 <osalSysUnlock.lto_priv.0>
}
 800788e:	4628      	mov	r0, r5
 8007890:	bd38      	pop	{r3, r4, r5, pc}
  msg = (msg_t)*ibqp->ptr;
 8007892:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  if (ibqp->ptr >= ibqp->top) {
 8007894:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  msg = (msg_t)*ibqp->ptr;
 8007896:	f813 5b01 	ldrb.w	r5, [r3], #1
  if (ibqp->ptr >= ibqp->top) {
 800789a:	4293      	cmp	r3, r2
  ibqp->ptr++;
 800789c:	62a3      	str	r3, [r4, #40]	; 0x28
  if (ibqp->ptr >= ibqp->top) {
 800789e:	d3f4      	bcc.n	800788a <ibqGetTimeout+0x1a>
    ibqReleaseEmptyBufferS(ibqp);
 80078a0:	4620      	mov	r0, r4
 80078a2:	f7ff ff95 	bl	80077d0 <ibqReleaseEmptyBufferS>
 80078a6:	e7f0      	b.n	800788a <ibqGetTimeout+0x1a>

080078a8 <_gett.lto_priv.1>:
  return ibqGetTimeout(&((SerialUSBDriver *)ip)->ibqueue, timeout);
 80078a8:	3018      	adds	r0, #24
 80078aa:	f7ff bfe1 	b.w	8007870 <ibqGetTimeout>

080078ae <_get.lto_priv.1>:
  return ibqGetTimeout(&((SerialUSBDriver *)ip)->ibqueue, TIME_INFINITE);
 80078ae:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80078b2:	3018      	adds	r0, #24
 80078b4:	f7ff bfdc 	b.w	8007870 <ibqGetTimeout>

080078b8 <xQueueGenericReset.constprop.0>:
 80078b8:	b510      	push	{r4, lr}
 80078ba:	b900      	cbnz	r0, 80078be <xQueueGenericReset.constprop.0+0x6>
 80078bc:	e7fe      	b.n	80078bc <xQueueGenericReset.constprop.0+0x4>
 80078be:	f7fc fc91 	bl	80041e4 <vPortEnterCritical>
 80078c2:	e9d0 340f 	ldrd	r3, r4, [r0, #60]	; 0x3c
 80078c6:	4363      	muls	r3, r4
 80078c8:	6802      	ldr	r2, [r0, #0]
 80078ca:	18d1      	adds	r1, r2, r3
 80078cc:	1b1b      	subs	r3, r3, r4
 80078ce:	4413      	add	r3, r2
 80078d0:	6041      	str	r1, [r0, #4]
 80078d2:	60c3      	str	r3, [r0, #12]
 80078d4:	2100      	movs	r1, #0
 80078d6:	23ff      	movs	r3, #255	; 0xff
 80078d8:	6082      	str	r2, [r0, #8]
 80078da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80078de:	6381      	str	r1, [r0, #56]	; 0x38
 80078e0:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
 80078e4:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
 80078e8:	f100 0318 	add.w	r3, r0, #24
 80078ec:	e9c0 2306 	strd	r2, r3, [r0, #24]
 80078f0:	6143      	str	r3, [r0, #20]
 80078f2:	6203      	str	r3, [r0, #32]
 80078f4:	f100 032c 	add.w	r3, r0, #44	; 0x2c
 80078f8:	6101      	str	r1, [r0, #16]
 80078fa:	e9c0 320a 	strd	r3, r2, [r0, #40]	; 0x28
 80078fe:	e9c0 330c 	strd	r3, r3, [r0, #48]	; 0x30
 8007902:	6241      	str	r1, [r0, #36]	; 0x24
 8007904:	f7fc fc62 	bl	80041cc <vPortExitCritical>
 8007908:	2001      	movs	r0, #1
 800790a:	bd10      	pop	{r4, pc}

0800790c <spiSend.part.0.constprop.0>:
  spiStartSendI(spip, n, txbuf);
 800790c:	2203      	movs	r2, #3
void spiSend(SPIDriver *spip, size_t n, const void *txbuf) {
 800790e:	b510      	push	{r4, lr}
  dmaStreamSetTransactionSize(spip->dmarx, n);
 8007910:	2404      	movs	r4, #4
  spiStartSendI(spip, n, txbuf);
 8007912:	4b11      	ldr	r3, [pc, #68]	; (8007958 <spiSend.part.0.constprop.0+0x4c>)
 8007914:	701a      	strb	r2, [r3, #0]
  dmaStreamSetMemory0(spip->dmarx, &dummyrx);
 8007916:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8007918:	6851      	ldr	r1, [r2, #4]
 800791a:	4a10      	ldr	r2, [pc, #64]	; (800795c <spiSend.part.0.constprop.0+0x50>)
 800791c:	60ca      	str	r2, [r1, #12]
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode);
 800791e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
  dmaStreamSetTransactionSize(spip->dmarx, n);
 8007920:	604c      	str	r4, [r1, #4]
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode);
 8007922:	600a      	str	r2, [r1, #0]
  dmaStreamSetMemory0(spip->dmatx, txbuf);
 8007924:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8007926:	6852      	ldr	r2, [r2, #4]
 8007928:	60d0      	str	r0, [r2, #12]
  dmaStreamSetMode(spip->dmatx, spip->txdmamode | STM32_DMA_CR_MINC);
 800792a:	6f18      	ldr	r0, [r3, #112]	; 0x70
  dmaStreamSetTransactionSize(spip->dmatx, n);
 800792c:	6054      	str	r4, [r2, #4]
  dmaStreamSetMode(spip->dmatx, spip->txdmamode | STM32_DMA_CR_MINC);
 800792e:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 8007932:	6010      	str	r0, [r2, #0]
  dmaStreamEnable(spip->dmarx);
 8007934:	6808      	ldr	r0, [r1, #0]
 8007936:	f040 0001 	orr.w	r0, r0, #1
 800793a:	6008      	str	r0, [r1, #0]
  dmaStreamEnable(spip->dmatx);
 800793c:	6811      	ldr	r1, [r2, #0]
 800793e:	f103 0008 	add.w	r0, r3, #8
 8007942:	f041 0101 	orr.w	r1, r1, #1
 8007946:	6011      	str	r1, [r2, #0]
 8007948:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800794c:	f7fc fedc 	bl	8004708 <osalThreadSuspendTimeoutS>
}
 8007950:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  osalSysUnlock();
 8007954:	f7fd bf7e 	b.w	8005854 <osalSysUnlock.lto_priv.0>
 8007958:	20000ee0 	.word	0x20000ee0
 800795c:	20001048 	.word	0x20001048

08007960 <spiSelect.constprop.0>:
void spiSelect(SPIDriver *spip) {
 8007960:	b508      	push	{r3, lr}
  osalSysLock();
 8007962:	f7fc fc3f 	bl	80041e4 <vPortEnterCritical>
  osalDbgAssert(spip->state == SPI_READY, "not ready");
 8007966:	4b08      	ldr	r3, [pc, #32]	; (8007988 <spiSelect.constprop.0+0x28>)
 8007968:	781a      	ldrb	r2, [r3, #0]
 800796a:	2a02      	cmp	r2, #2
 800796c:	d002      	beq.n	8007974 <spiSelect.constprop.0+0x14>
 800796e:	f7fc fce7 	bl	8004340 <vTaskEndScheduler>
 8007972:	e7fe      	b.n	8007972 <spiSelect.constprop.0+0x12>
  palClearPad(spip->config->ssport, spip->config->sspad);
 8007974:	685b      	ldr	r3, [r3, #4]
 8007976:	8919      	ldrh	r1, [r3, #8]
 8007978:	685a      	ldr	r2, [r3, #4]
 800797a:	2301      	movs	r3, #1
 800797c:	408b      	lsls	r3, r1
 800797e:	6153      	str	r3, [r2, #20]
}
 8007980:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  osalSysUnlock();
 8007984:	f7fd bf66 	b.w	8005854 <osalSysUnlock.lto_priv.0>
 8007988:	20000ee0 	.word	0x20000ee0

0800798c <spiUnselect.constprop.0>:
void spiUnselect(SPIDriver *spip) {
 800798c:	b508      	push	{r3, lr}
  osalSysLock();
 800798e:	f7fc fc29 	bl	80041e4 <vPortEnterCritical>
  osalDbgAssert(spip->state == SPI_READY, "not ready");
 8007992:	4b08      	ldr	r3, [pc, #32]	; (80079b4 <spiUnselect.constprop.0+0x28>)
 8007994:	781a      	ldrb	r2, [r3, #0]
 8007996:	2a02      	cmp	r2, #2
 8007998:	d002      	beq.n	80079a0 <spiUnselect.constprop.0+0x14>
 800799a:	f7fc fcd1 	bl	8004340 <vTaskEndScheduler>
 800799e:	e7fe      	b.n	800799e <spiUnselect.constprop.0+0x12>
  palSetPad(spip->config->ssport, spip->config->sspad);
 80079a0:	685b      	ldr	r3, [r3, #4]
 80079a2:	8919      	ldrh	r1, [r3, #8]
 80079a4:	685a      	ldr	r2, [r3, #4]
 80079a6:	2301      	movs	r3, #1
 80079a8:	408b      	lsls	r3, r1
 80079aa:	6113      	str	r3, [r2, #16]
}
 80079ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  osalSysUnlock();
 80079b0:	f7fd bf50 	b.w	8005854 <osalSysUnlock.lto_priv.0>
 80079b4:	20000ee0 	.word	0x20000ee0

080079b8 <max2870WriteRegister>:
        spiReleaseBus(driver->config->spiPort);
    }
}

static bool max2870WriteRegister(MAX2870Driver* driver, const uint32_t addr, uint32_t value, bool force)
{
 80079b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80079ba:	4604      	mov	r4, r0
 80079bc:	4618      	mov	r0, r3
    osalDbgCheck(addr < 0x6);
    osalDbgCheck((value & 0x7) == 0);
 80079be:	0753      	lsls	r3, r2, #29
 80079c0:	d002      	beq.n	80079c8 <max2870WriteRegister+0x10>
 80079c2:	f7fc fcbd 	bl	8004340 <vTaskEndScheduler>
 80079c6:	e7fe      	b.n	80079c6 <max2870WriteRegister+0xe>

    if(!force && driver->registers[addr] == value) {
 80079c8:	f101 0332 	add.w	r3, r1, #50	; 0x32
 80079cc:	b918      	cbnz	r0, 80079d6 <max2870WriteRegister+0x1e>
 80079ce:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 80079d2:	4295      	cmp	r5, r2
 80079d4:	d01e      	beq.n	8007a14 <max2870WriteRegister+0x5c>
        return false;
    }
    driver->registers[addr] = value;

    value |= addr;
 80079d6:	4311      	orrs	r1, r2
    driver->registers[addr] = value;
 80079d8:	f844 2023 	str.w	r2, [r4, r3, lsl #2]

    uint8_t data[4] = {value>>24, (value >> 16) & 0xFF, (value >> 8) & 0xFF,  (value >> 0) & 0xFF};
 80079dc:	ba09      	rev	r1, r1
 80079de:	9101      	str	r1, [sp, #4]


    spiSelect(&SPID1);
 80079e0:	f7ff ffbe 	bl	8007960 <spiSelect.constprop.0>
  osalSysLock();
 80079e4:	f7fc fbfe 	bl	80041e4 <vPortEnterCritical>
  osalDbgAssert(spip->state == SPI_READY, "not ready");
 80079e8:	4b0b      	ldr	r3, [pc, #44]	; (8007a18 <max2870WriteRegister+0x60>)
 80079ea:	781a      	ldrb	r2, [r3, #0]
 80079ec:	2a02      	cmp	r2, #2
 80079ee:	d002      	beq.n	80079f6 <max2870WriteRegister+0x3e>
 80079f0:	f7fc fca6 	bl	8004340 <vTaskEndScheduler>
 80079f4:	e7fe      	b.n	80079f4 <max2870WriteRegister+0x3c>
  osalDbgAssert(spip->config->end_cb == NULL, "has callback");
 80079f6:	685b      	ldr	r3, [r3, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	b113      	cbz	r3, 8007a02 <max2870WriteRegister+0x4a>
 80079fc:	f7fc fca0 	bl	8004340 <vTaskEndScheduler>
 8007a00:	e7fe      	b.n	8007a00 <max2870WriteRegister+0x48>
 8007a02:	a801      	add	r0, sp, #4
 8007a04:	f7ff ff82 	bl	800790c <spiSend.part.0.constprop.0>
    spiSend(&SPID1, 4, data);
    spiUnselect(&SPID1);
 8007a08:	f7ff ffc0 	bl	800798c <spiUnselect.constprop.0>
    }
}

static inline void osalSysPolledDelayX(rtcnt_t cycles)
{
    vPortBusyDelay(cycles);
 8007a0c:	2032      	movs	r0, #50	; 0x32
 8007a0e:	f7fc fb61 	bl	80040d4 <vPortBusyDelay>
    osalSysPolledDelayX(50);


    return true;
 8007a12:	2001      	movs	r0, #1
}
 8007a14:	b003      	add	sp, #12
 8007a16:	bd30      	pop	{r4, r5, pc}
 8007a18:	20000ee0 	.word	0x20000ee0

08007a1c <max2870Disable>:
    return driver->registers[6];
}

static void max2870Disable(MAX2870Driver* driver)
{
    if(driver->config->gpioChipEnable != 0xffff) {
 8007a1c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007a20:	6803      	ldr	r3, [r0, #0]
{
 8007a22:	b510      	push	{r4, lr}
    if(driver->config->gpioChipEnable != 0xffff) {
 8007a24:	891b      	ldrh	r3, [r3, #8]
{
 8007a26:	4604      	mov	r4, r0
    if(driver->config->gpioChipEnable != 0xffff) {
 8007a28:	4293      	cmp	r3, r2
 8007a2a:	d00b      	beq.n	8007a44 <max2870Disable+0x28>
        gpioSetPin(driver->config->gpioChipEnable, false);
 8007a2c:	2100      	movs	r1, #0
 8007a2e:	4618      	mov	r0, r3
 8007a30:	f7fd fdd4 	bl	80055dc <gpioSetPin>
    } else {
        max2870WriteRegister(driver, 2, _BV(MAX2870_REG2_SHDN_OFFSET), true);
    }

    if(driver->config->lockStatus) {
 8007a34:	6823      	ldr	r3, [r4, #0]
 8007a36:	69db      	ldr	r3, [r3, #28]
 8007a38:	b10b      	cbz	r3, 8007a3e <max2870Disable+0x22>
        driver->config->lockStatus(false);
 8007a3a:	2000      	movs	r0, #0
 8007a3c:	4798      	blx	r3
    }
    driver->enabled = false;
 8007a3e:	2300      	movs	r3, #0
 8007a40:	7123      	strb	r3, [r4, #4]
}
 8007a42:	bd10      	pop	{r4, pc}
        max2870WriteRegister(driver, 2, _BV(MAX2870_REG2_SHDN_OFFSET), true);
 8007a44:	2301      	movs	r3, #1
 8007a46:	2220      	movs	r2, #32
 8007a48:	2102      	movs	r1, #2
 8007a4a:	f7ff ffb5 	bl	80079b8 <max2870WriteRegister>
 8007a4e:	e7f1      	b.n	8007a34 <max2870Disable+0x18>

08007a50 <max2870SetMUXOut>:
{
 8007a50:	b570      	push	{r4, r5, r6, lr}
    uint32_t register2 = driver->registers[2] & ~ (0x7 <<  MAX2870_REG2_MUX_OFFSET);
 8007a52:	f8d0 50d0 	ldr.w	r5, [r0, #208]	; 0xd0
    uint32_t register5 = driver->registers[5] & ~ _BV(MAX2870_REG5_MUX_OFFSET);
 8007a56:	f8d0 20dc 	ldr.w	r2, [r0, #220]	; 0xdc
    uint32_t register2 = driver->registers[2] & ~ (0x7 <<  MAX2870_REG2_MUX_OFFSET);
 8007a5a:	f025 53e0 	bic.w	r3, r5, #469762048	; 0x1c000000
    register2 |= (muxOut & 0x7) << MAX2870_REG2_MUX_OFFSET;
 8007a5e:	068d      	lsls	r5, r1, #26
 8007a60:	f005 55e0 	and.w	r5, r5, #469762048	; 0x1c000000
 8007a64:	431d      	orrs	r5, r3
    uint32_t register5 = driver->registers[5] & ~ _BV(MAX2870_REG5_MUX_OFFSET);
 8007a66:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
    if(muxOut & 0x8) {
 8007a6a:	070b      	lsls	r3, r1, #28
        register5 |= _BV(MAX2870_REG5_MUX_OFFSET);
 8007a6c:	bf48      	it	mi
 8007a6e:	f442 2280 	orrmi.w	r2, r2, #262144	; 0x40000
    bool mustUpdateOther = max2870WriteRegister(driver, 5, register5, false);
 8007a72:	2300      	movs	r3, #0
 8007a74:	2105      	movs	r1, #5
{
 8007a76:	4604      	mov	r4, r0
    bool mustUpdateOther = max2870WriteRegister(driver, 5, register5, false);
 8007a78:	f7ff ff9e 	bl	80079b8 <max2870WriteRegister>
    max2870WriteRegister(driver, 2, register2, mustUpdateOther);
 8007a7c:	462a      	mov	r2, r5
    bool mustUpdateOther = max2870WriteRegister(driver, 5, register5, false);
 8007a7e:	4603      	mov	r3, r0
    max2870WriteRegister(driver, 2, register2, mustUpdateOther);
 8007a80:	2102      	movs	r1, #2
 8007a82:	4620      	mov	r0, r4
}
 8007a84:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    max2870WriteRegister(driver, 2, register2, mustUpdateOther);
 8007a88:	f7ff bf96 	b.w	80079b8 <max2870WriteRegister>

08007a8c <max2870WriteAllRegisters>:
{
 8007a8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a90:	4606      	mov	r6, r0
 8007a92:	460f      	mov	r7, r1
 8007a94:	4690      	mov	r8, r2
    for(int i = 5; i>=0; i--) {
 8007a96:	2505      	movs	r5, #5
    bool anyChanged = false;
 8007a98:	2400      	movs	r4, #0
        anyChanged |= max2870WriteRegister(driver, i, registers[i], force || (i==0 && anyChanged));
 8007a9a:	f857 2025 	ldr.w	r2, [r7, r5, lsl #2]
 8007a9e:	f1b8 0f00 	cmp.w	r8, #0
 8007aa2:	d111      	bne.n	8007ac8 <max2870WriteAllRegisters+0x3c>
 8007aa4:	2d00      	cmp	r5, #0
 8007aa6:	bf0c      	ite	eq
 8007aa8:	4623      	moveq	r3, r4
 8007aaa:	2300      	movne	r3, #0
 8007aac:	4629      	mov	r1, r5
 8007aae:	4630      	mov	r0, r6
 8007ab0:	f003 0301 	and.w	r3, r3, #1
 8007ab4:	f7ff ff80 	bl	80079b8 <max2870WriteRegister>
    for(int i = 5; i>=0; i--) {
 8007ab8:	3d01      	subs	r5, #1
        anyChanged |= max2870WriteRegister(driver, i, registers[i], force || (i==0 && anyChanged));
 8007aba:	ea44 0400 	orr.w	r4, r4, r0
 8007abe:	b2e4      	uxtb	r4, r4
    for(int i = 5; i>=0; i--) {
 8007ac0:	d2eb      	bcs.n	8007a9a <max2870WriteAllRegisters+0xe>
}
 8007ac2:	4620      	mov	r0, r4
 8007ac4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        anyChanged |= max2870WriteRegister(driver, i, registers[i], force || (i==0 && anyChanged));
 8007ac8:	2301      	movs	r3, #1
 8007aca:	e7ef      	b.n	8007aac <max2870WriteAllRegisters+0x20>

08007acc <max2870SpiState.constprop.0>:
        spiAcquireBus(driver->config->spiPort);
 8007acc:	6803      	ldr	r3, [r0, #0]
static void max2870SpiState(MAX2870Driver* driver, bool enable)
 8007ace:	b510      	push	{r4, lr}
        spiAcquireBus(driver->config->spiPort);
 8007ad0:	681b      	ldr	r3, [r3, #0]
static void max2870SpiState(MAX2870Driver* driver, bool enable)
 8007ad2:	4604      	mov	r4, r0
 *
 * @api
 */
void spiAcquireBus(SPIDriver *spip) {

  osalDbgCheck(spip != NULL);
 8007ad4:	b913      	cbnz	r3, 8007adc <max2870SpiState.constprop.0+0x10>
 8007ad6:	f7fc fc33 	bl	8004340 <vTaskEndScheduler>
 8007ada:	e7fe      	b.n	8007ada <max2870SpiState.constprop.0+0xe>
    xSemaphoreTake(mutex->handle, portMAX_DELAY);
 8007adc:	68d8      	ldr	r0, [r3, #12]
 8007ade:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007ae2:	f7fd f963 	bl	8004dac <xQueueSemaphoreTake>
        spiStart(driver->config->spiPort, driver->config->spiConfig);
 8007ae6:	6823      	ldr	r3, [r4, #0]
 8007ae8:	681c      	ldr	r4, [r3, #0]
  osalDbgCheck((spip != NULL) && (config != NULL));
 8007aea:	b10c      	cbz	r4, 8007af0 <max2870SpiState.constprop.0+0x24>
 8007aec:	6858      	ldr	r0, [r3, #4]
 8007aee:	b910      	cbnz	r0, 8007af6 <max2870SpiState.constprop.0+0x2a>
 8007af0:	f7fc fc26 	bl	8004340 <vTaskEndScheduler>
 8007af4:	e7fe      	b.n	8007af4 <max2870SpiState.constprop.0+0x28>
  osalSysLock();
 8007af6:	f7fc fb75 	bl	80041e4 <vPortEnterCritical>
  osalDbgAssert((spip->state == SPI_STOP) || (spip->state == SPI_READY),
 8007afa:	7823      	ldrb	r3, [r4, #0]
 8007afc:	1e5a      	subs	r2, r3, #1
 8007afe:	2a01      	cmp	r2, #1
 8007b00:	d902      	bls.n	8007b08 <max2870SpiState.constprop.0+0x3c>
 8007b02:	f7fc fc1d 	bl	8004340 <vTaskEndScheduler>
 8007b06:	e7fe      	b.n	8007b06 <max2870SpiState.constprop.0+0x3a>
  if (spip->state == SPI_STOP) {
 8007b08:	2b01      	cmp	r3, #1
  spip->config = config;
 8007b0a:	6060      	str	r0, [r4, #4]
 8007b0c:	d121      	bne.n	8007b52 <max2870SpiState.constprop.0+0x86>
    if (&SPID1 == spip) {
 8007b0e:	4b25      	ldr	r3, [pc, #148]	; (8007ba4 <max2870SpiState.constprop.0+0xd8>)
 8007b10:	429c      	cmp	r4, r3
 8007b12:	d116      	bne.n	8007b42 <max2870SpiState.constprop.0+0x76>
      b = dmaStreamAllocate(spip->dmarx,
 8007b14:	4622      	mov	r2, r4
 8007b16:	4924      	ldr	r1, [pc, #144]	; (8007ba8 <max2870SpiState.constprop.0+0xdc>)
 8007b18:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8007b1a:	f7fc fc1d 	bl	8004358 <dmaStreamAllocate.constprop.0>
      osalDbgAssert(!b, "stream already allocated");
 8007b1e:	b110      	cbz	r0, 8007b26 <max2870SpiState.constprop.0+0x5a>
 8007b20:	f7fc fc0e 	bl	8004340 <vTaskEndScheduler>
 8007b24:	e7fe      	b.n	8007b24 <max2870SpiState.constprop.0+0x58>
      b = dmaStreamAllocate(spip->dmatx,
 8007b26:	4622      	mov	r2, r4
 8007b28:	4920      	ldr	r1, [pc, #128]	; (8007bac <max2870SpiState.constprop.0+0xe0>)
 8007b2a:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8007b2c:	f7fc fc14 	bl	8004358 <dmaStreamAllocate.constprop.0>
      osalDbgAssert(!b, "stream already allocated");
 8007b30:	b110      	cbz	r0, 8007b38 <max2870SpiState.constprop.0+0x6c>
 8007b32:	f7fc fc05 	bl	8004340 <vTaskEndScheduler>
 8007b36:	e7fe      	b.n	8007b36 <max2870SpiState.constprop.0+0x6a>
      rccEnableSPI1(FALSE);
 8007b38:	4a1d      	ldr	r2, [pc, #116]	; (8007bb0 <max2870SpiState.constprop.0+0xe4>)
 8007b3a:	6993      	ldr	r3, [r2, #24]
 8007b3c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007b40:	6193      	str	r3, [r2, #24]
    dmaStreamSetPeripheral(spip->dmarx, &spip->spi->DR);
 8007b42:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007b44:	685a      	ldr	r2, [r3, #4]
 8007b46:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8007b48:	330c      	adds	r3, #12
 8007b4a:	6093      	str	r3, [r2, #8]
    dmaStreamSetPeripheral(spip->dmatx, &spip->spi->DR);
 8007b4c:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 8007b4e:	6852      	ldr	r2, [r2, #4]
 8007b50:	6093      	str	r3, [r2, #8]
  if ((spip->config->cr1 & SPI_CR1_DFF) == 0) {
 8007b52:	6860      	ldr	r0, [r4, #4]
 8007b54:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8007b56:	8941      	ldrh	r1, [r0, #10]
 8007b58:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 8007b5c:	f411 6f00 	tst.w	r1, #2048	; 0x800
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
 8007b60:	bf16      	itet	ne
 8007b62:	f442 62a0 	orrne.w	r2, r2, #1280	; 0x500
    spip->rxdmamode = (spip->rxdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 8007b66:	66e2      	streq	r2, [r4, #108]	; 0x6c
    spip->rxdmamode = (spip->rxdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 8007b68:	66e2      	strne	r2, [r4, #108]	; 0x6c
  spip->spi->CR1  = 0;
 8007b6a:	f04f 0200 	mov.w	r2, #0
 8007b6e:	6f23      	ldr	r3, [r4, #112]	; 0x70
  spip->spi->CR1  = spip->config->cr1 | SPI_CR1_MSTR | SPI_CR1_SSM |
 8007b70:	f441 7141 	orr.w	r1, r1, #772	; 0x304
 8007b74:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
 8007b78:	bf18      	it	ne
 8007b7a:	f443 63a0 	orrne.w	r3, r3, #1280	; 0x500
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 8007b7e:	6723      	str	r3, [r4, #112]	; 0x70
  spip->spi->CR1  = 0;
 8007b80:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8007b82:	601a      	str	r2, [r3, #0]
  spip->spi->CR2  = spip->config->cr2 | SPI_CR2_SSOE | SPI_CR2_RXDMAEN |
 8007b84:	8982      	ldrh	r2, [r0, #12]
  spip->spi->CR1  = spip->config->cr1 | SPI_CR1_MSTR | SPI_CR1_SSM |
 8007b86:	6019      	str	r1, [r3, #0]
  spip->spi->CR2  = spip->config->cr2 | SPI_CR2_SSOE | SPI_CR2_RXDMAEN |
 8007b88:	f042 0207 	orr.w	r2, r2, #7
 8007b8c:	605a      	str	r2, [r3, #4]
  spip->spi->CR1 |= SPI_CR1_SPE;
 8007b8e:	681a      	ldr	r2, [r3, #0]
 8007b90:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007b94:	601a      	str	r2, [r3, #0]
  spip->state = SPI_READY;
 8007b96:	2302      	movs	r3, #2
 8007b98:	7023      	strb	r3, [r4, #0]
}
 8007b9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  osalSysUnlock();
 8007b9e:	f7fd be59 	b.w	8005854 <osalSysUnlock.lto_priv.0>
 8007ba2:	bf00      	nop
 8007ba4:	20000ee0 	.word	0x20000ee0
 8007ba8:	0800653b 	.word	0x0800653b
 8007bac:	0800652d 	.word	0x0800652d
 8007bb0:	40021000 	.word	0x40021000

08007bb4 <i2cSafeRawUnclogBus>:
{
 8007bb4:	b570      	push	{r4, r5, r6, lr}
 8007bb6:	4605      	mov	r5, r0
    gpioSetPin(config->sclPin, level);
 8007bb8:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 8007bba:	2101      	movs	r1, #1
 8007bbc:	8998      	ldrh	r0, [r3, #12]
 8007bbe:	f7fd fd0d 	bl	80055dc <gpioSetPin>
    gpioSetPin(config->sdaPin, level);
 8007bc2:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 8007bc4:	2101      	movs	r1, #1
 8007bc6:	89d8      	ldrh	r0, [r3, #14]
 8007bc8:	f7fd fd08 	bl	80055dc <gpioSetPin>
    i2cSafeConfig* config = (i2cSafeConfig*)i2c->i2cSafeConfig;
 8007bcc:	6fec      	ldr	r4, [r5, #124]	; 0x7c
    gpioSetPinMode(config->sdaPin, PAL_MODE_OUTPUT_OPENDRAIN);
 8007bce:	2107      	movs	r1, #7
 8007bd0:	89e0      	ldrh	r0, [r4, #14]
 8007bd2:	f7fd fce5 	bl	80055a0 <gpioSetPinMode>
    gpioSetPinMode(config->sclPin, PAL_MODE_OUTPUT_OPENDRAIN);
 8007bd6:	2107      	movs	r1, #7
 8007bd8:	89a0      	ldrh	r0, [r4, #12]
 8007bda:	f7fd fce1 	bl	80055a0 <gpioSetPinMode>
  osalSysLock();
 8007bde:	f7fc fb01 	bl	80041e4 <vPortEnterCritical>
  osalDbgAssert((i2cp->state == I2C_STOP) || (i2cp->state == I2C_READY) ||
 8007be2:	782b      	ldrb	r3, [r5, #0]
 8007be4:	1e5a      	subs	r2, r3, #1
 8007be6:	2a01      	cmp	r2, #1
 8007be8:	d904      	bls.n	8007bf4 <i2cSafeRawUnclogBus+0x40>
 8007bea:	2b05      	cmp	r3, #5
 8007bec:	d004      	beq.n	8007bf8 <i2cSafeRawUnclogBus+0x44>
 8007bee:	f7fc fba7 	bl	8004340 <vTaskEndScheduler>
 8007bf2:	e7fe      	b.n	8007bf2 <i2cSafeRawUnclogBus+0x3e>
 * @notapi
 */
void i2c_lld_stop(I2CDriver *i2cp) {

  /* If not in stopped state then disables the I2C clock.*/
  if (i2cp->state != I2C_STOP) {
 8007bf4:	2b01      	cmp	r3, #1
 8007bf6:	d036      	beq.n	8007c66 <i2cSafeRawUnclogBus+0xb2>
  dp->CR1 = I2C_CR1_SWRST;
 8007bf8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  dp->CR1 = 0;
 8007bfc:	2400      	movs	r4, #0
  I2C_TypeDef *dp = i2cp->i2c;
 8007bfe:	6fab      	ldr	r3, [r5, #120]	; 0x78
  dmaStreamDisable(i2cp->dmatx);
 8007c00:	6f68      	ldr	r0, [r5, #116]	; 0x74
  dp->CR1 = I2C_CR1_SWRST;
 8007c02:	601a      	str	r2, [r3, #0]
  dmaStreamDisable(i2cp->dmatx);
 8007c04:	6842      	ldr	r2, [r0, #4]
  dp->CR1 = 0;
 8007c06:	601c      	str	r4, [r3, #0]
  dp->CR2 = 0;
 8007c08:	605c      	str	r4, [r3, #4]
  dp->SR1 = 0;
 8007c0a:	615c      	str	r4, [r3, #20]
  dmaStreamDisable(i2cp->dmatx);
 8007c0c:	6813      	ldr	r3, [r2, #0]
 8007c0e:	6801      	ldr	r1, [r0, #0]
 8007c10:	f023 030f 	bic.w	r3, r3, #15
 8007c14:	6013      	str	r3, [r2, #0]
 8007c16:	230e      	movs	r3, #14
 8007c18:	7c02      	ldrb	r2, [r0, #16]
 8007c1a:	fa03 f202 	lsl.w	r2, r3, r2
 8007c1e:	604a      	str	r2, [r1, #4]
  dmaStreamDisable(i2cp->dmarx);
 8007c20:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8007c22:	6856      	ldr	r6, [r2, #4]
 8007c24:	6831      	ldr	r1, [r6, #0]
 8007c26:	f021 010f 	bic.w	r1, r1, #15
 8007c2a:	6031      	str	r1, [r6, #0]
 8007c2c:	6811      	ldr	r1, [r2, #0]
 8007c2e:	7c12      	ldrb	r2, [r2, #16]
 8007c30:	4093      	lsls	r3, r2
 8007c32:	604b      	str	r3, [r1, #4]

    /* I2C disable.*/
    i2c_lld_abort_operation(i2cp);
    dmaStreamRelease(i2cp->dmatx);
 8007c34:	f7fe fe28 	bl	8006888 <dmaStreamRelease>
    dmaStreamRelease(i2cp->dmarx);
 8007c38:	6f28      	ldr	r0, [r5, #112]	; 0x70
 8007c3a:	f7fe fe25 	bl	8006888 <dmaStreamRelease>

#if STM32_I2C_USE_I2C1
    if (&I2CD1 == i2cp) {
 8007c3e:	4b3a      	ldr	r3, [pc, #232]	; (8007d28 <i2cSafeRawUnclogBus+0x174>)
 8007c40:	429d      	cmp	r5, r3
 8007c42:	d110      	bne.n	8007c66 <i2cSafeRawUnclogBus+0xb2>
  NVIC->ICER[n >> 5U] = 1U << (n & 0x1FU);
 8007c44:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007c48:	4b38      	ldr	r3, [pc, #224]	; (8007d2c <i2cSafeRawUnclogBus+0x178>)
 8007c4a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8007c4e:	2201      	movs	r2, #1
  NVIC->IP[n] = 0U;
 8007c50:	f883 431f 	strb.w	r4, [r3, #799]	; 0x31f
  NVIC->ICER[n >> 5U] = 1U << (n & 0x1FU);
 8007c54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      nvicDisableVector(I2C1_EV_IRQn);
      nvicDisableVector(I2C1_ER_IRQn);
      rccDisableI2C1(FALSE);
 8007c58:	4a35      	ldr	r2, [pc, #212]	; (8007d30 <i2cSafeRawUnclogBus+0x17c>)
  NVIC->IP[n] = 0U;
 8007c5a:	f883 4320 	strb.w	r4, [r3, #800]	; 0x320
 8007c5e:	69d3      	ldr	r3, [r2, #28]
 8007c60:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007c64:	61d3      	str	r3, [r2, #28]
  i2cp->config = NULL;
 8007c66:	2300      	movs	r3, #0
 8007c68:	606b      	str	r3, [r5, #4]
  i2cp->state  = I2C_STOP;
 8007c6a:	2301      	movs	r3, #1
 8007c6c:	702b      	strb	r3, [r5, #0]
  osalSysUnlock();
 8007c6e:	f7fd fdf1 	bl	8005854 <osalSysUnlock.lto_priv.0>
    vPortBusyDelay(i2cSafe_CYCLE_DELAY);
 8007c72:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8007c76:	f7fc fa2d 	bl	80040d4 <vPortBusyDelay>
    i2cSafeDataGoHigh(i2c);
 8007c7a:	4628      	mov	r0, r5
 8007c7c:	f7fd fda6 	bl	80057cc <i2cSafeDataGoHigh>
 8007c80:	2648      	movs	r6, #72	; 0x48
        if((retVal = i2cSafeClockGoHigh(i2c)) != I2C_BUS_OK) goto done;        
 8007c82:	4628      	mov	r0, r5
 8007c84:	f7fd fdca 	bl	800581c <i2cSafeClockGoHigh>
 8007c88:	4604      	mov	r4, r0
 8007c8a:	2800      	cmp	r0, #0
 8007c8c:	d142      	bne.n	8007d14 <i2cSafeRawUnclogBus+0x160>
        if((retVal = i2cSafeClockGoLow(i2c)) != I2C_BUS_OK) goto done;
 8007c8e:	4628      	mov	r0, r5
 8007c90:	f7fd fdb0 	bl	80057f4 <i2cSafeClockGoLow>
 8007c94:	4604      	mov	r4, r0
 8007c96:	2800      	cmp	r0, #0
 8007c98:	d13c      	bne.n	8007d14 <i2cSafeRawUnclogBus+0x160>
    for(i=0; i<clocks; i++) {
 8007c9a:	3e01      	subs	r6, #1
 8007c9c:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
 8007ca0:	d1ef      	bne.n	8007c82 <i2cSafeRawUnclogBus+0xce>
    if((retVal = i2cSafeClockGoHigh(i2c)) != I2C_BUS_OK) goto done;        
 8007ca2:	4628      	mov	r0, r5
 8007ca4:	f7fd fdba 	bl	800581c <i2cSafeClockGoHigh>
 8007ca8:	4604      	mov	r4, r0
 8007caa:	bb98      	cbnz	r0, 8007d14 <i2cSafeRawUnclogBus+0x160>
    return gpioGetPin(config->sdaPin);
 8007cac:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 8007cae:	89d8      	ldrh	r0, [r3, #14]
 8007cb0:	f7fd fc82 	bl	80055b8 <gpioGetPin>
    if(!i2cSafeRawGetData(i2c)){
 8007cb4:	b398      	cbz	r0, 8007d1e <i2cSafeRawUnclogBus+0x16a>
    if((retVal = i2cSafeDataGoLow(i2c)) != I2C_BUS_OK) goto done;        
 8007cb6:	4628      	mov	r0, r5
 8007cb8:	f7fd fd74 	bl	80057a4 <i2cSafeDataGoLow>
 8007cbc:	4604      	mov	r4, r0
 8007cbe:	bb48      	cbnz	r0, 8007d14 <i2cSafeRawUnclogBus+0x160>
    if((retVal = i2cSafeClockGoLow(i2c)) != I2C_BUS_OK) goto done;        
 8007cc0:	4628      	mov	r0, r5
 8007cc2:	f7fd fd97 	bl	80057f4 <i2cSafeClockGoLow>
 8007cc6:	4604      	mov	r4, r0
 8007cc8:	bb20      	cbnz	r0, 8007d14 <i2cSafeRawUnclogBus+0x160>
    i2cSafeDataGoHigh(i2c);
 8007cca:	4628      	mov	r0, r5
 8007ccc:	f7fd fd7e 	bl	80057cc <i2cSafeDataGoHigh>
 8007cd0:	2609      	movs	r6, #9
        if((retVal = i2cSafeClockGoHigh(i2c)) != I2C_BUS_OK) goto done;        
 8007cd2:	4628      	mov	r0, r5
 8007cd4:	f7fd fda2 	bl	800581c <i2cSafeClockGoHigh>
 8007cd8:	4604      	mov	r4, r0
 8007cda:	b9d8      	cbnz	r0, 8007d14 <i2cSafeRawUnclogBus+0x160>
        if((retVal = i2cSafeClockGoLow(i2c)) != I2C_BUS_OK) goto done;
 8007cdc:	4628      	mov	r0, r5
 8007cde:	f7fd fd89 	bl	80057f4 <i2cSafeClockGoLow>
 8007ce2:	4604      	mov	r4, r0
 8007ce4:	b9b0      	cbnz	r0, 8007d14 <i2cSafeRawUnclogBus+0x160>
    return gpioGetPin(config->sdaPin);
 8007ce6:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 8007ce8:	89d8      	ldrh	r0, [r3, #14]
 8007cea:	f7fd fc65 	bl	80055b8 <gpioGetPin>
        if(checkData && !i2cSafeRawGetData(i2c)){
 8007cee:	b1c0      	cbz	r0, 8007d22 <i2cSafeRawUnclogBus+0x16e>
    for(i=0; i<clocks; i++) {
 8007cf0:	3e01      	subs	r6, #1
 8007cf2:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
 8007cf6:	d1ec      	bne.n	8007cd2 <i2cSafeRawUnclogBus+0x11e>
    if((retVal = i2cSafeDataGoLow(i2c)) != I2C_BUS_OK) goto done;        
 8007cf8:	4628      	mov	r0, r5
 8007cfa:	f7fd fd53 	bl	80057a4 <i2cSafeDataGoLow>
 8007cfe:	4604      	mov	r4, r0
 8007d00:	b940      	cbnz	r0, 8007d14 <i2cSafeRawUnclogBus+0x160>
    if((retVal = i2cSafeClockGoHigh(i2c)) != I2C_BUS_OK) goto done;        
 8007d02:	4628      	mov	r0, r5
 8007d04:	f7fd fd8a 	bl	800581c <i2cSafeClockGoHigh>
 8007d08:	4604      	mov	r4, r0
 8007d0a:	b918      	cbnz	r0, 8007d14 <i2cSafeRawUnclogBus+0x160>
    if((retVal = i2cSafeDataGoHigh(i2c)) != I2C_BUS_OK) goto done;        
 8007d0c:	4628      	mov	r0, r5
 8007d0e:	f7fd fd5d 	bl	80057cc <i2cSafeDataGoHigh>
 8007d12:	4604      	mov	r4, r0
    i2cSafeRawHardwareControl(i2c);
 8007d14:	4628      	mov	r0, r5
 8007d16:	f7fd fdd1 	bl	80058bc <i2cSafeRawHardwareControl>
}
 8007d1a:	4620      	mov	r0, r4
 8007d1c:	bd70      	pop	{r4, r5, r6, pc}
        retVal = I2C_BUS_STUCK_SDA_PULLED_LOW;
 8007d1e:	2402      	movs	r4, #2
 8007d20:	e7f8      	b.n	8007d14 <i2cSafeRawUnclogBus+0x160>
            return I2C_BUS_STUCK_SHORTED_TOGETHER;
 8007d22:	2405      	movs	r4, #5
 8007d24:	e7f6      	b.n	8007d14 <i2cSafeRawUnclogBus+0x160>
 8007d26:	bf00      	nop
 8007d28:	20000934 	.word	0x20000934
 8007d2c:	e000e100 	.word	0xe000e100
 8007d30:	40021000 	.word	0x40021000

08007d34 <sanityRebootMonitorTask>:
{
 8007d34:	b508      	push	{r3, lr}
    uint32_t numberOfSeconds = sanityRebootSeconds;
 8007d36:	4b14      	ldr	r3, [pc, #80]	; (8007d88 <sanityRebootMonitorTask+0x54>)
 8007d38:	6819      	ldr	r1, [r3, #0]
    if(numberOfSeconds &&
 8007d3a:	b199      	cbz	r1, 8007d64 <sanityRebootMonitorTask+0x30>
 8007d3c:	f7fc f9d2 	bl	80040e4 <vPortValidateInterruptPriority>
 8007d40:	4b12      	ldr	r3, [pc, #72]	; (8007d8c <sanityRebootMonitorTask+0x58>)
 8007d42:	681a      	ldr	r2, [r3, #0]
            osalOsGetSystemTimeX() >= OSAL_S2ST(numberOfSeconds)) {
 8007d44:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007d48:	434b      	muls	r3, r1
    if(numberOfSeconds &&
 8007d4a:	4293      	cmp	r3, r2
 8007d4c:	d80a      	bhi.n	8007d64 <sanityRebootMonitorTask+0x30>
        RCC->APB1ENR |= (RCC_APB1ENR_PWREN | RCC_APB1ENR_BKPEN);
 8007d4e:	4a10      	ldr	r2, [pc, #64]	; (8007d90 <sanityRebootMonitorTask+0x5c>)
 8007d50:	69d3      	ldr	r3, [r2, #28]
 8007d52:	f043 53c0 	orr.w	r3, r3, #402653184	; 0x18000000
 8007d56:	61d3      	str	r3, [r2, #28]
        BKP->DR10 = 0x424D;
 8007d58:	f244 224d 	movw	r2, #16973	; 0x424d
 8007d5c:	4b0d      	ldr	r3, [pc, #52]	; (8007d94 <sanityRebootMonitorTask+0x60>)
 8007d5e:	629a      	str	r2, [r3, #40]	; 0x28
        NVIC_SystemReset();
 8007d60:	f7fd fff0 	bl	8005d44 <NVIC_SystemReset.lto_priv.0>
 */
void wdgReset(WDGDriver *wdgp) {

  osalDbgCheck(wdgp != NULL);

  osalSysLock();
 8007d64:	f7fc fa3e 	bl	80041e4 <vPortEnterCritical>
  osalDbgAssert(wdgp->state == WDG_READY, "not ready");
 8007d68:	4b0b      	ldr	r3, [pc, #44]	; (8007d98 <sanityRebootMonitorTask+0x64>)
 8007d6a:	781a      	ldrb	r2, [r3, #0]
 8007d6c:	2a02      	cmp	r2, #2
 8007d6e:	d002      	beq.n	8007d76 <sanityRebootMonitorTask+0x42>
 8007d70:	f7fc fae6 	bl	8004340 <vTaskEndScheduler>
 8007d74:	e7fe      	b.n	8007d74 <sanityRebootMonitorTask+0x40>
 *
 * @notapi
 */
void wdg_lld_reset(WDGDriver * wdgp) {

  wdgp->wdg->KR = KR_KEY_RELOAD;
 8007d76:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8007d7a:	689b      	ldr	r3, [r3, #8]
 8007d7c:	601a      	str	r2, [r3, #0]
  wdgResetI(wdgp);
  osalSysUnlock();
 8007d7e:	f7fd fd69 	bl	8005854 <osalSysUnlock.lto_priv.0>
}
 8007d82:	2001      	movs	r0, #1
 8007d84:	bd08      	pop	{r3, pc}
 8007d86:	bf00      	nop
 8007d88:	20000858 	.word	0x20000858
 8007d8c:	20001648 	.word	0x20001648
 8007d90:	40021000 	.word	0x40021000
 8007d94:	40006c00 	.word	0x40006c00
 8007d98:	20000fdc 	.word	0x20000fdc

08007d9c <max2870ReadRegister6>:
{
 8007d9c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    max2870SetMUXOut(driver, 0xC);
 8007d9e:	210c      	movs	r1, #12
{
 8007da0:	4605      	mov	r5, r0
    max2870SetMUXOut(driver, 0xC);
 8007da2:	f7ff fe55 	bl	8007a50 <max2870SetMUXOut>
    uint8_t data[5]= {0, 0, 0, 0x6};
 8007da6:	4b2b      	ldr	r3, [pc, #172]	; (8007e54 <max2870ReadRegister6+0xb8>)
  osalDbgAssert(spip->state == SPI_READY, "not ready");
 8007da8:	4c2b      	ldr	r4, [pc, #172]	; (8007e58 <max2870ReadRegister6+0xbc>)
 8007daa:	6818      	ldr	r0, [r3, #0]
 8007dac:	791b      	ldrb	r3, [r3, #4]
 8007dae:	9000      	str	r0, [sp, #0]
 8007db0:	f88d 3004 	strb.w	r3, [sp, #4]
    spiSelect(&SPID1);
 8007db4:	f7ff fdd4 	bl	8007960 <spiSelect.constprop.0>
  osalSysLock();
 8007db8:	f7fc fa14 	bl	80041e4 <vPortEnterCritical>
  osalDbgAssert(spip->state == SPI_READY, "not ready");
 8007dbc:	7823      	ldrb	r3, [r4, #0]
 8007dbe:	2b02      	cmp	r3, #2
 8007dc0:	d002      	beq.n	8007dc8 <max2870ReadRegister6+0x2c>
 8007dc2:	f7fc fabd 	bl	8004340 <vTaskEndScheduler>
 8007dc6:	e7fe      	b.n	8007dc6 <max2870ReadRegister6+0x2a>
  osalDbgAssert(spip->config->end_cb == NULL, "has callback");
 8007dc8:	6863      	ldr	r3, [r4, #4]
 8007dca:	681e      	ldr	r6, [r3, #0]
 8007dcc:	b116      	cbz	r6, 8007dd4 <max2870ReadRegister6+0x38>
 8007dce:	f7fc fab7 	bl	8004340 <vTaskEndScheduler>
 8007dd2:	e7fe      	b.n	8007dd2 <max2870ReadRegister6+0x36>
 8007dd4:	4668      	mov	r0, sp
 8007dd6:	f7ff fd99 	bl	800790c <spiSend.part.0.constprop.0>
    spiUnselect(&SPID1);
 8007dda:	f7ff fdd7 	bl	800798c <spiUnselect.constprop.0>
    data[3] = 0;
 8007dde:	f88d 6003 	strb.w	r6, [sp, #3]
  osalSysLock();
 8007de2:	f7fc f9ff 	bl	80041e4 <vPortEnterCritical>
  osalDbgAssert(spip->state == SPI_READY, "not ready");
 8007de6:	7823      	ldrb	r3, [r4, #0]
 8007de8:	2b02      	cmp	r3, #2
 8007dea:	d002      	beq.n	8007df2 <max2870ReadRegister6+0x56>
 8007dec:	f7fc faa8 	bl	8004340 <vTaskEndScheduler>
 8007df0:	e7fe      	b.n	8007df0 <max2870ReadRegister6+0x54>
  osalDbgAssert(spip->config->end_cb == NULL, "has callback");
 8007df2:	6863      	ldr	r3, [r4, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	b113      	cbz	r3, 8007dfe <max2870ReadRegister6+0x62>
 8007df8:	f7fc faa2 	bl	8004340 <vTaskEndScheduler>
 8007dfc:	e7fe      	b.n	8007dfc <max2870ReadRegister6+0x60>
  spiStartExchangeI(spip, n, txbuf, rxbuf);
 8007dfe:	2303      	movs	r3, #3
  dmaStreamSetTransactionSize(spip->dmarx, n);
 8007e00:	2104      	movs	r1, #4
 8007e02:	7023      	strb	r3, [r4, #0]
  dmaStreamSetMemory0(spip->dmarx, rxbuf);
 8007e04:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007e06:	f104 0008 	add.w	r0, r4, #8
 8007e0a:	685a      	ldr	r2, [r3, #4]
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode| STM32_DMA_CR_MINC);
 8007e0c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  dmaStreamSetMemory0(spip->dmarx, rxbuf);
 8007e0e:	f8c2 d00c 	str.w	sp, [r2, #12]
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode| STM32_DMA_CR_MINC);
 8007e12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  dmaStreamSetTransactionSize(spip->dmarx, n);
 8007e16:	6051      	str	r1, [r2, #4]
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode| STM32_DMA_CR_MINC);
 8007e18:	6013      	str	r3, [r2, #0]
  dmaStreamSetMemory0(spip->dmatx, txbuf);
 8007e1a:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8007e1c:	685b      	ldr	r3, [r3, #4]
 8007e1e:	f8c3 d00c 	str.w	sp, [r3, #12]
  dmaStreamSetTransactionSize(spip->dmatx, n);
 8007e22:	6059      	str	r1, [r3, #4]
  dmaStreamSetMode(spip->dmatx, spip->txdmamode | STM32_DMA_CR_MINC);
 8007e24:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8007e26:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8007e2a:	6019      	str	r1, [r3, #0]
  dmaStreamEnable(spip->dmarx);
 8007e2c:	6811      	ldr	r1, [r2, #0]
 8007e2e:	f041 0101 	orr.w	r1, r1, #1
 8007e32:	6011      	str	r1, [r2, #0]
  dmaStreamEnable(spip->dmatx);
 8007e34:	681a      	ldr	r2, [r3, #0]
 8007e36:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007e3a:	f042 0201 	orr.w	r2, r2, #1
 8007e3e:	601a      	str	r2, [r3, #0]
 8007e40:	f7fc fc62 	bl	8004708 <osalThreadSuspendTimeoutS>
  osalSysUnlock();
 8007e44:	f7fd fd06 	bl	8005854 <osalSysUnlock.lto_priv.0>
    driver->registers[6] = (data[0] << 24) | (data[1] << 16) | (data[2] << 8) | data[3];
 8007e48:	9800      	ldr	r0, [sp, #0]
 8007e4a:	ba00      	rev	r0, r0
 8007e4c:	f8c5 00e0 	str.w	r0, [r5, #224]	; 0xe0
}
 8007e50:	b002      	add	sp, #8
 8007e52:	bd70      	pop	{r4, r5, r6, pc}
 8007e54:	0800b8a0 	.word	0x0800b8a0
 8007e58:	20000ee0 	.word	0x20000ee0

08007e5c <VectorDC>:
/**
 * @brief   USART3 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_USART3_HANDLER) {
 8007e5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  USART_TypeDef *u = sdp->usart;
 8007e60:	4c62      	ldr	r4, [pc, #392]	; (8007fec <VectorDC+0x190>)
 8007e62:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
  uint16_t cr1 = u->CR1;
 8007e66:	68f7      	ldr	r7, [r6, #12]
  uint16_t sr = u->SR;
 8007e68:	6833      	ldr	r3, [r6, #0]
  if (sr & USART_SR_LBD) {
 8007e6a:	05da      	lsls	r2, r3, #23
  uint16_t sr = u->SR;
 8007e6c:	b29d      	uxth	r5, r3
  if (sr & USART_SR_LBD) {
 8007e6e:	d50b      	bpl.n	8007e88 <VectorDC+0x2c>
    osalSysLockFromISR();
 8007e70:	f7fd febc 	bl	8005bec <osalSysLockFromISR.lto_priv.0>
    chnAddFlagsI(sdp, SD_BREAK_DETECTED);
 8007e74:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007e78:	1d20      	adds	r0, r4, #4
 8007e7a:	f7fc fb44 	bl	8004506 <osalEventBroadcastFlagsI>
    u->SR = ~USART_SR_LBD;
 8007e7e:	f46f 7380 	mvn.w	r3, #256	; 0x100
 8007e82:	6033      	str	r3, [r6, #0]
    osalSysUnlockFromISR();
 8007e84:	f7fd feac 	bl	8005be0 <osalSysUnlockFromISR.lto_priv.0>
  osalSysLockFromISR();
 8007e88:	f7fd feb0 	bl	8005bec <osalSysLockFromISR.lto_priv.0>
  chnAddFlagsI(sdp, sts);
 8007e8c:	f8df 8164 	ldr.w	r8, [pc, #356]	; 8007ff4 <VectorDC+0x198>
  osalThreadDequeueNextI(&iqp->q_waiting, MSG_OK);
 8007e90:	f108 0914 	add.w	r9, r8, #20
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 8007e94:	f015 0f2f 	tst.w	r5, #47	; 0x2f
 8007e98:	d124      	bne.n	8007ee4 <VectorDC+0x88>
  osalSysUnlockFromISR();
 8007e9a:	f7fd fea1 	bl	8005be0 <osalSysUnlockFromISR.lto_priv.0>
  if ((cr1 & USART_CR1_TXEIE) && (sr & USART_SR_TXE)) {
 8007e9e:	0639      	lsls	r1, r7, #24
 8007ea0:	d57b      	bpl.n	8007f9a <VectorDC+0x13e>
 8007ea2:	062a      	lsls	r2, r5, #24
 8007ea4:	d579      	bpl.n	8007f9a <VectorDC+0x13e>
    osalSysLockFromISR();
 8007ea6:	f7fd fea1 	bl	8005bec <osalSysLockFromISR.lto_priv.0>
	__asm volatile( "mrs %0, basepri" : "=r"( ulBasePri ) );
 8007eaa:	f3ef 8311 	mrs	r3, BASEPRI
	return (ulBasePri > 0)? pdTRUE : pdFALSE;
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	f000 8097 	beq.w	8007fe2 <VectorDC+0x186>
  if (oqIsEmptyI(oqp)) {
 8007eb4:	e9d4 2314 	ldrd	r2, r3, [r4, #80]	; 0x50
 8007eb8:	429a      	cmp	r2, r3
 8007eba:	d102      	bne.n	8007ec2 <VectorDC+0x66>
 8007ebc:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8007ebe:	2a00      	cmp	r2, #0
 8007ec0:	d15f      	bne.n	8007f82 <VectorDC+0x126>
  oqp->q_counter++;
 8007ec2:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8007ec4:	3201      	adds	r2, #1
 8007ec6:	6462      	str	r2, [r4, #68]	; 0x44
  b = *oqp->q_rdptr++;
 8007ec8:	1c5a      	adds	r2, r3, #1
 8007eca:	6562      	str	r2, [r4, #84]	; 0x54
 8007ecc:	f893 8000 	ldrb.w	r8, [r3]
  if (oqp->q_rdptr >= oqp->q_top) {
 8007ed0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8007ed2:	429a      	cmp	r2, r3
 8007ed4:	f080 8082 	bcs.w	8007fdc <VectorDC+0x180>
  osalThreadDequeueNextI(&oqp->q_waiting, MSG_OK);
 8007ed8:	4845      	ldr	r0, [pc, #276]	; (8007ff0 <VectorDC+0x194>)
 8007eda:	f7fc fb6c 	bl	80045b6 <osalThreadDequeueNextI.constprop.0>
      u->DR = b;
 8007ede:	f8c6 8004 	str.w	r8, [r6, #4]
 8007ee2:	e058      	b.n	8007f96 <VectorDC+0x13a>
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
 8007ee4:	072b      	lsls	r3, r5, #28
 8007ee6:	d013      	beq.n	8007f10 <VectorDC+0xb4>
    sts |= SD_OVERRUN_ERROR;
 8007ee8:	f015 0f08 	tst.w	r5, #8
 8007eec:	bf0c      	ite	eq
 8007eee:	2100      	moveq	r1, #0
 8007ef0:	2180      	movne	r1, #128	; 0x80
  if (sr & USART_SR_PE)
 8007ef2:	07e8      	lsls	r0, r5, #31
    sts |= SD_PARITY_ERROR;
 8007ef4:	bf48      	it	mi
 8007ef6:	f041 0120 	orrmi.w	r1, r1, #32
  if (sr & USART_SR_FE)
 8007efa:	07aa      	lsls	r2, r5, #30
    sts |= SD_FRAMING_ERROR;
 8007efc:	bf48      	it	mi
 8007efe:	f041 0140 	orrmi.w	r1, r1, #64	; 0x40
  if (sr & USART_SR_NE)
 8007f02:	076b      	lsls	r3, r5, #29
  chnAddFlagsI(sdp, sts);
 8007f04:	4640      	mov	r0, r8
    sts |= SD_NOISE_ERROR;
 8007f06:	bf48      	it	mi
 8007f08:	f441 7180 	orrmi.w	r1, r1, #256	; 0x100
  chnAddFlagsI(sdp, sts);
 8007f0c:	f7fc fafb 	bl	8004506 <osalEventBroadcastFlagsI>
    if (sr & USART_SR_RXNE)
 8007f10:	06a8      	lsls	r0, r5, #26
    b = (uint8_t)u->DR & sdp->rxmask;
 8007f12:	f8d6 a004 	ldr.w	sl, [r6, #4]
    if (sr & USART_SR_RXNE)
 8007f16:	d51b      	bpl.n	8007f50 <VectorDC+0xf4>
	__asm volatile( "mrs %0, basepri" : "=r"( ulBasePri ) );
 8007f18:	f3ef 8311 	mrs	r3, BASEPRI
	return (ulBasePri > 0)? pdTRUE : pdFALSE;
 8007f1c:	b913      	cbnz	r3, 8007f24 <VectorDC+0xc8>
 *
 * @iclass
 */
void sdIncomingDataI(SerialDriver *sdp, uint8_t b) {

  osalDbgCheckClassI();
 8007f1e:	f7fc fa0f 	bl	8004340 <vTaskEndScheduler>
 8007f22:	e7fe      	b.n	8007f22 <VectorDC+0xc6>
  osalDbgCheck(sdp != NULL);

  if (iqIsEmptyI(&sdp->iqueue))
 8007f24:	6a23      	ldr	r3, [r4, #32]
    b = (uint8_t)u->DR & sdp->rxmask;
 8007f26:	f894 5084 	ldrb.w	r5, [r4, #132]	; 0x84
 8007f2a:	b91b      	cbnz	r3, 8007f34 <VectorDC+0xd8>
    chnAddFlagsI(sdp, CHN_INPUT_AVAILABLE);
 8007f2c:	2104      	movs	r1, #4
 8007f2e:	4640      	mov	r0, r8
 8007f30:	f7fc fae9 	bl	8004506 <osalEventBroadcastFlagsI>
	__asm volatile( "mrs %0, basepri" : "=r"( ulBasePri ) );
 8007f34:	f3ef 8311 	mrs	r3, BASEPRI
	return (ulBasePri > 0)? pdTRUE : pdFALSE;
 8007f38:	b303      	cbz	r3, 8007f7c <VectorDC+0x120>
  if (iqIsFullI(iqp)) {
 8007f3a:	e9d4 320b 	ldrd	r3, r2, [r4, #44]	; 0x2c
 8007f3e:	4293      	cmp	r3, r2
 8007f40:	d109      	bne.n	8007f56 <VectorDC+0xfa>
 8007f42:	6a22      	ldr	r2, [r4, #32]
 8007f44:	b13a      	cbz	r2, 8007f56 <VectorDC+0xfa>
  if (iqPutI(&sdp->iqueue, b) < MSG_OK)
    chnAddFlagsI(sdp, SD_QUEUE_FULL_ERROR);
 8007f46:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007f4a:	4640      	mov	r0, r8
 8007f4c:	f7fc fadb 	bl	8004506 <osalEventBroadcastFlagsI>
    sr = u->SR;
 8007f50:	6835      	ldr	r5, [r6, #0]
 8007f52:	b2ad      	uxth	r5, r5
 8007f54:	e79e      	b.n	8007e94 <VectorDC+0x38>
  iqp->q_counter++;
 8007f56:	6a22      	ldr	r2, [r4, #32]
    b = (uint8_t)u->DR & sdp->rxmask;
 8007f58:	ea05 050a 	and.w	r5, r5, sl
 8007f5c:	3201      	adds	r2, #1
 8007f5e:	6222      	str	r2, [r4, #32]
  *iqp->q_wrptr++ = b;
 8007f60:	1c5a      	adds	r2, r3, #1
 8007f62:	62e2      	str	r2, [r4, #44]	; 0x2c
 8007f64:	701d      	strb	r5, [r3, #0]
  if (iqp->q_wrptr >= iqp->q_top) {
 8007f66:	e9d4 320a 	ldrd	r3, r2, [r4, #40]	; 0x28
 8007f6a:	429a      	cmp	r2, r3
    iqp->q_wrptr = iqp->q_buffer;
 8007f6c:	bf28      	it	cs
 8007f6e:	6a63      	ldrcs	r3, [r4, #36]	; 0x24
  osalThreadDequeueNextI(&iqp->q_waiting, MSG_OK);
 8007f70:	4648      	mov	r0, r9
    iqp->q_wrptr = iqp->q_buffer;
 8007f72:	bf28      	it	cs
 8007f74:	62e3      	strcs	r3, [r4, #44]	; 0x2c
  osalThreadDequeueNextI(&iqp->q_waiting, MSG_OK);
 8007f76:	f7fc fb1e 	bl	80045b6 <osalThreadDequeueNextI.constprop.0>
 8007f7a:	e7e9      	b.n	8007f50 <VectorDC+0xf4>
  osalDbgCheckClassI();
 8007f7c:	f7fc f9e0 	bl	8004340 <vTaskEndScheduler>
 8007f80:	e7fe      	b.n	8007f80 <VectorDC+0x124>
      chnAddFlagsI(sdp, CHN_OUTPUT_EMPTY);
 8007f82:	2108      	movs	r1, #8
 8007f84:	481b      	ldr	r0, [pc, #108]	; (8007ff4 <VectorDC+0x198>)
 8007f86:	f7fc fabe 	bl	8004506 <osalEventBroadcastFlagsI>
      u->CR1 = (cr1 & ~USART_CR1_TXEIE) | USART_CR1_TCIE;
 8007f8a:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8007f8e:	403b      	ands	r3, r7
 8007f90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f94:	60f3      	str	r3, [r6, #12]
    osalSysUnlockFromISR();
 8007f96:	f7fd fe23 	bl	8005be0 <osalSysUnlockFromISR.lto_priv.0>
  if (sr & USART_SR_TC) {
 8007f9a:	066b      	lsls	r3, r5, #25
 8007f9c:	d515      	bpl.n	8007fca <VectorDC+0x16e>
    osalSysLockFromISR();
 8007f9e:	f7fd fe25 	bl	8005bec <osalSysLockFromISR.lto_priv.0>
    if (oqIsEmptyI(&sdp->oqueue))
 8007fa2:	e9d4 2314 	ldrd	r2, r3, [r4, #80]	; 0x50
 8007fa6:	429a      	cmp	r2, r3
 8007fa8:	d105      	bne.n	8007fb6 <VectorDC+0x15a>
 8007faa:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8007fac:	b11b      	cbz	r3, 8007fb6 <VectorDC+0x15a>
      chnAddFlagsI(sdp, CHN_TRANSMISSION_END);
 8007fae:	2110      	movs	r1, #16
 8007fb0:	4810      	ldr	r0, [pc, #64]	; (8007ff4 <VectorDC+0x198>)
 8007fb2:	f7fc faa8 	bl	8004506 <osalEventBroadcastFlagsI>
    u->SR = ~USART_SR_TC;
 8007fb6:	f06f 0340 	mvn.w	r3, #64	; 0x40
    u->CR1 = cr1 & ~USART_CR1_TCIE;
 8007fba:	f027 0740 	bic.w	r7, r7, #64	; 0x40
 8007fbe:	043f      	lsls	r7, r7, #16
 8007fc0:	0c3f      	lsrs	r7, r7, #16
 8007fc2:	60f7      	str	r7, [r6, #12]
    u->SR = ~USART_SR_TC;
 8007fc4:	6033      	str	r3, [r6, #0]
    osalSysUnlockFromISR();
 8007fc6:	f7fd fe0b 	bl	8005be0 <osalSysUnlockFromISR.lto_priv.0>
 8007fca:	2100      	movs	r1, #0
 8007fcc:	4b0a      	ldr	r3, [pc, #40]	; (8007ff8 <VectorDC+0x19c>)
 8007fce:	681a      	ldr	r2, [r3, #0]
 8007fd0:	6019      	str	r1, [r3, #0]

  OSAL_IRQ_PROLOGUE();

  serve_interrupt(&SD3);

  OSAL_IRQ_EPILOGUE();
 8007fd2:	b14a      	cbz	r2, 8007fe8 <VectorDC+0x18c>
}
 8007fd4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007fd8:	f7fe ba8a 	b.w	80064f0 <Vector6C.part.0>
    oqp->q_rdptr = oqp->q_buffer;
 8007fdc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8007fde:	6563      	str	r3, [r4, #84]	; 0x54
 8007fe0:	e77a      	b.n	8007ed8 <VectorDC+0x7c>
  osalDbgCheckClassI();
 8007fe2:	f7fc f9ad 	bl	8004340 <vTaskEndScheduler>
 8007fe6:	e7fe      	b.n	8007fe6 <VectorDC+0x18a>
 8007fe8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007fec:	200009bc 	.word	0x200009bc
 8007ff0:	200009f8 	.word	0x200009f8
 8007ff4:	200009c0 	.word	0x200009c0
 8007ff8:	2000164c 	.word	0x2000164c

08007ffc <xQueueGenericSend.constprop.0>:
 8007ffc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8008000:	2300      	movs	r3, #0
 8008002:	4604      	mov	r4, r0
 8008004:	9301      	str	r3, [sp, #4]
 8008006:	b900      	cbnz	r0, 800800a <xQueueGenericSend.constprop.0+0xe>
 8008008:	e7fe      	b.n	8008008 <xQueueGenericSend.constprop.0+0xc>
 800800a:	6c06      	ldr	r6, [r0, #64]	; 0x40
 800800c:	b106      	cbz	r6, 8008010 <xQueueGenericSend.constprop.0+0x14>
 800800e:	e7fe      	b.n	800800e <xQueueGenericSend.constprop.0+0x12>
 8008010:	f8df 81f4 	ldr.w	r8, [pc, #500]	; 8008208 <xQueueGenericSend.constprop.0+0x20c>
 8008014:	4d75      	ldr	r5, [pc, #468]	; (80081ec <xQueueGenericSend.constprop.0+0x1f0>)
 8008016:	4f76      	ldr	r7, [pc, #472]	; (80081f0 <xQueueGenericSend.constprop.0+0x1f4>)
 8008018:	e0b5      	b.n	8008186 <xQueueGenericSend.constprop.0+0x18a>
 800801a:	6865      	ldr	r5, [r4, #4]
 800801c:	bb1d      	cbnz	r5, 8008066 <xQueueGenericSend.constprop.0+0x6a>
 800801e:	2500      	movs	r5, #0
 8008020:	2200      	movs	r2, #0
 8008022:	6062      	str	r2, [r4, #4]
 8008024:	3601      	adds	r6, #1
 8008026:	63a6      	str	r6, [r4, #56]	; 0x38
 8008028:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800802a:	2a00      	cmp	r2, #0
 800802c:	d060      	beq.n	80080f0 <xQueueGenericSend.constprop.0+0xf4>
 800802e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008032:	f7fc fbd9 	bl	80047e8 <xTaskRemoveFromEventList>
 8008036:	2800      	cmp	r0, #0
 8008038:	d05c      	beq.n	80080f4 <xQueueGenericSend.constprop.0+0xf8>
 800803a:	4b6c      	ldr	r3, [pc, #432]	; (80081ec <xQueueGenericSend.constprop.0+0x1f0>)
 800803c:	4a6d      	ldr	r2, [pc, #436]	; (80081f4 <xQueueGenericSend.constprop.0+0x1f8>)
 800803e:	6819      	ldr	r1, [r3, #0]
 8008040:	6011      	str	r1, [r2, #0]
 8008042:	4a6d      	ldr	r2, [pc, #436]	; (80081f8 <xQueueGenericSend.constprop.0+0x1fc>)
 8008044:	6812      	ldr	r2, [r2, #0]
 8008046:	b12a      	cbz	r2, 8008054 <xQueueGenericSend.constprop.0+0x58>
 8008048:	681a      	ldr	r2, [r3, #0]
 800804a:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
 800804e:	601a      	str	r2, [r3, #0]
 8008050:	681a      	ldr	r2, [r3, #0]
 8008052:	601a      	str	r2, [r3, #0]
 8008054:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008058:	4b65      	ldr	r3, [pc, #404]	; (80081f0 <xQueueGenericSend.constprop.0+0x1f4>)
 800805a:	601a      	str	r2, [r3, #0]
 800805c:	f3bf 8f4f 	dsb	sy
 8008060:	f3bf 8f6f 	isb	sy
 8008064:	e046      	b.n	80080f4 <xQueueGenericSend.constprop.0+0xf8>
 8008066:	4b65      	ldr	r3, [pc, #404]	; (80081fc <xQueueGenericSend.constprop.0+0x200>)
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	429d      	cmp	r5, r3
 800806c:	d000      	beq.n	8008070 <xQueueGenericSend.constprop.0+0x74>
 800806e:	e7fe      	b.n	800806e <xQueueGenericSend.constprop.0+0x72>
 8008070:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8008072:	b903      	cbnz	r3, 8008076 <xQueueGenericSend.constprop.0+0x7a>
 8008074:	e7fe      	b.n	8008074 <xQueueGenericSend.constprop.0+0x78>
 8008076:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 8008078:	6cea      	ldr	r2, [r5, #76]	; 0x4c
 800807a:	3b01      	subs	r3, #1
 800807c:	4291      	cmp	r1, r2
 800807e:	652b      	str	r3, [r5, #80]	; 0x50
 8008080:	d0cd      	beq.n	800801e <xQueueGenericSend.constprop.0+0x22>
 8008082:	2b00      	cmp	r3, #0
 8008084:	d1cb      	bne.n	800801e <xQueueGenericSend.constprop.0+0x22>
 8008086:	f105 0804 	add.w	r8, r5, #4
 800808a:	4640      	mov	r0, r8
 800808c:	f7fc f9b0 	bl	80043f0 <uxListRemove>
 8008090:	f8df c178 	ldr.w	ip, [pc, #376]	; 800820c <xQueueGenericSend.constprop.0+0x210>
 8008094:	4a5a      	ldr	r2, [pc, #360]	; (8008200 <xQueueGenericSend.constprop.0+0x204>)
 8008096:	b958      	cbnz	r0, 80080b0 <xQueueGenericSend.constprop.0+0xb4>
 8008098:	2014      	movs	r0, #20
 800809a:	6aef      	ldr	r7, [r5, #44]	; 0x2c
 800809c:	4378      	muls	r0, r7
 800809e:	f85c 3000 	ldr.w	r3, [ip, r0]
 80080a2:	b92b      	cbnz	r3, 80080b0 <xQueueGenericSend.constprop.0+0xb4>
 80080a4:	2101      	movs	r1, #1
 80080a6:	6813      	ldr	r3, [r2, #0]
 80080a8:	40b9      	lsls	r1, r7
 80080aa:	ea23 0301 	bic.w	r3, r3, r1
 80080ae:	6013      	str	r3, [r2, #0]
 80080b0:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 80080b2:	2014      	movs	r0, #20
 80080b4:	f1c3 0105 	rsb	r1, r3, #5
 80080b8:	62eb      	str	r3, [r5, #44]	; 0x2c
 80080ba:	61a9      	str	r1, [r5, #24]
 80080bc:	2501      	movs	r5, #1
 80080be:	6811      	ldr	r1, [r2, #0]
 80080c0:	fa05 f703 	lsl.w	r7, r5, r3
 80080c4:	430f      	orrs	r7, r1
 80080c6:	fb00 c003 	mla	r0, r0, r3, ip
 80080ca:	4641      	mov	r1, r8
 80080cc:	6017      	str	r7, [r2, #0]
 80080ce:	f7fc f9b6 	bl	800443e <vListInsertEnd>
 80080d2:	e7a5      	b.n	8008020 <xQueueGenericSend.constprop.0+0x24>
 80080d4:	2100      	movs	r1, #0
 80080d6:	68a0      	ldr	r0, [r4, #8]
 80080d8:	f7fb fcf4 	bl	8003ac4 <memcpy>
 80080dc:	68a3      	ldr	r3, [r4, #8]
 80080de:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80080e0:	4413      	add	r3, r2
 80080e2:	6862      	ldr	r2, [r4, #4]
 80080e4:	60a3      	str	r3, [r4, #8]
 80080e6:	4293      	cmp	r3, r2
 80080e8:	bf24      	itt	cs
 80080ea:	6823      	ldrcs	r3, [r4, #0]
 80080ec:	60a3      	strcs	r3, [r4, #8]
 80080ee:	e058      	b.n	80081a2 <xQueueGenericSend.constprop.0+0x1a6>
 80080f0:	2d00      	cmp	r5, #0
 80080f2:	d1a2      	bne.n	800803a <xQueueGenericSend.constprop.0+0x3e>
 80080f4:	f7fc f86a 	bl	80041cc <vPortExitCritical>
 80080f8:	2001      	movs	r0, #1
 80080fa:	b004      	add	sp, #16
 80080fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008100:	9801      	ldr	r0, [sp, #4]
 8008102:	b910      	cbnz	r0, 800810a <xQueueGenericSend.constprop.0+0x10e>
 8008104:	f7fc f862 	bl	80041cc <vPortExitCritical>
 8008108:	e7f7      	b.n	80080fa <xQueueGenericSend.constprop.0+0xfe>
 800810a:	b92e      	cbnz	r6, 8008118 <xQueueGenericSend.constprop.0+0x11c>
 800810c:	f8d8 3000 	ldr.w	r3, [r8]
 8008110:	9302      	str	r3, [sp, #8]
 8008112:	4b3c      	ldr	r3, [pc, #240]	; (8008204 <xQueueGenericSend.constprop.0+0x208>)
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	9303      	str	r3, [sp, #12]
 8008118:	f7fc f858 	bl	80041cc <vPortExitCritical>
 800811c:	f7fc f908 	bl	8004330 <vTaskSuspendAll>
 8008120:	f7fc f860 	bl	80041e4 <vPortEnterCritical>
 8008124:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8008128:	2bff      	cmp	r3, #255	; 0xff
 800812a:	bf04      	itt	eq
 800812c:	2300      	moveq	r3, #0
 800812e:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
 8008132:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8008136:	2bff      	cmp	r3, #255	; 0xff
 8008138:	bf04      	itt	eq
 800813a:	2300      	moveq	r3, #0
 800813c:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
 8008140:	f7fc f844 	bl	80041cc <vPortExitCritical>
 8008144:	a901      	add	r1, sp, #4
 8008146:	a802      	add	r0, sp, #8
 8008148:	f7fc f8aa 	bl	80042a0 <xTaskCheckForTimeOut>
 800814c:	2800      	cmp	r0, #0
 800814e:	d146      	bne.n	80081de <xQueueGenericSend.constprop.0+0x1e2>
 8008150:	f7fc f848 	bl	80041e4 <vPortEnterCritical>
 8008154:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8008156:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008158:	429a      	cmp	r2, r3
 800815a:	d124      	bne.n	80081a6 <xQueueGenericSend.constprop.0+0x1aa>
 800815c:	f7fc f836 	bl	80041cc <vPortExitCritical>
 8008160:	4b26      	ldr	r3, [pc, #152]	; (80081fc <xQueueGenericSend.constprop.0+0x200>)
 8008162:	9e01      	ldr	r6, [sp, #4]
 8008164:	6819      	ldr	r1, [r3, #0]
 8008166:	f104 0010 	add.w	r0, r4, #16
 800816a:	3118      	adds	r1, #24
 800816c:	f7fc f950 	bl	8004410 <vListInsert>
 8008170:	2101      	movs	r1, #1
 8008172:	4630      	mov	r0, r6
 8008174:	f7fc fa30 	bl	80045d8 <prvAddCurrentTaskToDelayedList>
 8008178:	4620      	mov	r0, r4
 800817a:	f7fc fdd5 	bl	8004d28 <prvUnlockQueue>
 800817e:	f7fc fc11 	bl	80049a4 <xTaskResumeAll>
 8008182:	b1c0      	cbz	r0, 80081b6 <xQueueGenericSend.constprop.0+0x1ba>
 8008184:	2601      	movs	r6, #1
 8008186:	f7fc f82d 	bl	80041e4 <vPortEnterCritical>
 800818a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800818c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800818e:	429a      	cmp	r2, r3
 8008190:	d2b6      	bcs.n	8008100 <xQueueGenericSend.constprop.0+0x104>
 8008192:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8008194:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8008196:	2a00      	cmp	r2, #0
 8008198:	d19c      	bne.n	80080d4 <xQueueGenericSend.constprop.0+0xd8>
 800819a:	6823      	ldr	r3, [r4, #0]
 800819c:	2b00      	cmp	r3, #0
 800819e:	f43f af3c 	beq.w	800801a <xQueueGenericSend.constprop.0+0x1e>
 80081a2:	2500      	movs	r5, #0
 80081a4:	e73e      	b.n	8008024 <xQueueGenericSend.constprop.0+0x28>
 80081a6:	f7fc f811 	bl	80041cc <vPortExitCritical>
 80081aa:	4620      	mov	r0, r4
 80081ac:	f7fc fdbc 	bl	8004d28 <prvUnlockQueue>
 80081b0:	f7fc fbf8 	bl	80049a4 <xTaskResumeAll>
 80081b4:	e7e6      	b.n	8008184 <xQueueGenericSend.constprop.0+0x188>
 80081b6:	4b0f      	ldr	r3, [pc, #60]	; (80081f4 <xQueueGenericSend.constprop.0+0x1f8>)
 80081b8:	682a      	ldr	r2, [r5, #0]
 80081ba:	601a      	str	r2, [r3, #0]
 80081bc:	4b0e      	ldr	r3, [pc, #56]	; (80081f8 <xQueueGenericSend.constprop.0+0x1fc>)
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	b12b      	cbz	r3, 80081ce <xQueueGenericSend.constprop.0+0x1d2>
 80081c2:	682b      	ldr	r3, [r5, #0]
 80081c4:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 80081c8:	602b      	str	r3, [r5, #0]
 80081ca:	682b      	ldr	r3, [r5, #0]
 80081cc:	602b      	str	r3, [r5, #0]
 80081ce:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80081d2:	603b      	str	r3, [r7, #0]
 80081d4:	f3bf 8f4f 	dsb	sy
 80081d8:	f3bf 8f6f 	isb	sy
 80081dc:	e7d2      	b.n	8008184 <xQueueGenericSend.constprop.0+0x188>
 80081de:	4620      	mov	r0, r4
 80081e0:	f7fc fda2 	bl	8004d28 <prvUnlockQueue>
 80081e4:	f7fc fbde 	bl	80049a4 <xTaskResumeAll>
 80081e8:	2000      	movs	r0, #0
 80081ea:	e786      	b.n	80080fa <xQueueGenericSend.constprop.0+0xfe>
 80081ec:	e000ed20 	.word	0xe000ed20
 80081f0:	e000ed04 	.word	0xe000ed04
 80081f4:	2000134c 	.word	0x2000134c
 80081f8:	20001358 	.word	0x20001358
 80081fc:	200011a8 	.word	0x200011a8
 8008200:	20001374 	.word	0x20001374
 8008204:	20001648 	.word	0x20001648
 8008208:	200015fc 	.word	0x200015fc
 800820c:	200011b8 	.word	0x200011b8

08008210 <xQueueCreateMutexStatic.constprop.0>:
 8008210:	2350      	movs	r3, #80	; 0x50
 8008212:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008214:	9301      	str	r3, [sp, #4]
 8008216:	9b01      	ldr	r3, [sp, #4]
 8008218:	4604      	mov	r4, r0
 800821a:	2b50      	cmp	r3, #80	; 0x50
 800821c:	d000      	beq.n	8008220 <xQueueCreateMutexStatic.constprop.0+0x10>
 800821e:	e7fe      	b.n	800821e <xQueueCreateMutexStatic.constprop.0+0xe>
 8008220:	2601      	movs	r6, #1
 8008222:	2500      	movs	r5, #0
 8008224:	f880 6046 	strb.w	r6, [r0, #70]	; 0x46
 8008228:	6020      	str	r0, [r4, #0]
 800822a:	63c6      	str	r6, [r0, #60]	; 0x3c
 800822c:	6405      	str	r5, [r0, #64]	; 0x40
 800822e:	f7ff fb43 	bl	80078b8 <xQueueGenericReset.constprop.0>
 8008232:	4620      	mov	r0, r4
 8008234:	e9c4 5500 	strd	r5, r5, [r4]
 8008238:	f884 604c 	strb.w	r6, [r4, #76]	; 0x4c
 800823c:	60e5      	str	r5, [r4, #12]
 800823e:	f7ff fedd 	bl	8007ffc <xQueueGenericSend.constprop.0>
 8008242:	4620      	mov	r0, r4
 8008244:	b002      	add	sp, #8
 8008246:	bd70      	pop	{r4, r5, r6, pc}

08008248 <max2870SpiState.part.0>:
static void max2870SpiState(MAX2870Driver* driver, bool enable)
 8008248:	b510      	push	{r4, lr}
 800824a:	4604      	mov	r4, r0
        max2870SetMUXOut(driver, 0x0);
 800824c:	2100      	movs	r1, #0
 800824e:	f7ff fbff 	bl	8007a50 <max2870SetMUXOut>
        monitorKick(&driver->pllMon, driver->enabled);
 8008252:	7921      	ldrb	r1, [r4, #4]
 8008254:	f104 00e8 	add.w	r0, r4, #232	; 0xe8
 8008258:	f7fd f9f4 	bl	8005644 <monitorKick>
        spiReleaseBus(driver->config->spiPort);
 800825c:	6823      	ldr	r3, [r4, #0]
 800825e:	681b      	ldr	r3, [r3, #0]
 *
 * @api
 */
void spiReleaseBus(SPIDriver *spip) {

  osalDbgCheck(spip != NULL);
 8008260:	b913      	cbnz	r3, 8008268 <max2870SpiState.part.0+0x20>
 8008262:	f7fc f86d 	bl	8004340 <vTaskEndScheduler>
 8008266:	e7fe      	b.n	8008266 <max2870SpiState.part.0+0x1e>
    xSemaphoreGive(mutex->handle);
 8008268:	68d8      	ldr	r0, [r3, #12]
}
 800826a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800826e:	f7ff bec5 	b.w	8007ffc <xQueueGenericSend.constprop.0>

08008272 <i2cReleaseBus>:
 *
 * @param[in] i2cp      pointer to the @p I2CDriver object
 *
 * @api
 */
void i2cReleaseBus(I2CDriver *i2cp) {
 8008272:	b508      	push	{r3, lr}

  osalDbgCheck(i2cp != NULL);
 8008274:	b910      	cbnz	r0, 800827c <i2cReleaseBus+0xa>
 8008276:	f7fc f863 	bl	8004340 <vTaskEndScheduler>
 800827a:	e7fe      	b.n	800827a <i2cReleaseBus+0x8>
 800827c:	68c0      	ldr	r0, [r0, #12]

  osalMutexUnlock(&i2cp->mutex);
}
 800827e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8008282:	f7ff bebb 	b.w	8007ffc <xQueueGenericSend.constprop.0>

08008286 <_reads>:
static size_t _reads(void *ip, uint8_t *bp, size_t n) {
 8008286:	b538      	push	{r3, r4, r5, lr}
 8008288:	4605      	mov	r5, r0
 800828a:	4608      	mov	r0, r1
  if (msp->eos - msp->offset < n)
 800828c:	e9d5 3103 	ldrd	r3, r1, [r5, #12]
 8008290:	1a5c      	subs	r4, r3, r1
 8008292:	4294      	cmp	r4, r2
 8008294:	bf28      	it	cs
 8008296:	4614      	movcs	r4, r2
  memcpy(bp, msp->buffer + msp->offset, n);
 8008298:	686b      	ldr	r3, [r5, #4]
 800829a:	4622      	mov	r2, r4
 800829c:	4419      	add	r1, r3
 800829e:	f7fb fc11 	bl	8003ac4 <memcpy>
  msp->offset += n;
 80082a2:	692b      	ldr	r3, [r5, #16]
}
 80082a4:	4620      	mov	r0, r4
  msp->offset += n;
 80082a6:	4423      	add	r3, r4
 80082a8:	612b      	str	r3, [r5, #16]
}
 80082aa:	bd38      	pop	{r3, r4, r5, pc}

080082ac <_writes>:
static size_t _writes(void *ip, const uint8_t *bp, size_t n) {
 80082ac:	b538      	push	{r3, r4, r5, lr}
 80082ae:	4605      	mov	r5, r0
  if (msp->size - msp->eos < n)
 80082b0:	e9d0 3002 	ldrd	r3, r0, [r0, #8]
 80082b4:	1a1c      	subs	r4, r3, r0
 80082b6:	4294      	cmp	r4, r2
 80082b8:	bf28      	it	cs
 80082ba:	4614      	movcs	r4, r2
  memcpy(msp->buffer + msp->eos, bp, n);
 80082bc:	686b      	ldr	r3, [r5, #4]
 80082be:	4622      	mov	r2, r4
 80082c0:	4418      	add	r0, r3
 80082c2:	f7fb fbff 	bl	8003ac4 <memcpy>
  msp->eos += n;
 80082c6:	68eb      	ldr	r3, [r5, #12]
}
 80082c8:	4620      	mov	r0, r4
  msp->eos += n;
 80082ca:	4423      	add	r3, r4
 80082cc:	60eb      	str	r3, [r5, #12]
}
 80082ce:	bd38      	pop	{r3, r4, r5, pc}

080082d0 <obqWriteTimeout.part.0>:
size_t obqWriteTimeout(output_buffers_queue_t *obqp, const uint8_t *bp,
 80082d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082d4:	461f      	mov	r7, r3
 80082d6:	4690      	mov	r8, r2
 80082d8:	4604      	mov	r4, r0
 80082da:	460d      	mov	r5, r1
  osalSysLock();
 80082dc:	f7fb ff82 	bl	80041e4 <vPortEnterCritical>
 80082e0:	f7fb ff00 	bl	80040e4 <vPortValidateInterruptPriority>
 80082e4:	4b28      	ldr	r3, [pc, #160]	; (8008388 <obqWriteTimeout.part.0+0xb8>)
  size_t w = 0;
 80082e6:	2600      	movs	r6, #0
 80082e8:	4699      	mov	r9, r3
 80082ea:	681a      	ldr	r2, [r3, #0]
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
 80082ec:	f107 3bff 	add.w	fp, r7, #4294967295	; 0xffffffff
  deadline = osalOsGetSystemTimeX() + timeout;
 80082f0:	eb07 0a02 	add.w	sl, r7, r2
    if (obqp->ptr == NULL) {
 80082f4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80082f6:	b93b      	cbnz	r3, 8008308 <obqWriteTimeout.part.0+0x38>
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
 80082f8:	f11b 0f03 	cmn.w	fp, #3
 80082fc:	d92a      	bls.n	8008354 <obqWriteTimeout.part.0+0x84>
        msg = obqGetEmptyBufferTimeoutS(obqp, timeout);
 80082fe:	4639      	mov	r1, r7
        msg = obqGetEmptyBufferTimeoutS(obqp, next_timeout);
 8008300:	4620      	mov	r0, r4
 8008302:	f7ff f90e 	bl	8007522 <obqGetEmptyBufferTimeoutS>
      if (msg != MSG_OK) {
 8008306:	bb68      	cbnz	r0, 8008364 <obqWriteTimeout.part.0+0x94>
    size = (size_t)obqp->top - (size_t)obqp->ptr;
 8008308:	e9d4 020a 	ldrd	r0, r2, [r4, #40]	; 0x28
    if (size > (n - w)) {
 800830c:	eba8 0306 	sub.w	r3, r8, r6
    size = (size_t)obqp->top - (size_t)obqp->ptr;
 8008310:	1a12      	subs	r2, r2, r0
    if (size > (n - w)) {
 8008312:	429a      	cmp	r2, r3
 8008314:	bf28      	it	cs
 8008316:	461a      	movcs	r2, r3
    if (size > 64U) {
 8008318:	2a40      	cmp	r2, #64	; 0x40
 800831a:	d929      	bls.n	8008370 <obqWriteTimeout.part.0+0xa0>
      memcpy(obqp->ptr, bp, 64U);
 800831c:	f105 0340 	add.w	r3, r5, #64	; 0x40
 8008320:	f855 2b04 	ldr.w	r2, [r5], #4
 8008324:	429d      	cmp	r5, r3
 8008326:	f840 2b04 	str.w	r2, [r0], #4
 800832a:	d1f9      	bne.n	8008320 <obqWriteTimeout.part.0+0x50>
      obqp->ptr += 64U;
 800832c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      w         += 64U;
 800832e:	3640      	adds	r6, #64	; 0x40
      obqp->ptr += 64U;
 8008330:	3340      	adds	r3, #64	; 0x40
 8008332:	62a3      	str	r3, [r4, #40]	; 0x28
    if (obqp->ptr >= obqp->top) {
 8008334:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
 8008338:	429a      	cmp	r2, r3
 800833a:	d304      	bcc.n	8008346 <obqWriteTimeout.part.0+0x76>
      obqPostFullBufferS(obqp, obqp->bsize - sizeof (size_t));
 800833c:	69e1      	ldr	r1, [r4, #28]
 800833e:	4620      	mov	r0, r4
 8008340:	3904      	subs	r1, #4
 8008342:	f7ff f8bf 	bl	80074c4 <obqPostFullBufferS>
    osalSysUnlock();
 8008346:	f7fd fa85 	bl	8005854 <osalSysUnlock.lto_priv.0>
    if (w >= n) {
 800834a:	45b0      	cmp	r8, r6
 800834c:	d90c      	bls.n	8008368 <obqWriteTimeout.part.0+0x98>
    osalSysLock();
 800834e:	f7fb ff49 	bl	80041e4 <vPortEnterCritical>
  while (true) {
 8008352:	e7cf      	b.n	80082f4 <obqWriteTimeout.part.0+0x24>
 8008354:	f7fb fec6 	bl	80040e4 <vPortValidateInterruptPriority>
 8008358:	f8d9 1000 	ldr.w	r1, [r9]
        systime_t next_timeout = deadline - osalOsGetSystemTimeX();
 800835c:	ebaa 0101 	sub.w	r1, sl, r1
        if (next_timeout > timeout) {
 8008360:	428f      	cmp	r7, r1
 8008362:	d2cd      	bcs.n	8008300 <obqWriteTimeout.part.0+0x30>
        osalSysUnlock();
 8008364:	f7fd fa76 	bl	8005854 <osalSysUnlock.lto_priv.0>
}
 8008368:	4630      	mov	r0, r6
 800836a:	b003      	add	sp, #12
 800836c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      memcpy(obqp->ptr, bp, size);
 8008370:	4629      	mov	r1, r5
 8008372:	9201      	str	r2, [sp, #4]
 8008374:	f7fb fba6 	bl	8003ac4 <memcpy>
      bp        += size;
 8008378:	9a01      	ldr	r2, [sp, #4]
      obqp->ptr += size;
 800837a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      bp        += size;
 800837c:	4415      	add	r5, r2
      obqp->ptr += size;
 800837e:	4413      	add	r3, r2
 8008380:	62a3      	str	r3, [r4, #40]	; 0x28
      w         += size;
 8008382:	4416      	add	r6, r2
 8008384:	e7d6      	b.n	8008334 <obqWriteTimeout.part.0+0x64>
 8008386:	bf00      	nop
 8008388:	20001648 	.word	0x20001648

0800838c <_write.lto_priv.1>:
static size_t _write(void *ip, const uint8_t *bp, size_t n) {
 800838c:	b570      	push	{r4, r5, r6, lr}
 800838e:	4615      	mov	r5, r2
  if(sdup->config->sofCallback) sdup->config->sofCallback(sdup->config->usbp, true);
 8008390:	f8d0 2498 	ldr.w	r2, [r0, #1176]	; 0x498
static size_t _write(void *ip, const uint8_t *bp, size_t n) {
 8008394:	4604      	mov	r4, r0
  if(sdup->config->sofCallback) sdup->config->sofCallback(sdup->config->usbp, true);
 8008396:	6893      	ldr	r3, [r2, #8]
static size_t _write(void *ip, const uint8_t *bp, size_t n) {
 8008398:	460e      	mov	r6, r1
  if(sdup->config->sofCallback) sdup->config->sofCallback(sdup->config->usbp, true);
 800839a:	b113      	cbz	r3, 80083a2 <_write.lto_priv.1+0x16>
 800839c:	2101      	movs	r1, #1
 800839e:	6810      	ldr	r0, [r2, #0]
 80083a0:	4798      	blx	r3
  osalDbgCheck(n > 0U);
 80083a2:	b915      	cbnz	r5, 80083aa <_write.lto_priv.1+0x1e>
 80083a4:	f7fb ffcc 	bl	8004340 <vTaskEndScheduler>
 80083a8:	e7fe      	b.n	80083a8 <_write.lto_priv.1+0x1c>
 80083aa:	462a      	mov	r2, r5
 80083ac:	4631      	mov	r1, r6
 80083ae:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80083b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80083b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80083ba:	f7ff bf89 	b.w	80082d0 <obqWriteTimeout.part.0>

080083be <_writet.lto_priv.1>:
static size_t _writet(void *ip, const uint8_t *bp, size_t n, systime_t timeout) {
 80083be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083c2:	4615      	mov	r5, r2
  if(sdup->config->sofCallback) sdup->config->sofCallback(sdup->config->usbp, true);
 80083c4:	f8d0 2498 	ldr.w	r2, [r0, #1176]	; 0x498
static size_t _writet(void *ip, const uint8_t *bp, size_t n, systime_t timeout) {
 80083c8:	461f      	mov	r7, r3
  if(sdup->config->sofCallback) sdup->config->sofCallback(sdup->config->usbp, true);
 80083ca:	6893      	ldr	r3, [r2, #8]
static size_t _writet(void *ip, const uint8_t *bp, size_t n, systime_t timeout) {
 80083cc:	4604      	mov	r4, r0
 80083ce:	460e      	mov	r6, r1
  if(sdup->config->sofCallback) sdup->config->sofCallback(sdup->config->usbp, true);
 80083d0:	b113      	cbz	r3, 80083d8 <_writet.lto_priv.1+0x1a>
 80083d2:	2101      	movs	r1, #1
 80083d4:	6810      	ldr	r0, [r2, #0]
 80083d6:	4798      	blx	r3
 80083d8:	b915      	cbnz	r5, 80083e0 <_writet.lto_priv.1+0x22>
 80083da:	f7fb ffb1 	bl	8004340 <vTaskEndScheduler>
 80083de:	e7fe      	b.n	80083de <_writet.lto_priv.1+0x20>
 80083e0:	463b      	mov	r3, r7
 80083e2:	462a      	mov	r2, r5
 80083e4:	4631      	mov	r1, r6
 80083e6:	f104 0050 	add.w	r0, r4, #80	; 0x50
}
 80083ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80083ee:	f7ff bf6f 	b.w	80082d0 <obqWriteTimeout.part.0>
	...

080083f4 <ibqReadTimeout.part.0>:
size_t ibqReadTimeout(input_buffers_queue_t *ibqp, uint8_t *bp,
 80083f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083f8:	461f      	mov	r7, r3
 80083fa:	4690      	mov	r8, r2
 80083fc:	4604      	mov	r4, r0
 80083fe:	460d      	mov	r5, r1
  osalSysLock();
 8008400:	f7fb fef0 	bl	80041e4 <vPortEnterCritical>
 8008404:	f7fb fe6e 	bl	80040e4 <vPortValidateInterruptPriority>
 8008408:	4b28      	ldr	r3, [pc, #160]	; (80084ac <ibqReadTimeout.part.0+0xb8>)
  size_t r = 0;
 800840a:	2600      	movs	r6, #0
 800840c:	4699      	mov	r9, r3
 800840e:	681a      	ldr	r2, [r3, #0]
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
 8008410:	f107 3bff 	add.w	fp, r7, #4294967295	; 0xffffffff
  deadline = osalOsGetSystemTimeX() + timeout;
 8008414:	eb07 0a02 	add.w	sl, r7, r2
    if (ibqp->ptr == NULL) {
 8008418:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800841a:	b93b      	cbnz	r3, 800842c <ibqReadTimeout.part.0+0x38>
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
 800841c:	f11b 0f03 	cmn.w	fp, #3
 8008420:	d92a      	bls.n	8008478 <ibqReadTimeout.part.0+0x84>
        msg = ibqGetFullBufferTimeoutS(ibqp, timeout);
 8008422:	4639      	mov	r1, r7
        msg = ibqGetFullBufferTimeoutS(ibqp, next_timeout);
 8008424:	4620      	mov	r0, r4
 8008426:	f7ff f9f9 	bl	800781c <ibqGetFullBufferTimeoutS>
      if (msg != MSG_OK) {
 800842a:	bb68      	cbnz	r0, 8008488 <ibqReadTimeout.part.0+0x94>
    size = (size_t)ibqp->top - (size_t)ibqp->ptr;
 800842c:	e9d4 120a 	ldrd	r1, r2, [r4, #40]	; 0x28
    if (size > (n - r)) {
 8008430:	eba8 0306 	sub.w	r3, r8, r6
    size = (size_t)ibqp->top - (size_t)ibqp->ptr;
 8008434:	1a52      	subs	r2, r2, r1
    if (size > (n - r)) {
 8008436:	429a      	cmp	r2, r3
 8008438:	bf28      	it	cs
 800843a:	461a      	movcs	r2, r3
    if (size > 64U) {
 800843c:	2a40      	cmp	r2, #64	; 0x40
 800843e:	d929      	bls.n	8008494 <ibqReadTimeout.part.0+0xa0>
      memcpy(bp, ibqp->ptr, 64U);
 8008440:	462b      	mov	r3, r5
 8008442:	f101 0240 	add.w	r2, r1, #64	; 0x40
 8008446:	f851 0b04 	ldr.w	r0, [r1], #4
 800844a:	4291      	cmp	r1, r2
 800844c:	f843 0b04 	str.w	r0, [r3], #4
 8008450:	d1f9      	bne.n	8008446 <ibqReadTimeout.part.0+0x52>
      ibqp->ptr += 64U;
 8008452:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      bp        += 64U;
 8008454:	3540      	adds	r5, #64	; 0x40
      ibqp->ptr += 64U;
 8008456:	3340      	adds	r3, #64	; 0x40
 8008458:	62a3      	str	r3, [r4, #40]	; 0x28
      r         += 64U;
 800845a:	3640      	adds	r6, #64	; 0x40
    if (ibqp->ptr >= ibqp->top) {
 800845c:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
 8008460:	429a      	cmp	r2, r3
 8008462:	d302      	bcc.n	800846a <ibqReadTimeout.part.0+0x76>
      ibqReleaseEmptyBufferS(ibqp);
 8008464:	4620      	mov	r0, r4
 8008466:	f7ff f9b3 	bl	80077d0 <ibqReleaseEmptyBufferS>
    osalSysUnlock();
 800846a:	f7fd f9f3 	bl	8005854 <osalSysUnlock.lto_priv.0>
    if (r >= n) {
 800846e:	45b0      	cmp	r8, r6
 8008470:	d90c      	bls.n	800848c <ibqReadTimeout.part.0+0x98>
    osalSysLock();
 8008472:	f7fb feb7 	bl	80041e4 <vPortEnterCritical>
  while (true) {
 8008476:	e7cf      	b.n	8008418 <ibqReadTimeout.part.0+0x24>
 8008478:	f7fb fe34 	bl	80040e4 <vPortValidateInterruptPriority>
 800847c:	f8d9 1000 	ldr.w	r1, [r9]
        systime_t next_timeout = deadline - osalOsGetSystemTimeX();
 8008480:	ebaa 0101 	sub.w	r1, sl, r1
        if (next_timeout > timeout) {
 8008484:	428f      	cmp	r7, r1
 8008486:	d2cd      	bcs.n	8008424 <ibqReadTimeout.part.0+0x30>
        osalSysUnlock();
 8008488:	f7fd f9e4 	bl	8005854 <osalSysUnlock.lto_priv.0>
}
 800848c:	4630      	mov	r0, r6
 800848e:	b003      	add	sp, #12
 8008490:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      memcpy(bp, ibqp->ptr, size);
 8008494:	4628      	mov	r0, r5
 8008496:	9201      	str	r2, [sp, #4]
 8008498:	f7fb fb14 	bl	8003ac4 <memcpy>
      bp        += size;
 800849c:	9a01      	ldr	r2, [sp, #4]
      ibqp->ptr += size;
 800849e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      bp        += size;
 80084a0:	4415      	add	r5, r2
      ibqp->ptr += size;
 80084a2:	4413      	add	r3, r2
 80084a4:	62a3      	str	r3, [r4, #40]	; 0x28
      r         += size;
 80084a6:	4416      	add	r6, r2
 80084a8:	e7d8      	b.n	800845c <ibqReadTimeout.part.0+0x68>
 80084aa:	bf00      	nop
 80084ac:	20001648 	.word	0x20001648

080084b0 <_read.lto_priv.1>:
static size_t _read(void *ip, uint8_t *bp, size_t n) {
 80084b0:	b510      	push	{r4, lr}
  osalDbgCheck(n > 0U);
 80084b2:	b912      	cbnz	r2, 80084ba <_read.lto_priv.1+0xa>
 80084b4:	f7fb ff44 	bl	8004340 <vTaskEndScheduler>
 80084b8:	e7fe      	b.n	80084b8 <_read.lto_priv.1+0x8>
 80084ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80084be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80084c2:	3018      	adds	r0, #24
 80084c4:	f7ff bf96 	b.w	80083f4 <ibqReadTimeout.part.0>

080084c8 <_readt.lto_priv.1>:
static size_t _readt(void *ip, uint8_t *bp, size_t n, systime_t timeout) {
 80084c8:	b510      	push	{r4, lr}
 80084ca:	b912      	cbnz	r2, 80084d2 <_readt.lto_priv.1+0xa>
 80084cc:	f7fb ff38 	bl	8004340 <vTaskEndScheduler>
 80084d0:	e7fe      	b.n	80084d0 <_readt.lto_priv.1+0x8>
 80084d2:	3018      	adds	r0, #24
}
 80084d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80084d8:	f7ff bf8c 	b.w	80083f4 <ibqReadTimeout.part.0>

080084dc <prvInitialiseNewTask.isra.0>:
 80084dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80084e0:	460d      	mov	r5, r1
 80084e2:	e9dd 9808 	ldrd	r9, r8, [sp, #32]
 80084e6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80084e8:	0096      	lsls	r6, r2, #2
 80084ea:	4632      	mov	r2, r6
 80084ec:	21a5      	movs	r1, #165	; 0xa5
 80084ee:	4607      	mov	r7, r0
 80084f0:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80084f2:	469a      	mov	sl, r3
 80084f4:	f7fb fb5c 	bl	8003bb0 <memset>
 80084f8:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80084fa:	3e04      	subs	r6, #4
 80084fc:	4432      	add	r2, r6
 80084fe:	1e6b      	subs	r3, r5, #1
 8008500:	f022 0207 	bic.w	r2, r2, #7
 8008504:	f104 0134 	add.w	r1, r4, #52	; 0x34
 8008508:	350f      	adds	r5, #15
 800850a:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 800850e:	f801 0b01 	strb.w	r0, [r1], #1
 8008512:	7818      	ldrb	r0, [r3, #0]
 8008514:	b108      	cbz	r0, 800851a <prvInitialiseNewTask.isra.0+0x3e>
 8008516:	42ab      	cmp	r3, r5
 8008518:	d1f7      	bne.n	800850a <prvInitialiseNewTask.isra.0+0x2e>
 800851a:	f1c9 0305 	rsb	r3, r9, #5
 800851e:	2100      	movs	r1, #0
 8008520:	61a3      	str	r3, [r4, #24]
 8008522:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008526:	6621      	str	r1, [r4, #96]	; 0x60
 8008528:	e9c4 9113 	strd	r9, r1, [r4, #76]	; 0x4c
 800852c:	e9c4 1115 	strd	r1, r1, [r4, #84]	; 0x54
 8008530:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008534:	f8c4 902c 	str.w	r9, [r4, #44]	; 0x2c
 8008538:	6161      	str	r1, [r4, #20]
 800853a:	62a1      	str	r1, [r4, #40]	; 0x28
 800853c:	6124      	str	r4, [r4, #16]
 800853e:	6264      	str	r4, [r4, #36]	; 0x24
 8008540:	65e1      	str	r1, [r4, #92]	; 0x5c
 8008542:	f884 1064 	strb.w	r1, [r4, #100]	; 0x64
 8008546:	f842 3c04 	str.w	r3, [r2, #-4]
 800854a:	4b0a      	ldr	r3, [pc, #40]	; (8008574 <prvInitialiseNewTask.isra.0+0x98>)
 800854c:	f027 0701 	bic.w	r7, r7, #1
 8008550:	f842 7c08 	str.w	r7, [r2, #-8]
 8008554:	f842 3c0c 	str.w	r3, [r2, #-12]
 8008558:	f842 ac20 	str.w	sl, [r2, #-32]
 800855c:	f842 1c44 	str.w	r1, [r2, #-68]
 8008560:	f842 1d48 	str.w	r1, [r2, #-72]!
 8008564:	6022      	str	r2, [r4, #0]
 8008566:	f1b8 0f00 	cmp.w	r8, #0
 800856a:	d001      	beq.n	8008570 <prvInitialiseNewTask.isra.0+0x94>
 800856c:	f8c8 4000 	str.w	r4, [r8]
 8008570:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008574:	08004265 	.word	0x08004265

08008578 <xTaskCreate>:
 8008578:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800857c:	4607      	mov	r7, r0
 800857e:	b085      	sub	sp, #20
 8008580:	0090      	lsls	r0, r2, #2
 8008582:	4688      	mov	r8, r1
 8008584:	4616      	mov	r6, r2
 8008586:	4699      	mov	r9, r3
 8008588:	f7fc fe50 	bl	800522c <pvPortMalloc>
 800858c:	4605      	mov	r5, r0
 800858e:	b1e8      	cbz	r0, 80085cc <xTaskCreate+0x54>
 8008590:	2068      	movs	r0, #104	; 0x68
 8008592:	f7fc fe4b 	bl	800522c <pvPortMalloc>
 8008596:	4604      	mov	r4, r0
 8008598:	b1a8      	cbz	r0, 80085c6 <xTaskCreate+0x4e>
 800859a:	2300      	movs	r3, #0
 800859c:	f880 3065 	strb.w	r3, [r0, #101]	; 0x65
 80085a0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80085a2:	6305      	str	r5, [r0, #48]	; 0x30
 80085a4:	9301      	str	r3, [sp, #4]
 80085a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80085a8:	4632      	mov	r2, r6
 80085aa:	4641      	mov	r1, r8
 80085ac:	9002      	str	r0, [sp, #8]
 80085ae:	9300      	str	r3, [sp, #0]
 80085b0:	4638      	mov	r0, r7
 80085b2:	464b      	mov	r3, r9
 80085b4:	f7ff ff92 	bl	80084dc <prvInitialiseNewTask.isra.0>
 80085b8:	4620      	mov	r0, r4
 80085ba:	f7fc fb05 	bl	8004bc8 <prvAddNewTaskToReadyList>
 80085be:	2001      	movs	r0, #1
 80085c0:	b005      	add	sp, #20
 80085c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80085c6:	4628      	mov	r0, r5
 80085c8:	f7fc fd84 	bl	80050d4 <vPortFree>
 80085cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80085d0:	e7f6      	b.n	80085c0 <xTaskCreate+0x48>
	...

080085d4 <shellStart.constprop.0>:
    syslog("Shell 0x%08x started (%s).", activeShell, activeShell->taskName);

    shellThread(&activeShell->shellCfg);
}

bool shellStart(BaseSequentialStream* stream,
 80085d4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80085d8:	4606      	mov	r6, r0
                unsigned int histSize, const char* taskName,
                void(*terminateCallback)(void* param), void* param)
{
    ActiveShell* activeShell = pvPortMalloc(sizeof(ActiveShell));
 80085da:	2020      	movs	r0, #32
bool shellStart(BaseSequentialStream* stream,
 80085dc:	460d      	mov	r5, r1
 80085de:	4690      	mov	r8, r2
    ActiveShell* activeShell = pvPortMalloc(sizeof(ActiveShell));
 80085e0:	f7fc fe24 	bl	800522c <pvPortMalloc>
 80085e4:	2700      	movs	r7, #0
    if(!activeShell) {
 80085e6:	4604      	mov	r4, r0
 80085e8:	b318      	cbz	r0, 8008632 <shellStart.constprop.0+0x5e>
        return false;
    }

    memset(activeShell, 0, sizeof(*activeShell));
 80085ea:	2220      	movs	r2, #32
 80085ec:	4639      	mov	r1, r7
 80085ee:	f7fb fadf 	bl	8003bb0 <memset>

    activeShell->param = param;
    activeShell->terminateCallback = terminateCallback;

    activeShell->shellCfg.sc_channel = stream;
    activeShell->shellCfg.sc_commands = shellCommands;
 80085f2:	4b11      	ldr	r3, [pc, #68]	; (8008638 <shellStart.constprop.0+0x64>)

    if(histSize) {
        activeShell->shellCfg.sc_histbuf = pvPortMalloc(histSize);
 80085f4:	2080      	movs	r0, #128	; 0x80
    activeShell->terminateCallback = terminateCallback;
 80085f6:	e9c4 8706 	strd	r8, r7, [r4, #24]
    activeShell->shellCfg.sc_channel = stream;
 80085fa:	6066      	str	r6, [r4, #4]
    activeShell->shellCfg.sc_commands = shellCommands;
 80085fc:	60a3      	str	r3, [r4, #8]
        activeShell->shellCfg.sc_histbuf = pvPortMalloc(histSize);
 80085fe:	f7fc fe15 	bl	800522c <pvPortMalloc>
 8008602:	60e0      	str	r0, [r4, #12]
        if(activeShell->shellCfg.sc_histbuf) {
 8008604:	b138      	cbz	r0, 8008616 <shellStart.constprop.0+0x42>
            memset(activeShell->shellCfg.sc_histbuf, 0, histSize);
 8008606:	f04f 0880 	mov.w	r8, #128	; 0x80
 800860a:	4639      	mov	r1, r7
 800860c:	4642      	mov	r2, r8
 800860e:	f7fb facf 	bl	8003bb0 <memset>
            activeShell->shellCfg.sc_histsize = histSize;
 8008612:	f8c4 8010 	str.w	r8, [r4, #16]
        }
    }

    activeShell->stream = stream;
    activeShell->taskName = taskName;
    xTaskCreate(shellStartThread, taskName, 256, activeShell, 2, NULL);
 8008616:	2302      	movs	r3, #2
 8008618:	2200      	movs	r2, #0
    activeShell->stream = stream;
 800861a:	6166      	str	r6, [r4, #20]
    activeShell->taskName = taskName;
 800861c:	6025      	str	r5, [r4, #0]
    xTaskCreate(shellStartThread, taskName, 256, activeShell, 2, NULL);
 800861e:	4629      	mov	r1, r5
 8008620:	e9cd 3200 	strd	r3, r2, [sp]
 8008624:	4805      	ldr	r0, [pc, #20]	; (800863c <shellStart.constprop.0+0x68>)
 8008626:	4623      	mov	r3, r4
 8008628:	f44f 7280 	mov.w	r2, #256	; 0x100
 800862c:	f7ff ffa4 	bl	8008578 <xTaskCreate>

    return true;
 8008630:	2001      	movs	r0, #1
}
 8008632:	b002      	add	sp, #8
 8008634:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008638:	2000085c 	.word	0x2000085c
 800863c:	0800af01 	.word	0x0800af01

08008640 <get_history>:
    shp->sh_end -= shp->sh_size;
  *(shp->sh_buffer + shp->sh_end) = 0;
  shp->sh_cur = 0;
}

static int get_history(ShellHistory *shp, char *line, int dir) {
 8008640:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (shp == NULL)
    return -1;

  /* Count the number of lines saved in the buffer */
  int idx = shp->sh_beg;
  while (idx != shp->sh_end) {
 8008644:	e9d0 5602 	ldrd	r5, r6, [r0, #8]
static int get_history(ShellHistory *shp, char *line, int dir) {
 8008648:	4604      	mov	r4, r0
 800864a:	4688      	mov	r8, r1
  int idx = shp->sh_beg;
 800864c:	4628      	mov	r0, r5
  int count=0;
 800864e:	2100      	movs	r1, #0
  while (idx != shp->sh_end) {
 8008650:	4286      	cmp	r6, r0
 8008652:	d12a      	bne.n	80086aa <get_history+0x6a>
    if (idx >= shp->sh_size)
      idx -= shp->sh_size;
    count++;
  }

  if (dir == SHELL_HIST_DIR_FW) {
 8008654:	2a01      	cmp	r2, #1
 8008656:	d104      	bne.n	8008662 <get_history+0x22>
 8008658:	6923      	ldr	r3, [r4, #16]
    if (shp->sh_cur > 0)
 800865a:	2b00      	cmp	r3, #0
 800865c:	dd48      	ble.n	80086f0 <get_history+0xb0>
      shp->sh_cur -= 2;
 800865e:	3b02      	subs	r3, #2
 8008660:	6123      	str	r3, [r4, #16]
    else
      return 0;
  }

  if (count >= shp->sh_cur) {
 8008662:	6923      	ldr	r3, [r4, #16]
 8008664:	428b      	cmp	r3, r1
 8008666:	dc45      	bgt.n	80086f4 <get_history+0xb4>
 8008668:	f8d4 c000 	ldr.w	ip, [r4]
 800866c:	3901      	subs	r1, #1
    idx = shp->sh_beg;
    int i = 0;
    while (idx != shp->sh_end && shp->sh_cur != (count - i - 1)) {
 800866e:	f81c 7005 	ldrb.w	r7, [ip, r5]
 8008672:	42a8      	cmp	r0, r5
 8008674:	463e      	mov	r6, r7
 8008676:	d001      	beq.n	800867c <get_history+0x3c>
 8008678:	428b      	cmp	r3, r1
 800867a:	d120      	bne.n	80086be <get_history+0x7e>
      i++;
    }

    int length = *(shp->sh_buffer + idx);

    if (length > 0) {
 800867c:	b39f      	cbz	r7, 80086e6 <get_history+0xa6>
      shp->sh_cur++;
 800867e:	3301      	adds	r3, #1

      memset(line, 0, SHELL_MAX_LINE_LENGTH);
 8008680:	2240      	movs	r2, #64	; 0x40
 8008682:	2100      	movs	r1, #0
      shp->sh_cur++;
 8008684:	6123      	str	r3, [r4, #16]
      memset(line, 0, SHELL_MAX_LINE_LENGTH);
 8008686:	4640      	mov	r0, r8
 8008688:	f7fb fa92 	bl	8003bb0 <memset>
      if ((idx + length) < shp->sh_size) {
 800868c:	6863      	ldr	r3, [r4, #4]
 800868e:	19ea      	adds	r2, r5, r7
 8008690:	429a      	cmp	r2, r3
 8008692:	6820      	ldr	r0, [r4, #0]
 8008694:	f105 0101 	add.w	r1, r5, #1
 8008698:	da19      	bge.n	80086ce <get_history+0x8e>
        memcpy(line, (shp->sh_buffer + idx + 1), length);
 800869a:	4401      	add	r1, r0
 800869c:	463a      	mov	r2, r7
 800869e:	4640      	mov	r0, r8
         * Since the saved line was split at the end of the buffer,
         * get the line in two parts.
         */
        int part_len = shp->sh_size - idx - 1;
        memcpy(line, shp->sh_buffer + idx + 1, part_len);
        memcpy(line + part_len, shp->sh_buffer, length - part_len);
 80086a0:	f7fb fa10 	bl	8003ac4 <memcpy>
      shp->sh_cur++;
      return 0;
    }
  }
  return -1;
}
 80086a4:	4630      	mov	r0, r6
 80086a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    idx += *(shp->sh_buffer + idx) + 1;
 80086aa:	6823      	ldr	r3, [r4, #0]
    count++;
 80086ac:	3101      	adds	r1, #1
    idx += *(shp->sh_buffer + idx) + 1;
 80086ae:	5c1b      	ldrb	r3, [r3, r0]
 80086b0:	3301      	adds	r3, #1
 80086b2:	4418      	add	r0, r3
    if (idx >= shp->sh_size)
 80086b4:	6863      	ldr	r3, [r4, #4]
 80086b6:	4283      	cmp	r3, r0
      idx -= shp->sh_size;
 80086b8:	bfd8      	it	le
 80086ba:	1ac0      	suble	r0, r0, r3
    count++;
 80086bc:	e7c8      	b.n	8008650 <get_history+0x10>
      if (idx >= shp->sh_size)
 80086be:	6866      	ldr	r6, [r4, #4]
      idx += *(shp->sh_buffer + idx) + 1;
 80086c0:	3701      	adds	r7, #1
 80086c2:	443d      	add	r5, r7
      if (idx >= shp->sh_size)
 80086c4:	42ae      	cmp	r6, r5
        idx -= shp->sh_size;
 80086c6:	bfd8      	it	le
 80086c8:	1bad      	suble	r5, r5, r6
      i++;
 80086ca:	3901      	subs	r1, #1
 80086cc:	e7cf      	b.n	800866e <get_history+0x2e>
        int part_len = shp->sh_size - idx - 1;
 80086ce:	1b5d      	subs	r5, r3, r5
 80086d0:	3d01      	subs	r5, #1
        memcpy(line, shp->sh_buffer + idx + 1, part_len);
 80086d2:	4401      	add	r1, r0
 80086d4:	462a      	mov	r2, r5
 80086d6:	4640      	mov	r0, r8
 80086d8:	f7fb f9f4 	bl	8003ac4 <memcpy>
        memcpy(line + part_len, shp->sh_buffer, length - part_len);
 80086dc:	6821      	ldr	r1, [r4, #0]
 80086de:	1b7a      	subs	r2, r7, r5
 80086e0:	eb08 0005 	add.w	r0, r8, r5
 80086e4:	e7dc      	b.n	80086a0 <get_history+0x60>
    else if (dir == SHELL_HIST_DIR_FW) {
 80086e6:	2a01      	cmp	r2, #1
 80086e8:	d104      	bne.n	80086f4 <get_history+0xb4>
      shp->sh_cur++;
 80086ea:	3301      	adds	r3, #1
 80086ec:	6123      	str	r3, [r4, #16]
      return 0;
 80086ee:	e7d9      	b.n	80086a4 <get_history+0x64>
      return 0;
 80086f0:	2600      	movs	r6, #0
 80086f2:	e7d7      	b.n	80086a4 <get_history+0x64>
  return -1;
 80086f4:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 80086f8:	e7d4      	b.n	80086a4 <get_history+0x64>

080086fa <usbInitEndpointI>:
                      const USBEndpointConfig *epcp) {
 80086fa:	b570      	push	{r4, r5, r6, lr}
 80086fc:	4604      	mov	r4, r0
 80086fe:	460e      	mov	r6, r1
 8008700:	4615      	mov	r5, r2
	__asm volatile( "mrs %0, basepri" : "=r"( ulBasePri ) );
 8008702:	f3ef 8311 	mrs	r3, BASEPRI
	return (ulBasePri > 0)? pdTRUE : pdFALSE;
 8008706:	b11b      	cbz	r3, 8008710 <usbInitEndpointI+0x16>
  osalDbgCheck((usbp != NULL) && (epcp != NULL));
 8008708:	b928      	cbnz	r0, 8008716 <usbInitEndpointI+0x1c>
 800870a:	f7fb fe19 	bl	8004340 <vTaskEndScheduler>
 800870e:	e7fe      	b.n	800870e <usbInitEndpointI+0x14>
  osalDbgCheckClassI();
 8008710:	f7fb fe16 	bl	8004340 <vTaskEndScheduler>
 8008714:	e7fe      	b.n	8008714 <usbInitEndpointI+0x1a>
  osalDbgAssert(usbp->state == USB_ACTIVE,
 8008716:	7803      	ldrb	r3, [r0, #0]
 8008718:	2b04      	cmp	r3, #4
 800871a:	d002      	beq.n	8008722 <usbInitEndpointI+0x28>
 800871c:	f7fb fe10 	bl	8004340 <vTaskEndScheduler>
 8008720:	e7fe      	b.n	8008720 <usbInitEndpointI+0x26>
  osalDbgAssert(usbp->epc[ep] == NULL, "already initialized");
 8008722:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 8008726:	68d9      	ldr	r1, [r3, #12]
 8008728:	b111      	cbz	r1, 8008730 <usbInitEndpointI+0x36>
 800872a:	f7fb fe09 	bl	8004340 <vTaskEndScheduler>
 800872e:	e7fe      	b.n	800872e <usbInitEndpointI+0x34>
  if (epcp->in_state != NULL) {
 8008730:	6950      	ldr	r0, [r2, #20]
  usbp->epc[ep] = epcp;
 8008732:	60da      	str	r2, [r3, #12]
  if (epcp->in_state != NULL) {
 8008734:	b110      	cbz	r0, 800873c <usbInitEndpointI+0x42>
    memset(epcp->in_state, 0, sizeof(USBInEndpointState));
 8008736:	2210      	movs	r2, #16
 8008738:	f7fb fa3a 	bl	8003bb0 <memset>
  if (epcp->out_state != NULL) {
 800873c:	69a8      	ldr	r0, [r5, #24]
 800873e:	b118      	cbz	r0, 8008748 <usbInitEndpointI+0x4e>
    memset(epcp->out_state, 0, sizeof(USBOutEndpointState));
 8008740:	2210      	movs	r2, #16
 8008742:	2100      	movs	r1, #0
 8008744:	f7fb fa34 	bl	8003bb0 <memset>
  usb_lld_init_endpoint(usbp, ep);
 8008748:	4631      	mov	r1, r6
 800874a:	4620      	mov	r0, r4
}
 800874c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  usb_lld_init_endpoint(usbp, ep);
 8008750:	f7fd bcce 	b.w	80060f0 <usb_lld_init_endpoint>

08008754 <cmdexec>:
                      char *name, int argc, char *argv[]) {
 8008754:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008758:	4605      	mov	r5, r0
 800875a:	460e      	mov	r6, r1
 800875c:	4617      	mov	r7, r2
 800875e:	4698      	mov	r8, r3
  while (scp->sc_name != NULL) {
 8008760:	6828      	ldr	r0, [r5, #0]
 8008762:	b908      	cbnz	r0, 8008768 <cmdexec+0x14>
  return true;
 8008764:	2001      	movs	r0, #1
 8008766:	e00b      	b.n	8008780 <cmdexec+0x2c>
    if (strcmp(scp->sc_name, name) == 0) {
 8008768:	4639      	mov	r1, r7
 800876a:	f7fb fad5 	bl	8003d18 <strcmp>
 800876e:	4604      	mov	r4, r0
 8008770:	b940      	cbnz	r0, 8008784 <cmdexec+0x30>
      scp->sc_function(scp->sc_user, chp, argc, argv);
 8008772:	68a8      	ldr	r0, [r5, #8]
 8008774:	4642      	mov	r2, r8
 8008776:	4631      	mov	r1, r6
 8008778:	686f      	ldr	r7, [r5, #4]
 800877a:	9b06      	ldr	r3, [sp, #24]
 800877c:	47b8      	blx	r7
      return false;
 800877e:	4620      	mov	r0, r4
}
 8008780:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    scp++;
 8008784:	350c      	adds	r5, #12
 8008786:	e7eb      	b.n	8008760 <cmdexec+0xc>

08008788 <printfFixed>:
{
 8008788:	b40c      	push	{r2, r3}
 800878a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800878e:	aa08      	add	r2, sp, #32
 8008790:	460c      	mov	r4, r1
 8008792:	f852 1b04 	ldr.w	r1, [r2], #4
 8008796:	4606      	mov	r6, r0
    va_start(args, format);
 8008798:	9201      	str	r2, [sp, #4]
    int result = chvprintf(chn, format, args);
 800879a:	f7fd fb43 	bl	8005e24 <chvprintf>
 800879e:	4605      	mov	r5, r0
 80087a0:	4607      	mov	r7, r0
        chnWrite(chn, (unsigned char*)" ", 1);
 80087a2:	f8df 8028 	ldr.w	r8, [pc, #40]	; 80087cc <printfFixed+0x44>
    for(; result<minLength; result++) {
 80087a6:	42a7      	cmp	r7, r4
 80087a8:	db08      	blt.n	80087bc <printfFixed+0x34>
}
 80087aa:	42a5      	cmp	r5, r4
 80087ac:	4628      	mov	r0, r5
 80087ae:	bfb8      	it	lt
 80087b0:	4620      	movlt	r0, r4
 80087b2:	b002      	add	sp, #8
 80087b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80087b8:	b002      	add	sp, #8
 80087ba:	4770      	bx	lr
        chnWrite(chn, (unsigned char*)" ", 1);
 80087bc:	6833      	ldr	r3, [r6, #0]
 80087be:	2201      	movs	r2, #1
 80087c0:	4641      	mov	r1, r8
 80087c2:	4630      	mov	r0, r6
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	4798      	blx	r3
    for(; result<minLength; result++) {
 80087c8:	3701      	adds	r7, #1
 80087ca:	e7ec      	b.n	80087a6 <printfFixed+0x1e>
 80087cc:	0800c50b 	.word	0x0800c50b

080087d0 <chprintf>:
 * @param[in] chp       pointer to a @p BaseSequentialStream implementing object
 * @param[in] fmt       formatting string
 *
 * @api
 */
int chprintf(BaseSequentialStream *chp, const char *fmt, ...) {
 80087d0:	b40e      	push	{r1, r2, r3}
 80087d2:	b503      	push	{r0, r1, lr}
 80087d4:	aa03      	add	r2, sp, #12
 80087d6:	f852 1b04 	ldr.w	r1, [r2], #4
  va_list ap;
  int formatted_bytes;

  va_start(ap, fmt);
 80087da:	9201      	str	r2, [sp, #4]
  formatted_bytes = chvprintf(chp, fmt, ap);
 80087dc:	f7fd fb22 	bl	8005e24 <chvprintf>
  va_end(ap);

  return formatted_bytes;
}
 80087e0:	b002      	add	sp, #8
 80087e2:	f85d eb04 	ldr.w	lr, [sp], #4
 80087e6:	b003      	add	sp, #12
 80087e8:	4770      	bx	lr
	...

080087ec <prvIdleTask>:
 80087ec:	b580      	push	{r7, lr}
 80087ee:	f8df a2bc 	ldr.w	sl, [pc, #700]	; 8008aac <prvIdleTask+0x2c0>
 80087f2:	4c95      	ldr	r4, [pc, #596]	; (8008a48 <prvIdleTask+0x25c>)
 80087f4:	4e95      	ldr	r6, [pc, #596]	; (8008a4c <prvIdleTask+0x260>)
 80087f6:	4f96      	ldr	r7, [pc, #600]	; (8008a50 <prvIdleTask+0x264>)
 80087f8:	6833      	ldr	r3, [r6, #0]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d16f      	bne.n	80088de <prvIdleTask+0xf2>
 80087fe:	4b95      	ldr	r3, [pc, #596]	; (8008a54 <prvIdleTask+0x268>)
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	2b01      	cmp	r3, #1
 8008804:	d913      	bls.n	800882e <prvIdleTask+0x42>
 8008806:	4b94      	ldr	r3, [pc, #592]	; (8008a58 <prvIdleTask+0x26c>)
 8008808:	6822      	ldr	r2, [r4, #0]
 800880a:	601a      	str	r2, [r3, #0]
 800880c:	4b93      	ldr	r3, [pc, #588]	; (8008a5c <prvIdleTask+0x270>)
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	b12b      	cbz	r3, 800881e <prvIdleTask+0x32>
 8008812:	6823      	ldr	r3, [r4, #0]
 8008814:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8008818:	6023      	str	r3, [r4, #0]
 800881a:	6823      	ldr	r3, [r4, #0]
 800881c:	6023      	str	r3, [r4, #0]
 800881e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008822:	4b8f      	ldr	r3, [pc, #572]	; (8008a60 <prvIdleTask+0x274>)
 8008824:	601a      	str	r2, [r3, #0]
 8008826:	f3bf 8f4f 	dsb	sy
 800882a:	f3bf 8f6f 	isb	sy
    /*
     * Some events may happen from IRQs with unknown priority (possibly above kernel),
     * so they are written to a buffer (one entry only) and added to the syslog in
     * the IDLE thread.
     */
    if(__atomic_load_n(&syslogISRHasSomething, __ATOMIC_ACQUIRE)) {
 800882e:	f8df 8280 	ldr.w	r8, [pc, #640]	; 8008ab0 <prvIdleTask+0x2c4>
 8008832:	f898 3000 	ldrb.w	r3, [r8]
 8008836:	f3bf 8f5b 	dmb	ish
 800883a:	b373      	cbz	r3, 800889a <prvIdleTask+0xae>
        if(xSemaphoreTake(syslogSemaphore, 0)) {
 800883c:	f8df 9274 	ldr.w	r9, [pc, #628]	; 8008ab4 <prvIdleTask+0x2c8>
 8008840:	2100      	movs	r1, #0
 8008842:	f8d9 0000 	ldr.w	r0, [r9]
 8008846:	f7fc fab1 	bl	8004dac <xQueueSemaphoreTake>
 800884a:	b330      	cbz	r0, 800889a <prvIdleTask+0xae>
    queue->pktLen = 0;
 800884c:	2600      	movs	r6, #0
    queue->lenHeaderStart = queue->writePtr;
 800884e:	4f85      	ldr	r7, [pc, #532]	; (8008a64 <prvIdleTask+0x278>)
    packetQueueWriteByte(queue, 0x00);
 8008850:	2000      	movs	r0, #0
    queue->lenHeaderStart = queue->writePtr;
 8008852:	693b      	ldr	r3, [r7, #16]
 8008854:	61fb      	str	r3, [r7, #28]
    packetQueueWriteByte(queue, 0x00);
 8008856:	f7fb fbfd 	bl	8004054 <packetQueueWriteByte.constprop.0>
    packetQueueWriteByte(queue, 0x00);
 800885a:	2000      	movs	r0, #0
 800885c:	f7fb fbfa 	bl	8004054 <packetQueueWriteByte.constprop.0>
    queue->pktLen = 0;
 8008860:	61be      	str	r6, [r7, #24]
 8008862:	f7fb fc3f 	bl	80040e4 <vPortValidateInterruptPriority>
 8008866:	4b80      	ldr	r3, [pc, #512]	; (8008a68 <prvIdleTask+0x27c>)
            packetQueueStartWritePacket(&syslogQueue);
            chprintf((BaseSequentialStream*)&syslogStream, "[%-11u] {ISR} ", osalOsGetSystemTimeX());
            syslogISRBuffer[sizeof(syslogISRBuffer)-1] = 0;
 8008868:	4f80      	ldr	r7, [pc, #512]	; (8008a6c <prvIdleTask+0x280>)
 800886a:	681a      	ldr	r2, [r3, #0]
            chprintf((BaseSequentialStream*)&syslogStream, "[%-11u] {ISR} ", osalOsGetSystemTimeX());
 800886c:	4980      	ldr	r1, [pc, #512]	; (8008a70 <prvIdleTask+0x284>)
 800886e:	4881      	ldr	r0, [pc, #516]	; (8008a74 <prvIdleTask+0x288>)
 8008870:	f7ff ffae 	bl	80087d0 <chprintf>
            packetQueuePutBytes(&syslogQueue, (uint8_t*)syslogISRBuffer, strlen(syslogISRBuffer));
 8008874:	4638      	mov	r0, r7
            syslogISRBuffer[sizeof(syslogISRBuffer)-1] = 0;
 8008876:	f887 603f 	strb.w	r6, [r7, #63]	; 0x3f
            packetQueuePutBytes(&syslogQueue, (uint8_t*)syslogISRBuffer, strlen(syslogISRBuffer));
 800887a:	f7fb fb2b 	bl	8003ed4 <strlen>
 800887e:	b281      	uxth	r1, r0
 8008880:	4638      	mov	r0, r7
 8008882:	f7fb fc15 	bl	80040b0 <packetQueuePutBytes.constprop.0>
            packetQueueEndWritePacket(&syslogQueue);
 8008886:	f7fb fbad 	bl	8003fe4 <packetQueueEndWritePacket.constprop.0>
            xSemaphoreGive(syslogSemaphore);
 800888a:	f8d9 0000 	ldr.w	r0, [r9]
 800888e:	f7ff fbb5 	bl	8007ffc <xQueueGenericSend.constprop.0>

            __atomic_clear(&syslogISRHasSomething, __ATOMIC_RELEASE);
 8008892:	f3bf 8f5b 	dmb	ish
 8008896:	f888 6000 	strb.w	r6, [r8]

void vApplicationIdleHook(void)
{
    syslogIdleHook();

    if(usbConnectState && !usbShellIsUp) {
 800889a:	4b77      	ldr	r3, [pc, #476]	; (8008a78 <prvIdleTask+0x28c>)
 800889c:	781b      	ldrb	r3, [r3, #0]
 800889e:	b18b      	cbz	r3, 80088c4 <prvIdleTask+0xd8>
 80088a0:	4e76      	ldr	r6, [pc, #472]	; (8008a7c <prvIdleTask+0x290>)
 80088a2:	7833      	ldrb	r3, [r6, #0]
 80088a4:	f003 01ff 	and.w	r1, r3, #255	; 0xff
 80088a8:	b963      	cbnz	r3, 80088c4 <prvIdleTask+0xd8>
        usbShellIsUp = true;
 80088aa:	2301      	movs	r3, #1
        /*
         * Setting the pin from the idle hook requires a non-blocking
         * GPIO driver. In practice this means almost always a native
         * CPU pin.
         */
        gpioSetPin(GPIO_LED_USB, false);
 80088ac:	f240 1003 	movw	r0, #259	; 0x103
        usbShellIsUp = true;
 80088b0:	7033      	strb	r3, [r6, #0]
        gpioSetPin(GPIO_LED_USB, false);
 80088b2:	f7fc fe93 	bl	80055dc <gpioSetPin>

        /* Try to start the shell */
        if(!shellStart((BaseSequentialStream*)&SDU1, 128, "ShellUSB", usbShellTerminated, NULL)) {
 80088b6:	4a72      	ldr	r2, [pc, #456]	; (8008a80 <prvIdleTask+0x294>)
 80088b8:	4972      	ldr	r1, [pc, #456]	; (8008a84 <prvIdleTask+0x298>)
 80088ba:	4873      	ldr	r0, [pc, #460]	; (8008a88 <prvIdleTask+0x29c>)
 80088bc:	f7ff fe8a 	bl	80085d4 <shellStart.constprop.0>
 80088c0:	b900      	cbnz	r0, 80088c4 <prvIdleTask+0xd8>
            /* We are very low on memory. This will keep trying, but priority is IDLE */
            usbShellIsUp = false;
 80088c2:	7030      	strb	r0, [r6, #0]
 80088c4:	f7fb fd16 	bl	80042f4 <prvGetExpectedIdleTime>
 80088c8:	2801      	cmp	r0, #1
 80088ca:	d993      	bls.n	80087f4 <prvIdleTask+0x8>
 80088cc:	f7fb fd30 	bl	8004330 <vTaskSuspendAll>
 80088d0:	4e6e      	ldr	r6, [pc, #440]	; (8008a8c <prvIdleTask+0x2a0>)
 80088d2:	4965      	ldr	r1, [pc, #404]	; (8008a68 <prvIdleTask+0x27c>)
 80088d4:	6832      	ldr	r2, [r6, #0]
 80088d6:	680b      	ldr	r3, [r1, #0]
 80088d8:	429a      	cmp	r2, r3
 80088da:	d216      	bcs.n	800890a <prvIdleTask+0x11e>
 80088dc:	e7fe      	b.n	80088dc <prvIdleTask+0xf0>
 80088de:	f7fb fc81 	bl	80041e4 <vPortEnterCritical>
 80088e2:	f8da 300c 	ldr.w	r3, [sl, #12]
 80088e6:	f8d3 800c 	ldr.w	r8, [r3, #12]
 80088ea:	f108 0004 	add.w	r0, r8, #4
 80088ee:	f7fb fd7f 	bl	80043f0 <uxListRemove>
 80088f2:	683b      	ldr	r3, [r7, #0]
 80088f4:	3b01      	subs	r3, #1
 80088f6:	603b      	str	r3, [r7, #0]
 80088f8:	6833      	ldr	r3, [r6, #0]
 80088fa:	3b01      	subs	r3, #1
 80088fc:	6033      	str	r3, [r6, #0]
 80088fe:	f7fb fc65 	bl	80041cc <vPortExitCritical>
 8008902:	4640      	mov	r0, r8
 8008904:	f7fc fc0c 	bl	8005120 <prvDeleteTCB>
 8008908:	e776      	b.n	80087f8 <prvIdleTask+0xc>
 800890a:	f7fb fcf3 	bl	80042f4 <prvGetExpectedIdleTime>
 800890e:	2801      	cmp	r0, #1
 8008910:	d97b      	bls.n	8008a0a <prvIdleTask+0x21e>
 8008912:	4b5f      	ldr	r3, [pc, #380]	; (8008a90 <prvIdleTask+0x2a4>)
 8008914:	4a5f      	ldr	r2, [pc, #380]	; (8008a94 <prvIdleTask+0x2a8>)
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	4f5f      	ldr	r7, [pc, #380]	; (8008a98 <prvIdleTask+0x2ac>)
 800891a:	4298      	cmp	r0, r3
 800891c:	bf28      	it	cs
 800891e:	4618      	movcs	r0, r3
 8008920:	6813      	ldr	r3, [r2, #0]
 8008922:	f8df e194 	ldr.w	lr, [pc, #404]	; 8008ab8 <prvIdleTask+0x2cc>
 8008926:	f023 0301 	bic.w	r3, r3, #1
 800892a:	6013      	str	r3, [r2, #0]
 800892c:	4b5b      	ldr	r3, [pc, #364]	; (8008a9c <prvIdleTask+0x2b0>)
 800892e:	683d      	ldr	r5, [r7, #0]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	1e42      	subs	r2, r0, #1
 8008934:	fb05 3c02 	mla	ip, r5, r2, r3
 8008938:	f8de 3000 	ldr.w	r3, [lr]
 800893c:	459c      	cmp	ip, r3
 800893e:	bf88      	it	hi
 8008940:	ebac 0c03 	subhi.w	ip, ip, r3
 8008944:	b672      	cpsid	i
 8008946:	f3bf 8f4f 	dsb	sy
 800894a:	f3bf 8f6f 	isb	sy
 800894e:	4b54      	ldr	r3, [pc, #336]	; (8008aa0 <prvIdleTask+0x2b4>)
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	2b00      	cmp	r3, #0
 8008954:	d14c      	bne.n	80089f0 <prvIdleTask+0x204>
 8008956:	4b53      	ldr	r3, [pc, #332]	; (8008aa4 <prvIdleTask+0x2b8>)
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	2b00      	cmp	r3, #0
 800895c:	d148      	bne.n	80089f0 <prvIdleTask+0x204>
 800895e:	f8df 815c 	ldr.w	r8, [pc, #348]	; 8008abc <prvIdleTask+0x2d0>
 8008962:	f8d8 8000 	ldr.w	r8, [r8]
 8008966:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 8008a50 <prvIdleTask+0x264>
 800896a:	f8d8 8000 	ldr.w	r8, [r8]
 800896e:	f8df 8138 	ldr.w	r8, [pc, #312]	; 8008aa8 <prvIdleTask+0x2bc>
 8008972:	f8c8 c000 	str.w	ip, [r8]
 8008976:	f8c8 3004 	str.w	r3, [r8, #4]
 800897a:	f858 3c04 	ldr.w	r3, [r8, #-4]
 800897e:	f043 0301 	orr.w	r3, r3, #1
 8008982:	f848 3c04 	str.w	r3, [r8, #-4]
 8008986:	2800      	cmp	r0, #0
 8008988:	d142      	bne.n	8008a10 <prvIdleTask+0x224>
 800898a:	b662      	cpsie	i
 800898c:	f3bf 8f4f 	dsb	sy
 8008990:	f3bf 8f6f 	isb	sy
 8008994:	b672      	cpsid	i
 8008996:	f3bf 8f4f 	dsb	sy
 800899a:	f3bf 8f6f 	isb	sy
 800899e:	f04f 0802 	mov.w	r8, #2
 80089a2:	4b3c      	ldr	r3, [pc, #240]	; (8008a94 <prvIdleTask+0x2a8>)
 80089a4:	f8c3 8000 	str.w	r8, [r3]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 8008a9c <prvIdleTask+0x2b0>
 80089ae:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80089b2:	d033      	beq.n	8008a1c <prvIdleTask+0x230>
 80089b4:	6838      	ldr	r0, [r7, #0]
 80089b6:	f8d8 3000 	ldr.w	r3, [r8]
 80089ba:	4403      	add	r3, r0
 80089bc:	3b01      	subs	r3, #1
 80089be:	eba3 030c 	sub.w	r3, r3, ip
 80089c2:	f8de c000 	ldr.w	ip, [lr]
 80089c6:	4563      	cmp	r3, ip
 80089c8:	d301      	bcc.n	80089ce <prvIdleTask+0x1e2>
 80089ca:	4298      	cmp	r0, r3
 80089cc:	d200      	bcs.n	80089d0 <prvIdleTask+0x1e4>
 80089ce:	1e43      	subs	r3, r0, #1
 80089d0:	4835      	ldr	r0, [pc, #212]	; (8008aa8 <prvIdleTask+0x2bc>)
 80089d2:	6003      	str	r3, [r0, #0]
 80089d4:	2000      	movs	r0, #0
 80089d6:	4b31      	ldr	r3, [pc, #196]	; (8008a9c <prvIdleTask+0x2b0>)
 80089d8:	6018      	str	r0, [r3, #0]
 80089da:	482e      	ldr	r0, [pc, #184]	; (8008a94 <prvIdleTask+0x2a8>)
 80089dc:	6803      	ldr	r3, [r0, #0]
 80089de:	f043 0301 	orr.w	r3, r3, #1
 80089e2:	6003      	str	r3, [r0, #0]
 80089e4:	680b      	ldr	r3, [r1, #0]
 80089e6:	6830      	ldr	r0, [r6, #0]
 80089e8:	4413      	add	r3, r2
 80089ea:	4283      	cmp	r3, r0
 80089ec:	d924      	bls.n	8008a38 <prvIdleTask+0x24c>
 80089ee:	e7fe      	b.n	80089ee <prvIdleTask+0x202>
 80089f0:	4b2a      	ldr	r3, [pc, #168]	; (8008a9c <prvIdleTask+0x2b0>)
 80089f2:	4a2d      	ldr	r2, [pc, #180]	; (8008aa8 <prvIdleTask+0x2bc>)
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	4927      	ldr	r1, [pc, #156]	; (8008a94 <prvIdleTask+0x2a8>)
 80089f8:	6013      	str	r3, [r2, #0]
 80089fa:	680b      	ldr	r3, [r1, #0]
 80089fc:	f043 0301 	orr.w	r3, r3, #1
 8008a00:	600b      	str	r3, [r1, #0]
 8008a02:	683b      	ldr	r3, [r7, #0]
 8008a04:	3b01      	subs	r3, #1
 8008a06:	6013      	str	r3, [r2, #0]
 8008a08:	b662      	cpsie	i
 8008a0a:	f7fb ffcb 	bl	80049a4 <xTaskResumeAll>
 8008a0e:	e6f1      	b.n	80087f4 <prvIdleTask+0x8>
 8008a10:	f3bf 8f4f 	dsb	sy
 8008a14:	bf30      	wfi
 8008a16:	f3bf 8f6f 	isb	sy
 8008a1a:	e7b6      	b.n	800898a <prvIdleTask+0x19e>
 8008a1c:	683b      	ldr	r3, [r7, #0]
 8008a1e:	f8d8 c000 	ldr.w	ip, [r8]
 8008a22:	4358      	muls	r0, r3
 8008a24:	eba0 020c 	sub.w	r2, r0, ip
 8008a28:	fbb2 f2f3 	udiv	r2, r2, r3
 8008a2c:	fb02 3303 	mla	r3, r2, r3, r3
 8008a30:	ebac 0000 	sub.w	r0, ip, r0
 8008a34:	4403      	add	r3, r0
 8008a36:	e7cb      	b.n	80089d0 <prvIdleTask+0x1e4>
 8008a38:	680b      	ldr	r3, [r1, #0]
 8008a3a:	441a      	add	r2, r3
 8008a3c:	683b      	ldr	r3, [r7, #0]
 8008a3e:	600a      	str	r2, [r1, #0]
 8008a40:	3b01      	subs	r3, #1
 8008a42:	4a19      	ldr	r2, [pc, #100]	; (8008aa8 <prvIdleTask+0x2bc>)
 8008a44:	e7df      	b.n	8008a06 <prvIdleTask+0x21a>
 8008a46:	bf00      	nop
 8008a48:	e000ed20 	.word	0xe000ed20
 8008a4c:	20001360 	.word	0x20001360
 8008a50:	2000135c 	.word	0x2000135c
 8008a54:	200011b8 	.word	0x200011b8
 8008a58:	2000134c 	.word	0x2000134c
 8008a5c:	20001358 	.word	0x20001358
 8008a60:	e000ed04 	.word	0xe000ed04
 8008a64:	20001310 	.word	0x20001310
 8008a68:	20001648 	.word	0x20001648
 8008a6c:	200012cc 	.word	0x200012cc
 8008a70:	0800b921 	.word	0x0800b921
 8008a74:	0800ca14 	.word	0x0800ca14
 8008a78:	20001354 	.word	0x20001354
 8008a7c:	20001355 	.word	0x20001355
 8008a80:	080055fd 	.word	0x080055fd
 8008a84:	0800b930 	.word	0x0800b930
 8008a88:	20000a44 	.word	0x20000a44
 8008a8c:	200015f8 	.word	0x200015f8
 8008a90:	200015f0 	.word	0x200015f0
 8008a94:	e000e010 	.word	0xe000e010
 8008a98:	20001350 	.word	0x20001350
 8008a9c:	e000e018 	.word	0xe000e018
 8008aa0:	20001600 	.word	0x20001600
 8008aa4:	2000164c 	.word	0x2000164c
 8008aa8:	e000e014 	.word	0xe000e014
 8008aac:	20001634 	.word	0x20001634
 8008ab0:	2000130c 	.word	0x2000130c
 8008ab4:	20001334 	.word	0x20001334
 8008ab8:	20001348 	.word	0x20001348
 8008abc:	20001620 	.word	0x20001620

08008ac0 <cmdSanity>:

void cmdSanity(void* user, BaseSequentialStream *chp, int argc, char *argv[])
{
    (void)user;

    if(argc == 1) {
 8008ac0:	2a01      	cmp	r2, #1
{
 8008ac2:	b570      	push	{r4, r5, r6, lr}
 8008ac4:	460c      	mov	r4, r1
 8008ac6:	4615      	mov	r5, r2
    if(argc == 1) {
 8008ac8:	d117      	bne.n	8008afa <cmdSanity+0x3a>
        if(sanitySettingsLocked){
 8008aca:	4e11      	ldr	r6, [pc, #68]	; (8008b10 <cmdSanity+0x50>)
 8008acc:	7832      	ldrb	r2, [r6, #0]
 8008ace:	b12a      	cbz	r2, 8008adc <cmdSanity+0x1c>
            chprintf(chp, "Settings locked!"SHELL_NEWLINE_STR);
 8008ad0:	4910      	ldr	r1, [pc, #64]	; (8008b14 <cmdSanity+0x54>)
    chprintf(chp, "\tsanity [delaysec]"SHELL_NEWLINE_STR);
 8008ad2:	4620      	mov	r0, r4
        }
        return;
    };

    cmdSanityUsage(chp);
}
 8008ad4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    chprintf(chp, "\tsanity [delaysec]"SHELL_NEWLINE_STR);
 8008ad8:	f7ff be7a 	b.w	80087d0 <chprintf>
        }else if(!strcmp(argv[0], "lock")) {
 8008adc:	681c      	ldr	r4, [r3, #0]
 8008ade:	490e      	ldr	r1, [pc, #56]	; (8008b18 <cmdSanity+0x58>)
 8008ae0:	4620      	mov	r0, r4
 8008ae2:	f7fb f919 	bl	8003d18 <strcmp>
 8008ae6:	b908      	cbnz	r0, 8008aec <cmdSanity+0x2c>
            sanitySettingsLocked = true;
 8008ae8:	7035      	strb	r5, [r6, #0]
}
 8008aea:	bd70      	pop	{r4, r5, r6, pc}
            sanityRebootSeconds = strToInt(argv[0], 10);
 8008aec:	210a      	movs	r1, #10
 8008aee:	4620      	mov	r0, r4
 8008af0:	f7fd f94e 	bl	8005d90 <strToInt>
 8008af4:	4b09      	ldr	r3, [pc, #36]	; (8008b1c <cmdSanity+0x5c>)
 8008af6:	6018      	str	r0, [r3, #0]
 8008af8:	e7f7      	b.n	8008aea <cmdSanity+0x2a>
    chprintf(chp, "Usage:"SHELL_NEWLINE_STR);
 8008afa:	4909      	ldr	r1, [pc, #36]	; (8008b20 <cmdSanity+0x60>)
 8008afc:	4620      	mov	r0, r4
 8008afe:	f7ff fe67 	bl	80087d0 <chprintf>
    chprintf(chp, "\tsanity lock"SHELL_NEWLINE_STR);
 8008b02:	4908      	ldr	r1, [pc, #32]	; (8008b24 <cmdSanity+0x64>)
 8008b04:	4620      	mov	r0, r4
 8008b06:	f7ff fe63 	bl	80087d0 <chprintf>
    chprintf(chp, "\tsanity [delaysec]"SHELL_NEWLINE_STR);
 8008b0a:	4907      	ldr	r1, [pc, #28]	; (8008b28 <cmdSanity+0x68>)
 8008b0c:	e7e1      	b.n	8008ad2 <cmdSanity+0x12>
 8008b0e:	bf00      	nop
 8008b10:	20001230 	.word	0x20001230
 8008b14:	0800b939 	.word	0x0800b939
 8008b18:	0800b94c 	.word	0x0800b94c
 8008b1c:	20000858 	.word	0x20000858
 8008b20:	0800b951 	.word	0x0800b951
 8008b24:	0800b95a 	.word	0x0800b95a
 8008b28:	0800b969 	.word	0x0800b969

08008b2c <gpioCPUStatus>:
{
 8008b2c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008b30:	460d      	mov	r5, r1
    chprintf(chp, "\tDriver: HAL (MM 0x%08x)"SHELL_NEWLINE_STR, (uint32_t)driver->driver);
 8008b32:	6802      	ldr	r2, [r0, #0]
{
 8008b34:	4606      	mov	r6, r0
    chprintf(chp, "\tDriver: HAL (MM 0x%08x)"SHELL_NEWLINE_STR, (uint32_t)driver->driver);
 8008b36:	4915      	ldr	r1, [pc, #84]	; (8008b8c <gpioCPUStatus+0x60>)
 8008b38:	4628      	mov	r0, r5
 8008b3a:	f7ff fe49 	bl	80087d0 <chprintf>
 8008b3e:	2400      	movs	r4, #0
    uint8_t mode = gpioCPUGetPinMode(driver, pin);
 8008b40:	f8df 8054 	ldr.w	r8, [pc, #84]	; 8008b98 <gpioCPUStatus+0x6c>
 8008b44:	f8df 9054 	ldr.w	r9, [pc, #84]	; 8008b9c <gpioCPUStatus+0x70>
        printfFixed(chp, 32, "\tPin %u (%s):",
 8008b48:	4f11      	ldr	r7, [pc, #68]	; (8008b90 <gpioCPUStatus+0x64>)
    uint8_t mode = gpioCPUGetPinMode(driver, pin);
 8008b4a:	4621      	mov	r1, r4
 8008b4c:	4630      	mov	r0, r6
 8008b4e:	f7fc fcb9 	bl	80054c4 <gpioCPUGetPinMode>
    switch(mode) {
 8008b52:	1e43      	subs	r3, r0, #1
 8008b54:	b2db      	uxtb	r3, r3
 8008b56:	2b10      	cmp	r3, #16
    uint8_t mode = gpioCPUGetPinMode(driver, pin);
 8008b58:	bf8c      	ite	hi
 8008b5a:	4643      	movhi	r3, r8
 8008b5c:	f859 3023 	ldrls.w	r3, [r9, r3, lsl #2]
        printfFixed(chp, 32, "\tPin %u (%s):",
 8008b60:	463a      	mov	r2, r7
 8008b62:	2120      	movs	r1, #32
 8008b64:	9300      	str	r3, [sp, #0]
 8008b66:	4628      	mov	r0, r5
 8008b68:	4623      	mov	r3, r4
 8008b6a:	f7ff fe0d 	bl	8008788 <printfFixed>
        chprintf(chp,  "%u"SHELL_NEWLINE_STR, palReadPad((ioportid_t)driver->driver, i));
 8008b6e:	6833      	ldr	r3, [r6, #0]
 8008b70:	4628      	mov	r0, r5
 8008b72:	689a      	ldr	r2, [r3, #8]
 8008b74:	4907      	ldr	r1, [pc, #28]	; (8008b94 <gpioCPUStatus+0x68>)
 8008b76:	40e2      	lsrs	r2, r4
 8008b78:	f002 0201 	and.w	r2, r2, #1
 8008b7c:	3401      	adds	r4, #1
 8008b7e:	f7ff fe27 	bl	80087d0 <chprintf>
    for(uint8_t i=0; i<16; i++) {
 8008b82:	2c10      	cmp	r4, #16
 8008b84:	d1e1      	bne.n	8008b4a <gpioCPUStatus+0x1e>
}
 8008b86:	b003      	add	sp, #12
 8008b88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008b8c:	0800b97e 	.word	0x0800b97e
 8008b90:	0800b999 	.word	0x0800b999
 8008b94:	0800bc5d 	.word	0x0800bc5d
 8008b98:	0800b912 	.word	0x0800b912
 8008b9c:	0800c66c 	.word	0x0800c66c

08008ba0 <gpioDummyStatus>:

    return false;
}

void gpioDummyStatus(const GPIOPort* driver, BaseSequentialStream* chp)
{
 8008ba0:	4608      	mov	r0, r1
    (void)driver;

    chprintf(chp, "\tDriver: Dummy"SHELL_NEWLINE_STR);
 8008ba2:	4901      	ldr	r1, [pc, #4]	; (8008ba8 <gpioDummyStatus+0x8>)
 8008ba4:	f7ff be14 	b.w	80087d0 <chprintf>
 8008ba8:	0800b9a7 	.word	0x0800b9a7

08008bac <syslog>:
{
 8008bac:	b40f      	push	{r0, r1, r2, r3}
 8008bae:	b573      	push	{r0, r1, r4, r5, r6, lr}
    xSemaphoreTake(syslogSemaphore, portMAX_DELAY);
 8008bb0:	4d16      	ldr	r5, [pc, #88]	; (8008c0c <syslog+0x60>)
{
 8008bb2:	ab06      	add	r3, sp, #24
 8008bb4:	f853 6b04 	ldr.w	r6, [r3], #4
    queue->lenHeaderStart = queue->writePtr;
 8008bb8:	4c15      	ldr	r4, [pc, #84]	; (8008c10 <syslog+0x64>)
    xSemaphoreTake(syslogSemaphore, portMAX_DELAY);
 8008bba:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8008bbe:	6828      	ldr	r0, [r5, #0]
    va_start(args, format);
 8008bc0:	9301      	str	r3, [sp, #4]
    xSemaphoreTake(syslogSemaphore, portMAX_DELAY);
 8008bc2:	f7fc f8f3 	bl	8004dac <xQueueSemaphoreTake>
 8008bc6:	6923      	ldr	r3, [r4, #16]
    packetQueueWriteByte(queue, 0x00);
 8008bc8:	2000      	movs	r0, #0
    queue->lenHeaderStart = queue->writePtr;
 8008bca:	61e3      	str	r3, [r4, #28]
    packetQueueWriteByte(queue, 0x00);
 8008bcc:	f7fb fa42 	bl	8004054 <packetQueueWriteByte.constprop.0>
    packetQueueWriteByte(queue, 0x00);
 8008bd0:	2000      	movs	r0, #0
 8008bd2:	f7fb fa3f 	bl	8004054 <packetQueueWriteByte.constprop.0>
    queue->pktLen = 0;
 8008bd6:	2300      	movs	r3, #0
 8008bd8:	61a3      	str	r3, [r4, #24]
 8008bda:	f7fb fa83 	bl	80040e4 <vPortValidateInterruptPriority>
    chprintf((BaseSequentialStream*)&syslogStream, "[%-11u] ", osalOsGetSystemTimeX());
 8008bde:	4c0d      	ldr	r4, [pc, #52]	; (8008c14 <syslog+0x68>)
 8008be0:	4b0d      	ldr	r3, [pc, #52]	; (8008c18 <syslog+0x6c>)
 8008be2:	4620      	mov	r0, r4
 8008be4:	681a      	ldr	r2, [r3, #0]
 8008be6:	490d      	ldr	r1, [pc, #52]	; (8008c1c <syslog+0x70>)
 8008be8:	f7ff fdf2 	bl	80087d0 <chprintf>
    chvprintf((BaseSequentialStream*)&syslogStream, format, args);
 8008bec:	4631      	mov	r1, r6
 8008bee:	9a01      	ldr	r2, [sp, #4]
 8008bf0:	4620      	mov	r0, r4
 8008bf2:	f7fd f917 	bl	8005e24 <chvprintf>
    packetQueueEndWritePacket(&syslogQueue);
 8008bf6:	f7fb f9f5 	bl	8003fe4 <packetQueueEndWritePacket.constprop.0>
    xSemaphoreGive(syslogSemaphore);
 8008bfa:	6828      	ldr	r0, [r5, #0]
 8008bfc:	f7ff f9fe 	bl	8007ffc <xQueueGenericSend.constprop.0>
}
 8008c00:	b002      	add	sp, #8
 8008c02:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008c06:	b004      	add	sp, #16
 8008c08:	4770      	bx	lr
 8008c0a:	bf00      	nop
 8008c0c:	20001334 	.word	0x20001334
 8008c10:	20001310 	.word	0x20001310
 8008c14:	0800ca14 	.word	0x0800ca14
 8008c18:	20001648 	.word	0x20001648
 8008c1c:	0800b9b8 	.word	0x0800b9b8

08008c20 <i2cSafeMasterTransmitTimeoutWithRetry.part.0.constprop.0>:
i2c_result i2cSafeMasterTransmitTimeoutWithRetry (
 8008c20:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c24:	4604      	mov	r4, r0
 8008c26:	460e      	mov	r6, r1

  /* Resetting error flags for this transfer.*/
  i2cp->errors = I2C_NO_ERROR;

  /* Initializes driver fields, LSB = 0 -> transmit.*/
  i2cp->addr = (addr << 1);
 8008c28:	f04f 0803 	mov.w	r8, #3
  i2cp->errors = I2C_NO_ERROR;
 8008c2c:	f04f 0900 	mov.w	r9, #0
 8008c30:	461f      	mov	r7, r3
 8008c32:	f8df a120 	ldr.w	sl, [pc, #288]	; 8008d54 <i2cSafeMasterTransmitTimeoutWithRetry.part.0.constprop.0+0x134>
 8008c36:	004b      	lsls	r3, r1, #1
 8008c38:	9201      	str	r2, [sp, #4]
 8008c3a:	fa1f fb83 	uxth.w	fp, r3
  osalDbgCheck((i2cp != NULL) && (addr != 0U) &&
 8008c3e:	b12c      	cbz	r4, 8008c4c <i2cSafeMasterTransmitTimeoutWithRetry.part.0.constprop.0+0x2c>
 8008c40:	b126      	cbz	r6, 8008c4c <i2cSafeMasterTransmitTimeoutWithRetry.part.0.constprop.0+0x2c>
 8008c42:	b11f      	cbz	r7, 8008c4c <i2cSafeMasterTransmitTimeoutWithRetry.part.0.constprop.0+0x2c>
 8008c44:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008c46:	b123      	cbz	r3, 8008c52 <i2cSafeMasterTransmitTimeoutWithRetry.part.0.constprop.0+0x32>
 8008c48:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008c4a:	b913      	cbnz	r3, 8008c52 <i2cSafeMasterTransmitTimeoutWithRetry.part.0.constprop.0+0x32>
 8008c4c:	f7fb fb78 	bl	8004340 <vTaskEndScheduler>
 8008c50:	e7fe      	b.n	8008c50 <i2cSafeMasterTransmitTimeoutWithRetry.part.0.constprop.0+0x30>
  osalDbgAssert(i2cp->state == I2C_READY, "not ready");
 8008c52:	7825      	ldrb	r5, [r4, #0]
 8008c54:	2d02      	cmp	r5, #2
 8008c56:	d002      	beq.n	8008c5e <i2cSafeMasterTransmitTimeoutWithRetry.part.0.constprop.0+0x3e>
 8008c58:	f7fb fb72 	bl	8004340 <vTaskEndScheduler>
 8008c5c:	e7fe      	b.n	8008c5c <i2cSafeMasterTransmitTimeoutWithRetry.part.0.constprop.0+0x3c>
  osalSysLock();
 8008c5e:	f7fb fac1 	bl	80041e4 <vPortEnterCritical>
  i2cp->state = I2C_ACTIVE_TX;
 8008c62:	2303      	movs	r3, #3
 8008c64:	7023      	strb	r3, [r4, #0]
  osalDbgCheck((rxbytes == 0) || ((rxbytes > 1) && (rxbuf != NULL)));
 8008c66:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  i2cp->errors = I2C_NO_ERROR;
 8008c68:	f8c4 9008 	str.w	r9, [r4, #8]
 8008c6c:	b123      	cbz	r3, 8008c78 <i2cSafeMasterTransmitTimeoutWithRetry.part.0.constprop.0+0x58>
 8008c6e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008c70:	b913      	cbnz	r3, 8008c78 <i2cSafeMasterTransmitTimeoutWithRetry.part.0.constprop.0+0x58>
 8008c72:	f7fb fb65 	bl	8004340 <vTaskEndScheduler>
 8008c76:	e7fe      	b.n	8008c76 <i2cSafeMasterTransmitTimeoutWithRetry.part.0.constprop.0+0x56>
  i2cp->numInterrupts = 0;
 8008c78:	f8c4 9080 	str.w	r9, [r4, #128]	; 0x80
  i2cp->addr = (addr << 1);
 8008c7c:	f8a4 b064 	strh.w	fp, [r4, #100]	; 0x64
  I2C_TypeDef *dp = i2cp->i2c;
 8008c80:	6fa0      	ldr	r0, [r4, #120]	; 0x78

  /* Releases the lock from high level driver.*/
  osalSysUnlock();
 8008c82:	f7fc fde7 	bl	8005854 <osalSysUnlock.lto_priv.0>

  /* TX DMA setup.*/
  dmaStreamSetMode(i2cp->dmatx, i2cp->txdmamode);
 8008c86:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8008c88:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8008c8a:	685b      	ldr	r3, [r3, #4]
 8008c8c:	601a      	str	r2, [r3, #0]
  dmaStreamSetMemory0(i2cp->dmatx, txbuf);
 8008c8e:	9a01      	ldr	r2, [sp, #4]
 8008c90:	60da      	str	r2, [r3, #12]
  dmaStreamSetTransactionSize(i2cp->dmatx, txbytes);
 8008c92:	605f      	str	r7, [r3, #4]

  /* RX DMA setup.*/
  dmaStreamSetMode(i2cp->dmarx, i2cp->rxdmamode);
 8008c94:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8008c96:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 8008c98:	685b      	ldr	r3, [r3, #4]
 8008c9a:	601a      	str	r2, [r3, #0]
  dmaStreamSetMemory0(i2cp->dmarx, rxbuf);
 8008c9c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008c9e:	60da      	str	r2, [r3, #12]
  dmaStreamSetTransactionSize(i2cp->dmarx, rxbytes);
 8008ca0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008ca2:	605a      	str	r2, [r3, #4]
 8008ca4:	f7fb fa1e 	bl	80040e4 <vPortValidateInterruptPriority>
 8008ca8:	f8da 3000 	ldr.w	r3, [sl]
 8008cac:	9300      	str	r3, [sp, #0]
  end = start + OSAL_MS2ST(STM32_I2C_BUSY_TIMEOUT);

  /* Waits until BUSY flag is reset or, alternatively, for a timeout
     condition.*/
  while (true) {
    osalSysLock();
 8008cae:	f7fb fa99 	bl	80041e4 <vPortEnterCritical>

    /* If the bus is not busy then the operation can continue, note, the
       loop is exited in the locked state.*/
    if (!(dp->SR2 & I2C_SR2_BUSY) && !(dp->CR1 & I2C_CR1_STOP))
 8008cb2:	6983      	ldr	r3, [r0, #24]
 8008cb4:	0799      	lsls	r1, r3, #30
 8008cb6:	d402      	bmi.n	8008cbe <i2cSafeMasterTransmitTimeoutWithRetry.part.0.constprop.0+0x9e>
 8008cb8:	6803      	ldr	r3, [r0, #0]
 8008cba:	059a      	lsls	r2, r3, #22
 8008cbc:	d50a      	bpl.n	8008cd4 <i2cSafeMasterTransmitTimeoutWithRetry.part.0.constprop.0+0xb4>
 8008cbe:	f7fb fa11 	bl	80040e4 <vPortValidateInterruptPriority>
 8008cc2:	f8da 3000 	ldr.w	r3, [sl]

/* Why is this in the OSAL? It is always the same? */
static inline bool osalOsIsTimeWithinX(systime_t now, systime_t begin, systime_t end)
{
    systime_t duration = end - begin;
    systime_t past = now - begin;
 8008cc6:	9a00      	ldr	r2, [sp, #0]
 8008cc8:	1a9b      	subs	r3, r3, r2

    if(past < duration) return true;
 8008cca:	2b31      	cmp	r3, #49	; 0x31
 8008ccc:	d82e      	bhi.n	8008d2c <i2cSafeMasterTransmitTimeoutWithRetry.part.0.constprop.0+0x10c>
    /* If the system time went outside the allowed window then a timeout
       condition is returned.*/
    if (!osalOsIsTimeWithinX(osalOsGetSystemTimeX(), start, end))
      return MSG_TIMEOUT;

    osalSysUnlock();
 8008cce:	f7fc fdc1 	bl	8005854 <osalSysUnlock.lto_priv.0>
 8008cd2:	e7ec      	b.n	8008cae <i2cSafeMasterTransmitTimeoutWithRetry.part.0.constprop.0+0x8e>
  }

  /* Starts the operation.*/
  dp->CR2 |= I2C_CR2_ITEVTEN;
 8008cd4:	6843      	ldr	r3, [r0, #4]
  dp->CR1 |= I2C_CR1_START;

  /* Waits for the operation completion or a timeout.*/
  return osalThreadSuspendTimeoutS(&i2cp->thread, timeout);
 8008cd6:	2105      	movs	r1, #5
  dp->CR2 |= I2C_CR2_ITEVTEN;
 8008cd8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008cdc:	6043      	str	r3, [r0, #4]
  dp->CR1 |= I2C_CR1_START;
 8008cde:	6803      	ldr	r3, [r0, #0]
 8008ce0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008ce4:	6003      	str	r3, [r0, #0]
  return osalThreadSuspendTimeoutS(&i2cp->thread, timeout);
 8008ce6:	f104 0060 	add.w	r0, r4, #96	; 0x60
 8008cea:	f7fb fd0d 	bl	8004708 <osalThreadSuspendTimeoutS>
    i2cp->state = I2C_LOCKED;
 8008cee:	1c43      	adds	r3, r0, #1
 8008cf0:	bf08      	it	eq
 8008cf2:	2505      	moveq	r5, #5
 8008cf4:	7025      	strb	r5, [r4, #0]
  osalSysUnlock();
 8008cf6:	f7fc fdad 	bl	8005854 <osalSysUnlock.lto_priv.0>
        if(status == MSG_OK){
 8008cfa:	b328      	cbz	r0, 8008d48 <i2cSafeMasterTransmitTimeoutWithRetry.part.0.constprop.0+0x128>
        osalSysLock();
 8008cfc:	f7fb fa72 	bl	80041e4 <vPortEnterCritical>
        i2c->i2cErrors++;
 8008d00:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8008d04:	3301      	adds	r3, #1
 8008d06:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        osalSysUnlock();
 8008d0a:	f7fc fda3 	bl	8005854 <osalSysUnlock.lto_priv.0>
        if((retVal = i2cSafeRawUnclogBus(i2c))) {
 8008d0e:	4620      	mov	r0, r4
 8008d10:	f7fe ff50 	bl	8007bb4 <i2cSafeRawUnclogBus>
 8008d14:	4605      	mov	r5, r0
 8008d16:	b168      	cbz	r0, 8008d34 <i2cSafeMasterTransmitTimeoutWithRetry.part.0.constprop.0+0x114>
            syslog("I2C error, bus failure: %s.", i2cSafeResultToString(retVal));
 8008d18:	f7fc fd10 	bl	800573c <i2cSafeResultToString>
 8008d1c:	4601      	mov	r1, r0
 8008d1e:	480b      	ldr	r0, [pc, #44]	; (8008d4c <i2cSafeMasterTransmitTimeoutWithRetry.part.0.constprop.0+0x12c>)
 8008d20:	f7ff ff44 	bl	8008bac <syslog>
}
 8008d24:	4628      	mov	r0, r5
 8008d26:	b003      	add	sp, #12
 8008d28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    i2cp->state = I2C_LOCKED;
 8008d2c:	2505      	movs	r5, #5
      return MSG_TIMEOUT;
 8008d2e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008d32:	e7df      	b.n	8008cf4 <i2cSafeMasterTransmitTimeoutWithRetry.part.0.constprop.0+0xd4>
    for(i=0; i<maxTries; i++) {
 8008d34:	f1b8 0801 	subs.w	r8, r8, #1
 8008d38:	d181      	bne.n	8008c3e <i2cSafeMasterTransmitTimeoutWithRetry.part.0.constprop.0+0x1e>
    syslog("I2C error, %u failed attempts.", maxTries);
 8008d3a:	2103      	movs	r1, #3
 8008d3c:	4804      	ldr	r0, [pc, #16]	; (8008d50 <i2cSafeMasterTransmitTimeoutWithRetry.part.0.constprop.0+0x130>)
 8008d3e:	f7ff ff35 	bl	8008bac <syslog>
    retVal = I2C_BUS_RESET;
 8008d42:	f06f 0501 	mvn.w	r5, #1
 8008d46:	e7ed      	b.n	8008d24 <i2cSafeMasterTransmitTimeoutWithRetry.part.0.constprop.0+0x104>
            retVal = status;
 8008d48:	4605      	mov	r5, r0
 8008d4a:	e7eb      	b.n	8008d24 <i2cSafeMasterTransmitTimeoutWithRetry.part.0.constprop.0+0x104>
 8008d4c:	0800b9c1 	.word	0x0800b9c1
 8008d50:	0800b9dd 	.word	0x0800b9dd
 8008d54:	20001648 	.word	0x20001648

08008d58 <i2cSafeWriteRegBulkStandard.constprop.0>:
i2c_result i2cSafeWriteRegBulkStandard(I2CDriver* i2c,
 8008d58:	b530      	push	{r4, r5, lr}
 8008d5a:	460d      	mov	r5, r1
    osalDbgAssert(i2c != NULL, "i2c == NULL");
 8008d5c:	4604      	mov	r4, r0
i2c_result i2cSafeWriteRegBulkStandard(I2CDriver* i2c,
 8008d5e:	b085      	sub	sp, #20
    osalDbgAssert(i2c != NULL, "i2c == NULL");
 8008d60:	b910      	cbnz	r0, 8008d68 <i2cSafeWriteRegBulkStandard.constprop.0+0x10>
 8008d62:	f7fb faed 	bl	8004340 <vTaskEndScheduler>
 8008d66:	e7fe      	b.n	8008d66 <i2cSafeWriteRegBulkStandard.constprop.0+0xe>
    memcpy(&txBuf[1], values, len);
 8008d68:	781b      	ldrb	r3, [r3, #0]
    txBuf[0]=addr;
 8008d6a:	f88d 200c 	strb.w	r2, [sp, #12]
    memcpy(&txBuf[1], values, len);
 8008d6e:	f88d 300d 	strb.w	r3, [sp, #13]
    i2cAcquireBus(i2c);
 8008d72:	f7fe fa8d 	bl	8007290 <i2cAcquireBus>
    i2c_status = i2cSafeMasterTransmitTimeoutWithRetry(i2c, devAddr, txBuf,
 8008d76:	b2a9      	uxth	r1, r5
    if(!devAddr) return MSG_RESET;
 8008d78:	b175      	cbz	r5, 8008d98 <i2cSafeWriteRegBulkStandard.constprop.0+0x40>
 8008d7a:	2300      	movs	r3, #0
 8008d7c:	4620      	mov	r0, r4
 8008d7e:	e9cd 3300 	strd	r3, r3, [sp]
 8008d82:	aa03      	add	r2, sp, #12
 8008d84:	2302      	movs	r3, #2
 8008d86:	f7ff ff4b 	bl	8008c20 <i2cSafeMasterTransmitTimeoutWithRetry.part.0.constprop.0>
 8008d8a:	4605      	mov	r5, r0
    i2cReleaseBus(i2c);
 8008d8c:	4620      	mov	r0, r4
 8008d8e:	f7ff fa70 	bl	8008272 <i2cReleaseBus>
}
 8008d92:	4628      	mov	r0, r5
 8008d94:	b005      	add	sp, #20
 8008d96:	bd30      	pop	{r4, r5, pc}
    if(!devAddr) return MSG_RESET;
 8008d98:	f06f 0501 	mvn.w	r5, #1
 8008d9c:	e7f6      	b.n	8008d8c <i2cSafeWriteRegBulkStandard.constprop.0+0x34>

08008d9e <i2cSafeReadRegBulkStandard.constprop.0>:
i2c_result i2cSafeReadRegBulkStandard(I2CDriver* i2c,
 8008d9e:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8008da0:	460e      	mov	r6, r1
 8008da2:	461d      	mov	r5, r3
    osalDbgAssert(i2c != NULL, "i2c == NULL");
 8008da4:	4604      	mov	r4, r0
 8008da6:	b910      	cbnz	r0, 8008dae <i2cSafeReadRegBulkStandard.constprop.0+0x10>
 8008da8:	f7fb faca 	bl	8004340 <vTaskEndScheduler>
 8008dac:	e7fe      	b.n	8008dac <i2cSafeReadRegBulkStandard.constprop.0+0xe>
    uint8_t txBuf[1] = {addr};
 8008dae:	f88d 200c 	strb.w	r2, [sp, #12]
    i2cAcquireBus(i2c);
 8008db2:	f7fe fa6d 	bl	8007290 <i2cAcquireBus>
    i2c_status = i2cSafeMasterTransmitTimeoutWithRetry(i2c, devAddr, txBuf,
 8008db6:	b2b1      	uxth	r1, r6
    if(!devAddr) return MSG_RESET;
 8008db8:	b18e      	cbz	r6, 8008dde <i2cSafeReadRegBulkStandard.constprop.0+0x40>
    memset(rxbuf, 0xFE, rxbytes);
 8008dba:	f64f 63fe 	movw	r3, #65278	; 0xfefe
 8008dbe:	802b      	strh	r3, [r5, #0]
 8008dc0:	2302      	movs	r3, #2
 8008dc2:	4620      	mov	r0, r4
 8008dc4:	e9cd 5300 	strd	r5, r3, [sp]
 8008dc8:	aa03      	add	r2, sp, #12
 8008dca:	2301      	movs	r3, #1
 8008dcc:	f7ff ff28 	bl	8008c20 <i2cSafeMasterTransmitTimeoutWithRetry.part.0.constprop.0>
 8008dd0:	4605      	mov	r5, r0
    i2cReleaseBus(i2c);
 8008dd2:	4620      	mov	r0, r4
 8008dd4:	f7ff fa4d 	bl	8008272 <i2cReleaseBus>
}
 8008dd8:	4628      	mov	r0, r5
 8008dda:	b004      	add	sp, #16
 8008ddc:	bd70      	pop	{r4, r5, r6, pc}
    if(!devAddr) return MSG_RESET;
 8008dde:	f06f 0501 	mvn.w	r5, #1
 8008de2:	e7f6      	b.n	8008dd2 <i2cSafeReadRegBulkStandard.constprop.0+0x34>

08008de4 <MCP9804MeasureTemperature.part.0>:
#include "mcp9804.h"
#include "../i2csafe/i2csafe.h"
#include <string.h>
#include "../system.h"

int16_t MCP9804MeasureTemperature(MCP9804Driver* driver, bool newMeasurement)
 8008de4:	b513      	push	{r0, r1, r4, lr}
 8008de6:	4604      	mov	r4, r0
    if(!newMeasurement) {
        return driver->temperature;
    }

    uint8_t data[2];
    i2c_result result = i2cSafeReadRegBulkStandard(driver->config->i2cPort, driver->config->i2cAddr, 0x5, data, 2);
 8008de8:	6800      	ldr	r0, [r0, #0]
 8008dea:	2205      	movs	r2, #5
 8008dec:	7901      	ldrb	r1, [r0, #4]
 8008dee:	ab01      	add	r3, sp, #4
 8008df0:	6800      	ldr	r0, [r0, #0]
 8008df2:	f7ff ffd4 	bl	8008d9e <i2cSafeReadRegBulkStandard.constprop.0>

    if(result != I2C_BUS_OK) {
 8008df6:	b130      	cbz	r0, 8008e06 <MCP9804MeasureTemperature.part.0+0x22>
        driver->temperature = 0x7FFF;
 8008df8:	f647 73ff 	movw	r3, #32767	; 0x7fff

        driver->temperature = temp;

        /* Check sign */
        if(data[0] & 0x10) {
            driver->temperature = 4096 - temp;
 8008dfc:	80a3      	strh	r3, [r4, #4]
        }
    }

    return driver->temperature;
}
 8008dfe:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8008e02:	b002      	add	sp, #8
 8008e04:	bd10      	pop	{r4, pc}
        uint16_t temp = ((data[0] & 0xF) << 8) | data[1];
 8008e06:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8008e0a:	020b      	lsls	r3, r1, #8
 8008e0c:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8008e10:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8008e14:	4313      	orrs	r3, r2
        if(data[0] & 0x10) {
 8008e16:	06ca      	lsls	r2, r1, #27
            driver->temperature = 4096 - temp;
 8008e18:	bf48      	it	mi
 8008e1a:	f5c3 5380 	rsbmi	r3, r3, #4096	; 0x1000
 8008e1e:	e7ed      	b.n	8008dfc <MCP9804MeasureTemperature.part.0+0x18>

08008e20 <i2cSafeReadRegStandard>:
{
 8008e20:	b513      	push	{r0, r1, r4, lr}
 8008e22:	461c      	mov	r4, r3
    osalDbgAssert(i2c != NULL, "i2c == NULL");
 8008e24:	b910      	cbnz	r0, 8008e2c <i2cSafeReadRegStandard+0xc>
 8008e26:	f7fb fa8b 	bl	8004340 <vTaskEndScheduler>
 8008e2a:	e7fe      	b.n	8008e2a <i2cSafeReadRegStandard+0xa>
    i2c_result result = i2cSafeReadRegBulkStandard(i2c, devAddr, addr, values, sizeof(values));
 8008e2c:	ab01      	add	r3, sp, #4
 8008e2e:	f7ff ffb6 	bl	8008d9e <i2cSafeReadRegBulkStandard.constprop.0>
    *value=values[0];
 8008e32:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8008e36:	7023      	strb	r3, [r4, #0]
}
 8008e38:	b002      	add	sp, #8
 8008e3a:	bd10      	pop	{r4, pc}

08008e3c <gpioDummyGetValue>:
{
 8008e3c:	b508      	push	{r3, lr}
    syslog("Use of dummy GPIO %u!", (uint32_t)driver->driver);
 8008e3e:	6801      	ldr	r1, [r0, #0]
 8008e40:	4802      	ldr	r0, [pc, #8]	; (8008e4c <gpioDummyGetValue+0x10>)
 8008e42:	f7ff feb3 	bl	8008bac <syslog>
}
 8008e46:	2000      	movs	r0, #0
 8008e48:	bd08      	pop	{r3, pc}
 8008e4a:	bf00      	nop
 8008e4c:	0800b9fc 	.word	0x0800b9fc

08008e50 <gpioDummySetValue>:
{
 8008e50:	b508      	push	{r3, lr}
    syslog("Use of dummy GPIO %u!", (uint32_t)driver->driver);
 8008e52:	6801      	ldr	r1, [r0, #0]
 8008e54:	4802      	ldr	r0, [pc, #8]	; (8008e60 <gpioDummySetValue+0x10>)
 8008e56:	f7ff fea9 	bl	8008bac <syslog>
}
 8008e5a:	2000      	movs	r0, #0
 8008e5c:	bd08      	pop	{r3, pc}
 8008e5e:	bf00      	nop
 8008e60:	0800b9fc 	.word	0x0800b9fc

08008e64 <gpioDummyGetPinMode>:
{
 8008e64:	b508      	push	{r3, lr}
    syslog("Use of dummy GPIO %u!", (uint32_t)driver->driver);
 8008e66:	6801      	ldr	r1, [r0, #0]
 8008e68:	4802      	ldr	r0, [pc, #8]	; (8008e74 <gpioDummyGetPinMode+0x10>)
 8008e6a:	f7ff fe9f 	bl	8008bac <syslog>
}
 8008e6e:	2002      	movs	r0, #2
 8008e70:	bd08      	pop	{r3, pc}
 8008e72:	bf00      	nop
 8008e74:	0800b9fc 	.word	0x0800b9fc

08008e78 <gpioDummySetPinMode>:
{
 8008e78:	b508      	push	{r3, lr}
    syslog("Use of dummy GPIO %u!", (uint32_t)driver->driver);
 8008e7a:	6801      	ldr	r1, [r0, #0]
 8008e7c:	4802      	ldr	r0, [pc, #8]	; (8008e88 <gpioDummySetPinMode+0x10>)
 8008e7e:	f7ff fe95 	bl	8008bac <syslog>
}
 8008e82:	2000      	movs	r0, #0
 8008e84:	bd08      	pop	{r3, pc}
 8008e86:	bf00      	nop
 8008e88:	0800b9fc 	.word	0x0800b9fc
 8008e8c:	00000000 	.word	0x00000000

08008e90 <max2870TuneNoLock>:

static MAX2870TuneResult max2870TuneNoLock(MAX2870Driver* driver, MAX2870TuneRequest* tune)
{
 8008e90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e94:	460c      	mov	r4, r1
 8008e96:	b08b      	sub	sp, #44	; 0x2c
 8008e98:	4605      	mov	r5, r0
    MAX2870TuneResult result = TUNE_OK;
    uint32_t registers[6] = {};
 8008e9a:	2218      	movs	r2, #24
 8008e9c:	2100      	movs	r1, #0
 8008e9e:	a804      	add	r0, sp, #16
 8008ea0:	f7fa fe86 	bl	8003bb0 <memset>

    uint64_t frequency = tune->frequency;
 8008ea4:	e9d4 6700 	ldrd	r6, r7, [r4]

    if(frequency == 0) {
 8008ea8:	ea56 0307 	orrs.w	r3, r6, r7
 8008eac:	d108      	bne.n	8008ec0 <max2870TuneNoLock+0x30>
        max2870Disable(driver);
 8008eae:	4628      	mov	r0, r5
 8008eb0:	f7fe fdb4 	bl	8007a1c <max2870Disable>
        return TUNE_OK;
 8008eb4:	f04f 0800 	mov.w	r8, #0

    /* Save current tuning */
    driver->currentTune = *tune;

    return result;
}
 8008eb8:	4640      	mov	r0, r8
 8008eba:	b00b      	add	sp, #44	; 0x2c
 8008ebc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(frequency > MAX2870_VCO_MAX_FREQUENCY || frequency < MAX2870_VCO_MIN_FREQUENCY/128) {
 8008ec0:	4bbd      	ldr	r3, [pc, #756]	; (80091b8 <max2870TuneNoLock+0x328>)
 8008ec2:	eb16 0803 	adds.w	r8, r6, r3
 8008ec6:	f147 39ff 	adc.w	r9, r7, #4294967295	; 0xffffffff
 8008eca:	a3b5      	add	r3, pc, #724	; (adr r3, 80091a0 <max2870TuneNoLock+0x310>)
 8008ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ed0:	454b      	cmp	r3, r9
 8008ed2:	bf08      	it	eq
 8008ed4:	4542      	cmpeq	r2, r8
 8008ed6:	f0c0 81e3 	bcc.w	80092a0 <max2870TuneNoLock+0x410>
    while(frequency < MAX2870_VCO_MIN_FREQUENCY) {
 8008eda:	a3b3      	add	r3, pc, #716	; (adr r3, 80091a8 <max2870TuneNoLock+0x318>)
 8008edc:	e9d3 2300 	ldrd	r2, r3, [r3]
    if(frequency > MAX2870_VCO_MAX_FREQUENCY || frequency < MAX2870_VCO_MIN_FREQUENCY/128) {
 8008ee0:	f04f 0b00 	mov.w	fp, #0
    while(frequency < MAX2870_VCO_MIN_FREQUENCY) {
 8008ee4:	42bb      	cmp	r3, r7
 8008ee6:	bf08      	it	eq
 8008ee8:	42b2      	cmpeq	r2, r6
 8008eea:	f10b 0101 	add.w	r1, fp, #1
 8008eee:	f080 8101 	bcs.w	80090f4 <max2870TuneNoLock+0x264>
    uint32_t steps = frequency / driver->config->stepFrequency;
 8008ef2:	f8d5 a000 	ldr.w	sl, [r5]
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	f8da 2018 	ldr.w	r2, [sl, #24]
 8008efc:	4630      	mov	r0, r6
 8008efe:	4639      	mov	r1, r7
 8008f00:	f7fa fc64 	bl	80037cc <__aeabi_uldivmod>
    uint32_t pllN = steps / driver->fracDivider;
 8008f04:	f8b5 80bc 	ldrh.w	r8, [r5, #188]	; 0xbc
    uint32_t steps = frequency / driver->config->stepFrequency;
 8008f08:	4681      	mov	r9, r0
    uint32_t pllN = steps / driver->fracDivider;
 8008f0a:	fbb0 f0f8 	udiv	r0, r0, r8
    if(pllN < 16 || pllN > 4091) {
 8008f0e:	f640 73eb 	movw	r3, #4075	; 0xfeb
 8008f12:	f1a0 0110 	sub.w	r1, r0, #16
 8008f16:	4299      	cmp	r1, r3
    uint32_t pllN = steps / driver->fracDivider;
 8008f18:	4642      	mov	r2, r8
    if(pllN < 16 || pllN > 4091) {
 8008f1a:	f200 81c4 	bhi.w	80092a6 <max2870TuneNoLock+0x416>
    uint16_t pllFracF = steps - (pllN * driver->fracDivider);
 8008f1e:	fb00 9118 	mls	r1, r0, r8, r9
 8008f22:	b289      	uxth	r1, r1
    if(pllFracF) {
 8008f24:	2900      	cmp	r1, #0
 8008f26:	f000 80f2 	beq.w	800910e <max2870TuneNoLock+0x27e>
        uint16_t pllFracGcd = gcd(pllFracF, pllFracM);
 8008f2a:	460b      	mov	r3, r1
    if (v == 0) return u;
 8008f2c:	f1b8 0f00 	cmp.w	r8, #0
 8008f30:	d018      	beq.n	8008f64 <max2870TuneNoLock+0xd4>
    for (shift = 0; ((u | v) & 1) == 0; ++shift) {
 8008f32:	f04f 0c00 	mov.w	ip, #0
 8008f36:	ea43 0e02 	orr.w	lr, r3, r2
 8008f3a:	f01e 0f01 	tst.w	lr, #1
 8008f3e:	f000 80dd 	beq.w	80090fc <max2870TuneNoLock+0x26c>
    while ((u & 1) == 0) {
 8008f42:	f013 0f01 	tst.w	r3, #1
 8008f46:	f000 80de 	beq.w	8009106 <max2870TuneNoLock+0x276>
        while ((v & 1) == 0) {
 8008f4a:	f012 0f01 	tst.w	r2, #1
 8008f4e:	f000 80dc 	beq.w	800910a <max2870TuneNoLock+0x27a>
        if (u > v) {
 8008f52:	429a      	cmp	r2, r3
 8008f54:	bf3e      	ittt	cc
 8008f56:	469e      	movcc	lr, r3
 8008f58:	4613      	movcc	r3, r2
 8008f5a:	4672      	movcc	r2, lr
    } while (v != 0);
 8008f5c:	1ad2      	subs	r2, r2, r3
 8008f5e:	d1f4      	bne.n	8008f4a <max2870TuneNoLock+0xba>
    return u << shift;
 8008f60:	fa03 f30c 	lsl.w	r3, r3, ip
 8008f64:	b29b      	uxth	r3, r3
        pllFracM /= pllFracGcd;
 8008f66:	fbb8 f8f3 	udiv	r8, r8, r3
        pllFracF /= pllFracGcd;
 8008f6a:	fbb1 f1f3 	udiv	r1, r1, r3
        registers[1] |= _BV(MAX2870_REG1_CPL_OFFSET);
 8008f6e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8008f72:	9305      	str	r3, [sp, #20]
    registers[0] |= pllN << MAX2870_REG0_N_OFFSET;
 8008f74:	9b04      	ldr	r3, [sp, #16]
    registers[2] |= driver->refDividerRegister2;
 8008f76:	f8d5 20c0 	ldr.w	r2, [r5, #192]	; 0xc0
    registers[0] |= pllN << MAX2870_REG0_N_OFFSET;
 8008f7a:	ea43 33c0 	orr.w	r3, r3, r0, lsl #15
    registers[0] |= pllFracF << MAX2870_REG0_FRAC_OFFSET;
 8008f7e:	ea43 01c1 	orr.w	r1, r3, r1, lsl #3
    registers[1] |= pllFracM << MAX2870_REG1_M_OFFSET;
 8008f82:	9b05      	ldr	r3, [sp, #20]
    registers[0] |= pllFracF << MAX2870_REG0_FRAC_OFFSET;
 8008f84:	9104      	str	r1, [sp, #16]
    registers[1] |= pllFracM << MAX2870_REG1_M_OFFSET;
 8008f86:	ea43 03c8 	orr.w	r3, r3, r8, lsl #3
 8008f8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008f8e:	9305      	str	r3, [sp, #20]
    registers[2] |= driver->refDividerRegister2;
 8008f90:	9b06      	ldr	r3, [sp, #24]
 8008f92:	4313      	orrs	r3, r2
    registers[4] |= outDivide << MAX2870_REG4_DIVA_OFFSET;
 8008f94:	fa5f f28b 	uxtb.w	r2, fp
 8008f98:	ea4f 5b02 	mov.w	fp, r2, lsl #20
 8008f9c:	9201      	str	r2, [sp, #4]
    registers[2] |= 0x6 <<  MAX2870_REG2_MUX_OFFSET;
 8008f9e:	f043 52c0 	orr.w	r2, r3, #402653184	; 0x18000000
 8008fa2:	9206      	str	r2, [sp, #24]
    if(!driver->config->invertingLoopFilter) {
 8008fa4:	f89a 200a 	ldrb.w	r2, [sl, #10]
    registers[4] |= outDivide << MAX2870_REG4_DIVA_OFFSET;
 8008fa8:	f8cd b020 	str.w	fp, [sp, #32]
    if(!driver->config->invertingLoopFilter) {
 8008fac:	b922      	cbnz	r2, 8008fb8 <max2870TuneNoLock+0x128>
        registers[2] |= _BV(MAX2870_REG2_PDP_OFFSET);
 8008fae:	f043 53c0 	orr.w	r3, r3, #402653184	; 0x18000000
 8008fb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008fb6:	9306      	str	r3, [sp, #24]
    registers[2] |= driver->config->chargePumpCurrent << MAX2870_REG2_CP_OFFSET;
 8008fb8:	f89a 200b 	ldrb.w	r2, [sl, #11]
    registers[2] |= driver->config->spurMode << MAX2870_REG2_SDN_OFFSET;
 8008fbc:	f89a 100c 	ldrb.w	r1, [sl, #12]
    registers[2] |= driver->config->chargePumpCurrent << MAX2870_REG2_CP_OFFSET;
 8008fc0:	0253      	lsls	r3, r2, #9
    registers[2] |= driver->config->spurMode << MAX2870_REG2_SDN_OFFSET;
 8008fc2:	ea43 7341 	orr.w	r3, r3, r1, lsl #29
 8008fc6:	9906      	ldr	r1, [sp, #24]
    if(driver->pfdFrequency > 32000000) {
 8008fc8:	487c      	ldr	r0, [pc, #496]	; (80091bc <max2870TuneNoLock+0x32c>)
    registers[2] |= driver->config->spurMode << MAX2870_REG2_SDN_OFFSET;
 8008fca:	430b      	orrs	r3, r1
    if(driver->pfdFrequency > 32000000) {
 8008fcc:	f8d5 10b8 	ldr.w	r1, [r5, #184]	; 0xb8
    registers[2] |= driver->config->spurMode << MAX2870_REG2_SDN_OFFSET;
 8008fd0:	9306      	str	r3, [sp, #24]
    if(driver->pfdFrequency > 32000000) {
 8008fd2:	4281      	cmp	r1, r0
    if(tune->fastLockDurationMicroseconds) {
 8008fd4:	68e0      	ldr	r0, [r4, #12]
        registers[2] |= _BV(MAX2870_REG2_LDS_OFFSET);
 8008fd6:	bf84      	itt	hi
 8008fd8:	f043 4300 	orrhi.w	r3, r3, #2147483648	; 0x80000000
 8008fdc:	9306      	strhi	r3, [sp, #24]
    if(tune->fastLockDurationMicroseconds) {
 8008fde:	b1a0      	cbz	r0, 800900a <max2870TuneNoLock+0x17a>
        if(driver->config->chargePumpCurrent) {
 8008fe0:	2a00      	cmp	r2, #0
 8008fe2:	f040 8163 	bne.w	80092ac <max2870TuneNoLock+0x41c>
        uint32_t tmp = (uint64_t)driver->pfdFrequency * (uint64_t)tune->fastLockDurationMicroseconds / 1000000;
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	fba1 0100 	umull	r0, r1, r1, r0
 8008fec:	4a74      	ldr	r2, [pc, #464]	; (80091c0 <max2870TuneNoLock+0x330>)
 8008fee:	f7fa fbed 	bl	80037cc <__aeabi_uldivmod>
        tmp /= pllFracM;
 8008ff2:	fbb0 f3f8 	udiv	r3, r0, r8
        if(tmp>4095) {
 8008ff6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ffa:	f080 8090 	bcs.w	800911e <max2870TuneNoLock+0x28e>
        if(tmp) {
 8008ffe:	4580      	cmp	r8, r0
 8009000:	d803      	bhi.n	800900a <max2870TuneNoLock+0x17a>
            registers[3] |= tmp << MAX2870_REG3_CDIV_OFFSET;
 8009002:	00db      	lsls	r3, r3, #3
 8009004:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009008:	9307      	str	r3, [sp, #28]
    if(!tune->outBfundamental) {
 800900a:	7aa3      	ldrb	r3, [r4, #10]
 800900c:	b913      	cbnz	r3, 8009014 <max2870TuneNoLock+0x184>
        registers[4] |= _BV(MAX2870_REG4_BDIV_OFFSET);
 800900e:	f44b 7300 	orr.w	r3, fp, #512	; 0x200
 8009012:	9308      	str	r3, [sp, #32]
    registers[4] |= (driver->bsValue & 0xFF) << MAX2870_REG4_BS_OFFSET;
 8009014:	f8b5 20c4 	ldrh.w	r2, [r5, #196]	; 0xc4
    uint16_t vcoIndex = (frequency - MAX2870_VCO_MIN_FREQUENCY) / MAX2870_VCO_INCREMENT;
 8009018:	486a      	ldr	r0, [pc, #424]	; (80091c4 <max2870TuneNoLock+0x334>)
    registers[4] |= (driver->bsValue & 0xFF) << MAX2870_REG4_BS_OFFSET;
 800901a:	0313      	lsls	r3, r2, #12
 800901c:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
    registers[4] |= (driver->bsValue >> 8) << MAX2870_REG4_BS_MSB_OFFSET;
 8009020:	0a12      	lsrs	r2, r2, #8
 8009022:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8009026:	9a08      	ldr	r2, [sp, #32]
    uint16_t vcoIndex = (frequency - MAX2870_VCO_MIN_FREQUENCY) / MAX2870_VCO_INCREMENT;
 8009028:	1830      	adds	r0, r6, r0
    registers[4] |= (driver->bsValue >> 8) << MAX2870_REG4_BS_MSB_OFFSET;
 800902a:	ea43 0302 	orr.w	r3, r3, r2
    registers[4] |= _BV(MAX2870_REG4_FB_OFFSET);
 800902e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009032:	9308      	str	r3, [sp, #32]
    registers[5] = 0;
 8009034:	f04f 0300 	mov.w	r3, #0
    uint16_t vcoIndex = (frequency - MAX2870_VCO_MIN_FREQUENCY) / MAX2870_VCO_INCREMENT;
 8009038:	f147 31ff 	adc.w	r1, r7, #4294967295	; 0xffffffff
    registers[5] = 0;
 800903c:	9309      	str	r3, [sp, #36]	; 0x24
    uint16_t vcoIndex = (frequency - MAX2870_VCO_MIN_FREQUENCY) / MAX2870_VCO_INCREMENT;
 800903e:	a35c      	add	r3, pc, #368	; (adr r3, 80091b0 <max2870TuneNoLock+0x320>)
 8009040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009044:	f7fa fbc2 	bl	80037cc <__aeabi_uldivmod>
    if((driver->vcoCache[vcoIndex] & 0x80) && !tune->useVCOAutotune) {
 8009048:	182f      	adds	r7, r5, r0
 800904a:	f997 3020 	ldrsb.w	r3, [r7, #32]
 800904e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8009052:	2b00      	cmp	r3, #0
 8009054:	da66      	bge.n	8009124 <max2870TuneNoLock+0x294>
 8009056:	7c26      	ldrb	r6, [r4, #16]
 8009058:	b92e      	cbnz	r6, 8009066 <max2870TuneNoLock+0x1d6>
        registers[3] |= (driver->vcoCache[vcoIndex] & 0x3F) << MAX2870_REG3_VCO_OFFSET;
 800905a:	9b07      	ldr	r3, [sp, #28]
 800905c:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
        registers[3] |= _BV(MAX2870_REG3_VAS_SHDN_OFFSET);
 8009060:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8009064:	9307      	str	r3, [sp, #28]
    if(!driver->enabled) {
 8009066:	792b      	ldrb	r3, [r5, #4]
 8009068:	b99b      	cbnz	r3, 8009092 <max2870TuneNoLock+0x202>
        if(driver->config->gpioChipEnable != 0xffff) {
 800906a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800906e:	f8ba 0008 	ldrh.w	r0, [sl, #8]
 8009072:	4298      	cmp	r0, r3
 8009074:	d005      	beq.n	8009082 <max2870TuneNoLock+0x1f2>
            gpioSetPin(driver->config->gpioChipEnable, true);
 8009076:	2101      	movs	r1, #1
 8009078:	f7fc fab0 	bl	80055dc <gpioSetPin>
            osalThreadSleepMilliseconds(20);
 800907c:	2014      	movs	r0, #20
 800907e:	f7fb fd73 	bl	8004b68 <vTaskDelay>
        max2870WriteAllRegisters(driver, registers, true);
 8009082:	2201      	movs	r2, #1
 8009084:	4628      	mov	r0, r5
 8009086:	a904      	add	r1, sp, #16
 8009088:	f7fe fd00 	bl	8007a8c <max2870WriteAllRegisters>
        osalThreadSleepMilliseconds(20);
 800908c:	2014      	movs	r0, #20
 800908e:	f7fb fd6b 	bl	8004b68 <vTaskDelay>
        *power = -4;
 8009092:	f04f 08fc 	mov.w	r8, #252	; 0xfc
        *power = 2;
 8009096:	f04f 0a02 	mov.w	sl, #2
    if(*power < -4) {
 800909a:	f994 3008 	ldrsb.w	r3, [r4, #8]
 800909e:	1d18      	adds	r0, r3, #4
 80090a0:	da42      	bge.n	8009128 <max2870TuneNoLock+0x298>
        *power = -127;
 80090a2:	2381      	movs	r3, #129	; 0x81
        return registerValue;
 80090a4:	2200      	movs	r2, #0
        *power = -127;
 80090a6:	7223      	strb	r3, [r4, #8]
        registers[4] |= max2870PowerToRegister(&tune->powerA) << MAX2870_REG4_APWR_OFFSET;
 80090a8:	9b08      	ldr	r3, [sp, #32]
 80090aa:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
    if(*power < -4) {
 80090ae:	f994 2009 	ldrsb.w	r2, [r4, #9]
 80090b2:	1d11      	adds	r1, r2, #4
 80090b4:	da4e      	bge.n	8009154 <max2870TuneNoLock+0x2c4>
        *power = -127;
 80090b6:	2281      	movs	r2, #129	; 0x81
 80090b8:	7262      	strb	r2, [r4, #9]
        return registerValue;
 80090ba:	2200      	movs	r2, #0
        registers[4] |= max2870PowerToRegister(&tune->powerB) << MAX2870_REG4_BPWR_OFFSET;
 80090bc:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80090c0:	9308      	str	r3, [sp, #32]
        if(driver->pllMonReloadCounter >= 20) {
 80090c2:	f895 30e4 	ldrb.w	r3, [r5, #228]	; 0xe4
            max2870WriteAllRegisters(driver, registers, !driver->enabled);
 80090c6:	4628      	mov	r0, r5
        if(driver->pllMonReloadCounter >= 20) {
 80090c8:	2b13      	cmp	r3, #19
            driver->pllMonReloadCounter = 0;
 80090ca:	bf89      	itett	hi
 80090cc:	2300      	movhi	r3, #0
            max2870WriteAllRegisters(driver, registers, !driver->enabled);
 80090ce:	792a      	ldrbls	r2, [r5, #4]
            max2870WriteAllRegisters(driver, registers, true);
 80090d0:	2201      	movhi	r2, #1
            driver->pllMonReloadCounter = 0;
 80090d2:	f885 30e4 	strbhi.w	r3, [r5, #228]	; 0xe4
            max2870WriteAllRegisters(driver, registers, !driver->enabled);
 80090d6:	bf98      	it	ls
 80090d8:	f082 0201 	eorls.w	r2, r2, #1
 80090dc:	a904      	add	r1, sp, #16
 80090de:	f7fe fcd5 	bl	8007a8c <max2870WriteAllRegisters>
    registerValue = _BV(2); /* Output enabled */
 80090e2:	f04f 0b00 	mov.w	fp, #0
            spiReceive(driver->config->spiPort, sizeof(lock), &lock);
 80090e6:	682a      	ldr	r2, [r5, #0]
 80090e8:	6810      	ldr	r0, [r2, #0]
  osalDbgCheck((spip != NULL) && (n > 0U) && (rxbuf != NULL));
 80090ea:	2800      	cmp	r0, #0
 80090ec:	d148      	bne.n	8009180 <max2870TuneNoLock+0x2f0>
 80090ee:	f7fb f927 	bl	8004340 <vTaskEndScheduler>
 80090f2:	e7fe      	b.n	80090f2 <max2870TuneNoLock+0x262>
        frequency *= 2;
 80090f4:	19b6      	adds	r6, r6, r6
 80090f6:	468b      	mov	fp, r1
 80090f8:	417f      	adcs	r7, r7
        outDivide++;
 80090fa:	e6f3      	b.n	8008ee4 <max2870TuneNoLock+0x54>
        u >>= 1;
 80090fc:	085b      	lsrs	r3, r3, #1
        v >>= 1;
 80090fe:	0852      	lsrs	r2, r2, #1
    for (shift = 0; ((u | v) & 1) == 0; ++shift) {
 8009100:	f10c 0c01 	add.w	ip, ip, #1
 8009104:	e717      	b.n	8008f36 <max2870TuneNoLock+0xa6>
        u >>= 1;
 8009106:	085b      	lsrs	r3, r3, #1
 8009108:	e71b      	b.n	8008f42 <max2870TuneNoLock+0xb2>
            v >>= 1;
 800910a:	0852      	lsrs	r2, r2, #1
 800910c:	e71d      	b.n	8008f4a <max2870TuneNoLock+0xba>
        registers[0] |= _BV(MAX2870_REG0_INT_OFFSET);
 800910e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
        registers[1] |= _BV(MAX2870_REG1_CPOC_OFFSET);
 8009112:	e9cd 3304 	strd	r3, r3, [sp, #16]
        registers[2] |= _BV(MAX2870_REG2_LDF_OFFSET);
 8009116:	f44f 7380 	mov.w	r3, #256	; 0x100
 800911a:	9306      	str	r3, [sp, #24]
 800911c:	e72a      	b.n	8008f74 <max2870TuneNoLock+0xe4>
            tmp = 4095;
 800911e:	f640 73ff 	movw	r3, #4095	; 0xfff
 8009122:	e76e      	b.n	8009002 <max2870TuneNoLock+0x172>
    bool vcoAutoTune = true;
 8009124:	2601      	movs	r6, #1
 8009126:	e79e      	b.n	8009066 <max2870TuneNoLock+0x1d6>
    if(*power >= 5) {
 8009128:	2b04      	cmp	r3, #4
 800912a:	dd03      	ble.n	8009134 <max2870TuneNoLock+0x2a4>
        *power = 5;
 800912c:	2305      	movs	r3, #5
        registerValue |= 3;
 800912e:	2207      	movs	r2, #7
        *power = 5;
 8009130:	7223      	strb	r3, [r4, #8]
        registerValue |= 3;
 8009132:	e7b9      	b.n	80090a8 <max2870TuneNoLock+0x218>
    } else if(*power >= 2) {
 8009134:	2b01      	cmp	r3, #1
 8009136:	dd03      	ble.n	8009140 <max2870TuneNoLock+0x2b0>
        registerValue |= 2;
 8009138:	2206      	movs	r2, #6
        *power = 2;
 800913a:	f884 a008 	strb.w	sl, [r4, #8]
        registerValue |= 2;
 800913e:	e7b3      	b.n	80090a8 <max2870TuneNoLock+0x218>
    } else if(*power >= -1) {
 8009140:	3301      	adds	r3, #1
        *power = -1;
 8009142:	bfa5      	ittet	ge
 8009144:	23ff      	movge	r3, #255	; 0xff
        registerValue |= 1;
 8009146:	2205      	movge	r2, #5
    registerValue = _BV(2); /* Output enabled */
 8009148:	2204      	movlt	r2, #4
        *power = -1;
 800914a:	7223      	strbge	r3, [r4, #8]
        *power = -4;
 800914c:	bfb8      	it	lt
 800914e:	f884 8008 	strblt.w	r8, [r4, #8]
 8009152:	e7a9      	b.n	80090a8 <max2870TuneNoLock+0x218>
    if(*power >= 5) {
 8009154:	2a04      	cmp	r2, #4
 8009156:	dd03      	ble.n	8009160 <max2870TuneNoLock+0x2d0>
        *power = 5;
 8009158:	2205      	movs	r2, #5
 800915a:	7262      	strb	r2, [r4, #9]
        registerValue |= 3;
 800915c:	2207      	movs	r2, #7
 800915e:	e7ad      	b.n	80090bc <max2870TuneNoLock+0x22c>
    } else if(*power >= 2) {
 8009160:	2a01      	cmp	r2, #1
 8009162:	dd03      	ble.n	800916c <max2870TuneNoLock+0x2dc>
        registerValue |= 2;
 8009164:	2206      	movs	r2, #6
        *power = 2;
 8009166:	f884 a009 	strb.w	sl, [r4, #9]
        registerValue |= 2;
 800916a:	e7a7      	b.n	80090bc <max2870TuneNoLock+0x22c>
    } else if(*power >= -1) {
 800916c:	3201      	adds	r2, #1
        *power = -1;
 800916e:	bfab      	itete	ge
 8009170:	22ff      	movge	r2, #255	; 0xff
    registerValue = _BV(2); /* Output enabled */
 8009172:	2204      	movlt	r2, #4
        *power = -1;
 8009174:	7262      	strbge	r2, [r4, #9]
        *power = -4;
 8009176:	f884 8009 	strblt.w	r8, [r4, #9]
        registerValue |= 1;
 800917a:	bfa8      	it	ge
 800917c:	2205      	movge	r2, #5
        *power = -4;
 800917e:	e79d      	b.n	80090bc <max2870TuneNoLock+0x22c>
  osalSysLock();
 8009180:	f7fb f830 	bl	80041e4 <vPortEnterCritical>
  osalDbgAssert(spip->state == SPI_READY, "not ready");
 8009184:	7801      	ldrb	r1, [r0, #0]
 8009186:	2902      	cmp	r1, #2
 8009188:	d002      	beq.n	8009190 <max2870TuneNoLock+0x300>
 800918a:	f7fb f8d9 	bl	8004340 <vTaskEndScheduler>
 800918e:	e7fe      	b.n	800918e <max2870TuneNoLock+0x2fe>
  osalDbgAssert(spip->config->end_cb == NULL, "has callback");
 8009190:	6842      	ldr	r2, [r0, #4]
 8009192:	6812      	ldr	r2, [r2, #0]
 8009194:	b1c2      	cbz	r2, 80091c8 <max2870TuneNoLock+0x338>
 8009196:	f7fb f8d3 	bl	8004340 <vTaskEndScheduler>
 800919a:	e7fe      	b.n	800919a <max2870TuneNoLock+0x30a>
 800919c:	f3af 8000 	nop.w
 80091a0:	643b1b44 	.word	0x643b1b44
 80091a4:	00000001 	.word	0x00000001
 80091a8:	b2d05dff 	.word	0xb2d05dff
 80091ac:	00000000 	.word	0x00000000
 80091b0:	01312d00 	.word	0x01312d00
 80091b4:	00000000 	.word	0x00000000
 80091b8:	fe9a5f44 	.word	0xfe9a5f44
 80091bc:	01e84800 	.word	0x01e84800
 80091c0:	000f4240 	.word	0x000f4240
 80091c4:	4d2fa200 	.word	0x4d2fa200
 80091c8:	f10d 020e 	add.w	r2, sp, #14
 80091cc:	f7fd ff8e 	bl	80070ec <spiReceive.part.0>
            if(timeoutCnt == 255) {
 80091d0:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 80091d4:	d14e      	bne.n	8009274 <max2870TuneNoLock+0x3e4>
                if(!vcoAutoTune) {
 80091d6:	b9e6      	cbnz	r6, 8009212 <max2870TuneNoLock+0x382>
                    registers[3] &=~ _BV(MAX2870_REG3_VAS_SHDN_OFFSET);
 80091d8:	9a07      	ldr	r2, [sp, #28]
    } while(lock != 0xFFFF);
 80091da:	f8bd 100e 	ldrh.w	r1, [sp, #14]
                    registers[3] &=~ _BV(MAX2870_REG3_VAS_SHDN_OFFSET);
 80091de:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 80091e2:	9207      	str	r2, [sp, #28]
    } while(lock != 0xFFFF);
 80091e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80091e8:	4291      	cmp	r1, r2
                    driver->vcoCache[vcoIndex] = 0;
 80091ea:	f887 6020 	strb.w	r6, [r7, #32]
                    vcoAutoTune = true;
 80091ee:	f04f 0601 	mov.w	r6, #1
    } while(lock != 0xFFFF);
 80091f2:	f47f af52 	bne.w	800909a <max2870TuneNoLock+0x20a>
 80091f6:	465a      	mov	r2, fp
    tune->frequency = ((uint64_t)steps * (uint64_t)driver->config->stepFrequency);
 80091f8:	682b      	ldr	r3, [r5, #0]
 80091fa:	6998      	ldr	r0, [r3, #24]
 80091fc:	fba0 0109 	umull	r0, r1, r0, r9
 8009200:	e9c4 0100 	strd	r0, r1, [r4]
    for(int i=0; i<outDivide; i++) {
 8009204:	2000      	movs	r0, #0
 8009206:	9b01      	ldr	r3, [sp, #4]
 8009208:	4283      	cmp	r3, r0
 800920a:	dc3f      	bgt.n	800928c <max2870TuneNoLock+0x3fc>
    MAX2870TuneResult result = TUNE_OK;
 800920c:	f04f 0800 	mov.w	r8, #0
 8009210:	e005      	b.n	800921e <max2870TuneNoLock+0x38e>
                    syslog("MAX2870 Tuning failed.");
 8009212:	4828      	ldr	r0, [pc, #160]	; (80092b4 <max2870TuneNoLock+0x424>)
 8009214:	f7ff fcca 	bl	8008bac <syslog>
                    result = TUNE_NOT_LOCKED;
 8009218:	f06f 0803 	mvn.w	r8, #3
                    syslog("MAX2870 Tuning failed.");
 800921c:	465a      	mov	r2, fp
    reg6 = max2870ReadRegister6(driver);
 800921e:	4628      	mov	r0, r5
 8009220:	9201      	str	r2, [sp, #4]
 8009222:	f7fe fdbb 	bl	8007d9c <max2870ReadRegister6>
    if(vcoAutoTune && result==TUNE_OK) {
 8009226:	9a01      	ldr	r2, [sp, #4]
 8009228:	0843      	lsrs	r3, r0, #1
 800922a:	b146      	cbz	r6, 800923e <max2870TuneNoLock+0x3ae>
 800922c:	f1b8 0f00 	cmp.w	r8, #0
 8009230:	d105      	bne.n	800923e <max2870TuneNoLock+0x3ae>
        driver->vcoCache[vcoIndex] = 0x80 | ((reg6 >> MAX2870_REG6_V_OFFSET) & 0x3F);
 8009232:	f003 013f 	and.w	r1, r3, #63	; 0x3f
 8009236:	f061 017f 	orn	r1, r1, #127	; 0x7f
 800923a:	f887 1020 	strb.w	r1, [r7, #32]
    tune->adcVoltage = (reg6 >>MAX2870_REG6_ADC_OFFSET) & 7;
 800923e:	f3c0 4082 	ubfx	r0, r0, #18, #3
 8009242:	74a0      	strb	r0, [r4, #18]
    tune->isLocked = (result == TUNE_OK);
 8009244:	fab8 f088 	clz	r0, r8
    tune->usedVCO = (reg6 >> MAX2870_REG6_V_OFFSET) & 0x3F;
 8009248:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800924c:	7463      	strb	r3, [r4, #17]
    tune->lockTime = timeoutCnt;
 800924e:	74e2      	strb	r2, [r4, #19]
    if(driver->config->lockStatus) {
 8009250:	682b      	ldr	r3, [r5, #0]
    tune->isLocked = (result == TUNE_OK);
 8009252:	0940      	lsrs	r0, r0, #5
    if(driver->config->lockStatus) {
 8009254:	69db      	ldr	r3, [r3, #28]
    tune->usedVCOAutotune = vcoAutoTune;
 8009256:	7566      	strb	r6, [r4, #21]
    tune->isLocked = (result == TUNE_OK);
 8009258:	7520      	strb	r0, [r4, #20]
    if(driver->config->lockStatus) {
 800925a:	b103      	cbz	r3, 800925e <max2870TuneNoLock+0x3ce>
        driver->config->lockStatus(tune->isLocked);
 800925c:	4798      	blx	r3
    driver->enabled = true;
 800925e:	2301      	movs	r3, #1
    driver->currentTune = *tune;
 8009260:	3508      	adds	r5, #8
    driver->enabled = true;
 8009262:	f805 3c04 	strb.w	r3, [r5, #-4]
    driver->currentTune = *tune;
 8009266:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009268:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800926a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800926e:	e885 0003 	stmia.w	r5, {r0, r1}
    return result;
 8009272:	e621      	b.n	8008eb8 <max2870TuneNoLock+0x28>
            timeoutCnt++;
 8009274:	f10b 0301 	add.w	r3, fp, #1
 8009278:	469b      	mov	fp, r3
 800927a:	b2da      	uxtb	r2, r3
        } while(lock != 0xFFFF);
 800927c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009280:	f8bd 100e 	ldrh.w	r1, [sp, #14]
 8009284:	4299      	cmp	r1, r3
 8009286:	f47f af2e 	bne.w	80090e6 <max2870TuneNoLock+0x256>
 800928a:	e7b5      	b.n	80091f8 <max2870TuneNoLock+0x368>
        tune->frequency /= 2;
 800928c:	e9d4 3100 	ldrd	r3, r1, [r4]
 8009290:	085b      	lsrs	r3, r3, #1
 8009292:	ea43 73c1 	orr.w	r3, r3, r1, lsl #31
 8009296:	0849      	lsrs	r1, r1, #1
 8009298:	e9c4 3100 	strd	r3, r1, [r4]
    for(int i=0; i<outDivide; i++) {
 800929c:	3001      	adds	r0, #1
 800929e:	e7b2      	b.n	8009206 <max2870TuneNoLock+0x376>
        return TUNE_FREQUENCY_OUT_OF_RANGE;
 80092a0:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80092a4:	e608      	b.n	8008eb8 <max2870TuneNoLock+0x28>
        return TUNE_PLL_N_OUT_OF_RANGE;
 80092a6:	f06f 0801 	mvn.w	r8, #1
 80092aa:	e605      	b.n	8008eb8 <max2870TuneNoLock+0x28>
            return TUNE_CANT_FASTLOCK;
 80092ac:	f06f 0802 	mvn.w	r8, #2
 80092b0:	e602      	b.n	8008eb8 <max2870TuneNoLock+0x28>
 80092b2:	bf00      	nop
 80092b4:	0800ba12 	.word	0x0800ba12

080092b8 <max2870VcoPrecal>:

    return result;
}

bool max2870VcoPrecal(MAX2870Driver* driver)
{
 80092b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    tune.powerB = -127;
    tune.fastLockDurationMicroseconds = 0;

    max2870SpiState(driver, true);

    for(tune.frequency = MAX2870_VCO_MIN_FREQUENCY + MAX2870_VCO_INCREMENT/2;
 80092bc:	f20f 09b0 	addw	r9, pc, #176	; 0xb0
 80092c0:	e9d9 8900 	ldrd	r8, r9, [r9]
{
 80092c4:	b08f      	sub	sp, #60	; 0x3c
    bool pllWasEnabled = driver->enabled;
 80092c6:	7903      	ldrb	r3, [r0, #4]
    MAX2870TuneRequest previousTune = driver->currentTune;
 80092c8:	ad08      	add	r5, sp, #32
 80092ca:	f100 0c08 	add.w	ip, r0, #8
{
 80092ce:	4604      	mov	r4, r0
    bool pllWasEnabled = driver->enabled;
 80092d0:	9301      	str	r3, [sp, #4]
    MAX2870TuneRequest previousTune = driver->currentTune;
 80092d2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80092d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80092d8:	e89c 0003 	ldmia.w	ip, {r0, r1}
    MAX2870TuneRequest tune = {};
 80092dc:	2218      	movs	r2, #24
    MAX2870TuneRequest previousTune = driver->currentTune;
 80092de:	e885 0003 	stmia.w	r5, {r0, r1}
    MAX2870TuneRequest tune = {};
 80092e2:	2100      	movs	r1, #0
 80092e4:	a802      	add	r0, sp, #8
 80092e6:	f7fa fc63 	bl	8003bb0 <memset>
    tune.useVCOAutotune = true;
 80092ea:	2501      	movs	r5, #1
    tune.powerA = -127;
 80092ec:	f248 1381 	movw	r3, #33153	; 0x8181
            tune.frequency < MAX2870_VCO_MAX_FREQUENCY;
            tune.frequency += MAX2870_VCO_INCREMENT) {
 80092f0:	f04f 0b00 	mov.w	fp, #0
    max2870SpiState(driver, true);
 80092f4:	4620      	mov	r0, r4
    tune.powerA = -127;
 80092f6:	f8ad 3010 	strh.w	r3, [sp, #16]
    tune.useVCOAutotune = true;
 80092fa:	f88d 5018 	strb.w	r5, [sp, #24]
    max2870SpiState(driver, true);
 80092fe:	f7fe fbe5 	bl	8007acc <max2870SpiState.constprop.0>
    for(tune.frequency = MAX2870_VCO_MIN_FREQUENCY + MAX2870_VCO_INCREMENT/2;
 8009302:	a31d      	add	r3, pc, #116	; (adr r3, 8009378 <max2870VcoPrecal+0xc0>)
 8009304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009308:	e9cd 2302 	strd	r2, r3, [sp, #8]
            tune.frequency += MAX2870_VCO_INCREMENT) {
 800930c:	f8df a070 	ldr.w	sl, [pc, #112]	; 8009380 <max2870VcoPrecal+0xc8>

        if(max2870TuneNoLock(driver, &tune)) {
 8009310:	4620      	mov	r0, r4
 8009312:	a902      	add	r1, sp, #8
 8009314:	f7ff fdbc 	bl	8008e90 <max2870TuneNoLock>
            tune.frequency += MAX2870_VCO_INCREMENT) {
 8009318:	9b02      	ldr	r3, [sp, #8]
            allGood = false;
 800931a:	2800      	cmp	r0, #0
 800931c:	bf18      	it	ne
 800931e:	2500      	movne	r5, #0
            tune.frequency += MAX2870_VCO_INCREMENT) {
 8009320:	eb13 060a 	adds.w	r6, r3, sl
 8009324:	9b03      	ldr	r3, [sp, #12]
 8009326:	eb43 070b 	adc.w	r7, r3, fp
    for(tune.frequency = MAX2870_VCO_MIN_FREQUENCY + MAX2870_VCO_INCREMENT/2;
 800932a:	45b9      	cmp	r9, r7
 800932c:	bf08      	it	eq
 800932e:	45b0      	cmpeq	r8, r6
            tune.frequency += MAX2870_VCO_INCREMENT) {
 8009330:	e9cd 6702 	strd	r6, r7, [sp, #8]
    for(tune.frequency = MAX2870_VCO_MIN_FREQUENCY + MAX2870_VCO_INCREMENT/2;
 8009334:	d2ec      	bcs.n	8009310 <max2870VcoPrecal+0x58>
        }
    }

    if(!pllWasEnabled) {
 8009336:	9b01      	ldr	r3, [sp, #4]
 8009338:	b993      	cbnz	r3, 8009360 <max2870VcoPrecal+0xa8>
        max2870Disable(driver);
 800933a:	4620      	mov	r0, r4
 800933c:	f7fe fb6e 	bl	8007a1c <max2870Disable>
    } else {
        max2870TuneNoLock(driver, &previousTune);
    }

    /* Limited sanity check */
    if(driver->vcoCache[0] >= 0x9f ||
 8009340:	f894 3020 	ldrb.w	r3, [r4, #32]
 8009344:	2b9e      	cmp	r3, #158	; 0x9e
 8009346:	d810      	bhi.n	800936a <max2870VcoPrecal+0xb2>
 8009348:	f894 30b5 	ldrb.w	r3, [r4, #181]	; 0xb5
    		driver->vcoCache[sizeof(driver->vcoCache)-1] <= 0x9f) {
    	allGood = false;
 800934c:	2b9f      	cmp	r3, #159	; 0x9f
 800934e:	bf98      	it	ls
 8009350:	2500      	movls	r5, #0
    if(enable) {
 8009352:	4620      	mov	r0, r4
 8009354:	f7fe ff78 	bl	8008248 <max2870SpiState.part.0>
    }

    max2870SpiState(driver, false);

    return allGood;
}
 8009358:	4628      	mov	r0, r5
 800935a:	b00f      	add	sp, #60	; 0x3c
 800935c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        max2870TuneNoLock(driver, &previousTune);
 8009360:	4620      	mov	r0, r4
 8009362:	a908      	add	r1, sp, #32
 8009364:	f7ff fd94 	bl	8008e90 <max2870TuneNoLock>
 8009368:	e7ea      	b.n	8009340 <max2870VcoPrecal+0x88>
    	allGood = false;
 800936a:	2500      	movs	r5, #0
 800936c:	e7f1      	b.n	8009352 <max2870VcoPrecal+0x9a>
 800936e:	bf00      	nop
 8009370:	65a0bbff 	.word	0x65a0bbff
 8009374:	00000001 	.word	0x00000001
 8009378:	b368f480 	.word	0xb368f480
 800937c:	00000000 	.word	0x00000000
 8009380:	01312d00 	.word	0x01312d00

08009384 <max2870Tune>:
{
 8009384:	b538      	push	{r3, r4, r5, lr}
 8009386:	4604      	mov	r4, r0
 8009388:	460d      	mov	r5, r1
    max2870SpiState(driver, true);
 800938a:	f7fe fb9f 	bl	8007acc <max2870SpiState.constprop.0>
    MAX2870TuneResult result = max2870TuneNoLock(driver, tune);
 800938e:	4629      	mov	r1, r5
 8009390:	4620      	mov	r0, r4
 8009392:	f7ff fd7d 	bl	8008e90 <max2870TuneNoLock>
 8009396:	4605      	mov	r5, r0
    if(enable) {
 8009398:	4620      	mov	r0, r4
 800939a:	f7fe ff55 	bl	8008248 <max2870SpiState.part.0>
}
 800939e:	4628      	mov	r0, r5
 80093a0:	bd38      	pop	{r3, r4, r5, pc}
	...

080093a4 <converterSHFLoTune>:
{
 80093a4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    tune.fastLockDurationMicroseconds = 0;
 80093a6:	2300      	movs	r3, #0
 80093a8:	9303      	str	r3, [sp, #12]
    tune.useVCOAutotune = false;
 80093aa:	f88d 3010 	strb.w	r3, [sp, #16]
    tune.powerB = -127;
 80093ae:	2381      	movs	r3, #129	; 0x81
 80093b0:	f88d 3009 	strb.w	r3, [sp, #9]
    tune.frequency = (uint64_t)freqKHz * 1000;
 80093b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    tune.powerA = power;
 80093b8:	f88d 1008 	strb.w	r1, [sp, #8]
    tune.frequency = (uint64_t)freqKHz * 1000;
 80093bc:	fba0 0103 	umull	r0, r1, r0, r3
 80093c0:	e9cd 0100 	strd	r0, r1, [sp]
    return max2870Tune(&loPLL, &tune) == TUNE_OK;
 80093c4:	4669      	mov	r1, sp
 80093c6:	4804      	ldr	r0, [pc, #16]	; (80093d8 <converterSHFLoTune+0x34>)
 80093c8:	f7ff ffdc 	bl	8009384 <max2870Tune>
}
 80093cc:	fab0 f080 	clz	r0, r0
 80093d0:	0940      	lsrs	r0, r0, #5
 80093d2:	b007      	add	sp, #28
 80093d4:	f85d fb04 	ldr.w	pc, [sp], #4
 80093d8:	20001098 	.word	0x20001098

080093dc <max2870DoMonitorTask>:
{
 80093dc:	b538      	push	{r3, r4, r5, lr}
 80093de:	4604      	mov	r4, r0
    max2870SpiState(driver, true);
 80093e0:	f7fe fb74 	bl	8007acc <max2870SpiState.constprop.0>
    if(driver->enabled) {
 80093e4:	7925      	ldrb	r5, [r4, #4]
 80093e6:	b165      	cbz	r5, 8009402 <max2870DoMonitorTask+0x26>
        if(driver->pllMonReloadCounter >= 29) {
 80093e8:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
 80093ec:	2b1c      	cmp	r3, #28
 80093ee:	d90d      	bls.n	800940c <max2870DoMonitorTask+0x30>
            max2870WriteAllRegisters(driver, driver->registers, true);
 80093f0:	2201      	movs	r2, #1
 80093f2:	4620      	mov	r0, r4
 80093f4:	f104 01c8 	add.w	r1, r4, #200	; 0xc8
 80093f8:	f7fe fb48 	bl	8007a8c <max2870WriteAllRegisters>
            driver->pllMonReloadCounter = 0;
 80093fc:	2300      	movs	r3, #0
 80093fe:	f884 30e4 	strb.w	r3, [r4, #228]	; 0xe4
    if(enable) {
 8009402:	4620      	mov	r0, r4
 8009404:	f7fe ff20 	bl	8008248 <max2870SpiState.part.0>
}
 8009408:	4628      	mov	r0, r5
 800940a:	bd38      	pop	{r3, r4, r5, pc}
            driver->pllMonReloadCounter++;
 800940c:	3301      	adds	r3, #1
 800940e:	f884 30e4 	strb.w	r3, [r4, #228]	; 0xe4
            uint32_t reg6 = max2870ReadRegister6(driver);
 8009412:	4620      	mov	r0, r4
 8009414:	f7fe fcc2 	bl	8007d9c <max2870ReadRegister6>
            driver->currentTune.adcVoltage = (reg6 >>MAX2870_REG6_ADC_OFFSET) & 7;
 8009418:	f3c0 4382 	ubfx	r3, r0, #18, #3
            driver->currentTune.usedVCO = (reg6 >> MAX2870_REG6_V_OFFSET) & 0x3F;
 800941c:	f3c0 0045 	ubfx	r0, r0, #1, #6
            driver->currentTune.adcVoltage = (reg6 >>MAX2870_REG6_ADC_OFFSET) & 7;
 8009420:	76a3      	strb	r3, [r4, #26]
            driver->currentTune.usedVCO = (reg6 >> MAX2870_REG6_V_OFFSET) & 0x3F;
 8009422:	7660      	strb	r0, [r4, #25]
            if(driver->currentTune.adcVoltage == 0 ||
 8009424:	b11b      	cbz	r3, 800942e <max2870DoMonitorTask+0x52>
 8009426:	2b07      	cmp	r3, #7
 8009428:	d001      	beq.n	800942e <max2870DoMonitorTask+0x52>
                    !driver->currentTune.isLocked) {
 800942a:	7f23      	ldrb	r3, [r4, #28]
                    driver->currentTune.adcVoltage == 7 ||
 800942c:	b953      	cbnz	r3, 8009444 <max2870DoMonitorTask+0x68>
                syslog("MAX2870 Lost lock, retuning.");
 800942e:	4806      	ldr	r0, [pc, #24]	; (8009448 <max2870DoMonitorTask+0x6c>)
 8009430:	f7ff fbbc 	bl	8008bac <syslog>
                driver->currentTune.useVCOAutotune = true;
 8009434:	2301      	movs	r3, #1
                max2870TuneNoLock(driver, &driver->currentTune);
 8009436:	4620      	mov	r0, r4
                driver->currentTune.useVCOAutotune = true;
 8009438:	7623      	strb	r3, [r4, #24]
                max2870TuneNoLock(driver, &driver->currentTune);
 800943a:	f104 0108 	add.w	r1, r4, #8
 800943e:	f7ff fd27 	bl	8008e90 <max2870TuneNoLock>
 8009442:	e7de      	b.n	8009402 <max2870DoMonitorTask+0x26>
        didWork = true;
 8009444:	461d      	mov	r5, r3
 8009446:	e7dc      	b.n	8009402 <max2870DoMonitorTask+0x26>
 8009448:	0800ba29 	.word	0x0800ba29

0800944c <main_>:
{
 800944c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    void* syslogBuffer = pvPortMalloc(bufferSize);
 8009450:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8009454:	f7fb feea 	bl	800522c <pvPortMalloc>
    }
}

void packetQueueInit(PacketQueue_t* queue, void* buffer, uint32_t bufferSize)
{
    memset(queue, 0, sizeof(*queue));
 8009458:	4caf      	ldr	r4, [pc, #700]	; (8009718 <main_+0x2cc>)
 800945a:	4605      	mov	r5, r0
 800945c:	221c      	movs	r2, #28
 800945e:	2100      	movs	r1, #0
 8009460:	f104 0008 	add.w	r0, r4, #8
 8009464:	f7fa fba4 	bl	8003bb0 <memset>

    queue->buffer = buffer;
    queue->bufferSize = bufferSize;
 8009468:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800946c:	2050      	movs	r0, #80	; 0x50
    queue->buffer = buffer;
 800946e:	6025      	str	r5, [r4, #0]
    queue->bufferSize = bufferSize;
 8009470:	6063      	str	r3, [r4, #4]
 8009472:	f7fb fedb 	bl	800522c <pvPortMalloc>
 8009476:	4604      	mov	r4, r0
 8009478:	b180      	cbz	r0, 800949c <main_+0x50>
 800947a:	2500      	movs	r5, #0
 800947c:	2601      	movs	r6, #1
 800947e:	f880 5046 	strb.w	r5, [r0, #70]	; 0x46
 8009482:	e9c0 650f 	strd	r6, r5, [r0, #60]	; 0x3c
 8009486:	6000      	str	r0, [r0, #0]
 8009488:	f7fe fa16 	bl	80078b8 <xQueueGenericReset.constprop.0>
 800948c:	4620      	mov	r0, r4
 800948e:	e9c4 5500 	strd	r5, r5, [r4]
 8009492:	f884 604c 	strb.w	r6, [r4, #76]	; 0x4c
 8009496:	60e5      	str	r5, [r4, #12]
 8009498:	f7fe fdb0 	bl	8007ffc <xQueueGenericSend.constprop.0>
    syslogSemaphore = xSemaphoreCreateMutex();
 800949c:	4b9f      	ldr	r3, [pc, #636]	; (800971c <main_+0x2d0>)
    syslog("Syslog started.");
 800949e:	48a0      	ldr	r0, [pc, #640]	; (8009720 <main_+0x2d4>)
    syslogSemaphore = xSemaphoreCreateMutex();
 80094a0:	601c      	str	r4, [r3, #0]
    syslog("Syslog started.");
 80094a2:	f7ff fb83 	bl	8008bac <syslog>
    usbDisconnectBus(serusbcfg.usbp);
 80094a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
    event_source->setEvents = 0;
 80094aa:	2400      	movs	r4, #0
 80094ac:	4d9d      	ldr	r5, [pc, #628]	; (8009724 <main_+0x2d8>)
 80094ae:	489e      	ldr	r0, [pc, #632]	; (8009728 <main_+0x2dc>)
 80094b0:	616b      	str	r3, [r5, #20]
    event_source->firstRepeater = NULL;
 80094b2:	e9c0 4400 	strd	r4, r4, [r0]
    event_source->waitThread = NULL;
 80094b6:	6084      	str	r4, [r0, #8]
    osalSysLock();
 80094b8:	f7fa fe94 	bl	80041e4 <vPortEnterCritical>
 80094bc:	f3ef 8311 	mrs	r3, BASEPRI
 80094c0:	b1b3      	cbz	r3, 80094f0 <main_+0xa4>
 80094c2:	4b9a      	ldr	r3, [pc, #616]	; (800972c <main_+0x2e0>)
    GPIODriverData.numPorts = numPorts;
 80094c4:	4e9a      	ldr	r6, [pc, #616]	; (8009730 <main_+0x2e4>)
 80094c6:	60c3      	str	r3, [r0, #12]
    osalSysUnlock();
 80094c8:	f7fc f9c4 	bl	8005854 <osalSysUnlock.lto_priv.0>
 80094cc:	2304      	movs	r3, #4
    GPIODriverData.ports = pvPortMalloc(sizeof(GPIOPort) * numPorts);
 80094ce:	2030      	movs	r0, #48	; 0x30
    GPIODriverData.numPorts = numPorts;
 80094d0:	7133      	strb	r3, [r6, #4]
    GPIODriverData.ports = pvPortMalloc(sizeof(GPIOPort) * numPorts);
 80094d2:	f7fb feab 	bl	800522c <pvPortMalloc>
 80094d6:	6030      	str	r0, [r6, #0]
    if(!GPIODriverData.ports) {
 80094d8:	b968      	cbnz	r0, 80094f6 <main_+0xaa>
        syslog("GPIO subsystem init failed.");
 80094da:	4896      	ldr	r0, [pc, #600]	; (8009734 <main_+0x2e8>)
    syslog("USB init done.");
 80094dc:	f7ff fb66 	bl	8008bac <syslog>
    shellStart((BaseSequentialStream*)&SD3, 128, "ShellTTL", NULL, NULL);
 80094e0:	2200      	movs	r2, #0
 80094e2:	4995      	ldr	r1, [pc, #596]	; (8009738 <main_+0x2ec>)
 80094e4:	4895      	ldr	r0, [pc, #596]	; (800973c <main_+0x2f0>)
 80094e6:	f7ff f875 	bl	80085d4 <shellStart.constprop.0>
}
 80094ea:	b004      	add	sp, #16
 80094ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80094f0:	f7fa ff26 	bl	8004340 <vTaskEndScheduler>
 80094f4:	e7fe      	b.n	80094f4 <main_+0xa8>
        GPIODriverData.ports[i].numPins = 0;
 80094f6:	4623      	mov	r3, r4
        GPIODriverData.ports[i].functions = &gpioDummyFunctions;
 80094f8:	4a91      	ldr	r2, [pc, #580]	; (8009740 <main_+0x2f4>)
        GPIODriverData.ports[i].driver = (void*)(unsigned int)i;
 80094fa:	6004      	str	r4, [r0, #0]
 80094fc:	3401      	adds	r4, #1
    for(uint8_t i=0; i<numPorts; i++) {
 80094fe:	2c04      	cmp	r4, #4
        GPIODriverData.ports[i].numPins = 0;
 8009500:	e9c0 3201 	strd	r3, r2, [r0, #4]
 8009504:	f100 000c 	add.w	r0, r0, #12
    for(uint8_t i=0; i<numPorts; i++) {
 8009508:	d1f7      	bne.n	80094fa <main_+0xae>
        syslog("GPIO subsystem init done.");
 800950a:	488e      	ldr	r0, [pc, #568]	; (8009744 <main_+0x2f8>)
 800950c:	f7ff fb4e 	bl	8008bac <syslog>
        gpioCPUInit(GPIO_PORT_GPIOA, GPIOA);
 8009510:	2000      	movs	r0, #0
 8009512:	4984      	ldr	r1, [pc, #528]	; (8009724 <main_+0x2d8>)
 8009514:	f7fb ffaa 	bl	800546c <gpioCPUInit>
        gpioCPUInit(GPIO_PORT_GPIOB, GPIOB);
 8009518:	2001      	movs	r0, #1
 800951a:	498b      	ldr	r1, [pc, #556]	; (8009748 <main_+0x2fc>)
 800951c:	f7fb ffa6 	bl	800546c <gpioCPUInit>
        gpioCPUInit(GPIO_PORT_GPIOC, GPIOC);
 8009520:	2002      	movs	r0, #2
 8009522:	498a      	ldr	r1, [pc, #552]	; (800974c <main_+0x300>)
 8009524:	f7fb ffa2 	bl	800546c <gpioCPUInit>
        shellCommandRegister("gpio", cmdGPIO, NULL);
 8009528:	2200      	movs	r2, #0
 800952a:	4989      	ldr	r1, [pc, #548]	; (8009750 <main_+0x304>)
 800952c:	4889      	ldr	r0, [pc, #548]	; (8009754 <main_+0x308>)
 800952e:	f7fc fc1b 	bl	8005d68 <shellCommandRegister>
    gpioSetPinMode(gpioPin, PAL_MODE_INPUT_PULLUP);
 8009532:	2103      	movs	r1, #3
 8009534:	f44f 7084 	mov.w	r0, #264	; 0x108
 8009538:	f7fc f832 	bl	80055a0 <gpioSetPinMode>
    osalThreadSleepMilliseconds(1);
 800953c:	2001      	movs	r0, #1
 800953e:	f7fb fb13 	bl	8004b68 <vTaskDelay>
    if(gpioGetPin(gpioPin) == 0) {
 8009542:	f44f 7084 	mov.w	r0, #264	; 0x108
 8009546:	f7fc f837 	bl	80055b8 <gpioGetPin>
 800954a:	b1f0      	cbz	r0, 800958a <main_+0x13e>
    gpioSetPinMode(gpioPin, PAL_MODE_INPUT_PULLDOWN);
 800954c:	4621      	mov	r1, r4
 800954e:	f44f 7084 	mov.w	r0, #264	; 0x108
 8009552:	f7fc f825 	bl	80055a0 <gpioSetPinMode>
    osalThreadSleepMilliseconds(1);
 8009556:	2001      	movs	r0, #1
 8009558:	f7fb fb06 	bl	8004b68 <vTaskDelay>
    if(gpioGetPin(gpioPin) == 1) {
 800955c:	f44f 7084 	mov.w	r0, #264	; 0x108
 8009560:	f7fc f82a 	bl	80055b8 <gpioGetPin>
 8009564:	4606      	mov	r6, r0
    uint32_t index = 0;

    for(;;) {
        const GPIOPinInit* pin = &pins[index];

        if(pin->gpioPin == 0xffff) {
 8009566:	f64f 77ff 	movw	r7, #65535	; 0xffff
 800956a:	4c7b      	ldr	r4, [pc, #492]	; (8009758 <main_+0x30c>)
 800956c:	f834 0b04 	ldrh.w	r0, [r4], #4
 8009570:	42b8      	cmp	r0, r7
 8009572:	d00c      	beq.n	800958e <main_+0x142>
            return;
        }

        gpioSetPinMode(pin->gpioPin, pin->gpioMode);
 8009574:	f814 1c02 	ldrb.w	r1, [r4, #-2]
 8009578:	f7fc f812 	bl	80055a0 <gpioSetPinMode>
        gpioSetPin(pin->gpioPin, pin->defaultValue);
 800957c:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 8009580:	f834 0c04 	ldrh.w	r0, [r4, #-4]
 8009584:	f7fc f82a 	bl	80055dc <gpioSetPin>
 8009588:	e7f0      	b.n	800956c <main_+0x120>
    bool hasI2CIO = true, hasLoPLL = true, hasSWMix = true;
 800958a:	2601      	movs	r6, #1
 800958c:	e7eb      	b.n	8009566 <main_+0x11a>
    i2c->i2cSafeConfig = (void*)config;
 800958e:	4c73      	ldr	r4, [pc, #460]	; (800975c <main_+0x310>)
 8009590:	4b73      	ldr	r3, [pc, #460]	; (8009760 <main_+0x314>)
    i2cSafeRawHardwareControl(i2c);
 8009592:	4620      	mov	r0, r4
    i2c->i2cSafeConfig = (void*)config;
 8009594:	67e3      	str	r3, [r4, #124]	; 0x7c
    i2cSafeRawHardwareControl(i2c);
 8009596:	f7fc f991 	bl	80058bc <i2cSafeRawHardwareControl>
    shellCommandRegister("i2c", cmdI2C, &I2CD1);
 800959a:	4622      	mov	r2, r4
 800959c:	4971      	ldr	r1, [pc, #452]	; (8009764 <main_+0x318>)
 800959e:	4872      	ldr	r0, [pc, #456]	; (8009768 <main_+0x31c>)
 80095a0:	f7fc fbe2 	bl	8005d68 <shellCommandRegister>
  osalSysLock();
 80095a4:	f7fa fe1e 	bl	80041e4 <vPortEnterCritical>
  osalDbgAssert((sdp->state == SD_STOP) || (sdp->state == SD_READY),
 80095a8:	4964      	ldr	r1, [pc, #400]	; (800973c <main_+0x2f0>)
 80095aa:	7d0b      	ldrb	r3, [r1, #20]
 80095ac:	1e5a      	subs	r2, r3, #1
 80095ae:	2a01      	cmp	r2, #1
 80095b0:	d902      	bls.n	80095b8 <main_+0x16c>
 80095b2:	f7fa fec5 	bl	8004340 <vTaskEndScheduler>
 80095b6:	e7fe      	b.n	80095b6 <main_+0x16a>
void sd_lld_start(SerialDriver *sdp, const SerialConfig *config) {

  if (config == NULL)
    config = &default_config;

  if (sdp->state == SD_STOP) {
 80095b8:	2b01      	cmp	r3, #1
 80095ba:	d10c      	bne.n	80095d6 <main_+0x18a>
      nvicEnableVector(STM32_USART2_NUMBER, STM32_SERIAL_USART2_PRIORITY);
    }
#endif
#if STM32_SERIAL_USE_USART3
    if (&SD3 == sdp) {
      rccEnableUSART3(FALSE);
 80095bc:	4a6b      	ldr	r2, [pc, #428]	; (800976c <main_+0x320>)
 80095be:	69d3      	ldr	r3, [r2, #28]
 80095c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80095c4:	61d3      	str	r3, [r2, #28]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80095c6:	22c0      	movs	r2, #192	; 0xc0
 80095c8:	4b69      	ldr	r3, [pc, #420]	; (8009770 <main_+0x324>)
 80095ca:	f883 2327 	strb.w	r2, [r3, #807]	; 0x327
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80095ce:	2280      	movs	r2, #128	; 0x80
 80095d0:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 80095d4:	605a      	str	r2, [r3, #4]
static void usart_init(SerialDriver *sdp, const SerialConfig *config) {
 80095d6:	f44f 729c 	mov.w	r2, #312	; 0x138
  USART_TypeDef *u = sdp->usart;
 80095da:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 80095de:	2040      	movs	r0, #64	; 0x40
    u->BRR = STM32_PCLK2 / config->speed;
 80095e0:	609a      	str	r2, [r3, #8]
  u->CR3 = config->cr3 | USART_CR3_EIE;
 80095e2:	2701      	movs	r7, #1
  u->SR = 0;
 80095e4:	2400      	movs	r4, #0
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
 80095e6:	f242 122c 	movw	r2, #8492	; 0x212c
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 80095ea:	6118      	str	r0, [r3, #16]
  u->CR3 = config->cr3 | USART_CR3_EIE;
 80095ec:	615f      	str	r7, [r3, #20]
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
 80095ee:	60da      	str	r2, [r3, #12]
  u->SR = 0;
 80095f0:	601c      	str	r4, [r3, #0]
  (void)u->SR;  /* SR reset step 1.*/
 80095f2:	681a      	ldr	r2, [r3, #0]
  (void)u->DR;  /* SR reset step 2.*/
 80095f4:	685b      	ldr	r3, [r3, #4]
    sdp->rxmask = 0xFF;
 80095f6:	23ff      	movs	r3, #255	; 0xff
 80095f8:	f881 3084 	strb.w	r3, [r1, #132]	; 0x84
  sdp->state = SD_READY;
 80095fc:	2302      	movs	r3, #2
 80095fe:	750b      	strb	r3, [r1, #20]
    osalOsRescheduleS();
 8009600:	f7fd fe2e 	bl	8007260 <osalOsRescheduleS.lto_priv.1>
    taskEXIT_CRITICAL();
 8009604:	f7fa fde2 	bl	80041cc <vPortExitCritical>
    xTaskCreate(mixLedTask, "Led", 64, (void*)&mixLedDelay, 1, &mixLedTaskHandle);
 8009608:	4b5a      	ldr	r3, [pc, #360]	; (8009774 <main_+0x328>)
 800960a:	4602      	mov	r2, r0
 800960c:	e9cd 7300 	strd	r7, r3, [sp]
    memset(driver, 0, sizeof(*driver));
 8009610:	4f59      	ldr	r7, [pc, #356]	; (8009778 <main_+0x32c>)
 8009612:	4b5a      	ldr	r3, [pc, #360]	; (800977c <main_+0x330>)
 8009614:	495a      	ldr	r1, [pc, #360]	; (8009780 <main_+0x334>)
 8009616:	485b      	ldr	r0, [pc, #364]	; (8009784 <main_+0x338>)
 8009618:	f7fe ffae 	bl	8008578 <xTaskCreate>
 800961c:	22fc      	movs	r2, #252	; 0xfc
 800961e:	4621      	mov	r1, r4
 8009620:	1d38      	adds	r0, r7, #4
 8009622:	f7fa fac5 	bl	8003bb0 <memset>
    driver->config = config;
 8009626:	4b58      	ldr	r3, [pc, #352]	; (8009788 <main_+0x33c>)
    max2870Tune(driver, &driver->currentTune);
 8009628:	f107 0108 	add.w	r1, r7, #8
    driver->config = config;
 800962c:	603b      	str	r3, [r7, #0]
    driver->currentTune.powerA = -127;
 800962e:	f248 1381 	movw	r3, #33153	; 0x8181
    max2870Tune(driver, &driver->currentTune);
 8009632:	4638      	mov	r0, r7
    driver->currentTune.powerA = -127;
 8009634:	823b      	strh	r3, [r7, #16]
    max2870Tune(driver, &driver->currentTune);
 8009636:	f7ff fea5 	bl	8009384 <max2870Tune>
    uint16_t pfdDivider = driver->config->referenceToPfdDivider;
 800963a:	6838      	ldr	r0, [r7, #0]
 800963c:	463b      	mov	r3, r7
 800963e:	8a82      	ldrh	r2, [r0, #20]
    uint32_t pfdFrequency = driver->config->inputFrequency;
 8009640:	f8d0 c010 	ldr.w	ip, [r0, #16]
    if(!(pfdDivider % 2)) {
 8009644:	f012 0f01 	tst.w	r2, #1
        pfdDivider /= 2;
 8009648:	bf05      	ittet	eq
 800964a:	0852      	lsreq	r2, r2, #1
        register2 |= _BV(MAX2870_REG2_RDIV2_OFFSET);
 800964c:	f04f 7180 	moveq.w	r1, #16777216	; 0x1000000
    uint32_t register2 = 0;
 8009650:	4621      	movne	r1, r4
        pfdFrequency /= 2;
 8009652:	ea4f 0c5c 	moveq.w	ip, ip, lsr #1
    if(pfdDivider > 1023) {
 8009656:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800965a:	d25a      	bcs.n	8009712 <main_+0x2c6>
    pfdFrequency /= pfdDivider;
 800965c:	fbbc f4f2 	udiv	r4, ip, r2
    if(pfdFrequency % driver->config->stepFrequency) {
 8009660:	6980      	ldr	r0, [r0, #24]
        pfdDivider = 0;
 8009662:	2a01      	cmp	r2, #1
    if(pfdFrequency % driver->config->stepFrequency) {
 8009664:	fbb4 f7f0 	udiv	r7, r4, r0
 8009668:	fb00 4017 	mls	r0, r0, r7, r4
        pfdDivider = 0;
 800966c:	bf08      	it	eq
 800966e:	2200      	moveq	r2, #0
    if(pfdFrequency % driver->config->stepFrequency) {
 8009670:	2800      	cmp	r0, #0
 8009672:	d14e      	bne.n	8009712 <main_+0x2c6>
    if(fracDivider > 4095) {
 8009674:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
 8009678:	d24b      	bcs.n	8009712 <main_+0x2c6>
    register2 |= pfdDivider << MAX2870_REG2_R_OFFSET;
 800967a:	ea41 3282 	orr.w	r2, r1, r2, lsl #14
    driver->bsValue = (pfdFrequency + 49999) / 50000;
 800967e:	f24c 3150 	movw	r1, #50000	; 0xc350
    driver->refDividerRegister2 = register2;
 8009682:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    driver->bsValue = (pfdFrequency + 49999) / 50000;
 8009686:	f504 4243 	add.w	r2, r4, #49920	; 0xc300
 800968a:	324f      	adds	r2, #79	; 0x4f
 800968c:	fbb2 f2f1 	udiv	r2, r2, r1
 8009690:	b292      	uxth	r2, r2
    if(driver->bsValue > 1023) {
 8009692:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
    driver->fracDivider = fracDivider;
 8009696:	f8a3 70bc 	strh.w	r7, [r3, #188]	; 0xbc
    driver->bsValue = (pfdFrequency + 49999) / 50000;
 800969a:	f8a3 20c4 	strh.w	r2, [r3, #196]	; 0xc4
    if(driver->bsValue > 1023) {
 800969e:	d238      	bcs.n	8009712 <main_+0x2c6>

void monitorEntryRegister(MonitorEntry* entry, bool(*callback)(void* param), void* param, char* name)
{
    entry->name = name;
 80096a0:	4a3a      	ldr	r2, [pc, #232]	; (800978c <main_+0x340>)
    driver->pfdFrequency = pfdFrequency;
 80096a2:	f8c3 40b8 	str.w	r4, [r3, #184]	; 0xb8
 80096a6:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
    entry->callback = callback;
 80096aa:	4a39      	ldr	r2, [pc, #228]	; (8009790 <main_+0x344>)
    entry->param = param;
    entry->next = monThreadFirst;
    monThreadFirst = entry;
 80096ac:	4c39      	ldr	r4, [pc, #228]	; (8009794 <main_+0x348>)
    entry->param = param;
 80096ae:	e9c3 233a 	strd	r2, r3, [r3, #232]	; 0xe8
    entry->next = monThreadFirst;
 80096b2:	4a39      	ldr	r2, [pc, #228]	; (8009798 <main_+0x34c>)
    if(max2870Init(&loPLL, &max2870Config) && max2870VcoPrecal(&loPLL)) {
 80096b4:	f1a4 00e8 	sub.w	r0, r4, #232	; 0xe8
 80096b8:	6811      	ldr	r1, [r2, #0]
    monThreadFirst = entry;
 80096ba:	6014      	str	r4, [r2, #0]
    entry->next = monThreadFirst;
 80096bc:	f8c3 10f0 	str.w	r1, [r3, #240]	; 0xf0
 80096c0:	f7ff fdfa 	bl	80092b8 <max2870VcoPrecal>
 80096c4:	b328      	cbz	r0, 8009712 <main_+0x2c6>
		shellCommandRegister("max", cmdMax, &loPLL);
 80096c6:	4835      	ldr	r0, [pc, #212]	; (800979c <main_+0x350>)
 80096c8:	4935      	ldr	r1, [pc, #212]	; (80097a0 <main_+0x354>)
 80096ca:	f1a4 02e8 	sub.w	r2, r4, #232	; 0xe8
 80096ce:	f7fc fb4b 	bl	8005d68 <shellCommandRegister>
		syslog("MAX2870 init done.");
 80096d2:	4834      	ldr	r0, [pc, #208]	; (80097a4 <main_+0x358>)
    	syslog("MAX2870 init failed.");
 80096d4:	f7ff fa6a 	bl	8008bac <syslog>

bool MCP9804Init(MCP9804Driver* driver, const MCP9804Driver_config* config)
{
    memset(driver, 0, sizeof(*driver));
 80096d8:	2300      	movs	r3, #0
 80096da:	4c33      	ldr	r4, [pc, #204]	; (80097a8 <main_+0x35c>)

    driver->config = config;

    /* Read device id */
    uint8_t devId;
    if(i2cSafeReadRegStandard(driver->config->i2cPort, driver->config->i2cAddr, 0x7, &devId) != MSG_OK) {
 80096dc:	2207      	movs	r2, #7
    memset(driver, 0, sizeof(*driver));
 80096de:	6063      	str	r3, [r4, #4]
    driver->config = config;
 80096e0:	4b32      	ldr	r3, [pc, #200]	; (80097ac <main_+0x360>)
    if(i2cSafeReadRegStandard(driver->config->i2cPort, driver->config->i2cAddr, 0x7, &devId) != MSG_OK) {
 80096e2:	2118      	movs	r1, #24
    driver->config = config;
 80096e4:	6023      	str	r3, [r4, #0]
    if(i2cSafeReadRegStandard(driver->config->i2cPort, driver->config->i2cAddr, 0x7, &devId) != MSG_OK) {
 80096e6:	481d      	ldr	r0, [pc, #116]	; (800975c <main_+0x310>)
 80096e8:	f10d 030e 	add.w	r3, sp, #14
 80096ec:	f7ff fb98 	bl	8008e20 <i2cSafeReadRegStandard>
 80096f0:	2800      	cmp	r0, #0
 80096f2:	d16d      	bne.n	80097d0 <main_+0x384>
        return false;
    }

    if(devId != 0x2) {
 80096f4:	f89d 300e 	ldrb.w	r3, [sp, #14]
 80096f8:	2b02      	cmp	r3, #2
 80096fa:	d169      	bne.n	80097d0 <main_+0x384>
        return false;
    }

    /* Set resolution to the highest */
    if(i2cSafeWriteRegStandard(driver->config->i2cPort, driver->config->i2cAddr, 0x8, 0x3) != MSG_OK) {
 80096fc:	6823      	ldr	r3, [r4, #0]
 80096fe:	6818      	ldr	r0, [r3, #0]
 8009700:	7919      	ldrb	r1, [r3, #4]
 8009702:	2303      	movs	r3, #3
 8009704:	f88d 300f 	strb.w	r3, [sp, #15]
    osalDbgAssert(i2c != NULL, "i2c == NULL");
 8009708:	2800      	cmp	r0, #0
 800970a:	d153      	bne.n	80097b4 <main_+0x368>
 800970c:	f7fa fe18 	bl	8004340 <vTaskEndScheduler>
 8009710:	e7fe      	b.n	8009710 <main_+0x2c4>
 8009712:	4827      	ldr	r0, [pc, #156]	; (80097b0 <main_+0x364>)
 8009714:	e7de      	b.n	80096d4 <main_+0x288>
 8009716:	bf00      	nop
 8009718:	20001310 	.word	0x20001310
 800971c:	20001334 	.word	0x20001334
 8009720:	0800ba46 	.word	0x0800ba46
 8009724:	40010800 	.word	0x40010800
 8009728:	200012b8 	.word	0x200012b8
 800972c:	0800a3f5 	.word	0x0800a3f5
 8009730:	20000928 	.word	0x20000928
 8009734:	0800ba56 	.word	0x0800ba56
 8009738:	0800bb7a 	.word	0x0800bb7a
 800973c:	200009bc 	.word	0x200009bc
 8009740:	0800c8a4 	.word	0x0800c8a4
 8009744:	0800ba72 	.word	0x0800ba72
 8009748:	40010c00 	.word	0x40010c00
 800974c:	40011000 	.word	0x40011000
 8009750:	08009c55 	.word	0x08009c55
 8009754:	0800ba8c 	.word	0x0800ba8c
 8009758:	0800c8f4 	.word	0x0800c8f4
 800975c:	20000934 	.word	0x20000934
 8009760:	0800c6b0 	.word	0x0800c6b0
 8009764:	08009e25 	.word	0x08009e25
 8009768:	0800ba91 	.word	0x0800ba91
 800976c:	40021000 	.word	0x40021000
 8009770:	e000e100 	.word	0xe000e100
 8009774:	2000119c 	.word	0x2000119c
 8009778:	20001098 	.word	0x20001098
 800977c:	20001198 	.word	0x20001198
 8009780:	0800ba95 	.word	0x0800ba95
 8009784:	0800b349 	.word	0x0800b349
 8009788:	0800c8cc 	.word	0x0800c8cc
 800978c:	0800ba99 	.word	0x0800ba99
 8009790:	080093dd 	.word	0x080093dd
 8009794:	20001180 	.word	0x20001180
 8009798:	200011a0 	.word	0x200011a0
 800979c:	0800baa1 	.word	0x0800baa1
 80097a0:	0800a8b5 	.word	0x0800a8b5
 80097a4:	0800baa5 	.word	0x0800baa5
 80097a8:	20001338 	.word	0x20001338
 80097ac:	0800c8ec 	.word	0x0800c8ec
 80097b0:	0800bab8 	.word	0x0800bab8
    return i2cSafeWriteRegBulkStandard(i2c, devAddr, addr, &value, 1);
 80097b4:	2208      	movs	r2, #8
 80097b6:	f10d 030f 	add.w	r3, sp, #15
 80097ba:	f7ff facd 	bl	8008d58 <i2cSafeWriteRegBulkStandard.constprop.0>
 80097be:	b938      	cbnz	r0, 80097d0 <main_+0x384>
bool MCP9804Init(MCP9804Driver* driver, const MCP9804Driver_config* config)
 80097c0:	4620      	mov	r0, r4
 80097c2:	f7ff fb0f 	bl	8008de4 <MCP9804MeasureTemperature.part.0>
    if(!MCP9804Init(&tcxoTempSensor, &mcp9804Config)) {
 80097c6:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80097ca:	4298      	cmp	r0, r3
        return false;
    }

    driver->temperature = MCP9804MeasureTemperature(driver, true);
 80097cc:	80a0      	strh	r0, [r4, #4]
 80097ce:	d141      	bne.n	8009854 <main_+0x408>
        syslog("Temperature sensor init failed.");
 80097d0:	4863      	ldr	r0, [pc, #396]	; (8009960 <main_+0x514>)
 80097d2:	f7ff f9eb 	bl	8008bac <syslog>

bool converterInit(ConverterManager* converter, const ConverterBand* bands,
                   void(*setGpio)(const ConverterManager* converter,uint32_t gpioValues))
{
    converter->activeBand = 0xff;
 80097d6:	23ff      	movs	r3, #255	; 0xff
 80097d8:	4c62      	ldr	r4, [pc, #392]	; (8009964 <main_+0x518>)
        shellCommandRegister("convert", cmdConvert, &converter);
 80097da:	4963      	ldr	r1, [pc, #396]	; (8009968 <main_+0x51c>)
 80097dc:	7623      	strb	r3, [r4, #24]
    converter->bands = bands;
 80097de:	4b63      	ldr	r3, [pc, #396]	; (800996c <main_+0x520>)
 80097e0:	4622      	mov	r2, r4
 80097e2:	6163      	str	r3, [r4, #20]
    converter->setConverterGpio = setGpio;
 80097e4:	4b62      	ldr	r3, [pc, #392]	; (8009970 <main_+0x524>)
 80097e6:	4863      	ldr	r0, [pc, #396]	; (8009974 <main_+0x528>)
 80097e8:	6223      	str	r3, [r4, #32]
 80097ea:	f7fc fabd 	bl	8005d68 <shellCommandRegister>
        if(!hasSWMix) {
 80097ee:	b936      	cbnz	r6, 80097fe <main_+0x3b2>
            syslog("SW band disabled!");
 80097f0:	4861      	ldr	r0, [pc, #388]	; (8009978 <main_+0x52c>)
 80097f2:	f7ff f9db 	bl	8008bac <syslog>
            converter.disabledBands |= _BV(0);
 80097f6:	69e3      	ldr	r3, [r4, #28]
 80097f8:	f043 0301 	orr.w	r3, r3, #1
 80097fc:	61e3      	str	r3, [r4, #28]
        if(!converterTune(&converter, &startupTuneRequest)) {
 80097fe:	495f      	ldr	r1, [pc, #380]	; (800997c <main_+0x530>)
 8009800:	4858      	ldr	r0, [pc, #352]	; (8009964 <main_+0x518>)
 8009802:	f7fb fdee 	bl	80053e2 <converterTune>
 8009806:	2800      	cmp	r0, #0
 8009808:	d12d      	bne.n	8009866 <main_+0x41a>
            syslog("Converter startup failed.");
 800980a:	485d      	ldr	r0, [pc, #372]	; (8009980 <main_+0x534>)
    entry->param = param;
 800980c:	2400      	movs	r4, #0
            syslog("Converter startup done.");
 800980e:	f7ff f9cd 	bl	8008bac <syslog>
    entry->name = name;
 8009812:	485c      	ldr	r0, [pc, #368]	; (8009984 <main_+0x538>)
 8009814:	4b5c      	ldr	r3, [pc, #368]	; (8009988 <main_+0x53c>)
    monitorKick(&sanityReboot, true);
 8009816:	2101      	movs	r1, #1
 8009818:	60c3      	str	r3, [r0, #12]
    entry->callback = callback;
 800981a:	4b5c      	ldr	r3, [pc, #368]	; (800998c <main_+0x540>)
    entry->param = param;
 800981c:	6044      	str	r4, [r0, #4]
    entry->callback = callback;
 800981e:	6003      	str	r3, [r0, #0]
    entry->next = monThreadFirst;
 8009820:	4b5b      	ldr	r3, [pc, #364]	; (8009990 <main_+0x544>)
  osalDbgAssert((usbp->state == USB_STOP) || (usbp->state == USB_READY),
 8009822:	4e5c      	ldr	r6, [pc, #368]	; (8009994 <main_+0x548>)
 8009824:	681a      	ldr	r2, [r3, #0]
    monThreadFirst = entry;
 8009826:	6018      	str	r0, [r3, #0]
    entry->next = monThreadFirst;
 8009828:	6082      	str	r2, [r0, #8]
 800982a:	f7fb ff0b 	bl	8005644 <monitorKick>
    xTaskCreate(taskPeriodicMon, "Monitor", stackSize, NULL, 1, &monThreadHandle );
 800982e:	4b5a      	ldr	r3, [pc, #360]	; (8009998 <main_+0x54c>)
 8009830:	2280      	movs	r2, #128	; 0x80
 8009832:	9301      	str	r3, [sp, #4]
 8009834:	2301      	movs	r3, #1
 8009836:	4959      	ldr	r1, [pc, #356]	; (800999c <main_+0x550>)
 8009838:	9300      	str	r3, [sp, #0]
 800983a:	4859      	ldr	r0, [pc, #356]	; (80099a0 <main_+0x554>)
 800983c:	4623      	mov	r3, r4
 800983e:	f7fe fe9b 	bl	8008578 <xTaskCreate>
  osalSysLock();
 8009842:	f7fa fccf 	bl	80041e4 <vPortEnterCritical>
  osalDbgAssert((usbp->state == USB_STOP) || (usbp->state == USB_READY),
 8009846:	7833      	ldrb	r3, [r6, #0]
 8009848:	1e5a      	subs	r2, r3, #1
 800984a:	2a01      	cmp	r2, #1
 800984c:	d90d      	bls.n	800986a <main_+0x41e>
 800984e:	f7fa fd77 	bl	8004340 <vTaskEndScheduler>
 8009852:	e7fe      	b.n	8009852 <main_+0x406>
        syslog("Temperature sensor init done.");
 8009854:	4853      	ldr	r0, [pc, #332]	; (80099a4 <main_+0x558>)
 8009856:	f7ff f9a9 	bl	8008bac <syslog>
        shellCommandRegister("temp", cmdTemp, &tcxoTempSensor);
 800985a:	4622      	mov	r2, r4
 800985c:	4952      	ldr	r1, [pc, #328]	; (80099a8 <main_+0x55c>)
 800985e:	4853      	ldr	r0, [pc, #332]	; (80099ac <main_+0x560>)
 8009860:	f7fc fa82 	bl	8005d68 <shellCommandRegister>
 8009864:	e7b7      	b.n	80097d6 <main_+0x38a>
            syslog("Converter startup done.");
 8009866:	4852      	ldr	r0, [pc, #328]	; (80099b0 <main_+0x564>)
 8009868:	e7d0      	b.n	800980c <main_+0x3c0>
  usbp->config = config;
 800986a:	4a52      	ldr	r2, [pc, #328]	; (80099b4 <main_+0x568>)
  if (usbp->state == USB_STOP) {
 800986c:	2b01      	cmp	r3, #1
    usbp->epc[i] = NULL;
 800986e:	e9c6 4403 	strd	r4, r4, [r6, #12]
 8009872:	e9c6 4405 	strd	r4, r4, [r6, #20]
 8009876:	e9c6 4407 	strd	r4, r4, [r6, #28]
 800987a:	e9c6 4409 	strd	r4, r4, [r6, #36]	; 0x24
  usbp->config = config;
 800987e:	6072      	str	r2, [r6, #4]
 8009880:	d11a      	bne.n	80098b8 <main_+0x46c>
      rccEnableUSB(FALSE);
 8009882:	494d      	ldr	r1, [pc, #308]	; (80099b8 <main_+0x56c>)
 8009884:	69ca      	ldr	r2, [r1, #28]
 8009886:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800988a:	61ca      	str	r2, [r1, #28]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 800988c:	21d0      	movs	r1, #208	; 0xd0
      STM32_USB->CNTR = CNTR_FRES;
 800988e:	4a4b      	ldr	r2, [pc, #300]	; (80099bc <main_+0x570>)
 8009890:	6413      	str	r3, [r2, #64]	; 0x40
 8009892:	4b4b      	ldr	r3, [pc, #300]	; (80099c0 <main_+0x574>)
 8009894:	f883 1313 	strb.w	r1, [r3, #787]	; 0x313
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8009898:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800989c:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 80098a0:	6019      	str	r1, [r3, #0]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80098a2:	21e0      	movs	r1, #224	; 0xe0
 80098a4:	f883 1314 	strb.w	r1, [r3, #788]	; 0x314
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80098a8:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 80098ac:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 80098b0:	6019      	str	r1, [r3, #0]
      STM32_USB->CNTR = 0;
 80098b2:	6414      	str	r4, [r2, #64]	; 0x40
    _usb_reset(usbp);
 80098b4:	f7fc fc98 	bl	80061e8 <_usb_reset.constprop.0>
  usbp->state = USB_READY;
 80098b8:	f04f 0802 	mov.w	r8, #2
 80098bc:	f886 8000 	strb.w	r8, [r6]
    osalOsRescheduleS();
 80098c0:	f7fd fcce 	bl	8007260 <osalOsRescheduleS.lto_priv.1>
    taskEXIT_CRITICAL();
 80098c4:	f7fa fc82 	bl	80041cc <vPortExitCritical>
  sdup->vmt = &vmt;
 80098c8:	483e      	ldr	r0, [pc, #248]	; (80099c4 <main_+0x578>)
 80098ca:	4b3f      	ldr	r3, [pc, #252]	; (80099c8 <main_+0x57c>)
  sdup->state = SDU_STOP;
 80098cc:	2101      	movs	r1, #1
  sdup->vmt = &vmt;
 80098ce:	6003      	str	r3, [r0, #0]
    event_source->setEvents = 0;
 80098d0:	2300      	movs	r3, #0
  ibqp->bsize     = size + sizeof (size_t);
 80098d2:	f44f 7782 	mov.w	r7, #260	; 0x104
  ibqp->brdptr    = bp;
 80098d6:	f100 0488 	add.w	r4, r0, #136	; 0x88
  ibqp->ptr       = NULL;
 80098da:	e9c0 430f 	strd	r4, r3, [r0, #60]	; 0x3c
  ibqp->bcounter  = 0;
 80098de:	6243      	str	r3, [r0, #36]	; 0x24
    event_source->firstRepeater = NULL;
 80098e0:	e9c0 3301 	strd	r3, r3, [r0, #4]
    thread_queue->tail = NULL;
 80098e4:	e9c0 3306 	strd	r3, r3, [r0, #24]
  ibqp->bwrptr    = bp;
 80098e8:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 80098ec:	e9c0 3314 	strd	r3, r3, [r0, #80]	; 0x50
  obqp->top       = NULL;
 80098f0:	e9c0 331e 	strd	r3, r3, [r0, #120]	; 0x78
    event_source->waitThread = NULL;
 80098f4:	60c3      	str	r3, [r0, #12]
  ibqp->top       = NULL;
 80098f6:	6443      	str	r3, [r0, #68]	; 0x44
  ibqp->notify    = infy;
 80098f8:	4c34      	ldr	r4, [pc, #208]	; (80099cc <main_+0x580>)
  obqp->notify    = onfy;
 80098fa:	4b35      	ldr	r3, [pc, #212]	; (80099d0 <main_+0x584>)
  ibqp->btop      = bp + ((size + sizeof (size_t)) * n);
 80098fc:	f500 7224 	add.w	r2, r0, #656	; 0x290
  sdup->state = SDU_STOP;
 8009900:	7501      	strb	r1, [r0, #20]
  ibqp->suspended = suspended;
 8009902:	f880 1020 	strb.w	r1, [r0, #32]
  obqp->suspended = suspended;
 8009906:	f880 1058 	strb.w	r1, [r0, #88]	; 0x58
  obqp->btop      = bp + ((size + sizeof (size_t)) * n);
 800990a:	f500 6193 	add.w	r1, r0, #1176	; 0x498
  ibqp->bn        = n;
 800990e:	e9c0 780d 	strd	r7, r8, [r0, #52]	; 0x34
  ibqp->link      = link;
 8009912:	e9c0 4012 	strd	r4, r0, [r0, #72]	; 0x48
  obqp->bwrptr    = bp;
 8009916:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
  obqp->bsize     = size + sizeof (size_t);
 800991a:	e9c0 171a 	strd	r1, r7, [r0, #104]	; 0x68
  obqp->buffers   = bp;
 800991e:	e9c0 821c 	strd	r8, r2, [r0, #112]	; 0x70
  ibqp->btop      = bp + ((size + sizeof (size_t)) * n);
 8009922:	6302      	str	r2, [r0, #48]	; 0x30
  obqp->bcounter  = n;
 8009924:	f8c0 805c 	str.w	r8, [r0, #92]	; 0x5c
  obqp->link      = link;
 8009928:	e9c0 3020 	strd	r3, r0, [r0, #128]	; 0x80
  osalSysLock();
 800992c:	f7fa fc5a 	bl	80041e4 <vPortEnterCritical>
  osalDbgAssert((sdup->state == SDU_STOP) || (sdup->state == SDU_READY),
 8009930:	7d03      	ldrb	r3, [r0, #20]
 8009932:	3b01      	subs	r3, #1
 8009934:	2b01      	cmp	r3, #1
 8009936:	d902      	bls.n	800993e <main_+0x4f2>
 8009938:	f7fa fd02 	bl	8004340 <vTaskEndScheduler>
 800993c:	e7fe      	b.n	800993c <main_+0x4f0>
  sdup->config = config;
 800993e:	4b25      	ldr	r3, [pc, #148]	; (80099d4 <main_+0x588>)
  usbp->in_params[config->bulk_in - 1U]   = sdup;
 8009940:	62f0      	str	r0, [r6, #44]	; 0x2c
  sdup->config = config;
 8009942:	f8c0 3498 	str.w	r3, [r0, #1176]	; 0x498
  usbp->out_params[config->bulk_out - 1U] = sdup;
 8009946:	64b0      	str	r0, [r6, #72]	; 0x48
    usbp->in_params[config->int_in - 1U]  = sdup;
 8009948:	6330      	str	r0, [r6, #48]	; 0x30
  sdup->state = SDU_READY;
 800994a:	f880 8014 	strb.w	r8, [r0, #20]
    osalOsRescheduleS();
 800994e:	f7fd fc87 	bl	8007260 <osalOsRescheduleS.lto_priv.1>
    taskEXIT_CRITICAL();
 8009952:	f7fa fc3b 	bl	80041cc <vPortExitCritical>
{
    usbStart(&USBD1, &usbcfg);
    sduObjectInit(&SDU1);
    sduStart(&SDU1, &serusbcfg);

    usbConnectBus(serusbcfg.usbp);
 8009956:	f44f 6380 	mov.w	r3, #1024	; 0x400
    syslog("USB init done.");
 800995a:	481f      	ldr	r0, [pc, #124]	; (80099d8 <main_+0x58c>)
 800995c:	612b      	str	r3, [r5, #16]
 800995e:	e5bd      	b.n	80094dc <main_+0x90>
 8009960:	0800bacd 	.word	0x0800bacd
 8009964:	20001020 	.word	0x20001020
 8009968:	080099dd 	.word	0x080099dd
 800996c:	0800c790 	.word	0x0800c790
 8009970:	08005c31 	.word	0x08005c31
 8009974:	0800bb10 	.word	0x0800bb10
 8009978:	0800bb18 	.word	0x0800bb18
 800997c:	20000914 	.word	0x20000914
 8009980:	0800bb2a 	.word	0x0800bb2a
 8009984:	2000121c 	.word	0x2000121c
 8009988:	0800bb5c 	.word	0x0800bb5c
 800998c:	08007d35 	.word	0x08007d35
 8009990:	200011a0 	.word	0x200011a0
 8009994:	20000f54 	.word	0x20000f54
 8009998:	200011a4 	.word	0x200011a4
 800999c:	0800bb63 	.word	0x0800bb63
 80099a0:	08005701 	.word	0x08005701
 80099a4:	0800baed 	.word	0x0800baed
 80099a8:	08009db1 	.word	0x08009db1
 80099ac:	0800bb0b 	.word	0x0800bb0b
 80099b0:	0800bb44 	.word	0x0800bb44
 80099b4:	0800ca28 	.word	0x0800ca28
 80099b8:	40021000 	.word	0x40021000
 80099bc:	40005c00 	.word	0x40005c00
 80099c0:	e000e100 	.word	0xe000e100
 80099c4:	20000a44 	.word	0x20000a44
 80099c8:	0800cb74 	.word	0x0800cb74
 80099cc:	080071cf 	.word	0x080071cf
 80099d0:	080076dd 	.word	0x080076dd
 80099d4:	0800c9c0 	.word	0x0800c9c0
 80099d8:	0800bb6b 	.word	0x0800bb6b

080099dc <cmdConvert>:
    chprintf(chp, "\tconvert hs [shfband] [1/0]"SHELL_NEWLINE_STR);
    chprintf(chp, "\tconvert status"SHELL_NEWLINE_STR);
}

void cmdConvert(void* user, BaseSequentialStream *chp, int argc, char *argv[])
{
 80099dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ConverterManager* converter = (ConverterManager*)user;

    if(argc == 1) {
 80099e0:	2a01      	cmp	r2, #1
{
 80099e2:	4605      	mov	r5, r0
 80099e4:	460c      	mov	r4, r1
 80099e6:	4690      	mov	r8, r2
 80099e8:	461e      	mov	r6, r3
 80099ea:	b088      	sub	sp, #32
    if(argc == 1) {
 80099ec:	d175      	bne.n	8009ada <cmdConvert+0xfe>
        if(!strcmp(argv[0], "status")) {
 80099ee:	4965      	ldr	r1, [pc, #404]	; (8009b84 <cmdConvert+0x1a8>)
 80099f0:	6818      	ldr	r0, [r3, #0]
 80099f2:	f7fa f991 	bl	8003d18 <strcmp>
 80099f6:	4606      	mov	r6, r0
 80099f8:	2800      	cmp	r0, #0
 80099fa:	f040 80b5 	bne.w	8009b68 <cmdConvert+0x18c>
    return true;
}

void converterStatus(BaseSequentialStream* chp, ConverterManager* converter)
{
    chprintf(chp, "Bands: [Disable mask: 0x%08x]"SHELL_NEWLINE_STR, converter->disabledBands);
 80099fe:	69ea      	ldr	r2, [r5, #28]
 8009a00:	4961      	ldr	r1, [pc, #388]	; (8009b88 <cmdConvert+0x1ac>)
 8009a02:	4620      	mov	r0, r4
 8009a04:	f7fe fee4 	bl	80087d0 <chprintf>
    printfFixed(chp, 9, "\tBand ID");
 8009a08:	2109      	movs	r1, #9
 8009a0a:	4a60      	ldr	r2, [pc, #384]	; (8009b8c <cmdConvert+0x1b0>)
 8009a0c:	4620      	mov	r0, r4
 8009a0e:	f7fe febb 	bl	8008788 <printfFixed>
    printfFixed(chp, 7, "Name");
 8009a12:	2107      	movs	r1, #7
 8009a14:	4a5e      	ldr	r2, [pc, #376]	; (8009b90 <cmdConvert+0x1b4>)
 8009a16:	4620      	mov	r0, r4
 8009a18:	f7fe feb6 	bl	8008788 <printfFixed>
    printfFixed(chp, 14, "FreqMin [kHz]");
 8009a1c:	210e      	movs	r1, #14
 8009a1e:	4a5d      	ldr	r2, [pc, #372]	; (8009b94 <cmdConvert+0x1b8>)
 8009a20:	4620      	mov	r0, r4
 8009a22:	f7fe feb1 	bl	8008788 <printfFixed>
    chprintf(chp,	     "FreqMax [kHz]"SHELL_NEWLINE_STR);
 8009a26:	4620      	mov	r0, r4
 8009a28:	495b      	ldr	r1, [pc, #364]	; (8009b98 <cmdConvert+0x1bc>)
 8009a2a:	f7fe fed1 	bl	80087d0 <chprintf>
        if(i == converter->activeBand) {
            printfFixed(chp, 9, "\t%u [*]", i);
        } else {
            printfFixed(chp, 9, "\t%u", i);
        }
        printfFixed(chp, 7, "%s", converter->bands[i].bandName);
 8009a2e:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8009be0 <cmdConvert+0x204>
        printfFixed(chp, 14, "%u", converter->bands[i].minFrequencyKHz);
 8009a32:	f8df 91b0 	ldr.w	r9, [pc, #432]	; 8009be4 <cmdConvert+0x208>
        chprintf(chp,	     "%u"SHELL_NEWLINE_STR, converter->bands[i].maxFrequencyKHz);
 8009a36:	f8df a1b0 	ldr.w	sl, [pc, #432]	; 8009be8 <cmdConvert+0x20c>
    for(uint8_t i=0; converter->bands[i].functions; i++) {
 8009a3a:	2714      	movs	r7, #20
 8009a3c:	b2f3      	uxtb	r3, r6
 8009a3e:	435f      	muls	r7, r3
 8009a40:	696a      	ldr	r2, [r5, #20]
 8009a42:	443a      	add	r2, r7
 8009a44:	6912      	ldr	r2, [r2, #16]
 8009a46:	b95a      	cbnz	r2, 8009a60 <cmdConvert+0x84>
    }

    chprintf(chp, SHELL_NEWLINE_STR);
 8009a48:	4620      	mov	r0, r4
 8009a4a:	4954      	ldr	r1, [pc, #336]	; (8009b9c <cmdConvert+0x1c0>)
 8009a4c:	f7fe fec0 	bl	80087d0 <chprintf>

    if(converter->activeBand == 0xff) {
 8009a50:	7e2b      	ldrb	r3, [r5, #24]
 8009a52:	2bff      	cmp	r3, #255	; 0xff
 8009a54:	d12a      	bne.n	8009aac <cmdConvert+0xd0>
        chprintf(chp, "Converter disabled." SHELL_NEWLINE_STR);
 8009a56:	4952      	ldr	r1, [pc, #328]	; (8009ba0 <cmdConvert+0x1c4>)
    chprintf(chp, "\tconvert status"SHELL_NEWLINE_STR);
 8009a58:	4620      	mov	r0, r4
 8009a5a:	f7fe feb9 	bl	80087d0 <chprintf>
 8009a5e:	e039      	b.n	8009ad4 <cmdConvert+0xf8>
        if(_BV(i) & converter-> disabledBands) {
 8009a60:	69ea      	ldr	r2, [r5, #28]
 8009a62:	40da      	lsrs	r2, r3
 8009a64:	07d1      	lsls	r1, r2, #31
 8009a66:	d41f      	bmi.n	8009aa8 <cmdConvert+0xcc>
        if(i == converter->activeBand) {
 8009a68:	7e2a      	ldrb	r2, [r5, #24]
            printfFixed(chp, 9, "\t%u", i);
 8009a6a:	2109      	movs	r1, #9
        if(i == converter->activeBand) {
 8009a6c:	429a      	cmp	r2, r3
            printfFixed(chp, 9, "\t%u [*]", i);
 8009a6e:	bf0a      	itet	eq
 8009a70:	4613      	moveq	r3, r2
            printfFixed(chp, 9, "\t%u", i);
 8009a72:	4a4c      	ldrne	r2, [pc, #304]	; (8009ba4 <cmdConvert+0x1c8>)
            printfFixed(chp, 9, "\t%u [*]", i);
 8009a74:	4a4c      	ldreq	r2, [pc, #304]	; (8009ba8 <cmdConvert+0x1cc>)
            printfFixed(chp, 9, "\t%u", i);
 8009a76:	4620      	mov	r0, r4
 8009a78:	f7fe fe86 	bl	8008788 <printfFixed>
        printfFixed(chp, 7, "%s", converter->bands[i].bandName);
 8009a7c:	696b      	ldr	r3, [r5, #20]
 8009a7e:	4642      	mov	r2, r8
 8009a80:	59db      	ldr	r3, [r3, r7]
 8009a82:	2107      	movs	r1, #7
 8009a84:	4620      	mov	r0, r4
 8009a86:	f7fe fe7f 	bl	8008788 <printfFixed>
        printfFixed(chp, 14, "%u", converter->bands[i].minFrequencyKHz);
 8009a8a:	696b      	ldr	r3, [r5, #20]
 8009a8c:	464a      	mov	r2, r9
 8009a8e:	443b      	add	r3, r7
 8009a90:	210e      	movs	r1, #14
 8009a92:	685b      	ldr	r3, [r3, #4]
 8009a94:	4620      	mov	r0, r4
 8009a96:	f7fe fe77 	bl	8008788 <printfFixed>
        chprintf(chp,	     "%u"SHELL_NEWLINE_STR, converter->bands[i].maxFrequencyKHz);
 8009a9a:	696b      	ldr	r3, [r5, #20]
 8009a9c:	4651      	mov	r1, sl
 8009a9e:	441f      	add	r7, r3
 8009aa0:	4620      	mov	r0, r4
 8009aa2:	68ba      	ldr	r2, [r7, #8]
 8009aa4:	f7fe fe94 	bl	80087d0 <chprintf>
    for(uint8_t i=0; converter->bands[i].functions; i++) {
 8009aa8:	3601      	adds	r6, #1
 8009aaa:	e7c6      	b.n	8009a3a <cmdConvert+0x5e>
    } else {
        chprintf(chp, "Input Frequency:    %u kHz" SHELL_NEWLINE_STR, converter->currentTune.inputFrequencyKHz);
 8009aac:	682a      	ldr	r2, [r5, #0]
 8009aae:	493f      	ldr	r1, [pc, #252]	; (8009bac <cmdConvert+0x1d0>)
 8009ab0:	4620      	mov	r0, r4
 8009ab2:	f7fe fe8d 	bl	80087d0 <chprintf>
        chprintf(chp, "Output Frequency:   %u kHz" SHELL_NEWLINE_STR, converter->currentTune.outputFrequencyKHz);
 8009ab6:	68ea      	ldr	r2, [r5, #12]
 8009ab8:	493d      	ldr	r1, [pc, #244]	; (8009bb0 <cmdConvert+0x1d4>)
 8009aba:	4620      	mov	r0, r4
 8009abc:	f7fe fe88 	bl	80087d0 <chprintf>
        chprintf(chp, "Spectral inversion: %u" SHELL_NEWLINE_STR, converter->currentTune.spectrumInversion);
 8009ac0:	7c2a      	ldrb	r2, [r5, #16]
 8009ac2:	493c      	ldr	r1, [pc, #240]	; (8009bb4 <cmdConvert+0x1d8>)
 8009ac4:	4620      	mov	r0, r4
 8009ac6:	f7fe fe83 	bl	80087d0 <chprintf>
        chprintf(chp, "Selected antenna:   %u" SHELL_NEWLINE_STR , converter->currentTune.antennaInput);
 8009aca:	4620      	mov	r0, r4
 8009acc:	686a      	ldr	r2, [r5, #4]
 8009ace:	493a      	ldr	r1, [pc, #232]	; (8009bb8 <cmdConvert+0x1dc>)
 8009ad0:	f7fe fe7e 	bl	80087d0 <chprintf>
            return;
        }
    }

    cmdConvertUsage(chp);
}
 8009ad4:	b008      	add	sp, #32
 8009ad6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    } else if (argc >= 2) {
 8009ada:	dd45      	ble.n	8009b68 <cmdConvert+0x18c>
        if(argc == 3 && !strcmp(argv[0], "hs")) {
 8009adc:	2a03      	cmp	r2, #3
 8009ade:	681f      	ldr	r7, [r3, #0]
 8009ae0:	d115      	bne.n	8009b0e <cmdConvert+0x132>
 8009ae2:	4638      	mov	r0, r7
 8009ae4:	4935      	ldr	r1, [pc, #212]	; (8009bbc <cmdConvert+0x1e0>)
 8009ae6:	f7fa f917 	bl	8003d18 <strcmp>
 8009aea:	b980      	cbnz	r0, 8009b0e <cmdConvert+0x132>
            uint32_t band = strToInt(argv[1], 10);
 8009aec:	210a      	movs	r1, #10
 8009aee:	6870      	ldr	r0, [r6, #4]
 8009af0:	f7fc f94e 	bl	8005d90 <strToInt>
            if(band < sizeof(converterSHFBandConfig)/sizeof(ConverterSHFConfig)) {
 8009af4:	2803      	cmp	r0, #3
 8009af6:	d80a      	bhi.n	8009b0e <cmdConvert+0x132>
                converterSHFBandConfig[band].useHighSideMixing = (argv[2][0] == '1');
 8009af8:	230c      	movs	r3, #12
 8009afa:	4358      	muls	r0, r3
 8009afc:	68b3      	ldr	r3, [r6, #8]
 8009afe:	781b      	ldrb	r3, [r3, #0]
 8009b00:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8009b04:	4253      	negs	r3, r2
 8009b06:	4153      	adcs	r3, r2
 8009b08:	4a2d      	ldr	r2, [pc, #180]	; (8009bc0 <cmdConvert+0x1e4>)
 8009b0a:	5413      	strb	r3, [r2, r0]
                return;
 8009b0c:	e7e2      	b.n	8009ad4 <cmdConvert+0xf8>
        if(!strcmp(argv[0], "setup")) {
 8009b0e:	4638      	mov	r0, r7
 8009b10:	492c      	ldr	r1, [pc, #176]	; (8009bc4 <cmdConvert+0x1e8>)
 8009b12:	f7fa f901 	bl	8003d18 <strcmp>
 8009b16:	4607      	mov	r7, r0
 8009b18:	bb30      	cbnz	r0, 8009b68 <cmdConvert+0x18c>
            uint32_t frequency = strToInt(argv[1], 10);
 8009b1a:	210a      	movs	r1, #10
 8009b1c:	6870      	ldr	r0, [r6, #4]
 8009b1e:	f7fc f937 	bl	8005d90 <strToInt>
            if(argc >= 3) {
 8009b22:	f1b8 0f02 	cmp.w	r8, #2
            tuneRequest.antennaInput = 0;
 8009b26:	e9cd 0703 	strd	r0, r7, [sp, #12]
            if(argc >= 3) {
 8009b2a:	d111      	bne.n	8009b50 <cmdConvert+0x174>
            tuneRequest.forceBand = false;
 8009b2c:	f88d 7014 	strb.w	r7, [sp, #20]
            bool result = converterTune(converter, &tuneRequest);
 8009b30:	4628      	mov	r0, r5
 8009b32:	a903      	add	r1, sp, #12
 8009b34:	f7fb fc55 	bl	80053e2 <converterTune>
            if(result) {
 8009b38:	b1a0      	cbz	r0, 8009b64 <cmdConvert+0x188>
                chprintf(chp, "IF Frequency: %u kHz, inversion: %u (band %u)"SHELL_NEWLINE_STR, tuneRequest.outputFrequencyKHz, tuneRequest.spectrumInversion, tuneRequest.bandId);
 8009b3a:	f89d 3015 	ldrb.w	r3, [sp, #21]
 8009b3e:	4620      	mov	r0, r4
 8009b40:	9300      	str	r3, [sp, #0]
 8009b42:	9a06      	ldr	r2, [sp, #24]
 8009b44:	f89d 301c 	ldrb.w	r3, [sp, #28]
 8009b48:	491f      	ldr	r1, [pc, #124]	; (8009bc8 <cmdConvert+0x1ec>)
 8009b4a:	f7fe fe41 	bl	80087d0 <chprintf>
 8009b4e:	e7c1      	b.n	8009ad4 <cmdConvert+0xf8>
                tuneRequest.forceBand = true;
 8009b50:	2301      	movs	r3, #1
                tuneRequest.bandId = strToInt(argv[2], 10);
 8009b52:	210a      	movs	r1, #10
 8009b54:	68b0      	ldr	r0, [r6, #8]
                tuneRequest.forceBand = true;
 8009b56:	f88d 3014 	strb.w	r3, [sp, #20]
                tuneRequest.bandId = strToInt(argv[2], 10);
 8009b5a:	f7fc f919 	bl	8005d90 <strToInt>
 8009b5e:	f88d 0015 	strb.w	r0, [sp, #21]
 8009b62:	e7e5      	b.n	8009b30 <cmdConvert+0x154>
                chprintf(chp, "Error!"SHELL_NEWLINE_STR);
 8009b64:	4919      	ldr	r1, [pc, #100]	; (8009bcc <cmdConvert+0x1f0>)
 8009b66:	e777      	b.n	8009a58 <cmdConvert+0x7c>
    chprintf(chp, "Usage:"SHELL_NEWLINE_STR);
 8009b68:	4919      	ldr	r1, [pc, #100]	; (8009bd0 <cmdConvert+0x1f4>)
 8009b6a:	4620      	mov	r0, r4
 8009b6c:	f7fe fe30 	bl	80087d0 <chprintf>
    chprintf(chp, "\tconvert setup [freqkHz] [forceBand]"SHELL_NEWLINE_STR);
 8009b70:	4918      	ldr	r1, [pc, #96]	; (8009bd4 <cmdConvert+0x1f8>)
 8009b72:	4620      	mov	r0, r4
 8009b74:	f7fe fe2c 	bl	80087d0 <chprintf>
    chprintf(chp, "\tconvert hs [shfband] [1/0]"SHELL_NEWLINE_STR);
 8009b78:	4917      	ldr	r1, [pc, #92]	; (8009bd8 <cmdConvert+0x1fc>)
 8009b7a:	4620      	mov	r0, r4
 8009b7c:	f7fe fe28 	bl	80087d0 <chprintf>
    chprintf(chp, "\tconvert status"SHELL_NEWLINE_STR);
 8009b80:	4916      	ldr	r1, [pc, #88]	; (8009bdc <cmdConvert+0x200>)
 8009b82:	e769      	b.n	8009a58 <cmdConvert+0x7c>
 8009b84:	0800bb83 	.word	0x0800bb83
 8009b88:	0800bb8a 	.word	0x0800bb8a
 8009b8c:	0800bbaa 	.word	0x0800bbaa
 8009b90:	0800bfc4 	.word	0x0800bfc4
 8009b94:	0800bbb3 	.word	0x0800bbb3
 8009b98:	0800bbc1 	.word	0x0800bbc1
 8009b9c:	0800c157 	.word	0x0800c157
 8009ba0:	0800bbe0 	.word	0x0800bbe0
 8009ba4:	0800bbd9 	.word	0x0800bbd9
 8009ba8:	0800bbd1 	.word	0x0800bbd1
 8009bac:	0800bbf6 	.word	0x0800bbf6
 8009bb0:	0800bc13 	.word	0x0800bc13
 8009bb4:	0800bc30 	.word	0x0800bc30
 8009bb8:	0800bc49 	.word	0x0800bc49
 8009bbc:	0800bc62 	.word	0x0800bc62
 8009bc0:	2000080c 	.word	0x2000080c
 8009bc4:	0800bc65 	.word	0x0800bc65
 8009bc8:	0800bc6b 	.word	0x0800bc6b
 8009bcc:	0800bc9b 	.word	0x0800bc9b
 8009bd0:	0800b951 	.word	0x0800b951
 8009bd4:	0800bca4 	.word	0x0800bca4
 8009bd8:	0800bccb 	.word	0x0800bccb
 8009bdc:	0800bce9 	.word	0x0800bce9
 8009be0:	0800bbdd 	.word	0x0800bbdd
 8009be4:	0800bbda 	.word	0x0800bbda
 8009be8:	0800bc5d 	.word	0x0800bc5d

08009bec <cmdGPIOUsage>:

#include <string.h>
#include <stdlib.h>

static void cmdGPIOUsage(BaseSequentialStream *chp)
{
 8009bec:	b510      	push	{r4, lr}
 8009bee:	4604      	mov	r4, r0
    chprintf(chp, "Usage:"SHELL_NEWLINE_STR);
 8009bf0:	4910      	ldr	r1, [pc, #64]	; (8009c34 <cmdGPIOUsage+0x48>)
 8009bf2:	f7fe fded 	bl	80087d0 <chprintf>
    chprintf(chp, "\tgpio status"SHELL_NEWLINE_STR);
 8009bf6:	4620      	mov	r0, r4
 8009bf8:	490f      	ldr	r1, [pc, #60]	; (8009c38 <cmdGPIOUsage+0x4c>)
 8009bfa:	f7fe fde9 	bl	80087d0 <chprintf>
    chprintf(chp, "\tgpio [port] [pin] output"SHELL_NEWLINE_STR);
 8009bfe:	4620      	mov	r0, r4
 8009c00:	490e      	ldr	r1, [pc, #56]	; (8009c3c <cmdGPIOUsage+0x50>)
 8009c02:	f7fe fde5 	bl	80087d0 <chprintf>
    chprintf(chp, "\tgpio [port] [pin] input"SHELL_NEWLINE_STR);
 8009c06:	4620      	mov	r0, r4
 8009c08:	490d      	ldr	r1, [pc, #52]	; (8009c40 <cmdGPIOUsage+0x54>)
 8009c0a:	f7fe fde1 	bl	80087d0 <chprintf>
    chprintf(chp, "\tgpio [port] [pin] set"SHELL_NEWLINE_STR);
 8009c0e:	4620      	mov	r0, r4
 8009c10:	490c      	ldr	r1, [pc, #48]	; (8009c44 <cmdGPIOUsage+0x58>)
 8009c12:	f7fe fddd 	bl	80087d0 <chprintf>
    chprintf(chp, "\tgpio [port] [pin] clear"SHELL_NEWLINE_STR);
 8009c16:	4620      	mov	r0, r4
 8009c18:	490b      	ldr	r1, [pc, #44]	; (8009c48 <cmdGPIOUsage+0x5c>)
 8009c1a:	f7fe fdd9 	bl	80087d0 <chprintf>
    chprintf(chp, "\tgpio [port] [pin] get"SHELL_NEWLINE_STR);
 8009c1e:	4620      	mov	r0, r4
 8009c20:	490a      	ldr	r1, [pc, #40]	; (8009c4c <cmdGPIOUsage+0x60>)
 8009c22:	f7fe fdd5 	bl	80087d0 <chprintf>
    chprintf(chp, "\tgpio [port] bus [on/off]"SHELL_NEWLINE_STR);
 8009c26:	4620      	mov	r0, r4

}
 8009c28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    chprintf(chp, "\tgpio [port] bus [on/off]"SHELL_NEWLINE_STR);
 8009c2c:	4908      	ldr	r1, [pc, #32]	; (8009c50 <cmdGPIOUsage+0x64>)
 8009c2e:	f7fe bdcf 	b.w	80087d0 <chprintf>
 8009c32:	bf00      	nop
 8009c34:	0800b951 	.word	0x0800b951
 8009c38:	0800bcfb 	.word	0x0800bcfb
 8009c3c:	0800bd0a 	.word	0x0800bd0a
 8009c40:	0800bd26 	.word	0x0800bd26
 8009c44:	0800bd41 	.word	0x0800bd41
 8009c48:	0800bd5a 	.word	0x0800bd5a
 8009c4c:	0800bd75 	.word	0x0800bd75
 8009c50:	0800bd8e 	.word	0x0800bd8e

08009c54 <cmdGPIO>:

void cmdGPIO(void* user, BaseSequentialStream *chp, int argc, char *argv[])
{
 8009c54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    (void) user;

    if(argc < 1) {
 8009c58:	1e16      	subs	r6, r2, #0
{
 8009c5a:	460d      	mov	r5, r1
 8009c5c:	461f      	mov	r7, r3
    if(argc < 1) {
 8009c5e:	dc04      	bgt.n	8009c6a <cmdGPIO+0x16>
        cmdGPIOUsage(chp);
 8009c60:	4628      	mov	r0, r5
    } else {
        cmdGPIOUsage(chp);
    }

    //TXA6408PrintStatus(&mixerControllerIO, chp);
}
 8009c62:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        cmdGPIOUsage(chp);
 8009c66:	f7ff bfc1 	b.w	8009bec <cmdGPIOUsage>
    if(!strcmp(argv[0], "status")) {
 8009c6a:	f8d3 8000 	ldr.w	r8, [r3]
 8009c6e:	4944      	ldr	r1, [pc, #272]	; (8009d80 <cmdGPIO+0x12c>)
 8009c70:	4640      	mov	r0, r8
 8009c72:	f7fa f851 	bl	8003d18 <strcmp>
 8009c76:	4604      	mov	r4, r0
 8009c78:	bb78      	cbnz	r0, 8009cda <cmdGPIO+0x86>
    for(uint8_t i=0; i<GPIODriverData.numPorts; i++) {
 8009c7a:	f8df 8128 	ldr.w	r8, [pc, #296]	; 8009da4 <cmdGPIO+0x150>
        chprintf(chp, "Port %u: ", i);
 8009c7e:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8009da8 <cmdGPIO+0x154>
            chprintf(chp, "(Active, %u pins)", port->numPins);
 8009c82:	f8df a128 	ldr.w	sl, [pc, #296]	; 8009dac <cmdGPIO+0x158>
 8009c86:	e021      	b.n	8009ccc <cmdGPIO+0x78>
        const GPIOPort* port = gpioGetPortDriver(i);
 8009c88:	4630      	mov	r0, r6
 8009c8a:	f7fb fc71 	bl	8005570 <gpioGetPortDriver>
        chprintf(chp, "Port %u: ", i);
 8009c8e:	4632      	mov	r2, r6
        const GPIOPort* port = gpioGetPortDriver(i);
 8009c90:	4607      	mov	r7, r0
        chprintf(chp, "Port %u: ", i);
 8009c92:	4649      	mov	r1, r9
 8009c94:	4628      	mov	r0, r5
 8009c96:	f7fe fd9b 	bl	80087d0 <chprintf>
        if(GPIODriverData.registeredPorts & _BV(i)) {
 8009c9a:	f8d8 2008 	ldr.w	r2, [r8, #8]
 8009c9e:	40f2      	lsrs	r2, r6
 8009ca0:	07d3      	lsls	r3, r2, #31
 8009ca2:	d504      	bpl.n	8009cae <cmdGPIO+0x5a>
            chprintf(chp, "(Active, %u pins)", port->numPins);
 8009ca4:	4651      	mov	r1, sl
 8009ca6:	4628      	mov	r0, r5
 8009ca8:	687a      	ldr	r2, [r7, #4]
 8009caa:	f7fe fd91 	bl	80087d0 <chprintf>
        chprintf(chp, SHELL_NEWLINE_STR);
 8009cae:	4628      	mov	r0, r5
 8009cb0:	4934      	ldr	r1, [pc, #208]	; (8009d84 <cmdGPIO+0x130>)
 8009cb2:	f7fe fd8d 	bl	80087d0 <chprintf>
        if(port->functions->status) {
 8009cb6:	68bb      	ldr	r3, [r7, #8]
 8009cb8:	695b      	ldr	r3, [r3, #20]
 8009cba:	b113      	cbz	r3, 8009cc2 <cmdGPIO+0x6e>
            port->functions->status(port, chp);
 8009cbc:	4629      	mov	r1, r5
 8009cbe:	4638      	mov	r0, r7
 8009cc0:	4798      	blx	r3
        chprintf(chp, SHELL_NEWLINE_STR);
 8009cc2:	4628      	mov	r0, r5
 8009cc4:	492f      	ldr	r1, [pc, #188]	; (8009d84 <cmdGPIO+0x130>)
 8009cc6:	f7fe fd83 	bl	80087d0 <chprintf>
    for(uint8_t i=0; i<GPIODriverData.numPorts; i++) {
 8009cca:	3401      	adds	r4, #1
 8009ccc:	f898 3004 	ldrb.w	r3, [r8, #4]
 8009cd0:	b2e6      	uxtb	r6, r4
 8009cd2:	42b3      	cmp	r3, r6
 8009cd4:	d8d8      	bhi.n	8009c88 <cmdGPIO+0x34>
}
 8009cd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if(argc == 3) {
 8009cda:	2e03      	cmp	r6, #3
 8009cdc:	d1c0      	bne.n	8009c60 <cmdGPIO+0xc>
        uint8_t portId = strToInt(argv[0], 10);
 8009cde:	210a      	movs	r1, #10
 8009ce0:	4640      	mov	r0, r8
 8009ce2:	f7fc f855 	bl	8005d90 <strToInt>
        if(!strcmp(argv[1], "bus")) {
 8009ce6:	687c      	ldr	r4, [r7, #4]
        uint8_t portId = strToInt(argv[0], 10);
 8009ce8:	4606      	mov	r6, r0
        if(!strcmp(argv[1], "bus")) {
 8009cea:	4927      	ldr	r1, [pc, #156]	; (8009d88 <cmdGPIO+0x134>)
 8009cec:	4620      	mov	r0, r4
 8009cee:	f7fa f813 	bl	8003d18 <strcmp>
 8009cf2:	4680      	mov	r8, r0
 8009cf4:	b968      	cbnz	r0, 8009d12 <cmdGPIO+0xbe>
            if(!strcmp(argv[2], "off")) {
 8009cf6:	4925      	ldr	r1, [pc, #148]	; (8009d8c <cmdGPIO+0x138>)
 8009cf8:	68b8      	ldr	r0, [r7, #8]
        uint8_t portId = strToInt(argv[0], 10);
 8009cfa:	b2f6      	uxtb	r6, r6
            if(!strcmp(argv[2], "off")) {
 8009cfc:	f7fa f80c 	bl	8003d18 <strcmp>
 8009d00:	b928      	cbnz	r0, 8009d0e <cmdGPIO+0xba>
                gpioPortIoDisable(portId, true);
 8009d02:	2101      	movs	r1, #1
                gpioPortIoDisable(portId, false);
 8009d04:	4630      	mov	r0, r6
}
 8009d06:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
                gpioPortIoDisable(portId, false);
 8009d0a:	f7fb bc3f 	b.w	800558c <gpioPortIoDisable>
 8009d0e:	4641      	mov	r1, r8
 8009d10:	e7f8      	b.n	8009d04 <cmdGPIO+0xb0>
            uint8_t pinId = strToInt(argv[1], 10);
 8009d12:	210a      	movs	r1, #10
 8009d14:	4620      	mov	r0, r4
 8009d16:	f7fc f83b 	bl	8005d90 <strToInt>
            uint16_t pin = MAKE_GPIO(portId, pinId);
 8009d1a:	b2c4      	uxtb	r4, r0
 8009d1c:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
            if(!strcmp(argv[2], "output")) {
 8009d20:	68be      	ldr	r6, [r7, #8]
 8009d22:	491b      	ldr	r1, [pc, #108]	; (8009d90 <cmdGPIO+0x13c>)
 8009d24:	4630      	mov	r0, r6
            uint16_t pin = MAKE_GPIO(portId, pinId);
 8009d26:	b2a4      	uxth	r4, r4
            if(!strcmp(argv[2], "output")) {
 8009d28:	f7f9 fff6 	bl	8003d18 <strcmp>
 8009d2c:	b928      	cbnz	r0, 8009d3a <cmdGPIO+0xe6>
                gpioSetPinMode(pin, PAL_MODE_OUTPUT_PUSHPULL);
 8009d2e:	2106      	movs	r1, #6
                gpioSetPinMode(pin, PAL_MODE_INPUT);
 8009d30:	4620      	mov	r0, r4
}
 8009d32:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
                gpioSetPinMode(pin, PAL_MODE_INPUT);
 8009d36:	f7fb bc33 	b.w	80055a0 <gpioSetPinMode>
            } else if(!strcmp(argv[2], "input")) {
 8009d3a:	4630      	mov	r0, r6
 8009d3c:	4915      	ldr	r1, [pc, #84]	; (8009d94 <cmdGPIO+0x140>)
 8009d3e:	f7f9 ffeb 	bl	8003d18 <strcmp>
 8009d42:	b908      	cbnz	r0, 8009d48 <cmdGPIO+0xf4>
                gpioSetPinMode(pin, PAL_MODE_INPUT);
 8009d44:	2102      	movs	r1, #2
 8009d46:	e7f3      	b.n	8009d30 <cmdGPIO+0xdc>
            } else if(!strcmp(argv[2], "set")) {
 8009d48:	4630      	mov	r0, r6
 8009d4a:	4913      	ldr	r1, [pc, #76]	; (8009d98 <cmdGPIO+0x144>)
 8009d4c:	f7f9 ffe4 	bl	8003d18 <strcmp>
 8009d50:	b928      	cbnz	r0, 8009d5e <cmdGPIO+0x10a>
                gpioSetPin(pin, true);
 8009d52:	2101      	movs	r1, #1
 8009d54:	4620      	mov	r0, r4
}
 8009d56:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
                gpioSetPin(pin, false);
 8009d5a:	f7fb bc3f 	b.w	80055dc <gpioSetPin>
            } else if(!strcmp(argv[2], "clear")) {
 8009d5e:	490f      	ldr	r1, [pc, #60]	; (8009d9c <cmdGPIO+0x148>)
 8009d60:	4630      	mov	r0, r6
 8009d62:	f7f9 ffd9 	bl	8003d18 <strcmp>
 8009d66:	4601      	mov	r1, r0
                gpioSetPin(pin, false);
 8009d68:	4620      	mov	r0, r4
            } else if(!strcmp(argv[2], "clear")) {
 8009d6a:	2900      	cmp	r1, #0
 8009d6c:	d0f3      	beq.n	8009d56 <cmdGPIO+0x102>
                chprintf(chp, "Value: %u"SHELL_NEWLINE_STR, gpioGetPin(pin));
 8009d6e:	f7fb fc23 	bl	80055b8 <gpioGetPin>
 8009d72:	490b      	ldr	r1, [pc, #44]	; (8009da0 <cmdGPIO+0x14c>)
 8009d74:	4602      	mov	r2, r0
 8009d76:	4628      	mov	r0, r5
}
 8009d78:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
                chprintf(chp, "Value: %u"SHELL_NEWLINE_STR, gpioGetPin(pin));
 8009d7c:	f7fe bd28 	b.w	80087d0 <chprintf>
 8009d80:	0800bb83 	.word	0x0800bb83
 8009d84:	0800c157 	.word	0x0800c157
 8009d88:	0800bdc6 	.word	0x0800bdc6
 8009d8c:	0800bdca 	.word	0x0800bdca
 8009d90:	0800bdce 	.word	0x0800bdce
 8009d94:	0800bdd5 	.word	0x0800bdd5
 8009d98:	0800bddb 	.word	0x0800bddb
 8009d9c:	0800bddf 	.word	0x0800bddf
 8009da0:	0800bde5 	.word	0x0800bde5
 8009da4:	20000928 	.word	0x20000928
 8009da8:	0800bdaa 	.word	0x0800bdaa
 8009dac:	0800bdb4 	.word	0x0800bdb4

08009db0 <cmdTemp>:

#include <string.h>


void cmdTemp(void* user, BaseSequentialStream *chp, int argc, char *argv[])
{
 8009db0:	b510      	push	{r4, lr}
 8009db2:	460c      	mov	r4, r1
 8009db4:	f7ff f816 	bl	8008de4 <MCP9804MeasureTemperature.part.0>
    (void)argv;
    MCP9804Driver* tempSens = (MCP9804Driver*)user;

    int32_t temp = MCP9804MeasureTemperature(tempSens, true);

    chprintf(chp, "Temperature: %d mC"SHELL_NEWLINE_STR, temp*1000/16);
 8009db8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009dbc:	4342      	muls	r2, r0
 8009dbe:	bf48      	it	mi
 8009dc0:	320f      	addmi	r2, #15
 8009dc2:	4620      	mov	r0, r4
}
 8009dc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    chprintf(chp, "Temperature: %d mC"SHELL_NEWLINE_STR, temp*1000/16);
 8009dc8:	4901      	ldr	r1, [pc, #4]	; (8009dd0 <cmdTemp+0x20>)
 8009dca:	1112      	asrs	r2, r2, #4
 8009dcc:	f7fe bd00 	b.w	80087d0 <chprintf>
 8009dd0:	0800bdf1 	.word	0x0800bdf1

08009dd4 <cmdI2CUsage>:

#include <string.h>
#include <stdlib.h>

static void cmdI2CUsage(BaseSequentialStream *chp)
{
 8009dd4:	b510      	push	{r4, lr}
 8009dd6:	4604      	mov	r4, r0
    chprintf(chp, "Usage:"SHELL_NEWLINE_STR);
 8009dd8:	490c      	ldr	r1, [pc, #48]	; (8009e0c <cmdI2CUsage+0x38>)
 8009dda:	f7fe fcf9 	bl	80087d0 <chprintf>
    chprintf(chp, "\ti2c test"SHELL_NEWLINE_STR);
 8009dde:	4620      	mov	r0, r4
 8009de0:	490b      	ldr	r1, [pc, #44]	; (8009e10 <cmdI2CUsage+0x3c>)
 8009de2:	f7fe fcf5 	bl	80087d0 <chprintf>
    chprintf(chp, "\ti2c scan"SHELL_NEWLINE_STR);
 8009de6:	4620      	mov	r0, r4
 8009de8:	490a      	ldr	r1, [pc, #40]	; (8009e14 <cmdI2CUsage+0x40>)
 8009dea:	f7fe fcf1 	bl	80087d0 <chprintf>
    chprintf(chp, "\ti2c errors"SHELL_NEWLINE_STR);
 8009dee:	4620      	mov	r0, r4
 8009df0:	4909      	ldr	r1, [pc, #36]	; (8009e18 <cmdI2CUsage+0x44>)
 8009df2:	f7fe fced 	bl	80087d0 <chprintf>
    chprintf(chp, "\ti2c get devAddr regAddr [stress]"SHELL_NEWLINE_STR);
 8009df6:	4620      	mov	r0, r4
 8009df8:	4908      	ldr	r1, [pc, #32]	; (8009e1c <cmdI2CUsage+0x48>)
 8009dfa:	f7fe fce9 	bl	80087d0 <chprintf>
    chprintf(chp, "\ti2c set devAddr regAddr regValue [stress]"SHELL_NEWLINE_STR);
 8009dfe:	4620      	mov	r0, r4
}
 8009e00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    chprintf(chp, "\ti2c set devAddr regAddr regValue [stress]"SHELL_NEWLINE_STR);
 8009e04:	4906      	ldr	r1, [pc, #24]	; (8009e20 <cmdI2CUsage+0x4c>)
 8009e06:	f7fe bce3 	b.w	80087d0 <chprintf>
 8009e0a:	bf00      	nop
 8009e0c:	0800b951 	.word	0x0800b951
 8009e10:	0800be06 	.word	0x0800be06
 8009e14:	0800be12 	.word	0x0800be12
 8009e18:	0800be1e 	.word	0x0800be1e
 8009e1c:	0800be2c 	.word	0x0800be2c
 8009e20:	0800be50 	.word	0x0800be50

08009e24 <cmdI2C>:
    }
    chprintf(chp, SHELL_NEWLINE_STR);
}

void cmdI2C(void* user, BaseSequentialStream *chp, int argc, char *argv[])
{
 8009e24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e28:	4606      	mov	r6, r0
 8009e2a:	460c      	mov	r4, r1
 8009e2c:	4698      	mov	r8, r3
    I2CDriver* i2c = (I2CDriver*)user;

    if(argc == 0) {
 8009e2e:	4615      	mov	r5, r2
{
 8009e30:	b087      	sub	sp, #28
    if(argc == 0) {
 8009e32:	b92a      	cbnz	r2, 8009e40 <cmdI2C+0x1c>
        cmdI2CUsage(chp);
 8009e34:	4620      	mov	r0, r4
 8009e36:	f7ff ffcd 	bl	8009dd4 <cmdI2CUsage>
        cmdI2CScan(i2c, chp);
    } else {
        cmdI2CUsage(chp);
        return;
    }
}
 8009e3a:	b007      	add	sp, #28
 8009e3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(!strcmp(argv[0], "test")) {
 8009e40:	681f      	ldr	r7, [r3, #0]
 8009e42:	4969      	ldr	r1, [pc, #420]	; (8009fe8 <cmdI2C+0x1c4>)
 8009e44:	4638      	mov	r0, r7
 8009e46:	f7f9 ff67 	bl	8003d18 <strcmp>
 8009e4a:	b990      	cbnz	r0, 8009e72 <cmdI2C+0x4e>
    i2cAcquireBus(i2c);
 8009e4c:	4630      	mov	r0, r6
 8009e4e:	f7fd fa1f 	bl	8007290 <i2cAcquireBus>
    i2c_result retVal = i2cSafeRawUnclogBus(i2c);
 8009e52:	4630      	mov	r0, r6
 8009e54:	f7fd feae 	bl	8007bb4 <i2cSafeRawUnclogBus>
 8009e58:	4605      	mov	r5, r0
    i2cReleaseBus(i2c);
 8009e5a:	4630      	mov	r0, r6
 8009e5c:	f7fe fa09 	bl	8008272 <i2cReleaseBus>
        chprintf(chp, "Verdict: %s"SHELL_NEWLINE_STR, i2cSafeResultToString(i2cSafeTestBus(i2c)));
 8009e60:	4628      	mov	r0, r5
 8009e62:	f7fb fc6b 	bl	800573c <i2cSafeResultToString>
 8009e66:	4602      	mov	r2, r0
 8009e68:	4960      	ldr	r1, [pc, #384]	; (8009fec <cmdI2C+0x1c8>)
        chprintf(chp, "I2C Errors: %u"SHELL_NEWLINE_STR, i2cSafeGetNumberOfErrors(i2c));
 8009e6a:	4620      	mov	r0, r4
 8009e6c:	f7fe fcb0 	bl	80087d0 <chprintf>
 8009e70:	e7e3      	b.n	8009e3a <cmdI2C+0x16>
    if(!strcmp(argv[0], "set")) {
 8009e72:	4638      	mov	r0, r7
 8009e74:	495e      	ldr	r1, [pc, #376]	; (8009ff0 <cmdI2C+0x1cc>)
 8009e76:	f7f9 ff4f 	bl	8003d18 <strcmp>
 8009e7a:	4681      	mov	r9, r0
 8009e7c:	2800      	cmp	r0, #0
 8009e7e:	d149      	bne.n	8009f14 <cmdI2C+0xf0>
        if(argc<4) return false;
 8009e80:	2d03      	cmp	r5, #3
 8009e82:	dd63      	ble.n	8009f4c <cmdI2C+0x128>
        if(argc>4) stress = true;
 8009e84:	3d04      	subs	r5, #4
        regValue = strToInt(argv[3], 16);
 8009e86:	f04f 0110 	mov.w	r1, #16
 8009e8a:	f8d8 000c 	ldr.w	r0, [r8, #12]
        if(argc>4) stress = true;
 8009e8e:	bf18      	it	ne
 8009e90:	2501      	movne	r5, #1
        regValue = strToInt(argv[3], 16);
 8009e92:	f7fb ff7d 	bl	8005d90 <strToInt>
        wantToRead = false;
 8009e96:	464f      	mov	r7, r9
        regValue = strToInt(argv[3], 16);
 8009e98:	f88d 0016 	strb.w	r0, [sp, #22]
    uint8_t devAddr = strToInt(argv[1], 16);
 8009e9c:	2110      	movs	r1, #16
 8009e9e:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8009ea2:	f7fb ff75 	bl	8005d90 <strToInt>
    uint8_t regAddr = strToInt(argv[2], 16);
 8009ea6:	2110      	movs	r1, #16
    uint8_t devAddr = strToInt(argv[1], 16);
 8009ea8:	fa5f f980 	uxtb.w	r9, r0
    uint8_t regAddr = strToInt(argv[2], 16);
 8009eac:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8009eb0:	f7fb ff6e 	bl	8005d90 <strToInt>
    uint32_t stressCnt = 0;
 8009eb4:	f04f 0a00 	mov.w	sl, #0
    uint8_t regAddr = strToInt(argv[2], 16);
 8009eb8:	9003      	str	r0, [sp, #12]
 8009eba:	f89d b00c 	ldrb.w	fp, [sp, #12]
        if(wantToRead) {
 8009ebe:	b3af      	cbz	r7, 8009f2c <cmdI2C+0x108>
            result = i2cSafeReadRegStandard(i2c, devAddr, regAddr, &regValue);
 8009ec0:	465a      	mov	r2, fp
 8009ec2:	4649      	mov	r1, r9
 8009ec4:	4630      	mov	r0, r6
 8009ec6:	f10d 0316 	add.w	r3, sp, #22
 8009eca:	f7fe ffa9 	bl	8008e20 <i2cSafeReadRegStandard>
    return i2cSafeWriteRegBulkStandard(i2c, devAddr, addr, &value, 1);
 8009ece:	4680      	mov	r8, r0
        if(result != I2C_BUS_OK) {
 8009ed0:	b110      	cbz	r0, 8009ed8 <cmdI2C+0xb4>
            regValue = 0;
 8009ed2:	2300      	movs	r3, #0
 8009ed4:	f88d 3016 	strb.w	r3, [sp, #22]
        if(stress) {
 8009ed8:	b12d      	cbz	r5, 8009ee6 <cmdI2C+0xc2>
            printfFixed(chp, 7, "%u", stressCnt);
 8009eda:	4653      	mov	r3, sl
 8009edc:	2107      	movs	r1, #7
 8009ede:	4620      	mov	r0, r4
 8009ee0:	4a44      	ldr	r2, [pc, #272]	; (8009ff4 <cmdI2C+0x1d0>)
 8009ee2:	f7fe fc51 	bl	8008788 <printfFixed>
        chprintf(chp, "Status: %s, address: 0x%02x, register: 0x%02x, value: 0x%02x"SHELL_NEWLINE_STR,
 8009ee6:	4640      	mov	r0, r8
 8009ee8:	f7fb fc28 	bl	800573c <i2cSafeResultToString>
 8009eec:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8009ef0:	4602      	mov	r2, r0
 8009ef2:	9301      	str	r3, [sp, #4]
 8009ef4:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8009ef8:	4620      	mov	r0, r4
 8009efa:	9300      	str	r3, [sp, #0]
 8009efc:	493e      	ldr	r1, [pc, #248]	; (8009ff8 <cmdI2C+0x1d4>)
 8009efe:	464b      	mov	r3, r9
 8009f00:	f7fe fc66 	bl	80087d0 <chprintf>
        stressCnt++;
 8009f04:	f10a 0a01 	add.w	sl, sl, #1
    } while (stress && stressCnt <= 100000);
 8009f08:	2d00      	cmp	r5, #0
 8009f0a:	d096      	beq.n	8009e3a <cmdI2C+0x16>
 8009f0c:	4b3b      	ldr	r3, [pc, #236]	; (8009ffc <cmdI2C+0x1d8>)
 8009f0e:	459a      	cmp	sl, r3
 8009f10:	d1d5      	bne.n	8009ebe <cmdI2C+0x9a>
 8009f12:	e792      	b.n	8009e3a <cmdI2C+0x16>
    } else if(!strcmp(argv[0], "get")) {
 8009f14:	4638      	mov	r0, r7
 8009f16:	493a      	ldr	r1, [pc, #232]	; (800a000 <cmdI2C+0x1dc>)
 8009f18:	f7f9 fefe 	bl	8003d18 <strcmp>
 8009f1c:	b9b0      	cbnz	r0, 8009f4c <cmdI2C+0x128>
        if(argc<3) return false;
 8009f1e:	2d02      	cmp	r5, #2
 8009f20:	dd14      	ble.n	8009f4c <cmdI2C+0x128>
        if(argc>3) stress = true;
 8009f22:	3d03      	subs	r5, #3
 8009f24:	bf18      	it	ne
 8009f26:	2501      	movne	r5, #1
        wantToRead = true;
 8009f28:	2701      	movs	r7, #1
 8009f2a:	e7b7      	b.n	8009e9c <cmdI2C+0x78>
            result = i2cSafeWriteRegStandard(i2c, devAddr, regAddr, regValue);
 8009f2c:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8009f30:	f88d 3017 	strb.w	r3, [sp, #23]
    osalDbgAssert(i2c != NULL, "i2c == NULL");
 8009f34:	b916      	cbnz	r6, 8009f3c <cmdI2C+0x118>
 8009f36:	f7fa fa03 	bl	8004340 <vTaskEndScheduler>
 8009f3a:	e7fe      	b.n	8009f3a <cmdI2C+0x116>
    return i2cSafeWriteRegBulkStandard(i2c, devAddr, addr, &value, 1);
 8009f3c:	465a      	mov	r2, fp
 8009f3e:	4649      	mov	r1, r9
 8009f40:	4630      	mov	r0, r6
 8009f42:	f10d 0317 	add.w	r3, sp, #23
 8009f46:	f7fe ff07 	bl	8008d58 <i2cSafeWriteRegBulkStandard.constprop.0>
 8009f4a:	e7c0      	b.n	8009ece <cmdI2C+0xaa>
    } else if(!strcmp(argv[0], "errors")) {
 8009f4c:	4638      	mov	r0, r7
 8009f4e:	492d      	ldr	r1, [pc, #180]	; (800a004 <cmdI2C+0x1e0>)
 8009f50:	f7f9 fee2 	bl	8003d18 <strcmp>
 8009f54:	b940      	cbnz	r0, 8009f68 <cmdI2C+0x144>

uint32_t i2cSafeGetNumberOfErrors(I2CDriver* i2c)
{
    osalSysLock();
 8009f56:	f7fa f945 	bl	80041e4 <vPortEnterCritical>
    uint32_t result = i2c->i2cErrors;
 8009f5a:	f8d6 0084 	ldr.w	r0, [r6, #132]	; 0x84
    osalSysUnlock();
 8009f5e:	f7fb fc79 	bl	8005854 <osalSysUnlock.lto_priv.0>
        chprintf(chp, "I2C Errors: %u"SHELL_NEWLINE_STR, i2cSafeGetNumberOfErrors(i2c));
 8009f62:	4929      	ldr	r1, [pc, #164]	; (800a008 <cmdI2C+0x1e4>)
 8009f64:	4602      	mov	r2, r0
 8009f66:	e780      	b.n	8009e6a <cmdI2C+0x46>
    } else if(!strcmp(argv[0], "scan")) {
 8009f68:	4638      	mov	r0, r7
 8009f6a:	4928      	ldr	r1, [pc, #160]	; (800a00c <cmdI2C+0x1e8>)
 8009f6c:	f7f9 fed4 	bl	8003d18 <strcmp>
 8009f70:	4605      	mov	r5, r0
 8009f72:	2800      	cmp	r0, #0
 8009f74:	f47f af5e 	bne.w	8009e34 <cmdI2C+0x10>
    chprintf(chp, "   ");
 8009f78:	4620      	mov	r0, r4
 8009f7a:	4925      	ldr	r1, [pc, #148]	; (800a010 <cmdI2C+0x1ec>)
 8009f7c:	f7fe fc28 	bl	80087d0 <chprintf>
    for(int addr = 0; addr <= 0xF; addr++) {
 8009f80:	462f      	mov	r7, r5
        chprintf(chp, "%1x  ", addr);
 8009f82:	f8df 809c 	ldr.w	r8, [pc, #156]	; 800a020 <cmdI2C+0x1fc>
 8009f86:	463a      	mov	r2, r7
 8009f88:	4641      	mov	r1, r8
 8009f8a:	4620      	mov	r0, r4
    for(int addr = 0; addr <= 0xF; addr++) {
 8009f8c:	3701      	adds	r7, #1
        chprintf(chp, "%1x  ", addr);
 8009f8e:	f7fe fc1f 	bl	80087d0 <chprintf>
    for(int addr = 0; addr <= 0xF; addr++) {
 8009f92:	2f10      	cmp	r7, #16
 8009f94:	d1f7      	bne.n	8009f86 <cmdI2C+0x162>
            chprintf(chp, SHELL_NEWLINE_STR"%1x ", addr/16);
 8009f96:	4f1f      	ldr	r7, [pc, #124]	; (800a014 <cmdI2C+0x1f0>)
            chprintf(chp, "EE ");
 8009f98:	f8df 8088 	ldr.w	r8, [pc, #136]	; 800a024 <cmdI2C+0x200>
            chprintf(chp, "-- ");
 8009f9c:	f8df 9088 	ldr.w	r9, [pc, #136]	; 800a028 <cmdI2C+0x204>
        if(addr % 16 == 0) {
 8009fa0:	072b      	lsls	r3, r5, #28
 8009fa2:	d104      	bne.n	8009fae <cmdI2C+0x18a>
            chprintf(chp, SHELL_NEWLINE_STR"%1x ", addr/16);
 8009fa4:	4639      	mov	r1, r7
 8009fa6:	4620      	mov	r0, r4
 8009fa8:	112a      	asrs	r2, r5, #4
 8009faa:	f7fe fc11 	bl	80087d0 <chprintf>
        i2c_result result = i2cSafeReadRegStandard(i2c, addr, 0, &regValue);
 8009fae:	2200      	movs	r2, #0
 8009fb0:	4630      	mov	r0, r6
 8009fb2:	f10d 0317 	add.w	r3, sp, #23
 8009fb6:	b2e9      	uxtb	r1, r5
 8009fb8:	f7fe ff32 	bl	8008e20 <i2cSafeReadRegStandard>
        if(result == I2C_BUS_OK) {
 8009fbc:	b960      	cbnz	r0, 8009fd8 <cmdI2C+0x1b4>
            chprintf(chp, "%02x ", addr);
 8009fbe:	462a      	mov	r2, r5
 8009fc0:	4620      	mov	r0, r4
 8009fc2:	4915      	ldr	r1, [pc, #84]	; (800a018 <cmdI2C+0x1f4>)
 8009fc4:	f7fe fc04 	bl	80087d0 <chprintf>
    for(int addr = 0; addr <= 0x7F; addr++) {
 8009fc8:	3501      	adds	r5, #1
 8009fca:	2d80      	cmp	r5, #128	; 0x80
 8009fcc:	d1e8      	bne.n	8009fa0 <cmdI2C+0x17c>
    chprintf(chp, SHELL_NEWLINE_STR);
 8009fce:	4620      	mov	r0, r4
 8009fd0:	4912      	ldr	r1, [pc, #72]	; (800a01c <cmdI2C+0x1f8>)
 8009fd2:	f7fe fbfd 	bl	80087d0 <chprintf>
 8009fd6:	e730      	b.n	8009e3a <cmdI2C+0x16>
        } else if(result == I2C_BUS_RESET) {
 8009fd8:	3002      	adds	r0, #2
            chprintf(chp, "-- ");
 8009fda:	bf0c      	ite	eq
 8009fdc:	4649      	moveq	r1, r9
            chprintf(chp, "EE ");
 8009fde:	4641      	movne	r1, r8
 8009fe0:	4620      	mov	r0, r4
 8009fe2:	f7fe fbf5 	bl	80087d0 <chprintf>
 8009fe6:	e7ef      	b.n	8009fc8 <cmdI2C+0x1a4>
 8009fe8:	0800be7d 	.word	0x0800be7d
 8009fec:	0800be82 	.word	0x0800be82
 8009ff0:	0800bddb 	.word	0x0800bddb
 8009ff4:	0800bbda 	.word	0x0800bbda
 8009ff8:	0800be94 	.word	0x0800be94
 8009ffc:	000186a1 	.word	0x000186a1
 800a000:	0800be90 	.word	0x0800be90
 800a004:	0800bed3 	.word	0x0800bed3
 800a008:	0800beda 	.word	0x0800beda
 800a00c:	0800beeb 	.word	0x0800beeb
 800a010:	0800c509 	.word	0x0800c509
 800a014:	0800bef6 	.word	0x0800bef6
 800a018:	0800befd 	.word	0x0800befd
 800a01c:	0800c157 	.word	0x0800c157
 800a020:	0800bef0 	.word	0x0800bef0
 800a024:	0800bf07 	.word	0x0800bf07
 800a028:	0800bf03 	.word	0x0800bf03

0800a02c <cmdSof>:

void cmdSof(void* user, BaseSequentialStream *chp, int argc, char *argv[])
{
    (void) user;

    if(argc > 0) {
 800a02c:	2a00      	cmp	r2, #0
{
 800a02e:	b538      	push	{r3, r4, r5, lr}
 800a030:	460c      	mov	r4, r1
 800a032:	4d16      	ldr	r5, [pc, #88]	; (800a08c <cmdSof+0x60>)
    if(argc > 0) {
 800a034:	dd06      	ble.n	800a044 <cmdSof+0x18>
        if(!strcmp(argv[0],"1")) {
 800a036:	4916      	ldr	r1, [pc, #88]	; (800a090 <cmdSof+0x64>)
 800a038:	6818      	ldr	r0, [r3, #0]
 800a03a:	f7f9 fe6d 	bl	8003d18 <strcmp>
 800a03e:	b9f0      	cbnz	r0, 800a07e <cmdSof+0x52>
    allowDisableSOF = doIt;
 800a040:	2301      	movs	r3, #1
 800a042:	702b      	strb	r3, [r5, #0]
            usbDisableSOF(true);
        } else {
            usbDisableSOF(false);
        }
    }
    printfFixed(chp, 21, "SoF Disable Allowed:");
 800a044:	2115      	movs	r1, #21
 800a046:	4a13      	ldr	r2, [pc, #76]	; (800a094 <cmdSof+0x68>)
 800a048:	4620      	mov	r0, r4
 800a04a:	f7fe fb9d 	bl	8008788 <printfFixed>
    osalSysLock();
 800a04e:	f7fa f8c9 	bl	80041e4 <vPortEnterCritical>
    uint32_t count = sofCounter;
 800a052:	4b11      	ldr	r3, [pc, #68]	; (800a098 <cmdSof+0x6c>)
    if(sofDisableAllowed) *sofDisableAllowed=allowDisableSOF;
 800a054:	7828      	ldrb	r0, [r5, #0]
    uint32_t count = sofCounter;
 800a056:	681d      	ldr	r5, [r3, #0]
    osalSysUnlock();
 800a058:	f7fb fbfc 	bl	8005854 <osalSysUnlock.lto_priv.0>
    bool allowDisable;
    uint32_t cnt = usbGetSofCounter(&allowDisable);
    chprintf(chp, "%u"SHELL_NEWLINE_STR, allowDisable);
 800a05c:	490f      	ldr	r1, [pc, #60]	; (800a09c <cmdSof+0x70>)
 800a05e:	4602      	mov	r2, r0
 800a060:	4620      	mov	r0, r4
 800a062:	f7fe fbb5 	bl	80087d0 <chprintf>
    printfFixed(chp, 21, "SoF Count:");
 800a066:	2115      	movs	r1, #21
 800a068:	4620      	mov	r0, r4
 800a06a:	4a0d      	ldr	r2, [pc, #52]	; (800a0a0 <cmdSof+0x74>)
 800a06c:	f7fe fb8c 	bl	8008788 <printfFixed>
    chprintf(chp, "%u"SHELL_NEWLINE_STR, cnt);
 800a070:	462a      	mov	r2, r5
 800a072:	4620      	mov	r0, r4
}
 800a074:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    chprintf(chp, "%u"SHELL_NEWLINE_STR, cnt);
 800a078:	4908      	ldr	r1, [pc, #32]	; (800a09c <cmdSof+0x70>)
 800a07a:	f7fe bba9 	b.w	80087d0 <chprintf>
    allowDisableSOF = doIt;
 800a07e:	2300      	movs	r3, #0
        sofNeededCallback(&USBD1, true);
 800a080:	2101      	movs	r1, #1
 800a082:	4808      	ldr	r0, [pc, #32]	; (800a0a4 <cmdSof+0x78>)
    allowDisableSOF = doIt;
 800a084:	702b      	strb	r3, [r5, #0]
        sofNeededCallback(&USBD1, true);
 800a086:	f7fb fd23 	bl	8005ad0 <sofNeededCallback>
 800a08a:	e7db      	b.n	800a044 <cmdSof+0x18>
 800a08c:	20000800 	.word	0x20000800
 800a090:	0800c4dc 	.word	0x0800c4dc
 800a094:	0800bf0b 	.word	0x0800bf0b
 800a098:	200012c8 	.word	0x200012c8
 800a09c:	0800bc5d 	.word	0x0800bc5d
 800a0a0:	0800bf20 	.word	0x0800bf20
 800a0a4:	20000f54 	.word	0x20000f54

0800a0a8 <cmdMaxUsage>:
#include <string.h>
#include <stdlib.h>


static void cmdMaxUsage(BaseSequentialStream* chp)
{
 800a0a8:	b510      	push	{r4, lr}
 800a0aa:	4604      	mov	r4, r0
    chprintf(chp, "Usage:"SHELL_NEWLINE_STR);
 800a0ac:	490e      	ldr	r1, [pc, #56]	; (800a0e8 <cmdMaxUsage+0x40>)
 800a0ae:	f7fe fb8f 	bl	80087d0 <chprintf>
    chprintf(chp, "\tmax tune [freqkHz] [power] [forceVAS]"SHELL_NEWLINE_STR);
 800a0b2:	4620      	mov	r0, r4
 800a0b4:	490d      	ldr	r1, [pc, #52]	; (800a0ec <cmdMaxUsage+0x44>)
 800a0b6:	f7fe fb8b 	bl	80087d0 <chprintf>
    chprintf(chp, "\tmax status"SHELL_NEWLINE_STR);
 800a0ba:	4620      	mov	r0, r4
 800a0bc:	490c      	ldr	r1, [pc, #48]	; (800a0f0 <cmdMaxUsage+0x48>)
 800a0be:	f7fe fb87 	bl	80087d0 <chprintf>
    chprintf(chp, "\tmax vcocache"SHELL_NEWLINE_STR);
 800a0c2:	4620      	mov	r0, r4
 800a0c4:	490b      	ldr	r1, [pc, #44]	; (800a0f4 <cmdMaxUsage+0x4c>)
 800a0c6:	f7fe fb83 	bl	80087d0 <chprintf>
    chprintf(chp, "\tmax vcocache calibrate"SHELL_NEWLINE_STR);
 800a0ca:	4620      	mov	r0, r4
 800a0cc:	490a      	ldr	r1, [pc, #40]	; (800a0f8 <cmdMaxUsage+0x50>)
 800a0ce:	f7fe fb7f 	bl	80087d0 <chprintf>
    chprintf(chp, "\tmax vcocache set index value"SHELL_NEWLINE_STR);
 800a0d2:	4620      	mov	r0, r4
 800a0d4:	4909      	ldr	r1, [pc, #36]	; (800a0fc <cmdMaxUsage+0x54>)
 800a0d6:	f7fe fb7b 	bl	80087d0 <chprintf>
    chprintf(chp, "\tmax dld"SHELL_NEWLINE_STR);
 800a0da:	4620      	mov	r0, r4
}
 800a0dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    chprintf(chp, "\tmax dld"SHELL_NEWLINE_STR);
 800a0e0:	4907      	ldr	r1, [pc, #28]	; (800a100 <cmdMaxUsage+0x58>)
 800a0e2:	f7fe bb75 	b.w	80087d0 <chprintf>
 800a0e6:	bf00      	nop
 800a0e8:	0800b951 	.word	0x0800b951
 800a0ec:	0800bf2b 	.word	0x0800bf2b
 800a0f0:	0800bf54 	.word	0x0800bf54
 800a0f4:	0800bf62 	.word	0x0800bf62
 800a0f8:	0800bf72 	.word	0x0800bf72
 800a0fc:	0800bf8c 	.word	0x0800bf8c
 800a100:	0800bfac 	.word	0x0800bfac

0800a104 <cmdThreadInfo>:
    else if(state == eDeleted) printfFixed(chp, 9, "Deleted");
    else printfFixed(chp, 9, "Invalid");
}

void cmdThreadInfo(void* user, BaseSequentialStream *chp, int argc, char *argv[])
{
 800a104:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    (void)argc;
    (void)argv;
    (void) user;

    unsigned int numberOfTasks = uxTaskGetNumberOfTasks();
    TaskStatus_t* taskStatusArray = pvPortMalloc(numberOfTasks * sizeof(TaskStatus_t));
 800a108:	2724      	movs	r7, #36	; 0x24
 800a10a:	f8df 82d0 	ldr.w	r8, [pc, #720]	; 800a3dc <cmdThreadInfo+0x2d8>
{
 800a10e:	460c      	mov	r4, r1
 800a110:	f8d8 5000 	ldr.w	r5, [r8]
    TaskStatus_t* taskStatusArray = pvPortMalloc(numberOfTasks * sizeof(TaskStatus_t));
 800a114:	fb07 f005 	mul.w	r0, r7, r5
 800a118:	f7fb f888 	bl	800522c <pvPortMalloc>
    if(!taskStatusArray) {
 800a11c:	4606      	mov	r6, r0
 800a11e:	2800      	cmp	r0, #0
 800a120:	f000 8097 	beq.w	800a252 <cmdThreadInfo+0x14e>
 800a124:	f7fa f904 	bl	8004330 <vTaskSuspendAll>
 800a128:	f8d8 3000 	ldr.w	r3, [r8]
 800a12c:	429d      	cmp	r5, r3
 800a12e:	f0c0 8093 	bcc.w	800a258 <cmdThreadInfo+0x154>
 800a132:	f04f 0805 	mov.w	r8, #5
 800a136:	2500      	movs	r5, #0
 800a138:	f04f 0a14 	mov.w	sl, #20
 800a13c:	f8df 92a0 	ldr.w	r9, [pc, #672]	; 800a3e0 <cmdThreadInfo+0x2dc>
 800a140:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800a144:	fb07 6005 	mla	r0, r7, r5, r6
 800a148:	2201      	movs	r2, #1
 800a14a:	fb0a 9108 	mla	r1, sl, r8, r9
 800a14e:	f7fa fca9 	bl	8004aa4 <prvListTasksWithinSingleList>
 800a152:	4405      	add	r5, r0
 800a154:	f1b8 0f00 	cmp.w	r8, #0
 800a158:	d1f2      	bne.n	800a140 <cmdThreadInfo+0x3c>
 800a15a:	4b83      	ldr	r3, [pc, #524]	; (800a368 <cmdThreadInfo+0x264>)
 800a15c:	2202      	movs	r2, #2
 800a15e:	6819      	ldr	r1, [r3, #0]
 800a160:	fb07 6005 	mla	r0, r7, r5, r6
 800a164:	f7fa fc9e 	bl	8004aa4 <prvListTasksWithinSingleList>
 800a168:	4b80      	ldr	r3, [pc, #512]	; (800a36c <cmdThreadInfo+0x268>)
 800a16a:	4405      	add	r5, r0
 800a16c:	6819      	ldr	r1, [r3, #0]
 800a16e:	2202      	movs	r2, #2
 800a170:	fb07 6005 	mla	r0, r7, r5, r6
 800a174:	f7fa fc96 	bl	8004aa4 <prvListTasksWithinSingleList>
 800a178:	4405      	add	r5, r0
 800a17a:	2204      	movs	r2, #4
 800a17c:	fb07 6005 	mla	r0, r7, r5, r6
 800a180:	497b      	ldr	r1, [pc, #492]	; (800a370 <cmdThreadInfo+0x26c>)
 800a182:	f7fa fc8f 	bl	8004aa4 <prvListTasksWithinSingleList>
 800a186:	4405      	add	r5, r0
 800a188:	fb07 6005 	mla	r0, r7, r5, r6
 800a18c:	2203      	movs	r2, #3
 800a18e:	4979      	ldr	r1, [pc, #484]	; (800a374 <cmdThreadInfo+0x270>)
 800a190:	f7fa fc88 	bl	8004aa4 <prvListTasksWithinSingleList>
 800a194:	4405      	add	r5, r0
 800a196:	f7fa fc05 	bl	80049a4 <xTaskResumeAll>
        return;
    }

    uint32_t totalRunTime;
    unsigned int  result = uxTaskGetSystemState(taskStatusArray, numberOfTasks, &totalRunTime);
    printfFixed(chp, 13, "Task ID");
 800a19a:	210d      	movs	r1, #13
 800a19c:	4a76      	ldr	r2, [pc, #472]	; (800a378 <cmdThreadInfo+0x274>)
 800a19e:	4620      	mov	r0, r4
 800a1a0:	f7fe faf2 	bl	8008788 <printfFixed>
    printfFixed(chp, 10, "Task Name");
 800a1a4:	210a      	movs	r1, #10
 800a1a6:	4a75      	ldr	r2, [pc, #468]	; (800a37c <cmdThreadInfo+0x278>)
 800a1a8:	4620      	mov	r0, r4
 800a1aa:	f7fe faed 	bl	8008788 <printfFixed>
    printfFixed(chp, 11, "Stack Base");
 800a1ae:	210b      	movs	r1, #11
 800a1b0:	4a73      	ldr	r2, [pc, #460]	; (800a380 <cmdThreadInfo+0x27c>)
 800a1b2:	4620      	mov	r0, r4
 800a1b4:	f7fe fae8 	bl	8008788 <printfFixed>
    printfFixed(chp, 11, "Free Stack");
 800a1b8:	210b      	movs	r1, #11
 800a1ba:	4a72      	ldr	r2, [pc, #456]	; (800a384 <cmdThreadInfo+0x280>)
 800a1bc:	4620      	mov	r0, r4
 800a1be:	f7fe fae3 	bl	8008788 <printfFixed>
    printfFixed(chp, 6, "PrioB");
 800a1c2:	2106      	movs	r1, #6
 800a1c4:	4a70      	ldr	r2, [pc, #448]	; (800a388 <cmdThreadInfo+0x284>)
 800a1c6:	4620      	mov	r0, r4
 800a1c8:	f7fe fade 	bl	8008788 <printfFixed>
#if configUSE_MUTEXES
    printfFixed(chp, 6, "PrioC");
 800a1cc:	2106      	movs	r1, #6
 800a1ce:	4a6f      	ldr	r2, [pc, #444]	; (800a38c <cmdThreadInfo+0x288>)
 800a1d0:	4620      	mov	r0, r4
 800a1d2:	f7fe fad9 	bl	8008788 <printfFixed>
#endif
    printfFixed(chp, 9, "State");
 800a1d6:	2109      	movs	r1, #9
 800a1d8:	4a6d      	ldr	r2, [pc, #436]	; (800a390 <cmdThreadInfo+0x28c>)
 800a1da:	4620      	mov	r0, r4
 800a1dc:	f7fe fad4 	bl	8008788 <printfFixed>
    chprintf(chp,SHELL_NEWLINE_STR);
 800a1e0:	4620      	mov	r0, r4
 800a1e2:	496c      	ldr	r1, [pc, #432]	; (800a394 <cmdThreadInfo+0x290>)
 800a1e4:	f7fe faf4 	bl	80087d0 <chprintf>
    for(unsigned int i = 0; i<result; i++) {
 800a1e8:	2024      	movs	r0, #36	; 0x24
 800a1ea:	4637      	mov	r7, r6
 800a1ec:	fb00 6505 	mla	r5, r0, r5, r6
        printfFixed(chp, 13, "%u=%08x ", taskStatusArray[i].xTaskNumber, taskStatusArray[i].xHandle);
 800a1f0:	f8df 81f0 	ldr.w	r8, [pc, #496]	; 800a3e4 <cmdThreadInfo+0x2e0>
        if(!strcmp("IDLE", taskStatusArray[i].pcTaskName)) {
 800a1f4:	f8df 91f0 	ldr.w	r9, [pc, #496]	; 800a3e8 <cmdThreadInfo+0x2e4>
            printfFixed(chp, 10, "Idle");
        } else {
            printfFixed(chp, 10, "%s", taskStatusArray[i].pcTaskName);
 800a1f8:	f8df a1f0 	ldr.w	sl, [pc, #496]	; 800a3ec <cmdThreadInfo+0x2e8>
    for(unsigned int i = 0; i<result; i++) {
 800a1fc:	42af      	cmp	r7, r5
 800a1fe:	d12d      	bne.n	800a25c <cmdThreadInfo+0x158>
            cmdThreadPrintState(chp, taskStatusArray[i].eCurrentState);
        }
        chprintf(chp,SHELL_NEWLINE_STR);
    }

    vPortFree(taskStatusArray);
 800a200:	4630      	mov	r0, r6
    printfFixed(chp, 11, "Descriptor");
    printfFixed(chp, 11, "Callback");
    chprintf(chp, "State"SHELL_NEWLINE_STR);

    MonitorEntry* entry = monThreadFirst;
    unsigned int index = 0;
 800a202:	2600      	movs	r6, #0
 800a204:	f7fa ff66 	bl	80050d4 <vPortFree>
    chprintf(chp,SHELL_NEWLINE_STR);
 800a208:	4962      	ldr	r1, [pc, #392]	; (800a394 <cmdThreadInfo+0x290>)
 800a20a:	4620      	mov	r0, r4
 800a20c:	f7fe fae0 	bl	80087d0 <chprintf>
    printfFixed(chp, 13, "Monitor ID");
 800a210:	210d      	movs	r1, #13
 800a212:	4a61      	ldr	r2, [pc, #388]	; (800a398 <cmdThreadInfo+0x294>)
 800a214:	4620      	mov	r0, r4
 800a216:	f7fe fab7 	bl	8008788 <printfFixed>
    printfFixed(chp, 10, "Task Name");
 800a21a:	210a      	movs	r1, #10
 800a21c:	4a57      	ldr	r2, [pc, #348]	; (800a37c <cmdThreadInfo+0x278>)
 800a21e:	4620      	mov	r0, r4
 800a220:	f7fe fab2 	bl	8008788 <printfFixed>
    printfFixed(chp, 11, "Descriptor");
 800a224:	210b      	movs	r1, #11
 800a226:	4a5d      	ldr	r2, [pc, #372]	; (800a39c <cmdThreadInfo+0x298>)
 800a228:	4620      	mov	r0, r4
 800a22a:	f7fe faad 	bl	8008788 <printfFixed>
    printfFixed(chp, 11, "Callback");
 800a22e:	210b      	movs	r1, #11
 800a230:	4a5b      	ldr	r2, [pc, #364]	; (800a3a0 <cmdThreadInfo+0x29c>)
 800a232:	4620      	mov	r0, r4
 800a234:	f7fe faa8 	bl	8008788 <printfFixed>
    chprintf(chp, "State"SHELL_NEWLINE_STR);
 800a238:	4620      	mov	r0, r4
 800a23a:	495a      	ldr	r1, [pc, #360]	; (800a3a4 <cmdThreadInfo+0x2a0>)
 800a23c:	f7fe fac8 	bl	80087d0 <chprintf>
    MonitorEntry* entry = monThreadFirst;
 800a240:	4b59      	ldr	r3, [pc, #356]	; (800a3a8 <cmdThreadInfo+0x2a4>)
    while(entry) {
        printfFixed(chp, 13, "%u", index);
 800a242:	4f5a      	ldr	r7, [pc, #360]	; (800a3ac <cmdThreadInfo+0x2a8>)
    MonitorEntry* entry = monThreadFirst;
 800a244:	681d      	ldr	r5, [r3, #0]
        if(entry->name) {
            printfFixed(chp, 10, "%s",entry->name);
        } else {
            printfFixed(chp, 10, "");
 800a246:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a3f0 <cmdThreadInfo+0x2ec>
            printfFixed(chp, 10, "%s",entry->name);
 800a24a:	f8df 91a0 	ldr.w	r9, [pc, #416]	; 800a3ec <cmdThreadInfo+0x2e8>
    while(entry) {
 800a24e:	2d00      	cmp	r5, #0
 800a250:	d15f      	bne.n	800a312 <cmdThreadInfo+0x20e>
    monitorPrintStatus(chp);
}
 800a252:	b003      	add	sp, #12
 800a254:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a258:	2500      	movs	r5, #0
 800a25a:	e79c      	b.n	800a196 <cmdThreadInfo+0x92>
        printfFixed(chp, 13, "%u=%08x ", taskStatusArray[i].xTaskNumber, taskStatusArray[i].xHandle);
 800a25c:	683b      	ldr	r3, [r7, #0]
 800a25e:	210d      	movs	r1, #13
 800a260:	9300      	str	r3, [sp, #0]
 800a262:	4642      	mov	r2, r8
 800a264:	4620      	mov	r0, r4
 800a266:	68bb      	ldr	r3, [r7, #8]
 800a268:	f7fe fa8e 	bl	8008788 <printfFixed>
        if(!strcmp("IDLE", taskStatusArray[i].pcTaskName)) {
 800a26c:	f8d7 b004 	ldr.w	fp, [r7, #4]
 800a270:	4648      	mov	r0, r9
 800a272:	4659      	mov	r1, fp
 800a274:	f7f9 fd50 	bl	8003d18 <strcmp>
 800a278:	bb80      	cbnz	r0, 800a2dc <cmdThreadInfo+0x1d8>
            printfFixed(chp, 10, "Idle");
 800a27a:	210a      	movs	r1, #10
 800a27c:	4620      	mov	r0, r4
 800a27e:	4a4c      	ldr	r2, [pc, #304]	; (800a3b0 <cmdThreadInfo+0x2ac>)
 800a280:	f7fe fa82 	bl	8008788 <printfFixed>
        printfFixed(chp, 11, "%08x", taskStatusArray[i].pxStackBase);
 800a284:	210b      	movs	r1, #11
 800a286:	69fb      	ldr	r3, [r7, #28]
 800a288:	4a4a      	ldr	r2, [pc, #296]	; (800a3b4 <cmdThreadInfo+0x2b0>)
 800a28a:	4620      	mov	r0, r4
 800a28c:	f7fe fa7c 	bl	8008788 <printfFixed>
        printfFixed(chp, 11, "%u", (uint32_t)taskStatusArray[i].usStackHighWaterMark);
 800a290:	210b      	movs	r1, #11
 800a292:	8c3b      	ldrh	r3, [r7, #32]
 800a294:	4a45      	ldr	r2, [pc, #276]	; (800a3ac <cmdThreadInfo+0x2a8>)
 800a296:	4620      	mov	r0, r4
 800a298:	f7fe fa76 	bl	8008788 <printfFixed>
        printfFixed(chp, 6, "%u", taskStatusArray[i].uxBasePriority);
 800a29c:	2106      	movs	r1, #6
 800a29e:	697b      	ldr	r3, [r7, #20]
 800a2a0:	4a42      	ldr	r2, [pc, #264]	; (800a3ac <cmdThreadInfo+0x2a8>)
 800a2a2:	4620      	mov	r0, r4
 800a2a4:	f7fe fa70 	bl	8008788 <printfFixed>
        printfFixed(chp, 6, "%u", taskStatusArray[i].uxCurrentPriority);
 800a2a8:	2106      	movs	r1, #6
 800a2aa:	693b      	ldr	r3, [r7, #16]
 800a2ac:	4a3f      	ldr	r2, [pc, #252]	; (800a3ac <cmdThreadInfo+0x2a8>)
 800a2ae:	4620      	mov	r0, r4
 800a2b0:	f7fe fa6a 	bl	8008788 <printfFixed>
        if(taskStatusArray[i].xHandle == xGetCurrentTaskHandle()) {
 800a2b4:	6838      	ldr	r0, [r7, #0]
 800a2b6:	f7f9 ff95 	bl	80041e4 <vPortEnterCritical>
 800a2ba:	4b3f      	ldr	r3, [pc, #252]	; (800a3b8 <cmdThreadInfo+0x2b4>)
 800a2bc:	6819      	ldr	r1, [r3, #0]
 800a2be:	f7f9 ff85 	bl	80041cc <vPortExitCritical>
 800a2c2:	4288      	cmp	r0, r1
 800a2c4:	d111      	bne.n	800a2ea <cmdThreadInfo+0x1e6>
    if(state == eRunning) printfFixed(chp, 9, "Running");
 800a2c6:	4a3d      	ldr	r2, [pc, #244]	; (800a3bc <cmdThreadInfo+0x2b8>)
    else printfFixed(chp, 9, "Invalid");
 800a2c8:	2109      	movs	r1, #9
 800a2ca:	4620      	mov	r0, r4
 800a2cc:	f7fe fa5c 	bl	8008788 <printfFixed>
        chprintf(chp,SHELL_NEWLINE_STR);
 800a2d0:	4620      	mov	r0, r4
 800a2d2:	4930      	ldr	r1, [pc, #192]	; (800a394 <cmdThreadInfo+0x290>)
 800a2d4:	f7fe fa7c 	bl	80087d0 <chprintf>
    for(unsigned int i = 0; i<result; i++) {
 800a2d8:	3724      	adds	r7, #36	; 0x24
 800a2da:	e78f      	b.n	800a1fc <cmdThreadInfo+0xf8>
            printfFixed(chp, 10, "%s", taskStatusArray[i].pcTaskName);
 800a2dc:	465b      	mov	r3, fp
 800a2de:	4652      	mov	r2, sl
 800a2e0:	210a      	movs	r1, #10
 800a2e2:	4620      	mov	r0, r4
 800a2e4:	f7fe fa50 	bl	8008788 <printfFixed>
 800a2e8:	e7cc      	b.n	800a284 <cmdThreadInfo+0x180>
            cmdThreadPrintState(chp, taskStatusArray[i].eCurrentState);
 800a2ea:	7b3b      	ldrb	r3, [r7, #12]
    if(state == eRunning) printfFixed(chp, 9, "Running");
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d0ea      	beq.n	800a2c6 <cmdThreadInfo+0x1c2>
    else if(state == eReady) printfFixed(chp, 9, "Ready");
 800a2f0:	2b01      	cmp	r3, #1
 800a2f2:	d101      	bne.n	800a2f8 <cmdThreadInfo+0x1f4>
 800a2f4:	4a32      	ldr	r2, [pc, #200]	; (800a3c0 <cmdThreadInfo+0x2bc>)
 800a2f6:	e7e7      	b.n	800a2c8 <cmdThreadInfo+0x1c4>
    else if(state == eBlocked) printfFixed(chp, 9, "Blocked");
 800a2f8:	2b02      	cmp	r3, #2
 800a2fa:	d101      	bne.n	800a300 <cmdThreadInfo+0x1fc>
 800a2fc:	4a31      	ldr	r2, [pc, #196]	; (800a3c4 <cmdThreadInfo+0x2c0>)
 800a2fe:	e7e3      	b.n	800a2c8 <cmdThreadInfo+0x1c4>
    else if(state == eSuspended) printfFixed(chp, 9, "Suspended");
 800a300:	2b03      	cmp	r3, #3
 800a302:	d101      	bne.n	800a308 <cmdThreadInfo+0x204>
 800a304:	4a30      	ldr	r2, [pc, #192]	; (800a3c8 <cmdThreadInfo+0x2c4>)
 800a306:	e7df      	b.n	800a2c8 <cmdThreadInfo+0x1c4>
    else if(state == eDeleted) printfFixed(chp, 9, "Deleted");
 800a308:	2b04      	cmp	r3, #4
 800a30a:	bf0c      	ite	eq
 800a30c:	4a2f      	ldreq	r2, [pc, #188]	; (800a3cc <cmdThreadInfo+0x2c8>)
    else printfFixed(chp, 9, "Invalid");
 800a30e:	4a30      	ldrne	r2, [pc, #192]	; (800a3d0 <cmdThreadInfo+0x2cc>)
 800a310:	e7da      	b.n	800a2c8 <cmdThreadInfo+0x1c4>
        printfFixed(chp, 13, "%u", index);
 800a312:	4633      	mov	r3, r6
 800a314:	463a      	mov	r2, r7
 800a316:	210d      	movs	r1, #13
 800a318:	4620      	mov	r0, r4
 800a31a:	f7fe fa35 	bl	8008788 <printfFixed>
        if(entry->name) {
 800a31e:	68eb      	ldr	r3, [r5, #12]
 800a320:	b1cb      	cbz	r3, 800a356 <cmdThreadInfo+0x252>
            printfFixed(chp, 10, "%s",entry->name);
 800a322:	464a      	mov	r2, r9
 800a324:	210a      	movs	r1, #10
 800a326:	4620      	mov	r0, r4
 800a328:	f7fe fa2e 	bl	8008788 <printfFixed>
        }
        printfFixed(chp, 11, "%08x", entry);
 800a32c:	462b      	mov	r3, r5
 800a32e:	210b      	movs	r1, #11
 800a330:	4a20      	ldr	r2, [pc, #128]	; (800a3b4 <cmdThreadInfo+0x2b0>)
 800a332:	4620      	mov	r0, r4
 800a334:	f7fe fa28 	bl	8008788 <printfFixed>
        printfFixed(chp, 11, "%08x", entry->callback);
 800a338:	682b      	ldr	r3, [r5, #0]
 800a33a:	210b      	movs	r1, #11
 800a33c:	4620      	mov	r0, r4
 800a33e:	4a1d      	ldr	r2, [pc, #116]	; (800a3b4 <cmdThreadInfo+0x2b0>)
 800a340:	f7fe fa22 	bl	8008788 <printfFixed>
        if(entry->active) {
 800a344:	7c2b      	ldrb	r3, [r5, #16]
 800a346:	b163      	cbz	r3, 800a362 <cmdThreadInfo+0x25e>
            chprintf(chp, "Active"SHELL_NEWLINE_STR);
 800a348:	4922      	ldr	r1, [pc, #136]	; (800a3d4 <cmdThreadInfo+0x2d0>)
        } else {
            chprintf(chp, "Idle"SHELL_NEWLINE_STR);
 800a34a:	4620      	mov	r0, r4
 800a34c:	f7fe fa40 	bl	80087d0 <chprintf>
        }
        index++;
 800a350:	3601      	adds	r6, #1
        entry = entry->next;
 800a352:	68ad      	ldr	r5, [r5, #8]
 800a354:	e77b      	b.n	800a24e <cmdThreadInfo+0x14a>
            printfFixed(chp, 10, "");
 800a356:	4642      	mov	r2, r8
 800a358:	210a      	movs	r1, #10
 800a35a:	4620      	mov	r0, r4
 800a35c:	f7fe fa14 	bl	8008788 <printfFixed>
 800a360:	e7e4      	b.n	800a32c <cmdThreadInfo+0x228>
            chprintf(chp, "Idle"SHELL_NEWLINE_STR);
 800a362:	491d      	ldr	r1, [pc, #116]	; (800a3d8 <cmdThreadInfo+0x2d4>)
 800a364:	e7f1      	b.n	800a34a <cmdThreadInfo+0x246>
 800a366:	bf00      	nop
 800a368:	200011ac 	.word	0x200011ac
 800a36c:	200011b4 	.word	0x200011b4
 800a370:	20001634 	.word	0x20001634
 800a374:	20001620 	.word	0x20001620
 800a378:	0800bfb7 	.word	0x0800bfb7
 800a37c:	0800bfbf 	.word	0x0800bfbf
 800a380:	0800bfc9 	.word	0x0800bfc9
 800a384:	0800bfd4 	.word	0x0800bfd4
 800a388:	0800bfdf 	.word	0x0800bfdf
 800a38c:	0800bfe5 	.word	0x0800bfe5
 800a390:	0800bfeb 	.word	0x0800bfeb
 800a394:	0800c157 	.word	0x0800c157
 800a398:	0800c039 	.word	0x0800c039
 800a39c:	0800c044 	.word	0x0800c044
 800a3a0:	0800c04f 	.word	0x0800c04f
 800a3a4:	0800c058 	.word	0x0800c058
 800a3a8:	200011a0 	.word	0x200011a0
 800a3ac:	0800bbda 	.word	0x0800bbda
 800a3b0:	0800bfff 	.word	0x0800bfff
 800a3b4:	0800c004 	.word	0x0800c004
 800a3b8:	200011a8 	.word	0x200011a8
 800a3bc:	0800c009 	.word	0x0800c009
 800a3c0:	0800c011 	.word	0x0800c011
 800a3c4:	0800c017 	.word	0x0800c017
 800a3c8:	0800c01f 	.word	0x0800c01f
 800a3cc:	0800c029 	.word	0x0800c029
 800a3d0:	0800c031 	.word	0x0800c031
 800a3d4:	0800c060 	.word	0x0800c060
 800a3d8:	0800c069 	.word	0x0800c069
 800a3dc:	2000135c 	.word	0x2000135c
 800a3e0:	200011b8 	.word	0x200011b8
 800a3e4:	0800bff1 	.word	0x0800bff1
 800a3e8:	0800bffa 	.word	0x0800bffa
 800a3ec:	0800bbdd 	.word	0x0800bbdd
 800a3f0:	0800c556 	.word	0x0800c556

0800a3f4 <shellTerminationCallback>:
 800a3f4:	4b0e      	ldr	r3, [pc, #56]	; (800a430 <shellTerminationCallback+0x3c>)
{
 800a3f6:	b570      	push	{r4, r5, r6, lr}
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	6ddc      	ldr	r4, [r3, #92]	; 0x5c
    if(activeShell) {
 800a3fc:	b1bc      	cbz	r4, 800a42e <shellTerminationCallback+0x3a>
        if(activeShell->shellCfg.sc_histbuf) {
 800a3fe:	68e0      	ldr	r0, [r4, #12]
 800a400:	b108      	cbz	r0, 800a406 <shellTerminationCallback+0x12>
            vPortFree(activeShell->shellCfg.sc_histbuf);
 800a402:	f7fa fe67 	bl	80050d4 <vPortFree>
        chprintf(activeShell->stream, "Shell 0x%08x closed.", activeShell);
 800a406:	4622      	mov	r2, r4
 800a408:	490a      	ldr	r1, [pc, #40]	; (800a434 <shellTerminationCallback+0x40>)
 800a40a:	6960      	ldr	r0, [r4, #20]
 800a40c:	f7fe f9e0 	bl	80087d0 <chprintf>
        syslog("Shell 0x%08x closed.", activeShell);
 800a410:	4808      	ldr	r0, [pc, #32]	; (800a434 <shellTerminationCallback+0x40>)
 800a412:	4621      	mov	r1, r4
 800a414:	f7fe fbca 	bl	8008bac <syslog>
        void *param = activeShell->param;
 800a418:	e9d4 5606 	ldrd	r5, r6, [r4, #24]
        vPortFree(activeShell);
 800a41c:	4620      	mov	r0, r4
 800a41e:	f7fa fe59 	bl	80050d4 <vPortFree>
        if(callback) {
 800a422:	b125      	cbz	r5, 800a42e <shellTerminationCallback+0x3a>
            callback(param);
 800a424:	4630      	mov	r0, r6
 800a426:	462b      	mov	r3, r5
}
 800a428:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            callback(param);
 800a42c:	4718      	bx	r3
}
 800a42e:	bd70      	pop	{r4, r5, r6, pc}
 800a430:	200011a8 	.word	0x200011a8
 800a434:	0800c070 	.word	0x0800c070

0800a438 <cmdLicense>:
{
 800a438:	4608      	mov	r0, r1
    chprintf(chp,"%s", &_binary_data_license_bin_start);
 800a43a:	4a02      	ldr	r2, [pc, #8]	; (800a444 <cmdLicense+0xc>)
 800a43c:	4902      	ldr	r1, [pc, #8]	; (800a448 <cmdLicense+0x10>)
 800a43e:	f7fe b9c7 	b.w	80087d0 <chprintf>
 800a442:	bf00      	nop
 800a444:	08002234 	.word	0x08002234
 800a448:	0800bbdd 	.word	0x0800bbdd

0800a44c <cmdMco>:
    if(argc != 1) {
 800a44c:	2a01      	cmp	r2, #1
{
 800a44e:	b510      	push	{r4, lr}
 800a450:	460c      	mov	r4, r1
    if(argc != 1) {
 800a452:	d009      	beq.n	800a468 <cmdMco+0x1c>
        chprintf(chp,"Usage:"SHELL_NEWLINE_STR);
 800a454:	4620      	mov	r0, r4
 800a456:	4909      	ldr	r1, [pc, #36]	; (800a47c <cmdMco+0x30>)
 800a458:	f7fe f9ba 	bl	80087d0 <chprintf>
        chprintf(chp,"\t mco [1/0]"SHELL_NEWLINE_STR);
 800a45c:	4620      	mov	r0, r4
}
 800a45e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        chprintf(chp,"\t mco [1/0]"SHELL_NEWLINE_STR);
 800a462:	4907      	ldr	r1, [pc, #28]	; (800a480 <cmdMco+0x34>)
 800a464:	f7fe b9b4 	b.w	80087d0 <chprintf>
        systemEnableMCO(argv[0][0] == '1');
 800a468:	681b      	ldr	r3, [r3, #0]
}
 800a46a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        systemEnableMCO(argv[0][0] == '1');
 800a46e:	7818      	ldrb	r0, [r3, #0]
 800a470:	f1a0 0331 	sub.w	r3, r0, #49	; 0x31
 800a474:	4258      	negs	r0, r3
 800a476:	4158      	adcs	r0, r3
 800a478:	f7fb bbce 	b.w	8005c18 <systemEnableMCO>
 800a47c:	0800b951 	.word	0x0800b951
 800a480:	0800c085 	.word	0x0800c085

0800a484 <cmdSyslog>:
{
 800a484:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(argc == 1 && !strcmp(argv[0], "clear")) {
 800a488:	2a01      	cmp	r2, #1
{
 800a48a:	460d      	mov	r5, r1
 800a48c:	461c      	mov	r4, r3
 800a48e:	b087      	sub	sp, #28
    if(argc == 1 && !strcmp(argv[0], "clear")) {
 800a490:	d115      	bne.n	800a4be <cmdSyslog+0x3a>
 800a492:	4940      	ldr	r1, [pc, #256]	; (800a594 <cmdSyslog+0x110>)
 800a494:	6818      	ldr	r0, [r3, #0]
 800a496:	f7f9 fc3f 	bl	8003d18 <strcmp>
 800a49a:	4604      	mov	r4, r0
 800a49c:	b9e8      	cbnz	r0, 800a4da <cmdSyslog+0x56>
 800a49e:	4b3e      	ldr	r3, [pc, #248]	; (800a598 <cmdSyslog+0x114>)
    xSemaphoreTake(syslogSemaphore, portMAX_DELAY);
 800a4a0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800a4a4:	681d      	ldr	r5, [r3, #0]
 800a4a6:	4628      	mov	r0, r5
 800a4a8:	f7fa fc80 	bl	8004dac <xQueueSemaphoreTake>
    memset(queue, 0, sizeof(*queue));
 800a4ac:	221c      	movs	r2, #28
 800a4ae:	4621      	mov	r1, r4
 800a4b0:	483a      	ldr	r0, [pc, #232]	; (800a59c <cmdSyslog+0x118>)
 800a4b2:	f7f9 fb7d 	bl	8003bb0 <memset>
    xSemaphoreGive(syslogSemaphore);
 800a4b6:	4628      	mov	r0, r5
    xSemaphoreGive(syslogSemaphore);
 800a4b8:	f7fd fda0 	bl	8007ffc <xQueueGenericSend.constprop.0>
 800a4bc:	e00a      	b.n	800a4d4 <cmdSyslog+0x50>
    } else if(argc == 2 && !strcmp(argv[0], "add")) {
 800a4be:	2a02      	cmp	r2, #2
 800a4c0:	d10b      	bne.n	800a4da <cmdSyslog+0x56>
 800a4c2:	4937      	ldr	r1, [pc, #220]	; (800a5a0 <cmdSyslog+0x11c>)
 800a4c4:	6818      	ldr	r0, [r3, #0]
 800a4c6:	f7f9 fc27 	bl	8003d18 <strcmp>
 800a4ca:	b930      	cbnz	r0, 800a4da <cmdSyslog+0x56>
        syslog("%s", argv[1]);
 800a4cc:	6861      	ldr	r1, [r4, #4]
 800a4ce:	4835      	ldr	r0, [pc, #212]	; (800a5a4 <cmdSyslog+0x120>)
 800a4d0:	f7fe fb6c 	bl	8008bac <syslog>
}
 800a4d4:	b007      	add	sp, #28
 800a4d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    xSemaphoreTake(syslogSemaphore, portMAX_DELAY);
 800a4da:	4e2f      	ldr	r6, [pc, #188]	; (800a598 <cmdSyslog+0x114>)
    if(syslogQueue.numDropped) {
 800a4dc:	4c32      	ldr	r4, [pc, #200]	; (800a5a8 <cmdSyslog+0x124>)
    xSemaphoreTake(syslogSemaphore, portMAX_DELAY);
 800a4de:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800a4e2:	6830      	ldr	r0, [r6, #0]
 800a4e4:	f7fa fc62 	bl	8004dac <xQueueSemaphoreTake>
    if(syslogQueue.numDropped) {
 800a4e8:	6a22      	ldr	r2, [r4, #32]
 800a4ea:	9600      	str	r6, [sp, #0]
 800a4ec:	b11a      	cbz	r2, 800a4f6 <cmdSyslog+0x72>
        chprintf(chp, "... %u dropped ..."SHELL_NEWLINE_STR, syslogQueue.numDropped);
 800a4ee:	4628      	mov	r0, r5
 800a4f0:	492e      	ldr	r1, [pc, #184]	; (800a5ac <cmdSyslog+0x128>)
 800a4f2:	f7fe f96d 	bl	80087d0 <chprintf>
    queue->readPtrStored = queue->readPtr;
 800a4f6:	68a3      	ldr	r3, [r4, #8]
        chnWrite(chp, (uint8_t*)SHELL_NEWLINE_STR, strlen(SHELL_NEWLINE_STR));
 800a4f8:	f8df a0b4 	ldr.w	sl, [pc, #180]	; 800a5b0 <cmdSyslog+0x12c>
 800a4fc:	60e3      	str	r3, [r4, #12]
    queue->pktCountStored = queue->pktCount;
 800a4fe:	8aa3      	ldrh	r3, [r4, #20]
 800a500:	82e3      	strh	r3, [r4, #22]
    if(!queue->pktCount) {
 800a502:	8aa3      	ldrh	r3, [r4, #20]
 800a504:	b943      	cbnz	r3, 800a518 <cmdSyslog+0x94>
        queue->readPtr = queue->readPtrStored;
 800a506:	68e3      	ldr	r3, [r4, #12]
 800a508:	60a3      	str	r3, [r4, #8]
        queue->pktCount = queue->pktCountStored;
 800a50a:	8ae3      	ldrh	r3, [r4, #22]
 800a50c:	82a3      	strh	r3, [r4, #20]
    xSemaphoreGive(syslogSemaphore);
 800a50e:	9b00      	ldr	r3, [sp, #0]
 800a510:	6818      	ldr	r0, [r3, #0]
 800a512:	e7d1      	b.n	800a4b8 <cmdSyslog+0x34>
        return 0;
 800a514:	463e      	mov	r6, r7
 800a516:	e02a      	b.n	800a56e <cmdSyslog+0xea>
    queue->pktLen = (packetQueueReadByte(queue) << 8) |
 800a518:	f7f9 fd8e 	bl	8004038 <packetQueueReadByte.constprop.0>
 800a51c:	4606      	mov	r6, r0
                    (packetQueueReadByte(queue));
 800a51e:	f7f9 fd8b 	bl	8004038 <packetQueueReadByte.constprop.0>
    queue->pktLen = (packetQueueReadByte(queue) << 8) |
 800a522:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
 800a526:	61a0      	str	r0, [r4, #24]
    return queue->pktLen;
 800a528:	fa1f f980 	uxth.w	r9, r0
    while((len = packetQueueReadPacket(&syslogQueue))) {
 800a52c:	2800      	cmp	r0, #0
 800a52e:	d0ea      	beq.n	800a506 <cmdSyslog+0x82>
        uint16_t i = 0;
 800a530:	f04f 0800 	mov.w	r8, #0
    if(!queue->pktLen) {
 800a534:	69a7      	ldr	r7, [r4, #24]
 800a536:	2f00      	cmp	r7, #0
 800a538:	d0ec      	beq.n	800a514 <cmdSyslog+0x90>
    if(bufLen > queue->pktLen) {
 800a53a:	2f0c      	cmp	r7, #12
 800a53c:	bf28      	it	cs
 800a53e:	270c      	movcs	r7, #12
        for(uint16_t i=0; i<bufLen; i++) {
 800a540:	f04f 0b00 	mov.w	fp, #0
 800a544:	b2be      	uxth	r6, r7
 800a546:	aa03      	add	r2, sp, #12
 800a548:	9201      	str	r2, [sp, #4]
            buffer[i] = packetQueueReadByte(queue);
 800a54a:	f7f9 fd75 	bl	8004038 <packetQueueReadByte.constprop.0>
        for(uint16_t i=0; i<bufLen; i++) {
 800a54e:	f10b 0b01 	add.w	fp, fp, #1
            buffer[i] = packetQueueReadByte(queue);
 800a552:	9a01      	ldr	r2, [sp, #4]
        for(uint16_t i=0; i<bufLen; i++) {
 800a554:	fa1f fb8b 	uxth.w	fp, fp
 800a558:	45b3      	cmp	fp, r6
            buffer[i] = packetQueueReadByte(queue);
 800a55a:	f802 0b01 	strb.w	r0, [r2], #1
        for(uint16_t i=0; i<bufLen; i++) {
 800a55e:	d3f3      	bcc.n	800a548 <cmdSyslog+0xc4>
    queue->pktLen -= bufLen;
 800a560:	69a2      	ldr	r2, [r4, #24]
 800a562:	1bd7      	subs	r7, r2, r7
 800a564:	61a7      	str	r7, [r4, #24]
    if(!queue->pktLen) {
 800a566:	b917      	cbnz	r7, 800a56e <cmdSyslog+0xea>
        queue->pktCount--;
 800a568:	8aa2      	ldrh	r2, [r4, #20]
 800a56a:	3a01      	subs	r2, #1
 800a56c:	82a2      	strh	r2, [r4, #20]
            chnWrite(chp, tmpBuf, readBytes);
 800a56e:	682a      	ldr	r2, [r5, #0]
 800a570:	4628      	mov	r0, r5
 800a572:	6817      	ldr	r7, [r2, #0]
 800a574:	4632      	mov	r2, r6
            i += readBytes;
 800a576:	4446      	add	r6, r8
            chnWrite(chp, tmpBuf, readBytes);
 800a578:	a903      	add	r1, sp, #12
            i += readBytes;
 800a57a:	fa1f f886 	uxth.w	r8, r6
            chnWrite(chp, tmpBuf, readBytes);
 800a57e:	47b8      	blx	r7
        while(i < len) {
 800a580:	45c8      	cmp	r8, r9
 800a582:	d3d7      	bcc.n	800a534 <cmdSyslog+0xb0>
        chnWrite(chp, (uint8_t*)SHELL_NEWLINE_STR, strlen(SHELL_NEWLINE_STR));
 800a584:	682b      	ldr	r3, [r5, #0]
 800a586:	2202      	movs	r2, #2
 800a588:	4651      	mov	r1, sl
 800a58a:	4628      	mov	r0, r5
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	4798      	blx	r3
 800a590:	e7b7      	b.n	800a502 <cmdSyslog+0x7e>
 800a592:	bf00      	nop
 800a594:	0800bddf 	.word	0x0800bddf
 800a598:	20001334 	.word	0x20001334
 800a59c:	20001318 	.word	0x20001318
 800a5a0:	0800c093 	.word	0x0800c093
 800a5a4:	0800bbdd 	.word	0x0800bbdd
 800a5a8:	20001310 	.word	0x20001310
 800a5ac:	0800c097 	.word	0x0800c097
 800a5b0:	0800c157 	.word	0x0800c157

0800a5b4 <cmdReboot>:
{
 800a5b4:	b538      	push	{r3, r4, r5, lr}
 800a5b6:	460c      	mov	r4, r1
    if(argc == 0) {
 800a5b8:	b9ca      	cbnz	r2, 800a5ee <cmdReboot+0x3a>
        chprintf(chp,"Usage:"SHELL_NEWLINE_STR);
 800a5ba:	4927      	ldr	r1, [pc, #156]	; (800a658 <cmdReboot+0xa4>)
 800a5bc:	4620      	mov	r0, r4
 800a5be:	f7fe f907 	bl	80087d0 <chprintf>
        chprintf(chp,"\t reboot nvic"SHELL_NEWLINE_STR);
 800a5c2:	4926      	ldr	r1, [pc, #152]	; (800a65c <cmdReboot+0xa8>)
 800a5c4:	4620      	mov	r0, r4
 800a5c6:	f7fe f903 	bl	80087d0 <chprintf>
        chprintf(chp,"\t reboot loader"SHELL_NEWLINE_STR);
 800a5ca:	4925      	ldr	r1, [pc, #148]	; (800a660 <cmdReboot+0xac>)
 800a5cc:	4620      	mov	r0, r4
 800a5ce:	f7fe f8ff 	bl	80087d0 <chprintf>
        chprintf(chp,"\t reboot loaderp"SHELL_NEWLINE_STR);
 800a5d2:	4924      	ldr	r1, [pc, #144]	; (800a664 <cmdReboot+0xb0>)
 800a5d4:	4620      	mov	r0, r4
 800a5d6:	f7fe f8fb 	bl	80087d0 <chprintf>
        chprintf(chp,"\t reboot crash"SHELL_NEWLINE_STR);
 800a5da:	4923      	ldr	r1, [pc, #140]	; (800a668 <cmdReboot+0xb4>)
 800a5dc:	4620      	mov	r0, r4
 800a5de:	f7fe f8f7 	bl	80087d0 <chprintf>
        chprintf(chp,"\t reboot memexec"SHELL_NEWLINE_STR);
 800a5e2:	4922      	ldr	r1, [pc, #136]	; (800a66c <cmdReboot+0xb8>)
            chprintf(chp, "Wrong result!"SHELL_NEWLINE_STR);
 800a5e4:	4620      	mov	r0, r4
}
 800a5e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            chprintf(chp, "Wrong result!"SHELL_NEWLINE_STR);
 800a5ea:	f7fe b8f1 	b.w	80087d0 <chprintf>
    } else if(argc == 1 && !strcmp(argv[0], "loaderp")) {
 800a5ee:	2a01      	cmp	r2, #1
 800a5f0:	d12f      	bne.n	800a652 <cmdReboot+0x9e>
 800a5f2:	681d      	ldr	r5, [r3, #0]
 800a5f4:	491e      	ldr	r1, [pc, #120]	; (800a670 <cmdReboot+0xbc>)
 800a5f6:	4628      	mov	r0, r5
 800a5f8:	f7f9 fb8e 	bl	8003d18 <strcmp>
 800a5fc:	b1f0      	cbz	r0, 800a63c <cmdReboot+0x88>
    } else if(argc == 1 && !strcmp(argv[0], "loader")) {
 800a5fe:	4628      	mov	r0, r5
 800a600:	491c      	ldr	r1, [pc, #112]	; (800a674 <cmdReboot+0xc0>)
 800a602:	f7f9 fb89 	bl	8003d18 <strcmp>
 800a606:	b1d8      	cbz	r0, 800a640 <cmdReboot+0x8c>
    } else if(argc == 1 && !strcmp(argv[0], "crash")) {
 800a608:	4628      	mov	r0, r5
 800a60a:	491b      	ldr	r1, [pc, #108]	; (800a678 <cmdReboot+0xc4>)
 800a60c:	f7f9 fb84 	bl	8003d18 <strcmp>
 800a610:	b910      	cbnz	r0, 800a618 <cmdReboot+0x64>
        osalSysHalt("crash");
 800a612:	f7f9 fe95 	bl	8004340 <vTaskEndScheduler>
 800a616:	e7fe      	b.n	800a616 <cmdReboot+0x62>
    } else if(argc == 1 && !strcmp(argv[0], "memexec")) {
 800a618:	4628      	mov	r0, r5
 800a61a:	4918      	ldr	r1, [pc, #96]	; (800a67c <cmdReboot+0xc8>)
 800a61c:	f7f9 fb7c 	bl	8003d18 <strcmp>
 800a620:	b9b8      	cbnz	r0, 800a652 <cmdReboot+0x9e>
        if(callIt(4) == 5 && callIt(54) == 55) {
 800a622:	2004      	movs	r0, #4
        uint32_t (*callIt)(uint32_t) = (uint32_t(*)(uint32_t))(incr0bxlr+1); /* +1 for thumb mode */
 800a624:	4d16      	ldr	r5, [pc, #88]	; (800a680 <cmdReboot+0xcc>)
        if(callIt(4) == 5 && callIt(54) == 55) {
 800a626:	47a8      	blx	r5
 800a628:	2805      	cmp	r0, #5
 800a62a:	d105      	bne.n	800a638 <cmdReboot+0x84>
 800a62c:	2036      	movs	r0, #54	; 0x36
 800a62e:	47a8      	blx	r5
 800a630:	2837      	cmp	r0, #55	; 0x37
 800a632:	d101      	bne.n	800a638 <cmdReboot+0x84>
            chprintf(chp, "Success!"SHELL_NEWLINE_STR);
 800a634:	4913      	ldr	r1, [pc, #76]	; (800a684 <cmdReboot+0xd0>)
 800a636:	e7d5      	b.n	800a5e4 <cmdReboot+0x30>
            chprintf(chp, "Wrong result!"SHELL_NEWLINE_STR);
 800a638:	4913      	ldr	r1, [pc, #76]	; (800a688 <cmdReboot+0xd4>)
 800a63a:	e7d3      	b.n	800a5e4 <cmdReboot+0x30>
        rebootCode = 0x424C;
 800a63c:	f244 204c 	movw	r0, #16972	; 0x424c
    RCC->APB1ENR |= (RCC_APB1ENR_PWREN | RCC_APB1ENR_BKPEN);
 800a640:	4a12      	ldr	r2, [pc, #72]	; (800a68c <cmdReboot+0xd8>)
 800a642:	69d3      	ldr	r3, [r2, #28]
 800a644:	f043 53c0 	orr.w	r3, r3, #402653184	; 0x18000000
 800a648:	61d3      	str	r3, [r2, #28]
    BKP->DR10 = rebootCode;
 800a64a:	4b11      	ldr	r3, [pc, #68]	; (800a690 <cmdReboot+0xdc>)
 800a64c:	6298      	str	r0, [r3, #40]	; 0x28
    NVIC_SystemReset();
 800a64e:	f7fb fb79 	bl	8005d44 <NVIC_SystemReset.lto_priv.0>
        rebootCode = 0x424D;
 800a652:	f244 204d 	movw	r0, #16973	; 0x424d
 800a656:	e7f3      	b.n	800a640 <cmdReboot+0x8c>
 800a658:	0800b951 	.word	0x0800b951
 800a65c:	0800c0ac 	.word	0x0800c0ac
 800a660:	0800c0bc 	.word	0x0800c0bc
 800a664:	0800c0ce 	.word	0x0800c0ce
 800a668:	0800c0e1 	.word	0x0800c0e1
 800a66c:	0800c0f2 	.word	0x0800c0f2
 800a670:	0800c105 	.word	0x0800c105
 800a674:	0800c10d 	.word	0x0800c10d
 800a678:	0800c114 	.word	0x0800c114
 800a67c:	0800c11a 	.word	0x0800c11a
 800a680:	2000084d 	.word	0x2000084d
 800a684:	0800c122 	.word	0x0800c122
 800a688:	0800c12d 	.word	0x0800c12d
 800a68c:	40021000 	.word	0x40021000
 800a690:	40006c00 	.word	0x40006c00

0800a694 <max2870StatusPrint>:

void max2870StatusPrint(MAX2870Driver* driver, BaseSequentialStream* stdout)
{
 800a694:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a698:	4605      	mov	r5, r0
 800a69a:	460c      	mov	r4, r1
    max2870SpiState(driver, true);
 800a69c:	f7fd fa16 	bl	8007acc <max2870SpiState.constprop.0>
    if(driver->enabled) {
 800a6a0:	792b      	ldrb	r3, [r5, #4]
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	f000 80c8 	beq.w	800a838 <max2870StatusPrint+0x1a4>
        if(driver->currentTune.isLocked) {
 800a6a8:	7f2b      	ldrb	r3, [r5, #28]
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	f000 8092 	beq.w	800a7d4 <max2870StatusPrint+0x140>
            chprintf(stdout, "PLL Locked"SHELL_NEWLINE_STR);
 800a6b0:	4964      	ldr	r1, [pc, #400]	; (800a844 <max2870StatusPrint+0x1b0>)
        } else {
            chprintf(stdout, "PLL UNLOCK!!!"SHELL_NEWLINE_STR);
 800a6b2:	4620      	mov	r0, r4
 800a6b4:	f7fe f88c 	bl	80087d0 <chprintf>
        }

        printfFixed(stdout, 30, "Divided VCO Frequency:");
 800a6b8:	211e      	movs	r1, #30
 800a6ba:	4a63      	ldr	r2, [pc, #396]	; (800a848 <max2870StatusPrint+0x1b4>)
 800a6bc:	4620      	mov	r0, r4
 800a6be:	f7fe f863 	bl	8008788 <printfFixed>
        chprintf(stdout, "%u kHz"SHELL_NEWLINE_STR, driver->currentTune.frequency/1000);
 800a6c2:	e9d5 0102 	ldrd	r0, r1, [r5, #8]
 800a6c6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a6ca:	2300      	movs	r3, #0
 800a6cc:	f7f9 f87e 	bl	80037cc <__aeabi_uldivmod>
 800a6d0:	4602      	mov	r2, r0
 800a6d2:	460b      	mov	r3, r1
 800a6d4:	4620      	mov	r0, r4
 800a6d6:	495d      	ldr	r1, [pc, #372]	; (800a84c <max2870StatusPrint+0x1b8>)
 800a6d8:	f7fe f87a 	bl	80087d0 <chprintf>
        printfFixed(stdout, 30, "Output A Power:");
 800a6dc:	4a5c      	ldr	r2, [pc, #368]	; (800a850 <max2870StatusPrint+0x1bc>)
 800a6de:	211e      	movs	r1, #30
 800a6e0:	4620      	mov	r0, r4
 800a6e2:	f7fe f851 	bl	8008788 <printfFixed>
        if(driver->currentTune.powerA != -127) {
 800a6e6:	f995 2010 	ldrsb.w	r2, [r5, #16]
 800a6ea:	f112 0f7f 	cmn.w	r2, #127	; 0x7f
 800a6ee:	d073      	beq.n	800a7d8 <max2870StatusPrint+0x144>
            chprintf(stdout, "%d dBm"SHELL_NEWLINE_STR, driver->currentTune.powerA);
 800a6f0:	4620      	mov	r0, r4
 800a6f2:	4958      	ldr	r1, [pc, #352]	; (800a854 <max2870StatusPrint+0x1c0>)
 800a6f4:	f7fe f86c 	bl	80087d0 <chprintf>
        } else {
            chprintf(stdout, "Off"SHELL_NEWLINE_STR);
        }
        printfFixed(stdout, 30, "Output B Power:");
 800a6f8:	4a57      	ldr	r2, [pc, #348]	; (800a858 <max2870StatusPrint+0x1c4>)
 800a6fa:	211e      	movs	r1, #30
 800a6fc:	4620      	mov	r0, r4
 800a6fe:	f7fe f843 	bl	8008788 <printfFixed>
        if(driver->currentTune.powerB != -127) {
 800a702:	f995 2011 	ldrsb.w	r2, [r5, #17]
 800a706:	f112 0f7f 	cmn.w	r2, #127	; 0x7f
 800a70a:	d06a      	beq.n	800a7e2 <max2870StatusPrint+0x14e>
            chprintf(stdout, "%d dBm"SHELL_NEWLINE_STR, driver->currentTune.powerB);
 800a70c:	4620      	mov	r0, r4
 800a70e:	4951      	ldr	r1, [pc, #324]	; (800a854 <max2870StatusPrint+0x1c0>)
 800a710:	f7fe f85e 	bl	80087d0 <chprintf>
        } else {
            chprintf(stdout, "Off"SHELL_NEWLINE_STR);
        }
        if(driver->currentTune.isLocked) {
 800a714:	7f2b      	ldrb	r3, [r5, #28]
 800a716:	b14b      	cbz	r3, 800a72c <max2870StatusPrint+0x98>
            printfFixed(stdout, 30, "Lock Time:");
 800a718:	211e      	movs	r1, #30
 800a71a:	4a50      	ldr	r2, [pc, #320]	; (800a85c <max2870StatusPrint+0x1c8>)
 800a71c:	4620      	mov	r0, r4
 800a71e:	f7fe f833 	bl	8008788 <printfFixed>
            chprintf(stdout, "%u cycles"SHELL_NEWLINE_STR, driver->currentTune.lockTime);
 800a722:	4620      	mov	r0, r4
 800a724:	7eea      	ldrb	r2, [r5, #27]
 800a726:	494e      	ldr	r1, [pc, #312]	; (800a860 <max2870StatusPrint+0x1cc>)
 800a728:	f7fe f852 	bl	80087d0 <chprintf>
        }
        printfFixed(stdout, 30, "PFD Frequency:");
 800a72c:	211e      	movs	r1, #30
 800a72e:	4a4d      	ldr	r2, [pc, #308]	; (800a864 <max2870StatusPrint+0x1d0>)
 800a730:	4620      	mov	r0, r4
 800a732:	f7fe f829 	bl	8008788 <printfFixed>
        chprintf(stdout, "%u kHz"SHELL_NEWLINE_STR, driver->pfdFrequency/1000);
 800a736:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a73a:	f8d5 20b8 	ldr.w	r2, [r5, #184]	; 0xb8
 800a73e:	4943      	ldr	r1, [pc, #268]	; (800a84c <max2870StatusPrint+0x1b8>)
 800a740:	fbb2 f2f3 	udiv	r2, r2, r3
 800a744:	4620      	mov	r0, r4
 800a746:	f7fe f843 	bl	80087d0 <chprintf>
        printfFixed(stdout, 30, "Step Frequency:");
 800a74a:	211e      	movs	r1, #30
 800a74c:	4a46      	ldr	r2, [pc, #280]	; (800a868 <max2870StatusPrint+0x1d4>)
 800a74e:	4620      	mov	r0, r4
 800a750:	f7fe f81a 	bl	8008788 <printfFixed>
        chprintf(stdout, "%u Hz"SHELL_NEWLINE_STR, driver->config->stepFrequency);
 800a754:	682b      	ldr	r3, [r5, #0]
 800a756:	4945      	ldr	r1, [pc, #276]	; (800a86c <max2870StatusPrint+0x1d8>)
 800a758:	699a      	ldr	r2, [r3, #24]
 800a75a:	4620      	mov	r0, r4
 800a75c:	f7fe f838 	bl	80087d0 <chprintf>
        printfFixed(stdout, 30, "BS Divider:");
 800a760:	211e      	movs	r1, #30
 800a762:	4a43      	ldr	r2, [pc, #268]	; (800a870 <max2870StatusPrint+0x1dc>)
 800a764:	4620      	mov	r0, r4
 800a766:	f7fe f80f 	bl	8008788 <printfFixed>
        chprintf(stdout, "%u"SHELL_NEWLINE_STR, driver->bsValue);
 800a76a:	f8b5 20c4 	ldrh.w	r2, [r5, #196]	; 0xc4
 800a76e:	4941      	ldr	r1, [pc, #260]	; (800a874 <max2870StatusPrint+0x1e0>)
 800a770:	4620      	mov	r0, r4
 800a772:	f7fe f82d 	bl	80087d0 <chprintf>
        printfFixed(stdout, 30, "Reload Counter:");
 800a776:	211e      	movs	r1, #30
 800a778:	4a3f      	ldr	r2, [pc, #252]	; (800a878 <max2870StatusPrint+0x1e4>)
 800a77a:	4620      	mov	r0, r4
 800a77c:	f7fe f804 	bl	8008788 <printfFixed>
        chprintf(stdout, "%u"SHELL_NEWLINE_STR, driver->pllMonReloadCounter);
 800a780:	f895 20e4 	ldrb.w	r2, [r5, #228]	; 0xe4
 800a784:	493b      	ldr	r1, [pc, #236]	; (800a874 <max2870StatusPrint+0x1e0>)
 800a786:	4620      	mov	r0, r4
 800a788:	f7fe f822 	bl	80087d0 <chprintf>

        printfFixed(stdout, 30, "Current VCO Band From Cache:");
 800a78c:	211e      	movs	r1, #30
 800a78e:	4a3b      	ldr	r2, [pc, #236]	; (800a87c <max2870StatusPrint+0x1e8>)
 800a790:	4620      	mov	r0, r4
 800a792:	f7fd fff9 	bl	8008788 <printfFixed>
        chprintf(stdout, "%u"SHELL_NEWLINE_STR, !driver->currentTune.usedVCOAutotune);
 800a796:	7f6a      	ldrb	r2, [r5, #29]
 800a798:	4936      	ldr	r1, [pc, #216]	; (800a874 <max2870StatusPrint+0x1e0>)
 800a79a:	f082 0201 	eor.w	r2, r2, #1
 800a79e:	4620      	mov	r0, r4
 800a7a0:	f7fe f816 	bl	80087d0 <chprintf>
        printfFixed(stdout, 30, "Current VCO Band:");
 800a7a4:	211e      	movs	r1, #30
 800a7a6:	4a36      	ldr	r2, [pc, #216]	; (800a880 <max2870StatusPrint+0x1ec>)
 800a7a8:	4620      	mov	r0, r4
 800a7aa:	f7fd ffed 	bl	8008788 <printfFixed>
        chprintf(stdout, "%u"SHELL_NEWLINE_STR, driver->currentTune.usedVCO);
 800a7ae:	7e6a      	ldrb	r2, [r5, #25]
 800a7b0:	4930      	ldr	r1, [pc, #192]	; (800a874 <max2870StatusPrint+0x1e0>)
 800a7b2:	4620      	mov	r0, r4
 800a7b4:	f7fe f80c 	bl	80087d0 <chprintf>

        printfFixed(stdout, 30, "Current VCO Tuning Voltage:");
 800a7b8:	211e      	movs	r1, #30
 800a7ba:	4620      	mov	r0, r4
 800a7bc:	4a31      	ldr	r2, [pc, #196]	; (800a884 <max2870StatusPrint+0x1f0>)
 800a7be:	f7fd ffe3 	bl	8008788 <printfFixed>
        switch(driver->currentTune.adcVoltage) {
 800a7c2:	7eab      	ldrb	r3, [r5, #26]
 800a7c4:	2b06      	cmp	r3, #6
 800a7c6:	d835      	bhi.n	800a834 <max2870StatusPrint+0x1a0>
 800a7c8:	e8df f003 	tbb	[pc, r3]
 800a7cc:	2e2e2c10 	.word	0x2e2e2c10
 800a7d0:	3030      	.short	0x3030
 800a7d2:	32          	.byte	0x32
 800a7d3:	00          	.byte	0x00
            chprintf(stdout, "PLL UNLOCK!!!"SHELL_NEWLINE_STR);
 800a7d4:	492c      	ldr	r1, [pc, #176]	; (800a888 <max2870StatusPrint+0x1f4>)
 800a7d6:	e76c      	b.n	800a6b2 <max2870StatusPrint+0x1e>
            chprintf(stdout, "Off"SHELL_NEWLINE_STR);
 800a7d8:	4620      	mov	r0, r4
 800a7da:	492c      	ldr	r1, [pc, #176]	; (800a88c <max2870StatusPrint+0x1f8>)
 800a7dc:	f7fd fff8 	bl	80087d0 <chprintf>
 800a7e0:	e78a      	b.n	800a6f8 <max2870StatusPrint+0x64>
            chprintf(stdout, "Off"SHELL_NEWLINE_STR);
 800a7e2:	4620      	mov	r0, r4
 800a7e4:	4929      	ldr	r1, [pc, #164]	; (800a88c <max2870StatusPrint+0x1f8>)
 800a7e6:	f7fd fff3 	bl	80087d0 <chprintf>
 800a7ea:	e793      	b.n	800a714 <max2870StatusPrint+0x80>
            case 0:
                chprintf(stdout, "0.2");
 800a7ec:	4928      	ldr	r1, [pc, #160]	; (800a890 <max2870StatusPrint+0x1fc>)
                break;
            case 6:
                chprintf(stdout, "2.3");
                break;
            default:
                chprintf(stdout, "3");
 800a7ee:	4620      	mov	r0, r4
 800a7f0:	f7fd ffee 	bl	80087d0 <chprintf>
                break;
        }
        chprintf(stdout, "V"SHELL_NEWLINE_STR"Registers:"SHELL_NEWLINE_STR);
 800a7f4:	4620      	mov	r0, r4
 800a7f6:	4927      	ldr	r1, [pc, #156]	; (800a894 <max2870StatusPrint+0x200>)
 800a7f8:	f7fd ffea 	bl	80087d0 <chprintf>
        for(int i=0; i<7; i++) {
 800a7fc:	2600      	movs	r6, #0
            chprintf(stdout, "\t%u: %08x"SHELL_NEWLINE_STR, i, driver->registers[i]);
 800a7fe:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 800a8b0 <max2870StatusPrint+0x21c>
 800a802:	f105 07c8 	add.w	r7, r5, #200	; 0xc8
 800a806:	4632      	mov	r2, r6
 800a808:	4641      	mov	r1, r8
 800a80a:	4620      	mov	r0, r4
 800a80c:	f857 3b04 	ldr.w	r3, [r7], #4
        for(int i=0; i<7; i++) {
 800a810:	3601      	adds	r6, #1
            chprintf(stdout, "\t%u: %08x"SHELL_NEWLINE_STR, i, driver->registers[i]);
 800a812:	f7fd ffdd 	bl	80087d0 <chprintf>
        for(int i=0; i<7; i++) {
 800a816:	2e07      	cmp	r6, #7
 800a818:	d1f5      	bne.n	800a806 <max2870StatusPrint+0x172>
    if(enable) {
 800a81a:	4628      	mov	r0, r5
        }
    } else {
        chprintf(stdout, "Low power mode"SHELL_NEWLINE_STR);
    }
    max2870SpiState(driver, false);
}
 800a81c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a820:	f7fd bd12 	b.w	8008248 <max2870SpiState.part.0>
                chprintf(stdout, "0.6");
 800a824:	491c      	ldr	r1, [pc, #112]	; (800a898 <max2870StatusPrint+0x204>)
 800a826:	e7e2      	b.n	800a7ee <max2870StatusPrint+0x15a>
                chprintf(stdout, "1");
 800a828:	491c      	ldr	r1, [pc, #112]	; (800a89c <max2870StatusPrint+0x208>)
 800a82a:	e7e0      	b.n	800a7ee <max2870StatusPrint+0x15a>
                chprintf(stdout, "1.7");
 800a82c:	491c      	ldr	r1, [pc, #112]	; (800a8a0 <max2870StatusPrint+0x20c>)
 800a82e:	e7de      	b.n	800a7ee <max2870StatusPrint+0x15a>
                chprintf(stdout, "2.3");
 800a830:	491c      	ldr	r1, [pc, #112]	; (800a8a4 <max2870StatusPrint+0x210>)
 800a832:	e7dc      	b.n	800a7ee <max2870StatusPrint+0x15a>
                chprintf(stdout, "3");
 800a834:	491c      	ldr	r1, [pc, #112]	; (800a8a8 <max2870StatusPrint+0x214>)
 800a836:	e7da      	b.n	800a7ee <max2870StatusPrint+0x15a>
        chprintf(stdout, "Low power mode"SHELL_NEWLINE_STR);
 800a838:	4620      	mov	r0, r4
 800a83a:	491c      	ldr	r1, [pc, #112]	; (800a8ac <max2870StatusPrint+0x218>)
 800a83c:	f7fd ffc8 	bl	80087d0 <chprintf>
 800a840:	e7eb      	b.n	800a81a <max2870StatusPrint+0x186>
 800a842:	bf00      	nop
 800a844:	0800c13d 	.word	0x0800c13d
 800a848:	0800c15a 	.word	0x0800c15a
 800a84c:	0800bc0a 	.word	0x0800bc0a
 800a850:	0800c171 	.word	0x0800c171
 800a854:	0800c181 	.word	0x0800c181
 800a858:	0800c190 	.word	0x0800c190
 800a85c:	0800c1a0 	.word	0x0800c1a0
 800a860:	0800c1ab 	.word	0x0800c1ab
 800a864:	0800c1b7 	.word	0x0800c1b7
 800a868:	0800c1c6 	.word	0x0800c1c6
 800a86c:	0800c1d6 	.word	0x0800c1d6
 800a870:	0800c1de 	.word	0x0800c1de
 800a874:	0800bc5d 	.word	0x0800bc5d
 800a878:	0800c1ea 	.word	0x0800c1ea
 800a87c:	0800c1fa 	.word	0x0800c1fa
 800a880:	0800c217 	.word	0x0800c217
 800a884:	0800c229 	.word	0x0800c229
 800a888:	0800c14a 	.word	0x0800c14a
 800a88c:	0800c18a 	.word	0x0800c18a
 800a890:	0800c245 	.word	0x0800c245
 800a894:	0800c255 	.word	0x0800c255
 800a898:	0800c249 	.word	0x0800c249
 800a89c:	0800c4dc 	.word	0x0800c4dc
 800a8a0:	0800c24d 	.word	0x0800c24d
 800a8a4:	0800c251 	.word	0x0800c251
 800a8a8:	0800c253 	.word	0x0800c253
 800a8ac:	0800c271 	.word	0x0800c271
 800a8b0:	0800c265 	.word	0x0800c265

0800a8b4 <cmdMax>:
    }
}


void cmdMax(void* user, BaseSequentialStream *chp, int argc, char *argv[])
{
 800a8b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a8b8:	4604      	mov	r4, r0
 800a8ba:	460d      	mov	r5, r1
 800a8bc:	4698      	mov	r8, r3
    MAX2870Driver* pll = (MAX2870Driver*)user;

    if(argc == 0) {
 800a8be:	4616      	mov	r6, r2
{
 800a8c0:	b087      	sub	sp, #28
    if(argc == 0) {
 800a8c2:	b92a      	cbnz	r2, 800a8d0 <cmdMax+0x1c>
        cmdMaxUsage(chp);
 800a8c4:	4628      	mov	r0, r5
 800a8c6:	f7ff fbef 	bl	800a0a8 <cmdMaxUsage>
        chprintf(chp, "Digital Lock Detect: %u"SHELL_NEWLINE_STR, max2870GetDigitalLockDetect(pll));
    } else {
        cmdMaxUsage(chp);
        return;
    }
}
 800a8ca:	b007      	add	sp, #28
 800a8cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if(!strcmp(argv[0], "tune")) {
 800a8d0:	681f      	ldr	r7, [r3, #0]
 800a8d2:	4981      	ldr	r1, [pc, #516]	; (800aad8 <cmdMax+0x224>)
 800a8d4:	4638      	mov	r0, r7
 800a8d6:	f7f9 fa1f 	bl	8003d18 <strcmp>
 800a8da:	4684      	mov	ip, r0
 800a8dc:	2800      	cmp	r0, #0
 800a8de:	d158      	bne.n	800a992 <cmdMax+0xde>
        cmdMaxTune(pll, chp, argc-1, argv+1);
 800a8e0:	f106 39ff 	add.w	r9, r6, #4294967295	; 0xffffffff
    MAX2870TuneRequest tune = *max2870getCurrentTuning(pll);
 800a8e4:	466e      	mov	r6, sp
 800a8e6:	f104 0708 	add.w	r7, r4, #8
 800a8ea:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800a8ec:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800a8ee:	e897 0003 	ldmia.w	r7, {r0, r1}
    if(argc >= 1) {
 800a8f2:	f1b9 0f00 	cmp.w	r9, #0
    MAX2870TuneRequest tune = *max2870getCurrentTuning(pll);
 800a8f6:	e886 0003 	stmia.w	r6, {r0, r1}
    tune.fastLockDurationMicroseconds = 0;
 800a8fa:	f8cd c00c 	str.w	ip, [sp, #12]
    tune.useVCOAutotune = false;
 800a8fe:	f88d c010 	strb.w	ip, [sp, #16]
    if(argc >= 1) {
 800a902:	dd22      	ble.n	800a94a <cmdMax+0x96>
        tune.frequency = (uint64_t)strToInt(argv[0], 10) * 1000;
 800a904:	210a      	movs	r1, #10
 800a906:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800a90a:	f7fb fa41 	bl	8005d90 <strToInt>
 800a90e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a912:	fb80 0103 	smull	r0, r1, r0, r3
    if(argc >= 2) {
 800a916:	f1b9 0f01 	cmp.w	r9, #1
        tune.frequency = (uint64_t)strToInt(argv[0], 10) * 1000;
 800a91a:	e9cd 0100 	strd	r0, r1, [sp]
    if(argc >= 2) {
 800a91e:	d014      	beq.n	800a94a <cmdMax+0x96>
        tune.powerA = strToInt(argv[1], 10);
 800a920:	210a      	movs	r1, #10
 800a922:	f8d8 0008 	ldr.w	r0, [r8, #8]
 800a926:	f7fb fa33 	bl	8005d90 <strToInt>
    if(argc >= 3) {
 800a92a:	f1b9 0f02 	cmp.w	r9, #2
        tune.powerA = strToInt(argv[1], 10);
 800a92e:	f88d 0008 	strb.w	r0, [sp, #8]
    if(argc >= 3) {
 800a932:	d00a      	beq.n	800a94a <cmdMax+0x96>
        tune.useVCOAutotune = (strToInt(argv[2], 10) > 0);
 800a934:	210a      	movs	r1, #10
 800a936:	f8d8 000c 	ldr.w	r0, [r8, #12]
 800a93a:	f7fb fa29 	bl	8005d90 <strToInt>
 800a93e:	2800      	cmp	r0, #0
 800a940:	bfd4      	ite	le
 800a942:	2000      	movle	r0, #0
 800a944:	2001      	movgt	r0, #1
 800a946:	f88d 0010 	strb.w	r0, [sp, #16]
    MAX2870TuneResult result = max2870Tune(pll, &tune);
 800a94a:	4669      	mov	r1, sp
 800a94c:	4620      	mov	r0, r4
 800a94e:	f7fe fd19 	bl	8009384 <max2870Tune>
    if(result == TUNE_OK) {
 800a952:	2800      	cmp	r0, #0
 800a954:	f040 80bb 	bne.w	800aace <cmdMax+0x21a>
        max2870StatusPrint(pll, chp);
 800a958:	4629      	mov	r1, r5
 800a95a:	4620      	mov	r0, r4
 800a95c:	f7ff fe9a 	bl	800a694 <max2870StatusPrint>
        chprintf(chp, SHELL_NEWLINE_STR);
 800a960:	4628      	mov	r0, r5
 800a962:	495e      	ldr	r1, [pc, #376]	; (800aadc <cmdMax+0x228>)
 800a964:	f7fd ff34 	bl	80087d0 <chprintf>
    return lock == 0xFF;
}

const char* max2870TuneResultToString(MAX2870TuneResult result)
{
    if(result == TUNE_OK) return "OK";
 800a968:	4a5d      	ldr	r2, [pc, #372]	; (800aae0 <cmdMax+0x22c>)
    chprintf(chp, "Tuning result: %s"SHELL_NEWLINE_STR, max2870TuneResultToString(result));
 800a96a:	495e      	ldr	r1, [pc, #376]	; (800aae4 <cmdMax+0x230>)
        chprintf(chp, "Digital Lock Detect: %u"SHELL_NEWLINE_STR, max2870GetDigitalLockDetect(pll));
 800a96c:	4628      	mov	r0, r5
 800a96e:	f7fd ff2f 	bl	80087d0 <chprintf>
 800a972:	e7aa      	b.n	800a8ca <cmdMax+0x16>
    if(result == TUNE_CANT_FASTLOCK) return "Invalid fastlock command";
    if(result == TUNE_NOT_LOCKED) return "Lock failed";
 800a974:	1d06      	adds	r6, r0, #4
 800a976:	d008      	beq.n	800a98a <cmdMax+0xd6>
    if(result == TUNE_PLL_N_OUT_OF_RANGE) return "N out of range";
 800a978:	1c84      	adds	r4, r0, #2
 800a97a:	d008      	beq.n	800a98e <cmdMax+0xda>
    if(result == TUNE_FREQUENCY_OUT_OF_RANGE) return "Frequency out of range";
 800a97c:	4a5a      	ldr	r2, [pc, #360]	; (800aae8 <cmdMax+0x234>)
 800a97e:	4b5b      	ldr	r3, [pc, #364]	; (800aaec <cmdMax+0x238>)
 800a980:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800a984:	bf08      	it	eq
 800a986:	461a      	moveq	r2, r3
 800a988:	e7ef      	b.n	800a96a <cmdMax+0xb6>
    if(result == TUNE_NOT_LOCKED) return "Lock failed";
 800a98a:	4a59      	ldr	r2, [pc, #356]	; (800aaf0 <cmdMax+0x23c>)
 800a98c:	e7ed      	b.n	800a96a <cmdMax+0xb6>
    if(result == TUNE_PLL_N_OUT_OF_RANGE) return "N out of range";
 800a98e:	4a59      	ldr	r2, [pc, #356]	; (800aaf4 <cmdMax+0x240>)
 800a990:	e7eb      	b.n	800a96a <cmdMax+0xb6>
    } else if(!strcmp(argv[0], "status")) {
 800a992:	4638      	mov	r0, r7
 800a994:	4958      	ldr	r1, [pc, #352]	; (800aaf8 <cmdMax+0x244>)
 800a996:	f7f9 f9bf 	bl	8003d18 <strcmp>
 800a99a:	b920      	cbnz	r0, 800a9a6 <cmdMax+0xf2>
        max2870StatusPrint(pll, chp);
 800a99c:	4629      	mov	r1, r5
 800a99e:	4620      	mov	r0, r4
 800a9a0:	f7ff fe78 	bl	800a694 <max2870StatusPrint>
 800a9a4:	e791      	b.n	800a8ca <cmdMax+0x16>
    } else if(!strcmp(argv[0], "vcocache")) {
 800a9a6:	4638      	mov	r0, r7
 800a9a8:	4954      	ldr	r1, [pc, #336]	; (800aafc <cmdMax+0x248>)
 800a9aa:	f7f9 f9b5 	bl	8003d18 <strcmp>
 800a9ae:	2800      	cmp	r0, #0
 800a9b0:	d15c      	bne.n	800aa6c <cmdMax+0x1b8>
    if(argc == 0) {
 800a9b2:	1e77      	subs	r7, r6, #1
 800a9b4:	d121      	bne.n	800a9fa <cmdMax+0x146>
    uint32_t frequency = MAX2870_VCO_MIN_FREQUENCY/1000000 + MAX2870_VCO_INCREMENT/2000000;
 800a9b6:	f640 36c2 	movw	r6, #3010	; 0xbc2
        chprintf(stdout, "Frequency: %u MHz, VCO Band: ", frequency);
 800a9ba:	4f51      	ldr	r7, [pc, #324]	; (800ab00 <cmdMax+0x24c>)
            chprintf(stdout, "Invalid"SHELL_NEWLINE_STR);
 800a9bc:	f8df 8164 	ldr.w	r8, [pc, #356]	; 800ab24 <cmdMax+0x270>
            chprintf(stdout, "%u"SHELL_NEWLINE_STR, vco & 0x3f);
 800a9c0:	f8df 9164 	ldr.w	r9, [pc, #356]	; 800ab28 <cmdMax+0x274>
 800a9c4:	3420      	adds	r4, #32
        chprintf(stdout, "Frequency: %u MHz, VCO Band: ", frequency);
 800a9c6:	4632      	mov	r2, r6
 800a9c8:	4639      	mov	r1, r7
 800a9ca:	4628      	mov	r0, r5
 800a9cc:	f7fd ff00 	bl	80087d0 <chprintf>
        uint8_t vco = driver->vcoCache[i];
 800a9d0:	f814 2b01 	ldrb.w	r2, [r4], #1
        if(vco & 0x80) {
 800a9d4:	0610      	lsls	r0, r2, #24
 800a9d6:	d50b      	bpl.n	800a9f0 <cmdMax+0x13c>
            chprintf(stdout, "%u"SHELL_NEWLINE_STR, vco & 0x3f);
 800a9d8:	4649      	mov	r1, r9
 800a9da:	4628      	mov	r0, r5
 800a9dc:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800a9e0:	f7fd fef6 	bl	80087d0 <chprintf>
    for(unsigned int i=0; i<sizeof(driver->vcoCache); i++) {
 800a9e4:	f241 737a 	movw	r3, #6010	; 0x177a
        frequency += MAX2870_VCO_INCREMENT/1000000;
 800a9e8:	3614      	adds	r6, #20
    for(unsigned int i=0; i<sizeof(driver->vcoCache); i++) {
 800a9ea:	429e      	cmp	r6, r3
 800a9ec:	d1eb      	bne.n	800a9c6 <cmdMax+0x112>
 800a9ee:	e76c      	b.n	800a8ca <cmdMax+0x16>
            chprintf(stdout, "Invalid"SHELL_NEWLINE_STR);
 800a9f0:	4641      	mov	r1, r8
 800a9f2:	4628      	mov	r0, r5
 800a9f4:	f7fd feec 	bl	80087d0 <chprintf>
 800a9f8:	e7f4      	b.n	800a9e4 <cmdMax+0x130>
    } else if(!strcmp(argv[0], "calibrate")) {
 800a9fa:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800a9fe:	4941      	ldr	r1, [pc, #260]	; (800ab04 <cmdMax+0x250>)
 800aa00:	4630      	mov	r0, r6
 800aa02:	f7f9 f989 	bl	8003d18 <strcmp>
 800aa06:	b938      	cbnz	r0, 800aa18 <cmdMax+0x164>
        max2870VcoPrecal(pll);
 800aa08:	4620      	mov	r0, r4
 800aa0a:	f7fe fc55 	bl	80092b8 <max2870VcoPrecal>
        chprintf(chp, "Done"SHELL_NEWLINE_STR);
 800aa0e:	493e      	ldr	r1, [pc, #248]	; (800ab08 <cmdMax+0x254>)
            chprintf(chp, "The cow says moo!"SHELL_NEWLINE_STR);
 800aa10:	4628      	mov	r0, r5
 800aa12:	f7fd fedd 	bl	80087d0 <chprintf>
 800aa16:	e758      	b.n	800a8ca <cmdMax+0x16>
    } else if(argc >= 2 && !strcmp(argv[0], "set")) {
 800aa18:	2f01      	cmp	r7, #1
 800aa1a:	f77f af53 	ble.w	800a8c4 <cmdMax+0x10>
 800aa1e:	4630      	mov	r0, r6
 800aa20:	493a      	ldr	r1, [pc, #232]	; (800ab0c <cmdMax+0x258>)
 800aa22:	f7f9 f979 	bl	8003d18 <strcmp>
 800aa26:	4606      	mov	r6, r0
 800aa28:	2800      	cmp	r0, #0
 800aa2a:	f47f af4b 	bne.w	800a8c4 <cmdMax+0x10>
        unsigned int a = strToInt(argv[1], 10);
 800aa2e:	210a      	movs	r1, #10
 800aa30:	f8d8 0008 	ldr.w	r0, [r8, #8]
 800aa34:	f7fb f9ac 	bl	8005d90 <strToInt>
        if(argc == 3) {
 800aa38:	2f03      	cmp	r7, #3
        unsigned int a = strToInt(argv[1], 10);
 800aa3a:	4681      	mov	r9, r0
        if(argc == 3) {
 800aa3c:	d10b      	bne.n	800aa56 <cmdMax+0x1a2>
            b = strToInt(argv[2], 10) | 0x80;
 800aa3e:	210a      	movs	r1, #10
 800aa40:	f8d8 000c 	ldr.w	r0, [r8, #12]
 800aa44:	f7fb f9a4 	bl	8005d90 <strToInt>
 800aa48:	f040 0380 	orr.w	r3, r0, #128	; 0x80
    return &driver->currentTune;
}

bool max2870VcoCacheSet(MAX2870Driver* driver, unsigned int vcoIndex, uint8_t value)
{
    if(vcoIndex > sizeof(driver->vcoCache)) {
 800aa4c:	f1b9 0f96 	cmp.w	r9, #150	; 0x96
 800aa50:	d903      	bls.n	800aa5a <cmdMax+0x1a6>
            chprintf(chp, "The cow says moo!"SHELL_NEWLINE_STR);
 800aa52:	492f      	ldr	r1, [pc, #188]	; (800ab10 <cmdMax+0x25c>)
 800aa54:	e7dc      	b.n	800aa10 <cmdMax+0x15c>
        unsigned int b = 0;
 800aa56:	4633      	mov	r3, r6
 800aa58:	e7f8      	b.n	800aa4c <cmdMax+0x198>
        return false;
    }

    driver->vcoCache[vcoIndex] = value;
 800aa5a:	444c      	add	r4, r9
            chprintf(chp, "%u=0x%02x"SHELL_NEWLINE_STR,a,b);
 800aa5c:	464a      	mov	r2, r9
 800aa5e:	4628      	mov	r0, r5
 800aa60:	492c      	ldr	r1, [pc, #176]	; (800ab14 <cmdMax+0x260>)
        if(max2870VcoCacheSet(pll, a , b)) {
 800aa62:	f884 3020 	strb.w	r3, [r4, #32]
            chprintf(chp, "%u=0x%02x"SHELL_NEWLINE_STR,a,b);
 800aa66:	f7fd feb3 	bl	80087d0 <chprintf>
 800aa6a:	e72e      	b.n	800a8ca <cmdMax+0x16>
    } else if(!strcmp(argv[0], "dld")) {
 800aa6c:	4638      	mov	r0, r7
 800aa6e:	492a      	ldr	r1, [pc, #168]	; (800ab18 <cmdMax+0x264>)
 800aa70:	f7f9 f952 	bl	8003d18 <strcmp>
 800aa74:	2800      	cmp	r0, #0
 800aa76:	f47f af25 	bne.w	800a8c4 <cmdMax+0x10>
    max2870SpiState(driver, true);
 800aa7a:	4620      	mov	r0, r4
 800aa7c:	f7fd f826 	bl	8007acc <max2870SpiState.constprop.0>
    max2870SetMUXOut(driver, 0x6);
 800aa80:	4620      	mov	r0, r4
 800aa82:	2106      	movs	r1, #6
 800aa84:	f7fc ffe4 	bl	8007a50 <max2870SetMUXOut>
    spiReceive(driver->config->spiPort, 1, &lock);
 800aa88:	6823      	ldr	r3, [r4, #0]
 800aa8a:	6818      	ldr	r0, [r3, #0]
  osalDbgCheck((spip != NULL) && (n > 0U) && (rxbuf != NULL));
 800aa8c:	b910      	cbnz	r0, 800aa94 <cmdMax+0x1e0>
 800aa8e:	f7f9 fc57 	bl	8004340 <vTaskEndScheduler>
 800aa92:	e7fe      	b.n	800aa92 <cmdMax+0x1de>
  osalSysLock();
 800aa94:	f7f9 fba6 	bl	80041e4 <vPortEnterCritical>
  osalDbgAssert(spip->state == SPI_READY, "not ready");
 800aa98:	7803      	ldrb	r3, [r0, #0]
 800aa9a:	2b02      	cmp	r3, #2
 800aa9c:	d002      	beq.n	800aaa4 <cmdMax+0x1f0>
 800aa9e:	f7f9 fc4f 	bl	8004340 <vTaskEndScheduler>
 800aaa2:	e7fe      	b.n	800aaa2 <cmdMax+0x1ee>
  osalDbgAssert(spip->config->end_cb == NULL, "has callback");
 800aaa4:	6843      	ldr	r3, [r0, #4]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	b113      	cbz	r3, 800aab0 <cmdMax+0x1fc>
 800aaaa:	f7f9 fc49 	bl	8004340 <vTaskEndScheduler>
 800aaae:	e7fe      	b.n	800aaae <cmdMax+0x1fa>
 800aab0:	466a      	mov	r2, sp
 800aab2:	2101      	movs	r1, #1
 800aab4:	f7fc fb1a 	bl	80070ec <spiReceive.part.0>
    if(enable) {
 800aab8:	4620      	mov	r0, r4
 800aaba:	f7fd fbc5 	bl	8008248 <max2870SpiState.part.0>
    return lock == 0xFF;
 800aabe:	f89d 2000 	ldrb.w	r2, [sp]
        chprintf(chp, "Digital Lock Detect: %u"SHELL_NEWLINE_STR, max2870GetDigitalLockDetect(pll));
 800aac2:	f1a2 01ff 	sub.w	r1, r2, #255	; 0xff
 800aac6:	424a      	negs	r2, r1
 800aac8:	414a      	adcs	r2, r1
 800aaca:	4914      	ldr	r1, [pc, #80]	; (800ab1c <cmdMax+0x268>)
 800aacc:	e74e      	b.n	800a96c <cmdMax+0xb8>
    if(result == TUNE_CANT_FASTLOCK) return "Invalid fastlock command";
 800aace:	1cc3      	adds	r3, r0, #3
 800aad0:	f47f af50 	bne.w	800a974 <cmdMax+0xc0>
 800aad4:	4a12      	ldr	r2, [pc, #72]	; (800ab20 <cmdMax+0x26c>)
 800aad6:	e748      	b.n	800a96a <cmdMax+0xb6>
 800aad8:	0800c2db 	.word	0x0800c2db
 800aadc:	0800c157 	.word	0x0800c157
 800aae0:	0800b8cd 	.word	0x0800b8cd
 800aae4:	0800c2e0 	.word	0x0800c2e0
 800aae8:	0800c282 	.word	0x0800c282
 800aaec:	0800c2ab 	.word	0x0800c2ab
 800aaf0:	0800c29f 	.word	0x0800c29f
 800aaf4:	0800c290 	.word	0x0800c290
 800aaf8:	0800bb83 	.word	0x0800bb83
 800aafc:	0800c2f4 	.word	0x0800c2f4
 800ab00:	0800c2fd 	.word	0x0800c2fd
 800ab04:	0800c325 	.word	0x0800c325
 800ab08:	0800c32f 	.word	0x0800c32f
 800ab0c:	0800bddb 	.word	0x0800bddb
 800ab10:	0800c336 	.word	0x0800c336
 800ab14:	0800c34a 	.word	0x0800c34a
 800ab18:	0800c356 	.word	0x0800c356
 800ab1c:	0800c35a 	.word	0x0800c35a
 800ab20:	0800c2c2 	.word	0x0800c2c2
 800ab24:	0800c31b 	.word	0x0800c31b
 800ab28:	0800bc5d 	.word	0x0800bc5d

0800ab2c <cmd_mem>:
#if (SHELL_CMD_MEM_ENABLED == TRUE) || defined(__DOXYGEN__)
static void cmd_mem(void* user, BaseSequentialStream *chp, int argc, char *argv[]) {
  size_t n, total, largest;
  (void)argv;
  (void)user;
  if (argc > 0) {
 800ab2c:	2a00      	cmp	r2, #0
static void cmd_mem(void* user, BaseSequentialStream *chp, int argc, char *argv[]) {
 800ab2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab30:	460c      	mov	r4, r1
  if (argc > 0) {
 800ab32:	dd06      	ble.n	800ab42 <cmd_mem+0x16>
    shellUsage(chp, "mem");
 800ab34:	4a14      	ldr	r2, [pc, #80]	; (800ab88 <cmd_mem+0x5c>)
 800ab36:	4915      	ldr	r1, [pc, #84]	; (800ab8c <cmd_mem+0x60>)
  }
  n = chHeapStatus(NULL, &total, &largest);
  chprintf(chp, "core free memory : %u bytes"SHELL_NEWLINE_STR, chCoreGetStatusX());
  chprintf(chp, "heap fragments   : %u"SHELL_NEWLINE_STR, n);
  chprintf(chp, "heap free total  : %u bytes"SHELL_NEWLINE_STR, total);
  chprintf(chp, "heap free largest: %u bytes"SHELL_NEWLINE_STR, largest);
 800ab38:	4620      	mov	r0, r4
}
 800ab3a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  chprintf(chp, "heap free largest: %u bytes"SHELL_NEWLINE_STR, largest);
 800ab3e:	f7fd be47 	b.w	80087d0 <chprintf>
 800ab42:	2500      	movs	r5, #0
 800ab44:	462e      	mov	r6, r5
 800ab46:	4b12      	ldr	r3, [pc, #72]	; (800ab90 <cmd_mem+0x64>)
 800ab48:	681f      	ldr	r7, [r3, #0]
 800ab4a:	4b12      	ldr	r3, [pc, #72]	; (800ab94 <cmd_mem+0x68>)
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	681a      	ldr	r2, [r3, #0]
 800ab50:	b98a      	cbnz	r2, 800ab76 <cmd_mem+0x4a>
  chprintf(chp, "core free memory : %u bytes"SHELL_NEWLINE_STR, chCoreGetStatusX());
 800ab52:	463a      	mov	r2, r7
 800ab54:	4910      	ldr	r1, [pc, #64]	; (800ab98 <cmd_mem+0x6c>)
 800ab56:	4620      	mov	r0, r4
 800ab58:	f7fd fe3a 	bl	80087d0 <chprintf>
  chprintf(chp, "heap fragments   : %u"SHELL_NEWLINE_STR, n);
 800ab5c:	4632      	mov	r2, r6
 800ab5e:	490f      	ldr	r1, [pc, #60]	; (800ab9c <cmd_mem+0x70>)
 800ab60:	4620      	mov	r0, r4
 800ab62:	f7fd fe35 	bl	80087d0 <chprintf>
  chprintf(chp, "heap free total  : %u bytes"SHELL_NEWLINE_STR, total);
 800ab66:	463a      	mov	r2, r7
 800ab68:	490d      	ldr	r1, [pc, #52]	; (800aba0 <cmd_mem+0x74>)
 800ab6a:	4620      	mov	r0, r4
 800ab6c:	f7fd fe30 	bl	80087d0 <chprintf>
  chprintf(chp, "heap free largest: %u bytes"SHELL_NEWLINE_STR, largest);
 800ab70:	462a      	mov	r2, r5
 800ab72:	490c      	ldr	r1, [pc, #48]	; (800aba4 <cmd_mem+0x78>)
 800ab74:	e7e0      	b.n	800ab38 <cmd_mem+0xc>
 800ab76:	685b      	ldr	r3, [r3, #4]
 800ab78:	b11b      	cbz	r3, 800ab82 <cmd_mem+0x56>
 800ab7a:	429d      	cmp	r5, r3
 800ab7c:	bf38      	it	cc
 800ab7e:	461d      	movcc	r5, r3
 800ab80:	3601      	adds	r6, #1
static void cmd_mem(void* user, BaseSequentialStream *chp, int argc, char *argv[]) {
 800ab82:	4613      	mov	r3, r2
 800ab84:	e7e3      	b.n	800ab4e <cmd_mem+0x22>
 800ab86:	bf00      	nop
 800ab88:	0800c374 	.word	0x0800c374
 800ab8c:	0800c378 	.word	0x0800c378
 800ab90:	200013a4 	.word	0x200013a4
 800ab94:	20001618 	.word	0x20001618
 800ab98:	0800c384 	.word	0x0800c384
 800ab9c:	0800c3a2 	.word	0x0800c3a2
 800aba0:	0800c3ba 	.word	0x0800c3ba
 800aba4:	0800c3d8 	.word	0x0800c3d8

0800aba8 <cmd_systime>:
  if (argc > 0) {
 800aba8:	2a00      	cmp	r2, #0
static void cmd_systime(void* user, BaseSequentialStream *chp, int argc, char *argv[]) {
 800abaa:	4608      	mov	r0, r1
 800abac:	b508      	push	{r3, lr}
  if (argc > 0) {
 800abae:	dd05      	ble.n	800abbc <cmd_systime+0x14>
    shellUsage(chp, "systime");
 800abb0:	4a05      	ldr	r2, [pc, #20]	; (800abc8 <cmd_systime+0x20>)
 800abb2:	4906      	ldr	r1, [pc, #24]	; (800abcc <cmd_systime+0x24>)
}
 800abb4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  chprintf(chp, "%lu"SHELL_NEWLINE_STR, (unsigned long)chVTGetSystemTime());
 800abb8:	f7fd be0a 	b.w	80087d0 <chprintf>
 800abbc:	f7f9 fa92 	bl	80040e4 <vPortValidateInterruptPriority>
 800abc0:	4b03      	ldr	r3, [pc, #12]	; (800abd0 <cmd_systime+0x28>)
 800abc2:	4904      	ldr	r1, [pc, #16]	; (800abd4 <cmd_systime+0x2c>)
 800abc4:	681a      	ldr	r2, [r3, #0]
 800abc6:	e7f5      	b.n	800abb4 <cmd_systime+0xc>
 800abc8:	0800c3f6 	.word	0x0800c3f6
 800abcc:	0800c378 	.word	0x0800c378
 800abd0:	20001648 	.word	0x20001648
 800abd4:	0800c3fe 	.word	0x0800c3fe

0800abd8 <cmd_echo>:
  if (argc != 1) {
 800abd8:	2a01      	cmp	r2, #1
static void cmd_echo(void* user, BaseSequentialStream *chp, int argc, char *argv[]) {
 800abda:	4608      	mov	r0, r1
    shellUsage(chp, "echo \"message\"");
 800abdc:	bf19      	ittee	ne
 800abde:	4a03      	ldrne	r2, [pc, #12]	; (800abec <cmd_echo+0x14>)
 800abe0:	4903      	ldrne	r1, [pc, #12]	; (800abf0 <cmd_echo+0x18>)
  chprintf(chp, "%s"SHELL_NEWLINE_STR, argv[0]);
 800abe2:	681a      	ldreq	r2, [r3, #0]
 800abe4:	4903      	ldreq	r1, [pc, #12]	; (800abf4 <cmd_echo+0x1c>)
 800abe6:	f7fd bdf3 	b.w	80087d0 <chprintf>
 800abea:	bf00      	nop
 800abec:	0800c404 	.word	0x0800c404
 800abf0:	0800c378 	.word	0x0800c378
 800abf4:	0800c4c9 	.word	0x0800c4c9

0800abf8 <cmd_info>:
  if (argc > 0) {
 800abf8:	2a00      	cmp	r2, #0
static void cmd_info(void* user, BaseSequentialStream *chp, int argc, char *argv[]) {
 800abfa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800abfc:	460c      	mov	r4, r1
  if (argc > 0) {
 800abfe:	dd07      	ble.n	800ac10 <cmd_info+0x18>
    shellUsage(chp, "info");
 800ac00:	4620      	mov	r0, r4
 800ac02:	4a1d      	ldr	r2, [pc, #116]	; (800ac78 <cmd_info+0x80>)
 800ac04:	491d      	ldr	r1, [pc, #116]	; (800ac7c <cmd_info+0x84>)
}
 800ac06:	b003      	add	sp, #12
 800ac08:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    shellUsage(chp, "info");
 800ac0c:	f7fd bde0 	b.w	80087d0 <chprintf>
  chprintf(chp, "Kernel:       %s"SHELL_NEWLINE_STR, CH_KERNEL_VERSION);
 800ac10:	4a1b      	ldr	r2, [pc, #108]	; (800ac80 <cmd_info+0x88>)
 800ac12:	491c      	ldr	r1, [pc, #112]	; (800ac84 <cmd_info+0x8c>)
 800ac14:	4620      	mov	r0, r4
 800ac16:	f7fd fddb 	bl	80087d0 <chprintf>
  chprintf(chp, "Architecture: %s"SHELL_NEWLINE_STR, PORT_ARCHITECTURE_NAME);
 800ac1a:	4a1b      	ldr	r2, [pc, #108]	; (800ac88 <cmd_info+0x90>)
 800ac1c:	491b      	ldr	r1, [pc, #108]	; (800ac8c <cmd_info+0x94>)
 800ac1e:	4620      	mov	r0, r4
 800ac20:	f7fd fdd6 	bl	80087d0 <chprintf>
  chprintf(chp, "Platform:     %s"SHELL_NEWLINE_STR, PLATFORM_NAME);
 800ac24:	4a1a      	ldr	r2, [pc, #104]	; (800ac90 <cmd_info+0x98>)
 800ac26:	491b      	ldr	r1, [pc, #108]	; (800ac94 <cmd_info+0x9c>)
 800ac28:	4620      	mov	r0, r4
 800ac2a:	f7fd fdd1 	bl	80087d0 <chprintf>
  chprintf(chp, "Board:        %s"SHELL_NEWLINE_STR, BOARD_NAME);
 800ac2e:	4a1a      	ldr	r2, [pc, #104]	; (800ac98 <cmd_info+0xa0>)
 800ac30:	491a      	ldr	r1, [pc, #104]	; (800ac9c <cmd_info+0xa4>)
 800ac32:	4620      	mov	r0, r4
 800ac34:	f7fd fdcc 	bl	80087d0 <chprintf>
  chprintf(chp, "Build time:   %s%s%s"SHELL_NEWLINE_STR, __DATE__, " - ", __TIME__);
 800ac38:	4b19      	ldr	r3, [pc, #100]	; (800aca0 <cmd_info+0xa8>)
 800ac3a:	4a1a      	ldr	r2, [pc, #104]	; (800aca4 <cmd_info+0xac>)
 800ac3c:	491a      	ldr	r1, [pc, #104]	; (800aca8 <cmd_info+0xb0>)
 800ac3e:	9300      	str	r3, [sp, #0]
 800ac40:	4620      	mov	r0, r4
 800ac42:	4b1a      	ldr	r3, [pc, #104]	; (800acac <cmd_info+0xb4>)
 800ac44:	f7fd fdc4 	bl	80087d0 <chprintf>
  chprintf(chp, "Build ID:     ");
 800ac48:	4620      	mov	r0, r4
 800ac4a:	4919      	ldr	r1, [pc, #100]	; (800acb0 <cmd_info+0xb8>)
 800ac4c:	f7fd fdc0 	bl	80087d0 <chprintf>
  for(uint8_t* i=&__buildid_base__+16; i<&__buildid_end__; i++){
 800ac50:	4d18      	ldr	r5, [pc, #96]	; (800acb4 <cmd_info+0xbc>)
 800ac52:	4e19      	ldr	r6, [pc, #100]	; (800acb8 <cmd_info+0xc0>)
    chprintf(chp, "%02x", *i);
 800ac54:	4f19      	ldr	r7, [pc, #100]	; (800acbc <cmd_info+0xc4>)
  for(uint8_t* i=&__buildid_base__+16; i<&__buildid_end__; i++){
 800ac56:	42b5      	cmp	r5, r6
 800ac58:	d306      	bcc.n	800ac68 <cmd_info+0x70>
  chprintf(chp, SHELL_NEWLINE_STR);
 800ac5a:	4620      	mov	r0, r4
 800ac5c:	4918      	ldr	r1, [pc, #96]	; (800acc0 <cmd_info+0xc8>)
}
 800ac5e:	b003      	add	sp, #12
 800ac60:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  chprintf(chp, SHELL_NEWLINE_STR);
 800ac64:	f7fd bdb4 	b.w	80087d0 <chprintf>
    chprintf(chp, "%02x", *i);
 800ac68:	4639      	mov	r1, r7
 800ac6a:	4620      	mov	r0, r4
 800ac6c:	f815 2b01 	ldrb.w	r2, [r5], #1
 800ac70:	f7fd fdae 	bl	80087d0 <chprintf>
  for(uint8_t* i=&__buildid_base__+16; i<&__buildid_end__; i++){
 800ac74:	e7ef      	b.n	800ac56 <cmd_info+0x5e>
 800ac76:	bf00      	nop
 800ac78:	0800c413 	.word	0x0800c413
 800ac7c:	0800c378 	.word	0x0800c378
 800ac80:	0800c418 	.word	0x0800c418
 800ac84:	0800c425 	.word	0x0800c425
 800ac88:	0800c438 	.word	0x0800c438
 800ac8c:	0800c445 	.word	0x0800c445
 800ac90:	0800c458 	.word	0x0800c458
 800ac94:	0800c482 	.word	0x0800c482
 800ac98:	0800c495 	.word	0x0800c495
 800ac9c:	0800c4bb 	.word	0x0800c4bb
 800aca0:	0800c4f5 	.word	0x0800c4f5
 800aca4:	0800c4d2 	.word	0x0800c4d2
 800aca8:	0800c4de 	.word	0x0800c4de
 800acac:	0800c4ce 	.word	0x0800c4ce
 800acb0:	0800c4fe 	.word	0x0800c4fe
 800acb4:	0800cbc0 	.word	0x0800cbc0
 800acb8:	0800cbd4 	.word	0x0800cbd4
 800acbc:	0800c50d 	.word	0x0800c50d
 800acc0:	0800c157 	.word	0x0800c157

0800acc4 <cmd_exit>:
  if (argc > 0) {
 800acc4:	2a00      	cmp	r2, #0
static void cmd_exit(void* user, BaseSequentialStream *chp, int argc, char *argv[]) {
 800acc6:	4608      	mov	r0, r1
 800acc8:	b508      	push	{r3, lr}
  if (argc > 0) {
 800acca:	dd05      	ble.n	800acd8 <cmd_exit+0x14>
}
 800accc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    shellUsage(chp, "exit");
 800acd0:	4a06      	ldr	r2, [pc, #24]	; (800acec <cmd_exit+0x28>)
 800acd2:	4907      	ldr	r1, [pc, #28]	; (800acf0 <cmd_exit+0x2c>)
 800acd4:	f7fd bd7c 	b.w	80087d0 <chprintf>
 */
void shellExit(msg_t msg) {

  /* Atomically broadcasting the event source and terminating the thread,
     there is not a chSysUnlock() because the thread terminates upon return.*/
  chSysLock();
 800acd8:	f7f9 fa84 	bl	80041e4 <vPortEnterCritical>
}
static inline void chEvtBroadcast(event_source_t* event_source){
    osalEventBroadcastFlags(event_source, 1);
}
static inline void chEvtBroadcastI(event_source_t* event_source){
    osalEventBroadcastFlagsI(event_source, 1);
 800acdc:	2101      	movs	r1, #1
 800acde:	4805      	ldr	r0, [pc, #20]	; (800acf4 <cmd_exit+0x30>)
 800ace0:	f7f9 fc11 	bl	8004506 <osalEventBroadcastFlagsI>
}
 800ace4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    vTaskDelete(NULL);
 800ace8:	f7fa ba2e 	b.w	8005148 <vTaskDelete.constprop.0>
 800acec:	0800c512 	.word	0x0800c512
 800acf0:	0800c378 	.word	0x0800c378
 800acf4:	200012b8 	.word	0x200012b8

0800acf8 <syslogISRUnknownPriority>:
{
 800acf8:	b40f      	push	{r0, r1, r2, r3}
    if(__atomic_test_and_set(&syslogISRHasSomething, __ATOMIC_ACQUIRE)) {
 800acfa:	f04f 0201 	mov.w	r2, #1
{
 800acfe:	b530      	push	{r4, r5, lr}
    if(__atomic_test_and_set(&syslogISRHasSomething, __ATOMIC_ACQUIRE)) {
 800ad00:	4b11      	ldr	r3, [pc, #68]	; (800ad48 <syslogISRUnknownPriority+0x50>)
{
 800ad02:	b087      	sub	sp, #28
    if(__atomic_test_and_set(&syslogISRHasSomething, __ATOMIC_ACQUIRE)) {
 800ad04:	e8d3 5f4f 	ldrexb	r5, [r3]
 800ad08:	e8c3 2f41 	strexb	r1, r2, [r3]
 800ad0c:	2900      	cmp	r1, #0
 800ad0e:	d1f9      	bne.n	800ad04 <syslogISRUnknownPriority+0xc>
 800ad10:	b2eb      	uxtb	r3, r5
 800ad12:	f3bf 8f5b 	dmb	ish
 800ad16:	b9ab      	cbnz	r3, 800ad44 <syslogISRUnknownPriority+0x4c>
 *                      for ROM streams.
 */
void msObjectInit(MemoryStream *msp, uint8_t *buffer,
                  size_t size, size_t eos) {

  msp->vmt    = &vmt;
 800ad18:	490c      	ldr	r1, [pc, #48]	; (800ad4c <syslogISRUnknownPriority+0x54>)
  msp->buffer = buffer;
 800ad1a:	4c0d      	ldr	r4, [pc, #52]	; (800ad50 <syslogISRUnknownPriority+0x58>)
  msp->vmt    = &vmt;
 800ad1c:	9101      	str	r1, [sp, #4]
  msp->size   = size;
 800ad1e:	213f      	movs	r1, #63	; 0x3f
    va_start(args, format);
 800ad20:	aa0b      	add	r2, sp, #44	; 0x2c
  msp->eos    = eos;
 800ad22:	e9cd 1303 	strd	r1, r3, [sp, #12]
    chvprintf(chp, format, args);
 800ad26:	a801      	add	r0, sp, #4
 800ad28:	990a      	ldr	r1, [sp, #40]	; 0x28
  msp->offset = 0;
 800ad2a:	9305      	str	r3, [sp, #20]
    va_start(args, format);
 800ad2c:	9200      	str	r2, [sp, #0]
  msp->buffer = buffer;
 800ad2e:	9402      	str	r4, [sp, #8]
    chvprintf(chp, format, args);
 800ad30:	f7fb f878 	bl	8005e24 <chvprintf>
    return true;
 800ad34:	2001      	movs	r0, #1
    syslogISRBuffer[ms.eos] = 0;
 800ad36:	9b04      	ldr	r3, [sp, #16]
 800ad38:	54e5      	strb	r5, [r4, r3]
}
 800ad3a:	b007      	add	sp, #28
 800ad3c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ad40:	b004      	add	sp, #16
 800ad42:	4770      	bx	lr
        return false;
 800ad44:	2000      	movs	r0, #0
 800ad46:	e7f8      	b.n	800ad3a <syslogISRUnknownPriority+0x42>
 800ad48:	2000130c 	.word	0x2000130c
 800ad4c:	0800cb94 	.word	0x0800cb94
 800ad50:	200012cc 	.word	0x200012cc

0800ad54 <usb_event>:
{
 800ad54:	b538      	push	{r3, r4, r5, lr}
 800ad56:	4604      	mov	r4, r0
 800ad58:	2905      	cmp	r1, #5
 800ad5a:	d878      	bhi.n	800ae4e <usb_event+0xfa>
 800ad5c:	e8df f001 	tbb	[pc, r1]
 800ad60:	4e08034e 	.word	0x4e08034e
 800ad64:	6a4e      	.short	0x6a4e
            syslogISRUnknownPriority("USB address assigned.");
 800ad66:	483a      	ldr	r0, [pc, #232]	; (800ae50 <usb_event+0xfc>)
}
 800ad68:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            syslogISRUnknownPriority("USB address assigned.");
 800ad6c:	f7ff bfc4 	b.w	800acf8 <syslogISRUnknownPriority>
            osalSysLockFromISR();
 800ad70:	f7fa ff3c 	bl	8005bec <osalSysLockFromISR.lto_priv.0>
            usbInitEndpointI(usbp, USBD1_DATA_REQUEST_EP, &ep1config);
 800ad74:	4620      	mov	r0, r4
 800ad76:	2101      	movs	r1, #1
 800ad78:	4a36      	ldr	r2, [pc, #216]	; (800ae54 <usb_event+0x100>)
 800ad7a:	f7fd fcbe 	bl	80086fa <usbInitEndpointI>
            usbInitEndpointI(usbp, USBD1_INTERRUPT_REQUEST_EP, &ep2config);
 800ad7e:	2102      	movs	r1, #2
 800ad80:	4620      	mov	r0, r4
 800ad82:	4a35      	ldr	r2, [pc, #212]	; (800ae58 <usb_event+0x104>)
 800ad84:	f7fd fcb9 	bl	80086fa <usbInitEndpointI>
	__asm volatile( "mrs %0, basepri" : "=r"( ulBasePri ) );
 800ad88:	f3ef 8311 	mrs	r3, BASEPRI
	return (ulBasePri > 0)? pdTRUE : pdFALSE;
 800ad8c:	b19b      	cbz	r3, 800adb6 <usb_event+0x62>
  ibqp->bcounter  = 0;
 800ad8e:	2500      	movs	r5, #0
 800ad90:	4c32      	ldr	r4, [pc, #200]	; (800ae5c <usb_event+0x108>)
  ibqp->brdptr    = ibqp->buffers;
 800ad92:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  ibqp->top       = NULL;
 800ad94:	e9c4 5510 	strd	r5, r5, [r4, #64]	; 0x40
  ibqp->bwrptr    = ibqp->buffers;
 800ad98:	e9c4 330a 	strd	r3, r3, [r4, #40]	; 0x28
  ibqp->bcounter  = 0;
 800ad9c:	6265      	str	r5, [r4, #36]	; 0x24
  osalThreadDequeueAllI(&ibqp->waiting, MSG_RESET);
 800ad9e:	f104 0018 	add.w	r0, r4, #24
 800ada2:	f7f9 fbf4 	bl	800458e <osalThreadDequeueAllI.constprop.0>
  bqResumeX(&sdup->ibqueue);
 800ada6:	f884 5020 	strb.w	r5, [r4, #32]
	__asm volatile( "mrs %0, basepri" : "=r"( ulBasePri ) );
 800adaa:	f3ef 8311 	mrs	r3, BASEPRI
	return (ulBasePri > 0)? pdTRUE : pdFALSE;
 800adae:	b92b      	cbnz	r3, 800adbc <usb_event+0x68>
  osalDbgCheckClassI();
 800adb0:	f7f9 fac6 	bl	8004340 <vTaskEndScheduler>
 800adb4:	e7fe      	b.n	800adb4 <usb_event+0x60>
  osalDbgCheckClassI();
 800adb6:	f7f9 fac3 	bl	8004340 <vTaskEndScheduler>
 800adba:	e7fe      	b.n	800adba <usb_event+0x66>
  obqp->bcounter  = bqSizeX(obqp);
 800adbc:	6f23      	ldr	r3, [r4, #112]	; 0x70
  osalThreadDequeueAllI(&obqp->waiting, MSG_RESET);
 800adbe:	f104 0050 	add.w	r0, r4, #80	; 0x50
  obqp->bcounter  = bqSizeX(obqp);
 800adc2:	65e3      	str	r3, [r4, #92]	; 0x5c
  obqp->brdptr    = obqp->buffers;
 800adc4:	6f63      	ldr	r3, [r4, #116]	; 0x74
  obqp->top       = NULL;
 800adc6:	e9c4 551e 	strd	r5, r5, [r4, #120]	; 0x78
  obqp->bwrptr    = obqp->buffers;
 800adca:	e9c4 3318 	strd	r3, r3, [r4, #96]	; 0x60
  osalThreadDequeueAllI(&obqp->waiting, MSG_RESET);
 800adce:	f7f9 fbde 	bl	800458e <osalThreadDequeueAllI.constprop.0>
  chnAddFlagsI(sdup, CHN_CONNECTED);
 800add2:	1d20      	adds	r0, r4, #4
 800add4:	2101      	movs	r1, #1
  bqResumeX(&sdup->obqueue);
 800add6:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
  chnAddFlagsI(sdup, CHN_CONNECTED);
 800adda:	f7f9 fb94 	bl	8004506 <osalEventBroadcastFlagsI>
  (void) sdu_start_receive(sdup);
 800adde:	4620      	mov	r0, r4
        if(!usbConnectState) {
 800ade0:	4c1f      	ldr	r4, [pc, #124]	; (800ae60 <usb_event+0x10c>)
 800ade2:	f7fc f9cb 	bl	800717c <sdu_start_receive>
 800ade6:	7822      	ldrb	r2, [r4, #0]
 800ade8:	b912      	cbnz	r2, 800adf0 <usb_event+0x9c>
            syslogISRUnknownPriority("USB up.");
 800adea:	481e      	ldr	r0, [pc, #120]	; (800ae64 <usb_event+0x110>)
 800adec:	f7ff ff84 	bl	800acf8 <syslogISRUnknownPriority>
    usbConnectState = up;
 800adf0:	2301      	movs	r3, #1
 800adf2:	7023      	strb	r3, [r4, #0]
}
 800adf4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            osalSysUnlockFromISR();
 800adf8:	f7fa bef2 	b.w	8005be0 <osalSysUnlockFromISR.lto_priv.0>
  bqSuspendI(&sdup->ibqueue);
 800adfc:	2501      	movs	r5, #1
  chnAddFlagsI(sdup, CHN_DISCONNECTED);
 800adfe:	4c17      	ldr	r4, [pc, #92]	; (800ae5c <usb_event+0x108>)
            osalSysLockFromISR();
 800ae00:	f7fa fef4 	bl	8005bec <osalSysLockFromISR.lto_priv.0>
 800ae04:	2102      	movs	r1, #2
 800ae06:	1d20      	adds	r0, r4, #4
 800ae08:	f7f9 fb7d 	bl	8004506 <osalEventBroadcastFlagsI>
  bqSuspendI(&sdup->ibqueue);
 800ae0c:	f104 0018 	add.w	r0, r4, #24
 800ae10:	f884 5020 	strb.w	r5, [r4, #32]
 800ae14:	f7f9 fbbb 	bl	800458e <osalThreadDequeueAllI.constprop.0>
  bqSuspendI(&sdup->obqueue);
 800ae18:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
 800ae1c:	f104 0050 	add.w	r0, r4, #80	; 0x50
        if(usbConnectState) {
 800ae20:	4c0f      	ldr	r4, [pc, #60]	; (800ae60 <usb_event+0x10c>)
 800ae22:	f7f9 fbb4 	bl	800458e <osalThreadDequeueAllI.constprop.0>
 800ae26:	7822      	ldrb	r2, [r4, #0]
 800ae28:	b112      	cbz	r2, 800ae30 <usb_event+0xdc>
            syslogISRUnknownPriority("USB down.");
 800ae2a:	480f      	ldr	r0, [pc, #60]	; (800ae68 <usb_event+0x114>)
 800ae2c:	f7ff ff64 	bl	800acf8 <syslogISRUnknownPriority>
    usbConnectState = up;
 800ae30:	2300      	movs	r3, #0
 800ae32:	e7de      	b.n	800adf2 <usb_event+0x9e>
  chnAddFlagsI(sdup, CHN_CONNECTED);
 800ae34:	4c09      	ldr	r4, [pc, #36]	; (800ae5c <usb_event+0x108>)
            osalSysLockFromISR();
 800ae36:	f7fa fed9 	bl	8005bec <osalSysLockFromISR.lto_priv.0>
 800ae3a:	2101      	movs	r1, #1
 800ae3c:	1d20      	adds	r0, r4, #4
 800ae3e:	f7f9 fb62 	bl	8004506 <osalEventBroadcastFlagsI>
  bqResumeX(&sdup->ibqueue);
 800ae42:	2300      	movs	r3, #0
 800ae44:	f884 3020 	strb.w	r3, [r4, #32]
  bqResumeX(&sdup->obqueue);
 800ae48:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 800ae4c:	e7d2      	b.n	800adf4 <usb_event+0xa0>
}
 800ae4e:	bd38      	pop	{r3, r4, r5, pc}
 800ae50:	0800c517 	.word	0x0800c517
 800ae54:	0800c844 	.word	0x0800c844
 800ae58:	0800c868 	.word	0x0800c868
 800ae5c:	20000a44 	.word	0x20000a44
 800ae60:	20001354 	.word	0x20001354
 800ae64:	0800c52d 	.word	0x0800c52d
 800ae68:	0800c535 	.word	0x0800c535

0800ae6c <BusFault_Handler>:
#error "the constant CORTEX_NUM_VECTORS must be between 8 and 240 inclusive"
#endif

extern void unhandledException(void);

void _unhandled_exception(void){
 800ae6c:	b508      	push	{r3, lr}
}

void unhandledException(void)
{
    /* Check which vector is active */
    unsigned int vectorId = NVIC_ICSR & 0x1ff;
 800ae6e:	4b0e      	ldr	r3, [pc, #56]	; (800aea8 <BusFault_Handler+0x3c>)
 800ae70:	6819      	ldr	r1, [r3, #0]

    if(vectorId >= 16) {
 800ae72:	f411 7ff8 	tst.w	r1, #496	; 0x1f0
 800ae76:	d013      	beq.n	800aea0 <BusFault_Handler+0x34>
    *pendReg = _BV(vectorId%32);
 800ae78:	2301      	movs	r3, #1
    unsigned int vectorId = NVIC_ICSR & 0x1ff;
 800ae7a:	f3c1 0108 	ubfx	r1, r1, #0, #9
        /* This can be masked */
        vectorId -= 16;
 800ae7e:	3910      	subs	r1, #16
    *pendReg = _BV(vectorId%32);
 800ae80:	f001 001f 	and.w	r0, r1, #31
 800ae84:	4083      	lsls	r3, r0
 800ae86:	4809      	ldr	r0, [pc, #36]	; (800aeac <BusFault_Handler+0x40>)
    volatile uint32_t* pendReg = (&NVIC_CPR) + (vectorId / 32);
 800ae88:	094a      	lsrs	r2, r1, #5
    *pendReg = _BV(vectorId%32);
 800ae8a:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
        volatile uint32_t* ceReg = (&NVIC_CER) + (vectorId / 32);
 800ae8e:	f5a0 7080 	sub.w	r0, r0, #256	; 0x100
        *ceReg = _BV(vectorId%32);
 800ae92:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
        clearInterrupt(vectorId, true);

        /* Report it */
        syslogISRUnknownPriority("Unhandled vector %u.", vectorId);
 800ae96:	4806      	ldr	r0, [pc, #24]	; (800aeb0 <BusFault_Handler+0x44>)
	unhandledException();
}
 800ae98:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800ae9c:	f7ff bf2c 	b.w	800acf8 <syslogISRUnknownPriority>
    } else {
        osalSysHalt("Fault");
 800aea0:	f7f9 fa4e 	bl	8004340 <vTaskEndScheduler>
 800aea4:	e7fe      	b.n	800aea4 <BusFault_Handler+0x38>
 800aea6:	bf00      	nop
 800aea8:	e000ed04 	.word	0xe000ed04
 800aeac:	e000e280 	.word	0xe000e280
 800aeb0:	0800c53f 	.word	0x0800c53f

0800aeb4 <parse_arguments>:
static char *parse_arguments(char *str, char **saveptr) {
 800aeb4:	b570      	push	{r4, r5, r6, lr}
 800aeb6:	460d      	mov	r5, r1
  if (str != NULL)
 800aeb8:	b100      	cbz	r0, 800aebc <parse_arguments+0x8>
    *saveptr = str;
 800aeba:	6008      	str	r0, [r1, #0]
  p = *saveptr;
 800aebc:	682e      	ldr	r6, [r5, #0]
  if (!p) {
 800aebe:	b17e      	cbz	r6, 800aee0 <parse_arguments+0x2c>
  p += strspn(p, " \t");
 800aec0:	490e      	ldr	r1, [pc, #56]	; (800aefc <parse_arguments+0x48>)
 800aec2:	4630      	mov	r0, r6
 800aec4:	f7f9 f856 	bl	8003f74 <strspn>
  if (*p == '"') {
 800aec8:	5c31      	ldrb	r1, [r6, r0]
  p += strspn(p, " \t");
 800aeca:	1834      	adds	r4, r6, r0
  if (*p == '"') {
 800aecc:	2922      	cmp	r1, #34	; 0x22
 800aece:	d10a      	bne.n	800aee6 <parse_arguments+0x32>
    p++;
 800aed0:	3401      	adds	r4, #1
    *saveptr = strpbrk(p, "\"");
 800aed2:	4620      	mov	r0, r4
 800aed4:	f7f8 febc 	bl	8003c50 <strchr>
  if (*saveptr != NULL) {
 800aed8:	b950      	cbnz	r0, 800aef0 <parse_arguments+0x3c>
 800aeda:	6028      	str	r0, [r5, #0]
  return *p != '\0' ? p : NULL;
 800aedc:	7823      	ldrb	r3, [r4, #0]
 800aede:	b903      	cbnz	r3, 800aee2 <parse_arguments+0x2e>
 800aee0:	2400      	movs	r4, #0
}
 800aee2:	4620      	mov	r0, r4
 800aee4:	bd70      	pop	{r4, r5, r6, pc}
    *saveptr = strpbrk(p, " \t");
 800aee6:	4620      	mov	r0, r4
 800aee8:	4904      	ldr	r1, [pc, #16]	; (800aefc <parse_arguments+0x48>)
 800aeea:	f7f9 f821 	bl	8003f30 <strpbrk>
 800aeee:	e7f3      	b.n	800aed8 <parse_arguments+0x24>
    *(*saveptr)++ = '\0';
 800aef0:	1c43      	adds	r3, r0, #1
 800aef2:	602b      	str	r3, [r5, #0]
 800aef4:	2300      	movs	r3, #0
 800aef6:	7003      	strb	r3, [r0, #0]
 800aef8:	e7f0      	b.n	800aedc <parse_arguments+0x28>
 800aefa:	bf00      	nop
 800aefc:	0800c554 	.word	0x0800c554

0800af00 <shellStartThread>:
{
 800af00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af04:	4681      	mov	r9, r0
  *(scfg->sc_histbuf) = 0;
 800af06:	2400      	movs	r4, #0
 800af08:	4bb9      	ldr	r3, [pc, #740]	; (800b1f0 <shellStartThread+0x2f0>)
 800af0a:	b0a5      	sub	sp, #148	; 0x94
 800af0c:	681b      	ldr	r3, [r3, #0]
    syslog("Shell 0x%08x started (%s).", activeShell, activeShell->taskName);
 800af0e:	4601      	mov	r1, r0
 800af10:	6802      	ldr	r2, [r0, #0]
 800af12:	65d8      	str	r0, [r3, #92]	; 0x5c
 800af14:	48b7      	ldr	r0, [pc, #732]	; (800b1f4 <shellStartThread+0x2f4>)
 800af16:	f7fd fe49 	bl	8008bac <syslog>
  const ShellCommand *scp = scfg->sc_commands;
 800af1a:	e9d9 7301 	ldrd	r7, r3, [r9, #4]
 800af1e:	9303      	str	r3, [sp, #12]
  *(scfg->sc_histbuf) = 0;
 800af20:	f8d9 300c 	ldr.w	r3, [r9, #12]
  chprintf(chp, SHELL_NEWLINE_STR);
 800af24:	4638      	mov	r0, r7
  *(scfg->sc_histbuf) = 0;
 800af26:	701c      	strb	r4, [r3, #0]
  ShellHistory hist = {
 800af28:	f8d9 300c 	ldr.w	r3, [r9, #12]
  chprintf(chp, SHELL_NEWLINE_STR);
 800af2c:	49b2      	ldr	r1, [pc, #712]	; (800b1f8 <shellStartThread+0x2f8>)
  ShellHistory hist = {
 800af2e:	9309      	str	r3, [sp, #36]	; 0x24
 800af30:	f8d9 3010 	ldr.w	r3, [r9, #16]
    }
    if (c == 16) {
      int len = get_history(shp, line, SHELL_HIST_DIR_BK);

      if (len > 0) {
        _shell_reset_cur(chp);
 800af34:	f8df b2e8 	ldr.w	fp, [pc, #744]	; 800b220 <shellStartThread+0x320>
  ShellHistory hist = {
 800af38:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
 800af3c:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
  chprintf(chp, SHELL_NEWLINE_STR);
 800af40:	f7fd fc46 	bl	80087d0 <chprintf>
  bool bracket = false;
 800af44:	9404      	str	r4, [sp, #16]
 800af46:	f04f 0800 	mov.w	r8, #0
  char *p = line;
 800af4a:	ad14      	add	r5, sp, #80	; 0x50
  bool escape = false;
 800af4c:	46c2      	mov	sl, r8
 800af4e:	462e      	mov	r6, r5
    chprintf(chp, SHELL_PROMPT_STR);
 800af50:	4638      	mov	r0, r7
 800af52:	49aa      	ldr	r1, [pc, #680]	; (800b1fc <shellStartThread+0x2fc>)
 800af54:	f7fd fc3c 	bl	80087d0 <chprintf>
  BaseSequentialStream *chp = scfg->sc_channel;
 800af58:	f8d9 4004 	ldr.w	r4, [r9, #4]
    if (streamRead(chp, (uint8_t *)&c, 1) == 0)
 800af5c:	6823      	ldr	r3, [r4, #0]
 800af5e:	2201      	movs	r2, #1
 800af60:	4620      	mov	r0, r4
 800af62:	685b      	ldr	r3, [r3, #4]
 800af64:	f10d 011f 	add.w	r1, sp, #31
 800af68:	4798      	blx	r3
 800af6a:	2800      	cmp	r0, #0
 800af6c:	d041      	beq.n	800aff2 <shellStartThread+0xf2>
    if (c == 27) {
 800af6e:	f89d 101f 	ldrb.w	r1, [sp, #31]
 800af72:	291b      	cmp	r1, #27
 800af74:	f000 812a 	beq.w	800b1cc <shellStartThread+0x2cc>
    if (escape) {
 800af78:	f1ba 0f00 	cmp.w	sl, #0
 800af7c:	d033      	beq.n	800afe6 <shellStartThread+0xe6>
      if (c == '[') {
 800af7e:	295b      	cmp	r1, #91	; 0x5b
 800af80:	f000 8127 	beq.w	800b1d2 <shellStartThread+0x2d2>
      if (bracket) {
 800af84:	f1b8 0f00 	cmp.w	r8, #0
 800af88:	d02b      	beq.n	800afe2 <shellStartThread+0xe2>
        if (c == 'A') {
 800af8a:	2941      	cmp	r1, #65	; 0x41
 800af8c:	d119      	bne.n	800afc2 <shellStartThread+0xc2>
          int len = get_history(shp, line, SHELL_HIST_DIR_BK);
 800af8e:	2200      	movs	r2, #0
 800af90:	4631      	mov	r1, r6
 800af92:	a809      	add	r0, sp, #36	; 0x24
 800af94:	f7fd fb54 	bl	8008640 <get_history>
          if (len > 0) {
 800af98:	f1b0 0800 	subs.w	r8, r0, #0
 800af9c:	dd1f      	ble.n	800afde <shellStartThread+0xde>
            _shell_reset_cur(chp);
 800af9e:	2308      	movs	r3, #8
 800afa0:	224a      	movs	r2, #74	; 0x4a
 800afa2:	4659      	mov	r1, fp
 800afa4:	4620      	mov	r0, r4
 800afa6:	f7fd fc13 	bl	80087d0 <chprintf>
            _shell_clr_line(chp);
 800afaa:	4995      	ldr	r1, [pc, #596]	; (800b200 <shellStartThread+0x300>)
 800afac:	4620      	mov	r0, r4
 800afae:	f7fd fc0f 	bl	80087d0 <chprintf>
            chprintf(chp, "%s", line);
 800afb2:	4632      	mov	r2, r6
 800afb4:	4620      	mov	r0, r4
 800afb6:	4993      	ldr	r1, [pc, #588]	; (800b204 <shellStartThread+0x304>)
 800afb8:	f7fd fc0a 	bl	80087d0 <chprintf>
            p = line + len;
 800afbc:	eb06 0508 	add.w	r5, r6, r8
 800afc0:	e00d      	b.n	800afde <shellStartThread+0xde>
        if (c == 'B') {
 800afc2:	2942      	cmp	r1, #66	; 0x42
 800afc4:	d10b      	bne.n	800afde <shellStartThread+0xde>
          int len = get_history(shp, line, SHELL_HIST_DIR_FW);
 800afc6:	2201      	movs	r2, #1
 800afc8:	4631      	mov	r1, r6
 800afca:	a809      	add	r0, sp, #36	; 0x24
 800afcc:	f7fd fb38 	bl	8008640 <get_history>
          if (len == 0)
 800afd0:	f1b0 0800 	subs.w	r8, r0, #0
 800afd4:	d102      	bne.n	800afdc <shellStartThread+0xdc>
            *line = 0;
 800afd6:	f88d 8050 	strb.w	r8, [sp, #80]	; 0x50
 800afda:	e7e0      	b.n	800af9e <shellStartThread+0x9e>
          if (len >= 0) {
 800afdc:	dadf      	bge.n	800af9e <shellStartThread+0x9e>
        bracket = false;
 800afde:	f04f 0800 	mov.w	r8, #0
      escape = false;
 800afe2:	46c2      	mov	sl, r8
 800afe4:	e7ba      	b.n	800af5c <shellStartThread+0x5c>
    if (c == 4) {
 800afe6:	2904      	cmp	r1, #4
 800afe8:	d116      	bne.n	800b018 <shellStartThread+0x118>
      chprintf(chp, "^D");
 800afea:	4620      	mov	r0, r4
 800afec:	4986      	ldr	r1, [pc, #536]	; (800b208 <shellStartThread+0x308>)
 800afee:	f7fd fbef 	bl	80087d0 <chprintf>
      chprintf(chp, SHELL_NEWLINE_STR);
 800aff2:	4638      	mov	r0, r7
 800aff4:	4980      	ldr	r1, [pc, #512]	; (800b1f8 <shellStartThread+0x2f8>)
 800aff6:	f7fd fbeb 	bl	80087d0 <chprintf>
      chprintf(chp, "logout");
 800affa:	4984      	ldr	r1, [pc, #528]	; (800b20c <shellStartThread+0x30c>)
 800affc:	4638      	mov	r0, r7
 800affe:	f7fd fbe7 	bl	80087d0 <chprintf>
  chSysLock();
 800b002:	f7f9 f8ef 	bl	80041e4 <vPortEnterCritical>
    osalEventBroadcastFlagsI(event_source, 1);
 800b006:	2101      	movs	r1, #1
 800b008:	4881      	ldr	r0, [pc, #516]	; (800b210 <shellStartThread+0x310>)
 800b00a:	f7f9 fa7c 	bl	8004506 <osalEventBroadcastFlagsI>
    vTaskDelete(NULL);
 800b00e:	f7fa f89b 	bl	8005148 <vTaskDelete.constprop.0>
}
 800b012:	b025      	add	sp, #148	; 0x94
 800b014:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ((c == 8) || (c == 127)) {
 800b018:	2908      	cmp	r1, #8
 800b01a:	d001      	beq.n	800b020 <shellStartThread+0x120>
 800b01c:	297f      	cmp	r1, #127	; 0x7f
 800b01e:	d112      	bne.n	800b046 <shellStartThread+0x146>
      if (p != line) {
 800b020:	42b5      	cmp	r5, r6
 800b022:	d09b      	beq.n	800af5c <shellStartThread+0x5c>
        streamPut(chp, 0x08);
 800b024:	6823      	ldr	r3, [r4, #0]
 800b026:	2108      	movs	r1, #8
 800b028:	689b      	ldr	r3, [r3, #8]
 800b02a:	4620      	mov	r0, r4
 800b02c:	4798      	blx	r3
        streamPut(chp, 0x20);
 800b02e:	6823      	ldr	r3, [r4, #0]
 800b030:	2120      	movs	r1, #32
 800b032:	689b      	ldr	r3, [r3, #8]
 800b034:	4620      	mov	r0, r4
 800b036:	4798      	blx	r3
        streamPut(chp, 0x08);
 800b038:	6823      	ldr	r3, [r4, #0]
 800b03a:	2108      	movs	r1, #8
 800b03c:	4620      	mov	r0, r4
 800b03e:	689b      	ldr	r3, [r3, #8]
 800b040:	4798      	blx	r3
        p--;
 800b042:	3d01      	subs	r5, #1
 800b044:	e78a      	b.n	800af5c <shellStartThread+0x5c>
    if (c == '\r') {
 800b046:	290d      	cmp	r1, #13
 800b048:	f040 8081 	bne.w	800b14e <shellStartThread+0x24e>
      chprintf(chp, SHELL_NEWLINE_STR);
 800b04c:	4620      	mov	r0, r4
 800b04e:	496a      	ldr	r1, [pc, #424]	; (800b1f8 <shellStartThread+0x2f8>)
 800b050:	f7fd fbbe 	bl	80087d0 <chprintf>
  if (length > shp->sh_size - 2)
 800b054:	990a      	ldr	r1, [sp, #40]	; 0x28
      save_history(shp, line, p - line);
 800b056:	1bac      	subs	r4, r5, r6
  if (length > shp->sh_size - 2)
 800b058:	1e4b      	subs	r3, r1, #1
 800b05a:	429c      	cmp	r4, r3
 800b05c:	da06      	bge.n	800b06c <shellStartThread+0x16c>
 800b05e:	462b      	mov	r3, r5
  while ((*(line + length -1) == ' ') && (length > 0))
 800b060:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b064:	2a20      	cmp	r2, #32
 800b066:	d12d      	bne.n	800b0c4 <shellStartThread+0x1c4>
 800b068:	2c00      	cmp	r4, #0
 800b06a:	dc29      	bgt.n	800b0c0 <shellStartThread+0x1c0>
      *p = 0;
 800b06c:	9b04      	ldr	r3, [sp, #16]
    lp = parse_arguments(line, &tokp);
 800b06e:	4630      	mov	r0, r6
      *p = 0;
 800b070:	702b      	strb	r3, [r5, #0]
    lp = parse_arguments(line, &tokp);
 800b072:	a908      	add	r1, sp, #32
 800b074:	f7ff ff1e 	bl	800aeb4 <parse_arguments>
 800b078:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800b07c:	4604      	mov	r4, r0
    n = 0;
 800b07e:	2600      	movs	r6, #0
 800b080:	4645      	mov	r5, r8
    while ((lp = parse_arguments(NULL, &tokp)) != NULL) {
 800b082:	2000      	movs	r0, #0
 800b084:	a908      	add	r1, sp, #32
 800b086:	f7ff ff15 	bl	800aeb4 <parse_arguments>
 800b08a:	2800      	cmp	r0, #0
 800b08c:	f040 80a3 	bne.w	800b1d6 <shellStartThread+0x2d6>
    args[n] = NULL;
 800b090:	ab24      	add	r3, sp, #144	; 0x90
 800b092:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 800b096:	f843 0c58 	str.w	r0, [r3, #-88]
    if (cmd != NULL) {
 800b09a:	2c00      	cmp	r4, #0
 800b09c:	f43f af53 	beq.w	800af46 <shellStartThread+0x46>
      if (strcmp(cmd, "help") == 0) {
 800b0a0:	4620      	mov	r0, r4
 800b0a2:	495c      	ldr	r1, [pc, #368]	; (800b214 <shellStartThread+0x314>)
 800b0a4:	f7f8 fe38 	bl	8003d18 <strcmp>
 800b0a8:	2800      	cmp	r0, #0
 800b0aa:	f040 80dc 	bne.w	800b266 <shellStartThread+0x366>
        if (n > 0) {
 800b0ae:	2e00      	cmp	r6, #0
 800b0b0:	f000 80b8 	beq.w	800b224 <shellStartThread+0x324>
          shellUsage(chp, "help");
 800b0b4:	4638      	mov	r0, r7
 800b0b6:	4a57      	ldr	r2, [pc, #348]	; (800b214 <shellStartThread+0x314>)
 800b0b8:	4957      	ldr	r1, [pc, #348]	; (800b218 <shellStartThread+0x318>)
 800b0ba:	f7fd fb89 	bl	80087d0 <chprintf>
          continue;
 800b0be:	e742      	b.n	800af46 <shellStartThread+0x46>
    length--;
 800b0c0:	3c01      	subs	r4, #1
 800b0c2:	e7cd      	b.n	800b060 <shellStartThread+0x160>
  if (length <= 0)
 800b0c4:	2c00      	cmp	r4, #0
 800b0c6:	ddd1      	ble.n	800b06c <shellStartThread+0x16c>
  if (shp->sh_end >= shp->sh_beg) {
 800b0c8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  int pos = shp->sh_beg + *(shp->sh_buffer + shp->sh_beg) + 1;
 800b0ca:	9809      	ldr	r0, [sp, #36]	; 0x24
  if (shp->sh_end >= shp->sh_beg) {
 800b0cc:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
 800b0d0:	4562      	cmp	r2, ip
    if (length < (shp->sh_size - (shp->sh_end - shp->sh_beg + 1)))
 800b0d2:	bfa5      	ittet	ge
 800b0d4:	eba2 030c 	subge.w	r3, r2, ip
 800b0d8:	3301      	addge	r3, #1
    if (length < (shp->sh_beg - shp->sh_end - 1))
 800b0da:	ebac 0302 	sublt.w	r3, ip, r2
    if (length < (shp->sh_size - (shp->sh_end - shp->sh_beg + 1)))
 800b0de:	1acb      	subge	r3, r1, r3
    if (length < (shp->sh_beg - shp->sh_end - 1))
 800b0e0:	bfb8      	it	lt
 800b0e2:	f103 33ff 	addlt.w	r3, r3, #4294967295	; 0xffffffff
 800b0e6:	429c      	cmp	r4, r3
 800b0e8:	da1e      	bge.n	800b128 <shellStartThread+0x228>
  if (length < shp->sh_size - shp->sh_end - 1)
 800b0ea:	eba1 0802 	sub.w	r8, r1, r2
 800b0ee:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800b0f2:	3201      	adds	r2, #1
 800b0f4:	4544      	cmp	r4, r8
 800b0f6:	4410      	add	r0, r2
 800b0f8:	da1f      	bge.n	800b13a <shellStartThread+0x23a>
    memcpy(shp->sh_buffer + shp->sh_end + 1, line, length);
 800b0fa:	4622      	mov	r2, r4
 800b0fc:	4631      	mov	r1, r6
    memcpy(shp->sh_buffer, line + part_len, length - part_len);
 800b0fe:	f7f8 fce1 	bl	8003ac4 <memcpy>
  *(shp->sh_buffer + shp->sh_end) = (char)length;
 800b102:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b104:	9a09      	ldr	r2, [sp, #36]	; 0x24
  *(shp->sh_buffer + shp->sh_end) = 0;
 800b106:	9904      	ldr	r1, [sp, #16]
  *(shp->sh_buffer + shp->sh_end) = (char)length;
 800b108:	54d4      	strb	r4, [r2, r3]
  shp->sh_end += length + 1;
 800b10a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b10c:	3401      	adds	r4, #1
 800b10e:	441c      	add	r4, r3
  if (shp->sh_end >= shp->sh_size)
 800b110:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  shp->sh_end += length + 1;
 800b112:	940c      	str	r4, [sp, #48]	; 0x30
  if (shp->sh_end >= shp->sh_size)
 800b114:	429c      	cmp	r4, r3
    shp->sh_end -= shp->sh_size;
 800b116:	bfa4      	itt	ge
 800b118:	1ae4      	subge	r4, r4, r3
 800b11a:	940c      	strge	r4, [sp, #48]	; 0x30
  *(shp->sh_buffer + shp->sh_end) = 0;
 800b11c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b11e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b120:	54d1      	strb	r1, [r2, r3]
  shp->sh_cur = 0;
 800b122:	2300      	movs	r3, #0
 800b124:	930d      	str	r3, [sp, #52]	; 0x34
 800b126:	e7a1      	b.n	800b06c <shellStartThread+0x16c>
  int pos = shp->sh_beg + *(shp->sh_buffer + shp->sh_beg) + 1;
 800b128:	f810 300c 	ldrb.w	r3, [r0, ip]
 800b12c:	4463      	add	r3, ip
 800b12e:	3301      	adds	r3, #1
  if (pos >= shp->sh_size)
 800b130:	4299      	cmp	r1, r3
    pos -= shp->sh_size;
 800b132:	bfd8      	it	le
 800b134:	1a5b      	suble	r3, r3, r1
  shp->sh_beg = pos;
 800b136:	930b      	str	r3, [sp, #44]	; 0x2c
 800b138:	e7c8      	b.n	800b0cc <shellStartThread+0x1cc>
    memcpy(shp->sh_buffer + shp->sh_end + 1, line, part_len);
 800b13a:	4642      	mov	r2, r8
 800b13c:	4631      	mov	r1, r6
 800b13e:	f7f8 fcc1 	bl	8003ac4 <memcpy>
    memcpy(shp->sh_buffer, line + part_len, length - part_len);
 800b142:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b144:	eba4 0208 	sub.w	r2, r4, r8
 800b148:	eb06 0108 	add.w	r1, r6, r8
 800b14c:	e7d7      	b.n	800b0fe <shellStartThread+0x1fe>
    if (c == 14) {
 800b14e:	290e      	cmp	r1, #14
 800b150:	d11f      	bne.n	800b192 <shellStartThread+0x292>
      int len = get_history(shp, line, SHELL_HIST_DIR_FW);
 800b152:	2201      	movs	r2, #1
 800b154:	4631      	mov	r1, r6
 800b156:	a809      	add	r0, sp, #36	; 0x24
 800b158:	f7fd fa72 	bl	8008640 <get_history>
      if (len == 0)
 800b15c:	1e03      	subs	r3, r0, #0
 800b15e:	9305      	str	r3, [sp, #20]
 800b160:	d114      	bne.n	800b18c <shellStartThread+0x28c>
        *line = 0;
 800b162:	f88d a050 	strb.w	sl, [sp, #80]	; 0x50
        _shell_reset_cur(chp);
 800b166:	2308      	movs	r3, #8
 800b168:	224a      	movs	r2, #74	; 0x4a
 800b16a:	4659      	mov	r1, fp
 800b16c:	4620      	mov	r0, r4
 800b16e:	f7fd fb2f 	bl	80087d0 <chprintf>
        _shell_clr_line(chp);
 800b172:	4923      	ldr	r1, [pc, #140]	; (800b200 <shellStartThread+0x300>)
 800b174:	4620      	mov	r0, r4
 800b176:	f7fd fb2b 	bl	80087d0 <chprintf>
        chprintf(chp, "%s", line);
 800b17a:	4632      	mov	r2, r6
 800b17c:	4620      	mov	r0, r4
 800b17e:	4921      	ldr	r1, [pc, #132]	; (800b204 <shellStartThread+0x304>)
 800b180:	f7fd fb26 	bl	80087d0 <chprintf>
        p = line + len;
 800b184:	9b05      	ldr	r3, [sp, #20]
 800b186:	4433      	add	r3, r6
 800b188:	461d      	mov	r5, r3
 800b18a:	e6e7      	b.n	800af5c <shellStartThread+0x5c>
      if (len >= 0) {
 800b18c:	f6ff aee6 	blt.w	800af5c <shellStartThread+0x5c>
 800b190:	e7e9      	b.n	800b166 <shellStartThread+0x266>
    if (c == 16) {
 800b192:	2910      	cmp	r1, #16
 800b194:	d109      	bne.n	800b1aa <shellStartThread+0x2aa>
      int len = get_history(shp, line, SHELL_HIST_DIR_BK);
 800b196:	4652      	mov	r2, sl
 800b198:	4631      	mov	r1, r6
 800b19a:	a809      	add	r0, sp, #36	; 0x24
 800b19c:	f7fd fa50 	bl	8008640 <get_history>
      if (len > 0) {
 800b1a0:	1e03      	subs	r3, r0, #0
 800b1a2:	9305      	str	r3, [sp, #20]
 800b1a4:	f77f aeda 	ble.w	800af5c <shellStartThread+0x5c>
 800b1a8:	e7dd      	b.n	800b166 <shellStartThread+0x266>
      }
      continue;
    }
#endif
    if (c < 0x20)
 800b1aa:	291f      	cmp	r1, #31
 800b1ac:	f67f aed6 	bls.w	800af5c <shellStartThread+0x5c>
      continue;
    if (p < line + size - 1) {
 800b1b0:	f10d 038f 	add.w	r3, sp, #143	; 0x8f
 800b1b4:	429d      	cmp	r5, r3
 800b1b6:	f4bf aed1 	bcs.w	800af5c <shellStartThread+0x5c>
      streamPut(chp, c);
 800b1ba:	6823      	ldr	r3, [r4, #0]
 800b1bc:	4620      	mov	r0, r4
 800b1be:	689b      	ldr	r3, [r3, #8]
 800b1c0:	4798      	blx	r3
      *p++ = (char)c;
 800b1c2:	f89d 301f 	ldrb.w	r3, [sp, #31]
 800b1c6:	f805 3b01 	strb.w	r3, [r5], #1
 800b1ca:	e6c7      	b.n	800af5c <shellStartThread+0x5c>
      escape = true;
 800b1cc:	f04f 0a01 	mov.w	sl, #1
 800b1d0:	e6c4      	b.n	800af5c <shellStartThread+0x5c>
        bracket = true;
 800b1d2:	46d0      	mov	r8, sl
 800b1d4:	e6c2      	b.n	800af5c <shellStartThread+0x5c>
      if (n >= SHELL_MAX_ARGUMENTS) {
 800b1d6:	2e05      	cmp	r6, #5
 800b1d8:	d106      	bne.n	800b1e8 <shellStartThread+0x2e8>
        chprintf(chp, "too many arguments"SHELL_NEWLINE_STR);
 800b1da:	4638      	mov	r0, r7
 800b1dc:	490f      	ldr	r1, [pc, #60]	; (800b21c <shellStartThread+0x31c>)
 800b1de:	f7fd faf7 	bl	80087d0 <chprintf>
    args[n] = NULL;
 800b1e2:	2300      	movs	r3, #0
 800b1e4:	9313      	str	r3, [sp, #76]	; 0x4c
    if (cmd != NULL) {
 800b1e6:	e6ae      	b.n	800af46 <shellStartThread+0x46>
      args[n++] = lp;
 800b1e8:	3601      	adds	r6, #1
 800b1ea:	f848 0b04 	str.w	r0, [r8], #4
 800b1ee:	e748      	b.n	800b082 <shellStartThread+0x182>
 800b1f0:	200011a8 	.word	0x200011a8
 800b1f4:	0800c557 	.word	0x0800c557
 800b1f8:	0800c157 	.word	0x0800c157
 800b1fc:	0800c572 	.word	0x0800c572
 800b200:	0800c586 	.word	0x0800c586
 800b204:	0800bbdd 	.word	0x0800bbdd
 800b208:	0800c58a 	.word	0x0800c58a
 800b20c:	0800c58d 	.word	0x0800c58d
 800b210:	200012b8 	.word	0x200012b8
 800b214:	0800c5a9 	.word	0x0800c5a9
 800b218:	0800c378 	.word	0x0800c378
 800b21c:	0800c594 	.word	0x0800c594
 800b220:	0800c57b 	.word	0x0800c57b
        chprintf(chp, "Commands: help ");
 800b224:	4638      	mov	r0, r7
 800b226:	491e      	ldr	r1, [pc, #120]	; (800b2a0 <shellStartThread+0x3a0>)
 800b228:	f7fd fad2 	bl	80087d0 <chprintf>
 800b22c:	4c1d      	ldr	r4, [pc, #116]	; (800b2a4 <shellStartThread+0x3a4>)
    chprintf(chp, "%s ", scp->sc_name);
 800b22e:	4d1e      	ldr	r5, [pc, #120]	; (800b2a8 <shellStartThread+0x3a8>)
  while (scp->sc_name != NULL) {
 800b230:	6822      	ldr	r2, [r4, #0]
 800b232:	b96a      	cbnz	r2, 800b250 <shellStartThread+0x350>
        if (scp != NULL)
 800b234:	9b03      	ldr	r3, [sp, #12]
 800b236:	b133      	cbz	r3, 800b246 <shellStartThread+0x346>
    chprintf(chp, "%s ", scp->sc_name);
 800b238:	4d1b      	ldr	r5, [pc, #108]	; (800b2a8 <shellStartThread+0x3a8>)
 800b23a:	f103 040c 	add.w	r4, r3, #12
  while (scp->sc_name != NULL) {
 800b23e:	f854 2c0c 	ldr.w	r2, [r4, #-12]
 800b242:	340c      	adds	r4, #12
 800b244:	b952      	cbnz	r2, 800b25c <shellStartThread+0x35c>
        chprintf(chp, SHELL_NEWLINE_STR);
 800b246:	4919      	ldr	r1, [pc, #100]	; (800b2ac <shellStartThread+0x3ac>)
        chprintf(chp, " ?"SHELL_NEWLINE_STR);
 800b248:	4638      	mov	r0, r7
 800b24a:	f7fd fac1 	bl	80087d0 <chprintf>
 800b24e:	e67a      	b.n	800af46 <shellStartThread+0x46>
    chprintf(chp, "%s ", scp->sc_name);
 800b250:	4629      	mov	r1, r5
 800b252:	4638      	mov	r0, r7
 800b254:	f7fd fabc 	bl	80087d0 <chprintf>
    scp++;
 800b258:	340c      	adds	r4, #12
 800b25a:	e7e9      	b.n	800b230 <shellStartThread+0x330>
    chprintf(chp, "%s ", scp->sc_name);
 800b25c:	4629      	mov	r1, r5
 800b25e:	4638      	mov	r0, r7
 800b260:	f7fd fab6 	bl	80087d0 <chprintf>
    scp++;
 800b264:	e7eb      	b.n	800b23e <shellStartThread+0x33e>
      else if (cmdexec(shell_local_commands, chp, cmd, n, args) &&
 800b266:	4633      	mov	r3, r6
 800b268:	4622      	mov	r2, r4
 800b26a:	4639      	mov	r1, r7
 800b26c:	480d      	ldr	r0, [pc, #52]	; (800b2a4 <shellStartThread+0x3a4>)
 800b26e:	9500      	str	r5, [sp, #0]
 800b270:	f7fd fa70 	bl	8008754 <cmdexec>
 800b274:	2800      	cmp	r0, #0
 800b276:	f43f ae66 	beq.w	800af46 <shellStartThread+0x46>
 800b27a:	9b03      	ldr	r3, [sp, #12]
 800b27c:	b933      	cbnz	r3, 800b28c <shellStartThread+0x38c>
        chprintf(chp, "%s", cmd);
 800b27e:	490c      	ldr	r1, [pc, #48]	; (800b2b0 <shellStartThread+0x3b0>)
 800b280:	4622      	mov	r2, r4
 800b282:	4638      	mov	r0, r7
 800b284:	f7fd faa4 	bl	80087d0 <chprintf>
        chprintf(chp, " ?"SHELL_NEWLINE_STR);
 800b288:	490a      	ldr	r1, [pc, #40]	; (800b2b4 <shellStartThread+0x3b4>)
 800b28a:	e7dd      	b.n	800b248 <shellStartThread+0x348>
          ((scp == NULL) || cmdexec(scp, chp, cmd, n, args))) {
 800b28c:	4633      	mov	r3, r6
 800b28e:	4622      	mov	r2, r4
 800b290:	4639      	mov	r1, r7
 800b292:	9803      	ldr	r0, [sp, #12]
 800b294:	9500      	str	r5, [sp, #0]
 800b296:	f7fd fa5d 	bl	8008754 <cmdexec>
 800b29a:	2800      	cmp	r0, #0
 800b29c:	d1ef      	bne.n	800b27e <shellStartThread+0x37e>
 800b29e:	e652      	b.n	800af46 <shellStartThread+0x46>
 800b2a0:	0800c5ae 	.word	0x0800c5ae
 800b2a4:	0800c9cc 	.word	0x0800c9cc
 800b2a8:	0800c5be 	.word	0x0800c5be
 800b2ac:	0800c157 	.word	0x0800c157
 800b2b0:	0800bbdd 	.word	0x0800bbdd
 800b2b4:	0800c5c2 	.word	0x0800c5c2

0800b2b8 <vTaskSwitchContext>:
 800b2b8:	4b1e      	ldr	r3, [pc, #120]	; (800b334 <vTaskSwitchContext+0x7c>)
 800b2ba:	b530      	push	{r4, r5, lr}
 800b2bc:	681a      	ldr	r2, [r3, #0]
 800b2be:	4b1e      	ldr	r3, [pc, #120]	; (800b338 <vTaskSwitchContext+0x80>)
 800b2c0:	b112      	cbz	r2, 800b2c8 <vTaskSwitchContext+0x10>
 800b2c2:	2201      	movs	r2, #1
 800b2c4:	601a      	str	r2, [r3, #0]
 800b2c6:	bd30      	pop	{r4, r5, pc}
 800b2c8:	491c      	ldr	r1, [pc, #112]	; (800b33c <vTaskSwitchContext+0x84>)
 800b2ca:	601a      	str	r2, [r3, #0]
 800b2cc:	680b      	ldr	r3, [r1, #0]
 800b2ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2d0:	681a      	ldr	r2, [r3, #0]
 800b2d2:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
 800b2d6:	d10b      	bne.n	800b2f0 <vTaskSwitchContext+0x38>
 800b2d8:	685a      	ldr	r2, [r3, #4]
 800b2da:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
 800b2de:	d107      	bne.n	800b2f0 <vTaskSwitchContext+0x38>
 800b2e0:	689a      	ldr	r2, [r3, #8]
 800b2e2:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
 800b2e6:	d103      	bne.n	800b2f0 <vTaskSwitchContext+0x38>
 800b2e8:	68db      	ldr	r3, [r3, #12]
 800b2ea:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
 800b2ee:	d002      	beq.n	800b2f6 <vTaskSwitchContext+0x3e>
 800b2f0:	680b      	ldr	r3, [r1, #0]
 800b2f2:	680b      	ldr	r3, [r1, #0]
 800b2f4:	e7fe      	b.n	800b2f4 <vTaskSwitchContext+0x3c>
 800b2f6:	4b12      	ldr	r3, [pc, #72]	; (800b340 <vTaskSwitchContext+0x88>)
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	fab3 f383 	clz	r3, r3
 800b2fe:	2214      	movs	r2, #20
 800b300:	b2db      	uxtb	r3, r3
 800b302:	f1c3 031f 	rsb	r3, r3, #31
 800b306:	435a      	muls	r2, r3
 800b308:	480e      	ldr	r0, [pc, #56]	; (800b344 <vTaskSwitchContext+0x8c>)
 800b30a:	5885      	ldr	r5, [r0, r2]
 800b30c:	1884      	adds	r4, r0, r2
 800b30e:	b905      	cbnz	r5, 800b312 <vTaskSwitchContext+0x5a>
 800b310:	e7fe      	b.n	800b310 <vTaskSwitchContext+0x58>
 800b312:	6865      	ldr	r5, [r4, #4]
 800b314:	3208      	adds	r2, #8
 800b316:	686d      	ldr	r5, [r5, #4]
 800b318:	4402      	add	r2, r0
 800b31a:	4295      	cmp	r5, r2
 800b31c:	bf08      	it	eq
 800b31e:	686a      	ldreq	r2, [r5, #4]
 800b320:	6065      	str	r5, [r4, #4]
 800b322:	bf08      	it	eq
 800b324:	6062      	streq	r2, [r4, #4]
 800b326:	2214      	movs	r2, #20
 800b328:	fb02 0303 	mla	r3, r2, r3, r0
 800b32c:	685b      	ldr	r3, [r3, #4]
 800b32e:	68db      	ldr	r3, [r3, #12]
 800b330:	600b      	str	r3, [r1, #0]
 800b332:	e7c8      	b.n	800b2c6 <vTaskSwitchContext+0xe>
 800b334:	2000136c 	.word	0x2000136c
 800b338:	2000164c 	.word	0x2000164c
 800b33c:	200011a8 	.word	0x200011a8
 800b340:	20001374 	.word	0x20001374
 800b344:	200011b8 	.word	0x200011b8

0800b348 <mixLedTask>:
{
 800b348:	4605      	mov	r5, r0
 800b34a:	b580      	push	{r7, lr}
 800b34c:	4e41      	ldr	r6, [pc, #260]	; (800b454 <mixLedTask+0x10c>)
 800b34e:	4f42      	ldr	r7, [pc, #264]	; (800b458 <mixLedTask+0x110>)
        gpioSetPin(GPIO_LED_MIX, true);
 800b350:	2101      	movs	r1, #1
 800b352:	f240 1005 	movw	r0, #261	; 0x105
 800b356:	f7fa f941 	bl	80055dc <gpioSetPin>
        if(!*delay) {
 800b35a:	682b      	ldr	r3, [r5, #0]
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d15d      	bne.n	800b41c <mixLedTask+0xd4>
 800b360:	f7f8 ff40 	bl	80041e4 <vPortEnterCritical>
 800b364:	683c      	ldr	r4, [r7, #0]
 800b366:	f104 0804 	add.w	r8, r4, #4
 800b36a:	4640      	mov	r0, r8
 800b36c:	f7f9 f840 	bl	80043f0 <uxListRemove>
 800b370:	b978      	cbnz	r0, 800b392 <mixLedTask+0x4a>
 800b372:	2014      	movs	r0, #20
 800b374:	f8d4 c02c 	ldr.w	ip, [r4, #44]	; 0x2c
 800b378:	4b38      	ldr	r3, [pc, #224]	; (800b45c <mixLedTask+0x114>)
 800b37a:	fb00 f00c 	mul.w	r0, r0, ip
 800b37e:	581b      	ldr	r3, [r3, r0]
 800b380:	b93b      	cbnz	r3, 800b392 <mixLedTask+0x4a>
 800b382:	2201      	movs	r2, #1
 800b384:	4936      	ldr	r1, [pc, #216]	; (800b460 <mixLedTask+0x118>)
 800b386:	fa02 f20c 	lsl.w	r2, r2, ip
 800b38a:	680b      	ldr	r3, [r1, #0]
 800b38c:	ea23 0302 	bic.w	r3, r3, r2
 800b390:	600b      	str	r3, [r1, #0]
 800b392:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b394:	b11b      	cbz	r3, 800b39e <mixLedTask+0x56>
 800b396:	f104 0018 	add.w	r0, r4, #24
 800b39a:	f7f9 f829 	bl	80043f0 <uxListRemove>
 800b39e:	4831      	ldr	r0, [pc, #196]	; (800b464 <mixLedTask+0x11c>)
 800b3a0:	4641      	mov	r1, r8
 800b3a2:	f7f9 f84c 	bl	800443e <vListInsertEnd>
 800b3a6:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
 800b3aa:	2b01      	cmp	r3, #1
 800b3ac:	bf04      	itt	eq
 800b3ae:	2300      	moveq	r3, #0
 800b3b0:	f884 3064 	strbeq.w	r3, [r4, #100]	; 0x64
 800b3b4:	f7f8 ff0a 	bl	80041cc <vPortExitCritical>
 800b3b8:	482b      	ldr	r0, [pc, #172]	; (800b468 <mixLedTask+0x120>)
 800b3ba:	6803      	ldr	r3, [r0, #0]
 800b3bc:	b12b      	cbz	r3, 800b3ca <mixLedTask+0x82>
 800b3be:	f7f8 ff11 	bl	80041e4 <vPortEnterCritical>
 800b3c2:	f7f8 ff5b 	bl	800427c <prvResetNextTaskUnblockTime>
 800b3c6:	f7f8 ff01 	bl	80041cc <vPortExitCritical>
 800b3ca:	683b      	ldr	r3, [r7, #0]
 800b3cc:	429c      	cmp	r4, r3
 800b3ce:	d1bf      	bne.n	800b350 <mixLedTask+0x8>
 800b3d0:	6803      	ldr	r3, [r0, #0]
 800b3d2:	b1c3      	cbz	r3, 800b406 <mixLedTask+0xbe>
 800b3d4:	4b25      	ldr	r3, [pc, #148]	; (800b46c <mixLedTask+0x124>)
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	b103      	cbz	r3, 800b3dc <mixLedTask+0x94>
 800b3da:	e7fe      	b.n	800b3da <mixLedTask+0x92>
 800b3dc:	4b24      	ldr	r3, [pc, #144]	; (800b470 <mixLedTask+0x128>)
 800b3de:	6832      	ldr	r2, [r6, #0]
 800b3e0:	601a      	str	r2, [r3, #0]
 800b3e2:	4b24      	ldr	r3, [pc, #144]	; (800b474 <mixLedTask+0x12c>)
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	b12b      	cbz	r3, 800b3f4 <mixLedTask+0xac>
 800b3e8:	6833      	ldr	r3, [r6, #0]
 800b3ea:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 800b3ee:	6033      	str	r3, [r6, #0]
 800b3f0:	6833      	ldr	r3, [r6, #0]
 800b3f2:	6033      	str	r3, [r6, #0]
 800b3f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b3f8:	4b1f      	ldr	r3, [pc, #124]	; (800b478 <mixLedTask+0x130>)
 800b3fa:	601a      	str	r2, [r3, #0]
 800b3fc:	f3bf 8f4f 	dsb	sy
 800b400:	f3bf 8f6f 	isb	sy
 800b404:	e7a4      	b.n	800b350 <mixLedTask+0x8>
 800b406:	4a17      	ldr	r2, [pc, #92]	; (800b464 <mixLedTask+0x11c>)
 800b408:	6811      	ldr	r1, [r2, #0]
 800b40a:	4a1c      	ldr	r2, [pc, #112]	; (800b47c <mixLedTask+0x134>)
 800b40c:	6812      	ldr	r2, [r2, #0]
 800b40e:	4291      	cmp	r1, r2
 800b410:	d101      	bne.n	800b416 <mixLedTask+0xce>
 800b412:	603b      	str	r3, [r7, #0]
 800b414:	e79c      	b.n	800b350 <mixLedTask+0x8>
 800b416:	f7ff ff4f 	bl	800b2b8 <vTaskSwitchContext>
 800b41a:	e799      	b.n	800b350 <mixLedTask+0x8>
        osalThreadSleepMilliseconds(*delay);
 800b41c:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 800b420:	6828      	ldr	r0, [r5, #0]
 800b422:	4360      	muls	r0, r4
 800b424:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
 800b428:	fbb0 f0f4 	udiv	r0, r0, r4
 800b42c:	f7f9 fb9c 	bl	8004b68 <vTaskDelay>
        gpioSetPin(GPIO_LED_MIX, false);
 800b430:	2100      	movs	r1, #0
 800b432:	f240 1005 	movw	r0, #261	; 0x105
 800b436:	f7fa f8d1 	bl	80055dc <gpioSetPin>
        if(*delay) {
 800b43a:	682b      	ldr	r3, [r5, #0]
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d087      	beq.n	800b350 <mixLedTask+0x8>
            osalThreadSleepMilliseconds(*delay);
 800b440:	6828      	ldr	r0, [r5, #0]
 800b442:	4360      	muls	r0, r4
 800b444:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
 800b448:	fbb0 f0f4 	udiv	r0, r0, r4
 800b44c:	f7f9 fb8c 	bl	8004b68 <vTaskDelay>
 800b450:	e77e      	b.n	800b350 <mixLedTask+0x8>
 800b452:	bf00      	nop
 800b454:	e000ed20 	.word	0xe000ed20
 800b458:	200011a8 	.word	0x200011a8
 800b45c:	200011b8 	.word	0x200011b8
 800b460:	20001374 	.word	0x20001374
 800b464:	20001620 	.word	0x20001620
 800b468:	20001614 	.word	0x20001614
 800b46c:	2000136c 	.word	0x2000136c
 800b470:	2000134c 	.word	0x2000134c
 800b474:	20001358 	.word	0x20001358
 800b478:	e000ed04 	.word	0xe000ed04
 800b47c:	2000135c 	.word	0x2000135c

0800b480 <main>:
 * @notapi
 */
void hal_lld_init(void) {

  /* Reset of all peripherals.*/
  rccResetAPB1(0xFFFFFFFF);
 800b480:	4baa      	ldr	r3, [pc, #680]	; (800b72c <main+0x2ac>)
 800b482:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800b486:	691a      	ldr	r2, [r3, #16]
 800b488:	2200      	movs	r2, #0
    _stm32_dma_streams[i].channel->CCR = 0U;
 800b48a:	4614      	mov	r4, r2
/*
 * This main function starts FreeRTOS, we also create one thread that
 * will eventually run main_.
 */
int main(void)
{
 800b48c:	b580      	push	{r7, lr}
 800b48e:	6119      	str	r1, [r3, #16]
 800b490:	611a      	str	r2, [r3, #16]
  rccResetAPB2(0xFFFFFFFF);
 800b492:	68d8      	ldr	r0, [r3, #12]
 800b494:	60d9      	str	r1, [r3, #12]
 800b496:	60da      	str	r2, [r3, #12]

  /* PWR and BD clocks enabled.*/
  rccEnablePWRInterface(FALSE);
 800b498:	69d9      	ldr	r1, [r3, #28]
  PWR->CR |= PWR_CR_DBP;
 800b49a:	48a5      	ldr	r0, [pc, #660]	; (800b730 <main+0x2b0>)
  rccEnablePWRInterface(FALSE);
 800b49c:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 800b4a0:	61d9      	str	r1, [r3, #28]
  rccEnableBKPInterface(FALSE);
 800b4a2:	69d9      	ldr	r1, [r3, #28]
 800b4a4:	b088      	sub	sp, #32
 800b4a6:	f041 6100 	orr.w	r1, r1, #134217728	; 0x8000000
 800b4aa:	61d9      	str	r1, [r3, #28]
  PWR->CR |= PWR_CR_DBP;
 800b4ac:	6801      	ldr	r1, [r0, #0]
 800b4ae:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800b4b2:	6001      	str	r1, [r0, #0]
  dma_streams_mask = 0U;
 800b4b4:	499f      	ldr	r1, [pc, #636]	; (800b734 <main+0x2b4>)
    _stm32_dma_isr_redir[i].dma_func = NULL;
 800b4b6:	48a0      	ldr	r0, [pc, #640]	; (800b738 <main+0x2b8>)
  dma_streams_mask = 0U;
 800b4b8:	600a      	str	r2, [r1, #0]
  for (i = 0; i < STM32_DMA_STREAMS; i++) {
 800b4ba:	49a0      	ldr	r1, [pc, #640]	; (800b73c <main+0x2bc>)
    _stm32_dma_streams[i].channel->CCR = 0U;
 800b4bc:	684d      	ldr	r5, [r1, #4]
 800b4be:	3114      	adds	r1, #20
 800b4c0:	602c      	str	r4, [r5, #0]
    _stm32_dma_isr_redir[i].dma_func = NULL;
 800b4c2:	f840 4032 	str.w	r4, [r0, r2, lsl #3]
  for (i = 0; i < STM32_DMA_STREAMS; i++) {
 800b4c6:	3201      	adds	r2, #1
 800b4c8:	2a07      	cmp	r2, #7
 800b4ca:	d1f7      	bne.n	800b4bc <main+0x3c>
  DMA1->IFCR = 0xFFFFFFFFU;
 800b4cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b4d0:	499b      	ldr	r1, [pc, #620]	; (800b740 <main+0x2c0>)
  i2cp->state  = I2C_STOP;
 800b4d2:	2701      	movs	r7, #1
 800b4d4:	604a      	str	r2, [r1, #4]
  rccEnableAPB2(APB2_EN_MASK, FALSE);
 800b4d6:	6999      	ldr	r1, [r3, #24]
 800b4d8:	4d9a      	ldr	r5, [pc, #616]	; (800b744 <main+0x2c4>)
 800b4da:	f041 017d 	orr.w	r1, r1, #125	; 0x7d
 800b4de:	6199      	str	r1, [r3, #24]
  GPIOA->ODR = config->PAData.odr;
 800b4e0:	f46f 1340 	mvn.w	r3, #3145728	; 0x300000
 800b4e4:	4998      	ldr	r1, [pc, #608]	; (800b748 <main+0x2c8>)
    mutex->handle = xSemaphoreCreateMutexStatic(&mutex->staticData);
 800b4e6:	f105 0010 	add.w	r0, r5, #16
 800b4ea:	60cb      	str	r3, [r1, #12]
  GPIOA->CRH = config->PAData.crh;
 800b4ec:	4b97      	ldr	r3, [pc, #604]	; (800b74c <main+0x2cc>)
  I2CD1.dmarx  = STM32_DMA_STREAM(STM32_I2C_I2C1_RX_DMA_STREAM);
 800b4ee:	4e98      	ldr	r6, [pc, #608]	; (800b750 <main+0x2d0>)
 800b4f0:	604b      	str	r3, [r1, #4]
  GPIOA->CRL = config->PAData.crl;
 800b4f2:	f04f 3388 	mov.w	r3, #2290649224	; 0x88888888
 800b4f6:	600b      	str	r3, [r1, #0]
  GPIOB->ODR = config->PBData.odr;
 800b4f8:	f8c1 240c 	str.w	r2, [r1, #1036]	; 0x40c
  GPIOB->CRH = config->PBData.crh;
 800b4fc:	f8c1 3404 	str.w	r3, [r1, #1028]	; 0x404
  GPIOB->CRL = config->PBData.crl;
 800b500:	f8c1 3400 	str.w	r3, [r1, #1024]	; 0x400
  GPIOC->ODR = config->PCData.odr;
 800b504:	f8c1 280c 	str.w	r2, [r1, #2060]	; 0x80c
  GPIOC->CRH = config->PCData.crh;
 800b508:	f8c1 3804 	str.w	r3, [r1, #2052]	; 0x804
  GPIOC->CRL = config->PCData.crl;
 800b50c:	f8c1 3800 	str.w	r3, [r1, #2048]	; 0x800
  GPIOD->ODR = config->PDData.odr;
 800b510:	f8c1 2c0c 	str.w	r2, [r1, #3084]	; 0xc0c
  GPIOD->CRH = config->PDData.crh;
 800b514:	f8c1 3c04 	str.w	r3, [r1, #3076]	; 0xc04
  GPIOD->CRL = config->PDData.crl;
 800b518:	f8c1 3c00 	str.w	r3, [r1, #3072]	; 0xc00
  GPIOB->ODR = config->PBData.odr;
 800b51c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
  GPIOE->ODR = config->PEData.odr;
 800b520:	f8c1 2c0c 	str.w	r2, [r1, #3084]	; 0xc0c
  GPIOE->CRH = config->PEData.crh;
 800b524:	f8c1 3c04 	str.w	r3, [r1, #3076]	; 0xc04
  GPIOE->CRL = config->PEData.crl;
 800b528:	f8c1 3c00 	str.w	r3, [r1, #3072]	; 0xc00
 800b52c:	702f      	strb	r7, [r5, #0]
  i2cp->config = NULL;
 800b52e:	606c      	str	r4, [r5, #4]
 800b530:	f7fc fe6e 	bl	8008210 <xQueueCreateMutexStatic.constprop.0>
  oqp->q_counter = size;
 800b534:	2110      	movs	r1, #16
  I2CD1.i2c    = I2C1;
 800b536:	4b87      	ldr	r3, [pc, #540]	; (800b754 <main+0x2d4>)
  sdp->vmt = &vmt;
 800b538:	4a87      	ldr	r2, [pc, #540]	; (800b758 <main+0x2d8>)
 800b53a:	67ab      	str	r3, [r5, #120]	; 0x78
  I2CD1.dmatx  = STM32_DMA_STREAM(STM32_I2C_I2C1_TX_DMA_STREAM);
 800b53c:	f1a6 0314 	sub.w	r3, r6, #20
 800b540:	676b      	str	r3, [r5, #116]	; 0x74
 800b542:	4b86      	ldr	r3, [pc, #536]	; (800b75c <main+0x2dc>)
 800b544:	60e8      	str	r0, [r5, #12]
 800b546:	601a      	str	r2, [r3, #0]
  iqp->q_buffer  = bp;
 800b548:	f103 0260 	add.w	r2, r3, #96	; 0x60
  iqp->q_wrptr   = bp;
 800b54c:	e9c3 220b 	strd	r2, r2, [r3, #44]	; 0x2c
  iqp->q_buffer  = bp;
 800b550:	625a      	str	r2, [r3, #36]	; 0x24
  iqp->q_top     = bp + size;
 800b552:	f103 0270 	add.w	r2, r3, #112	; 0x70
  oqp->q_wrptr   = bp;
 800b556:	e9c3 2214 	strd	r2, r2, [r3, #80]	; 0x50
  iqp->q_top     = bp + size;
 800b55a:	629a      	str	r2, [r3, #40]	; 0x28
  oqp->q_buffer  = bp;
 800b55c:	649a      	str	r2, [r3, #72]	; 0x48
  oqp->q_top     = bp + size;
 800b55e:	f103 0280 	add.w	r2, r3, #128	; 0x80
 800b562:	64da      	str	r2, [r3, #76]	; 0x4c
  oqp->q_notify  = onfy;
 800b564:	4a7e      	ldr	r2, [pc, #504]	; (800b760 <main+0x2e0>)
  I2CD1.dmarx  = STM32_DMA_STREAM(STM32_I2C_I2C1_RX_DMA_STREAM);
 800b566:	672e      	str	r6, [r5, #112]	; 0x70
  I2CD1.thread = NULL;
 800b568:	662c      	str	r4, [r5, #96]	; 0x60
  spip->state = SPI_STOP;
 800b56a:	4d7e      	ldr	r5, [pc, #504]	; (800b764 <main+0x2e4>)
  oqp->q_link    = link;
 800b56c:	e9c3 2316 	strd	r2, r3, [r3, #88]	; 0x58
  SD3.usart = USART3;
 800b570:	4a7d      	ldr	r2, [pc, #500]	; (800b768 <main+0x2e8>)
  iqp->q_counter = 0;
 800b572:	621c      	str	r4, [r3, #32]
 800b574:	1868      	adds	r0, r5, r1
  oqp->q_counter = size;
 800b576:	6459      	str	r1, [r3, #68]	; 0x44
    event_source->firstRepeater = NULL;
 800b578:	e9c3 4401 	strd	r4, r4, [r3, #4]
    thread_queue->tail = NULL;
 800b57c:	e9c3 4406 	strd	r4, r4, [r3, #24]
  iqp->q_link    = link;
 800b580:	e9c3 430d 	strd	r4, r3, [r3, #52]	; 0x34
 800b584:	e9c3 440f 	strd	r4, r4, [r3, #60]	; 0x3c
    event_source->waitThread = NULL;
 800b588:	60dc      	str	r4, [r3, #12]
 800b58a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  spip->thread = NULL;
 800b58e:	e9c5 4401 	strd	r4, r4, [r5, #4]
  sdp->state = SD_STOP;
 800b592:	751f      	strb	r7, [r3, #20]
  spip->state = SPI_STOP;
 800b594:	702f      	strb	r7, [r5, #0]
    mutex->handle = xSemaphoreCreateMutexStatic(&mutex->staticData);
 800b596:	f7fc fe3b 	bl	8008210 <xQueueCreateMutexStatic.constprop.0>
  SPID1.spi       = SPI1;
 800b59a:	4b74      	ldr	r3, [pc, #464]	; (800b76c <main+0x2ec>)
  SPID1.txdmamode = STM32_DMA_CR_CHSEL(SPI1_TX_DMA_CHANNEL) |
 800b59c:	f241 010a 	movw	r1, #4106	; 0x100a
  SPID1.spi       = SPI1;
 800b5a0:	662b      	str	r3, [r5, #96]	; 0x60
  SPID1.dmarx     = STM32_DMA_STREAM(STM32_SPI_SPI1_RX_DMA_STREAM);
 800b5a2:	f1a6 0364 	sub.w	r3, r6, #100	; 0x64
 800b5a6:	666b      	str	r3, [r5, #100]	; 0x64
  SPID1.txdmamode = STM32_DMA_CR_CHSEL(SPI1_TX_DMA_CHANNEL) |
 800b5a8:	f241 0318 	movw	r3, #4120	; 0x1018
  SPID1.dmatx     = STM32_DMA_STREAM(STM32_SPI_SPI1_TX_DMA_STREAM);
 800b5ac:	3e50      	subs	r6, #80	; 0x50
  SPID1.txdmamode = STM32_DMA_CR_CHSEL(SPI1_TX_DMA_CHANNEL) |
 800b5ae:	e9c5 131b 	strd	r1, r3, [r5, #108]	; 0x6c
 800b5b2:	60e8      	str	r0, [r5, #12]
  SPID1.dmatx     = STM32_DMA_STREAM(STM32_SPI_SPI1_TX_DMA_STREAM);
 800b5b4:	66ae      	str	r6, [r5, #104]	; 0x68
  for (i = 0; i < (unsigned)USB_MAX_ENDPOINTS; i++) {
 800b5b6:	2500      	movs	r5, #0
    usbp->in_params[i]  = NULL;
 800b5b8:	462a      	mov	r2, r5
  usbp->state        = USB_STOP;
 800b5ba:	4b6d      	ldr	r3, [pc, #436]	; (800b770 <main+0x2f0>)
 800b5bc:	701f      	strb	r7, [r3, #0]
  usbp->config       = NULL;
 800b5be:	605c      	str	r4, [r3, #4]
 800b5c0:	f103 012c 	add.w	r1, r3, #44	; 0x2c
  for (i = 0; i < (unsigned)USB_MAX_ENDPOINTS; i++) {
 800b5c4:	3501      	adds	r5, #1
    usbp->in_params[i]  = NULL;
 800b5c6:	f841 2b04 	str.w	r2, [r1], #4
  for (i = 0; i < (unsigned)USB_MAX_ENDPOINTS; i++) {
 800b5ca:	2d07      	cmp	r5, #7
    usbp->out_params[i] = NULL;
 800b5cc:	618a      	str	r2, [r1, #24]
  for (i = 0; i < (unsigned)USB_MAX_ENDPOINTS; i++) {
 800b5ce:	d1f9      	bne.n	800b5c4 <main+0x144>
  usbp->transmitting = 0;
 800b5d0:	609a      	str	r2, [r3, #8]
  WDGD1.state = WDG_STOP;
 800b5d2:	2301      	movs	r3, #1
/*
 * Board-specific initialization code.
 */
void boardInit(void) {
    /* Use SWD only */
    AFIO->MAPR = AFIO_MAPR_SWJ_CFG_JTAGDISABLE;
 800b5d4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800b5d8:	4866      	ldr	r0, [pc, #408]	; (800b774 <main+0x2f4>)
 800b5da:	7003      	strb	r3, [r0, #0]
  WDGD1.wdg   = IWDG;
 800b5dc:	4b66      	ldr	r3, [pc, #408]	; (800b778 <main+0x2f8>)
 800b5de:	6083      	str	r3, [r0, #8]
 800b5e0:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
 800b5e4:	605a      	str	r2, [r3, #4]
  osalSysLock();
 800b5e6:	f7f8 fdfd 	bl	80041e4 <vPortEnterCritical>
  osalDbgAssert((wdgp->state == WDG_STOP) || (wdgp->state == WDG_READY),
 800b5ea:	7803      	ldrb	r3, [r0, #0]
 800b5ec:	3b01      	subs	r3, #1
 800b5ee:	2b01      	cmp	r3, #1
 800b5f0:	d902      	bls.n	800b5f8 <main+0x178>
 800b5f2:	f7f8 fea5 	bl	8004340 <vTaskEndScheduler>
 800b5f6:	e7fe      	b.n	800b5f6 <main+0x176>
  wdgp->wdg->KR   = KR_KEY_WRITE;
 800b5f8:	f245 5255 	movw	r2, #21845	; 0x5555
  wdgp->config = config;
 800b5fc:	4b5f      	ldr	r3, [pc, #380]	; (800b77c <main+0x2fc>)
 800b5fe:	6043      	str	r3, [r0, #4]
 800b600:	6883      	ldr	r3, [r0, #8]
 800b602:	601a      	str	r2, [r3, #0]
  while (wdgp->wdg->SR != 0)
 800b604:	68dc      	ldr	r4, [r3, #12]
 800b606:	2c00      	cmp	r4, #0
 800b608:	d1fc      	bne.n	800b604 <main+0x184>
  wdgp->wdg->PR   = wdgp->config->pr;
 800b60a:	2206      	movs	r2, #6
 800b60c:	605a      	str	r2, [r3, #4]
  wdgp->wdg->RLR  = wdgp->config->rlr;
 800b60e:	f640 72ff 	movw	r2, #4095	; 0xfff
 800b612:	609a      	str	r2, [r3, #8]
  wdgp->wdg->KR   = KR_KEY_RELOAD;
 800b614:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800b618:	601a      	str	r2, [r3, #0]
  wdgp->wdg->KR   = KR_KEY_ENABLE;
 800b61a:	f64c 42cc 	movw	r2, #52428	; 0xcccc
  wdgp->state = WDG_READY;
 800b61e:	f04f 0802 	mov.w	r8, #2

    /* Before anything else, start watchdog (~25 seconds timeout) */
    wdgStart(&WDGD1, &watchdogConfig);

    TaskHandle_t handle;
    xTaskCreate(runInThreadBody, "Init", 256, main_, 1, &handle);
 800b622:	2701      	movs	r7, #1
 800b624:	601a      	str	r2, [r3, #0]
 800b626:	f880 8000 	strb.w	r8, [r0]
  osalSysUnlock();
 800b62a:	f7fa f913 	bl	8005854 <osalSysUnlock.lto_priv.0>
 800b62e:	ab05      	add	r3, sp, #20
 800b630:	9301      	str	r3, [sp, #4]
 800b632:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b636:	4b52      	ldr	r3, [pc, #328]	; (800b780 <main+0x300>)
 800b638:	4952      	ldr	r1, [pc, #328]	; (800b784 <main+0x304>)
 800b63a:	4853      	ldr	r0, [pc, #332]	; (800b788 <main+0x308>)
 800b63c:	9700      	str	r7, [sp, #0]
 800b63e:	f7fc ff9b 	bl	8008578 <xTaskCreate>
 800b642:	2368      	movs	r3, #104	; 0x68
 800b644:	9306      	str	r3, [sp, #24]
 800b646:	9b06      	ldr	r3, [sp, #24]
 800b648:	2b68      	cmp	r3, #104	; 0x68
 800b64a:	d000      	beq.n	800b64e <main+0x1ce>
 800b64c:	e7fe      	b.n	800b64c <main+0x1cc>
 800b64e:	4e4f      	ldr	r6, [pc, #316]	; (800b78c <main+0x30c>)
 800b650:	4b4f      	ldr	r3, [pc, #316]	; (800b790 <main+0x310>)
 800b652:	f886 8065 	strb.w	r8, [r6, #101]	; 0x65
 800b656:	6333      	str	r3, [r6, #48]	; 0x30
 800b658:	ab07      	add	r3, sp, #28
 800b65a:	2278      	movs	r2, #120	; 0x78
 800b65c:	e9cd 4300 	strd	r4, r3, [sp]
 800b660:	494c      	ldr	r1, [pc, #304]	; (800b794 <main+0x314>)
 800b662:	4623      	mov	r3, r4
 800b664:	484c      	ldr	r0, [pc, #304]	; (800b798 <main+0x318>)
 800b666:	9602      	str	r6, [sp, #8]
 800b668:	f7fc ff38 	bl	80084dc <prvInitialiseNewTask.isra.0>
 800b66c:	4630      	mov	r0, r6
 800b66e:	f7f9 faab 	bl	8004bc8 <prvAddNewTaskToReadyList>
 800b672:	9b07      	ldr	r3, [sp, #28]
 800b674:	2b00      	cmp	r3, #0
 800b676:	d056      	beq.n	800b726 <main+0x2a6>
 800b678:	f7f8 fdb4 	bl	80041e4 <vPortEnterCritical>
 800b67c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800b680:	4b46      	ldr	r3, [pc, #280]	; (800b79c <main+0x31c>)
 800b682:	6019      	str	r1, [r3, #0]
 800b684:	4b46      	ldr	r3, [pc, #280]	; (800b7a0 <main+0x320>)
 800b686:	601f      	str	r7, [r3, #0]
 800b688:	4b46      	ldr	r3, [pc, #280]	; (800b7a4 <main+0x324>)
 800b68a:	601c      	str	r4, [r3, #0]
 800b68c:	4b46      	ldr	r3, [pc, #280]	; (800b7a8 <main+0x328>)
 800b68e:	781a      	ldrb	r2, [r3, #0]
 800b690:	b2d2      	uxtb	r2, r2
 800b692:	9207      	str	r2, [sp, #28]
 800b694:	7019      	strb	r1, [r3, #0]
 800b696:	781b      	ldrb	r3, [r3, #0]
 800b698:	4a44      	ldr	r2, [pc, #272]	; (800b7ac <main+0x32c>)
 800b69a:	b2db      	uxtb	r3, r3
 800b69c:	f88d 3013 	strb.w	r3, [sp, #19]
 800b6a0:	f89d 3013 	ldrb.w	r3, [sp, #19]
 800b6a4:	f003 03bf 	and.w	r3, r3, #191	; 0xbf
 800b6a8:	7013      	strb	r3, [r2, #0]
 800b6aa:	2207      	movs	r2, #7
 800b6ac:	4b40      	ldr	r3, [pc, #256]	; (800b7b0 <main+0x330>)
 800b6ae:	601a      	str	r2, [r3, #0]
 800b6b0:	f89d 2013 	ldrb.w	r2, [sp, #19]
 800b6b4:	1e69      	subs	r1, r5, #1
 800b6b6:	0612      	lsls	r2, r2, #24
 800b6b8:	d42c      	bmi.n	800b714 <main+0x294>
 800b6ba:	b104      	cbz	r4, 800b6be <main+0x23e>
 800b6bc:	601d      	str	r5, [r3, #0]
 800b6be:	681a      	ldr	r2, [r3, #0]
 800b6c0:	0212      	lsls	r2, r2, #8
 800b6c2:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 800b6c6:	601a      	str	r2, [r3, #0]
 800b6c8:	9b07      	ldr	r3, [sp, #28]
 800b6ca:	4a37      	ldr	r2, [pc, #220]	; (800b7a8 <main+0x328>)
 800b6cc:	b2db      	uxtb	r3, r3
 800b6ce:	7013      	strb	r3, [r2, #0]
 800b6d0:	4b38      	ldr	r3, [pc, #224]	; (800b7b4 <main+0x334>)
 800b6d2:	681a      	ldr	r2, [r3, #0]
 800b6d4:	f442 027f 	orr.w	r2, r2, #16711680	; 0xff0000
 800b6d8:	601a      	str	r2, [r3, #0]
 800b6da:	681a      	ldr	r2, [r3, #0]
 800b6dc:	f042 427f 	orr.w	r2, r2, #4278190080	; 0xff000000
 800b6e0:	601a      	str	r2, [r3, #0]
 800b6e2:	f242 3228 	movw	r2, #9000	; 0x2328
 800b6e6:	4b34      	ldr	r3, [pc, #208]	; (800b7b8 <main+0x338>)
 800b6e8:	601a      	str	r2, [r3, #0]
 800b6ea:	f44f 62e9 	mov.w	r2, #1864	; 0x748
 800b6ee:	4b33      	ldr	r3, [pc, #204]	; (800b7bc <main+0x33c>)
 800b6f0:	601a      	str	r2, [r3, #0]
 800b6f2:	2205      	movs	r2, #5
 800b6f4:	4b32      	ldr	r3, [pc, #200]	; (800b7c0 <main+0x340>)
 800b6f6:	601a      	str	r2, [r3, #0]
 800b6f8:	f242 3227 	movw	r2, #8999	; 0x2327
 800b6fc:	4b31      	ldr	r3, [pc, #196]	; (800b7c4 <main+0x344>)
 800b6fe:	601a      	str	r2, [r3, #0]
 800b700:	2203      	movs	r2, #3
 800b702:	f843 2c04 	str.w	r2, [r3, #-4]
 800b706:	2200      	movs	r2, #0
 800b708:	4b2f      	ldr	r3, [pc, #188]	; (800b7c8 <main+0x348>)
 800b70a:	601a      	str	r2, [r3, #0]
 800b70c:	f7f8 fd7a 	bl	8004204 <prvPortStartFirstTask>
 800b710:	f7f8 fda8 	bl	8004264 <prvTaskExitError>
 800b714:	f89d 2013 	ldrb.w	r2, [sp, #19]
 800b718:	460d      	mov	r5, r1
 800b71a:	0052      	lsls	r2, r2, #1
 800b71c:	b2d2      	uxtb	r2, r2
 800b71e:	2401      	movs	r4, #1
 800b720:	f88d 2013 	strb.w	r2, [sp, #19]
 800b724:	e7c4      	b.n	800b6b0 <main+0x230>

    osalSysEnable();

    /* Does not happen */
    osalSysHalt("Return in main?");
 800b726:	f7f8 fe0b 	bl	8004340 <vTaskEndScheduler>
 800b72a:	e7fe      	b.n	800b72a <main+0x2aa>
 800b72c:	40021000 	.word	0x40021000
 800b730:	40007000 	.word	0x40007000
 800b734:	20001044 	.word	0x20001044
 800b738:	20000fe8 	.word	0x20000fe8
 800b73c:	0800c6c4 	.word	0x0800c6c4
 800b740:	40020000 	.word	0x40020000
 800b744:	20000934 	.word	0x20000934
 800b748:	40010800 	.word	0x40010800
 800b74c:	88888288 	.word	0x88888288
 800b750:	0800c73c 	.word	0x0800c73c
 800b754:	40005400 	.word	0x40005400
 800b758:	0800cb54 	.word	0x0800cb54
 800b75c:	200009bc 	.word	0x200009bc
 800b760:	08005c09 	.word	0x08005c09
 800b764:	20000ee0 	.word	0x20000ee0
 800b768:	40004800 	.word	0x40004800
 800b76c:	40013000 	.word	0x40013000
 800b770:	20000f54 	.word	0x20000f54
 800b774:	20000fdc 	.word	0x20000fdc
 800b778:	40003000 	.word	0x40003000
 800b77c:	0800cba4 	.word	0x0800cba4
 800b780:	0800944d 	.word	0x0800944d
 800b784:	0800c5c7 	.word	0x0800c5c7
 800b788:	08005bfd 	.word	0x08005bfd
 800b78c:	20001588 	.word	0x20001588
 800b790:	200013a8 	.word	0x200013a8
 800b794:	0800bffa 	.word	0x0800bffa
 800b798:	080087ed 	.word	0x080087ed
 800b79c:	200015f8 	.word	0x200015f8
 800b7a0:	20001614 	.word	0x20001614
 800b7a4:	20001648 	.word	0x20001648
 800b7a8:	e000e400 	.word	0xe000e400
 800b7ac:	20001340 	.word	0x20001340
 800b7b0:	20001344 	.word	0x20001344
 800b7b4:	e000ed20 	.word	0xe000ed20
 800b7b8:	20001350 	.word	0x20001350
 800b7bc:	200015f0 	.word	0x200015f0
 800b7c0:	20001348 	.word	0x20001348
 800b7c4:	e000e014 	.word	0xe000e014
 800b7c8:	20001358 	.word	0x20001358

0800b7cc <__early_init>:
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 800b7cc:	4b1c      	ldr	r3, [pc, #112]	; (800b840 <__early_init+0x74>)
 800b7ce:	681a      	ldr	r2, [r3, #0]
 800b7d0:	f042 0201 	orr.w	r2, r2, #1
 800b7d4:	601a      	str	r2, [r3, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
 800b7d6:	681a      	ldr	r2, [r3, #0]
 800b7d8:	0792      	lsls	r2, r2, #30
 800b7da:	d5fc      	bpl.n	800b7d6 <__early_init+0xa>
    ;                                       /* Wait until HSI is stable.    */
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 800b7dc:	681a      	ldr	r2, [r3, #0]
 800b7de:	f002 02f9 	and.w	r2, r2, #249	; 0xf9
 800b7e2:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 800b7e4:	2200      	movs	r2, #0
 800b7e6:	605a      	str	r2, [r3, #4]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 800b7e8:	685a      	ldr	r2, [r3, #4]
 800b7ea:	f012 0f0c 	tst.w	r2, #12
 800b7ee:	d1fb      	bne.n	800b7e8 <__early_init+0x1c>
#if defined(STM32_HSE_BYPASS)
  /* HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEON | RCC_CR_HSEBYP;
#endif
  /* HSE activation.*/
  RCC->CR |= RCC_CR_HSEON;
 800b7f0:	681a      	ldr	r2, [r3, #0]
 800b7f2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800b7f6:	601a      	str	r2, [r3, #0]
  while (!(RCC->CR & RCC_CR_HSERDY))
 800b7f8:	681a      	ldr	r2, [r3, #0]
 800b7fa:	0390      	lsls	r0, r2, #14
 800b7fc:	d5fc      	bpl.n	800b7f8 <__early_init+0x2c>
    ;                                       /* Waits until HSE is stable.   */
#endif

#if STM32_LSI_ENABLED
  /* LSI activation.*/
  RCC->CSR |= RCC_CSR_LSION;
 800b7fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b800:	f042 0201 	orr.w	r2, r2, #1
 800b804:	625a      	str	r2, [r3, #36]	; 0x24
  while ((RCC->CSR & RCC_CSR_LSIRDY) == 0)
 800b806:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b808:	0791      	lsls	r1, r2, #30
 800b80a:	d5fc      	bpl.n	800b806 <__early_init+0x3a>
    ;                                       /* Waits until LSI is stable.   */
#endif

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->CFGR |= STM32_PLLMUL | STM32_PLLXTPRE | STM32_PLLSRC;
 800b80c:	685a      	ldr	r2, [r3, #4]
 800b80e:	f442 12f8 	orr.w	r2, r2, #2031616	; 0x1f0000
 800b812:	605a      	str	r2, [r3, #4]
  RCC->CR   |= RCC_CR_PLLON;
 800b814:	681a      	ldr	r2, [r3, #0]
 800b816:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800b81a:	601a      	str	r2, [r3, #0]
  while (!(RCC->CR & RCC_CR_PLLRDY))
 800b81c:	681a      	ldr	r2, [r3, #0]
 800b81e:	0192      	lsls	r2, r2, #6
 800b820:	d5fc      	bpl.n	800b81c <__early_init+0x50>
              STM32_PLLSRC | STM32_ADCPRE | STM32_PPRE2  | STM32_PPRE1    |
              STM32_HPRE;
#endif

  /* Flash setup and final clock selection.   */
  FLASH->ACR = STM32_FLASHBITS;
 800b822:	2112      	movs	r1, #18
  RCC->CFGR = STM32_MCOSEL | STM32_USBPRE | STM32_PLLMUL | STM32_PLLXTPRE |
 800b824:	4a07      	ldr	r2, [pc, #28]	; (800b844 <__early_init+0x78>)
 800b826:	605a      	str	r2, [r3, #4]
  FLASH->ACR = STM32_FLASHBITS;
 800b828:	4a07      	ldr	r2, [pc, #28]	; (800b848 <__early_init+0x7c>)
 800b82a:	6011      	str	r1, [r2, #0]

  /* Switching to the configured clock source if it is different from HSI.*/
#if (STM32_SW != STM32_SW_HSI)
  /* Switches clock source.*/
  RCC->CFGR |= STM32_SW;
 800b82c:	685a      	ldr	r2, [r3, #4]
 800b82e:	f042 0202 	orr.w	r2, r2, #2
 800b832:	605a      	str	r2, [r3, #4]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 800b834:	685a      	ldr	r2, [r3, #4]
 800b836:	f002 020c 	and.w	r2, r2, #12
 800b83a:	2a08      	cmp	r2, #8
 800b83c:	d1fa      	bne.n	800b834 <__early_init+0x68>
}
 800b83e:	4770      	bx	lr
 800b840:	40021000 	.word	0x40021000
 800b844:	001f6400 	.word	0x001f6400
 800b848:	40022000 	.word	0x40022000

0800b84c <__init_ram_areas>:
}

/**
 * @brief   Performs the initialization of the various RAM areas.
 */
void __init_ram_areas(void) {
 800b84c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b84e:	2008      	movs	r0, #8
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
      *p = 0;
 800b850:	2600      	movs	r6, #0
  const ram_init_area_t *rap = ram_areas;
 800b852:	4910      	ldr	r1, [pc, #64]	; (800b894 <__init_ram_areas+0x48>)
    while (p < rap->clear_area) {
 800b854:	e9d1 3401 	ldrd	r3, r4, [r1, #4]
    uint32_t *p = rap->init_area;
 800b858:	461d      	mov	r5, r3
 800b85a:	680a      	ldr	r2, [r1, #0]
 800b85c:	3a04      	subs	r2, #4
    while (p < rap->clear_area) {
 800b85e:	42ac      	cmp	r4, r5
 800b860:	d810      	bhi.n	800b884 <__init_ram_areas+0x38>
 800b862:	1ce2      	adds	r2, r4, #3
 800b864:	1ad2      	subs	r2, r2, r3
 800b866:	1edd      	subs	r5, r3, #3
 800b868:	f022 0203 	bic.w	r2, r2, #3
 800b86c:	42ac      	cmp	r4, r5
 800b86e:	bf38      	it	cc
 800b870:	2200      	movcc	r2, #0
 800b872:	4413      	add	r3, r2
    while (p < rap->no_init_area) {
 800b874:	68ca      	ldr	r2, [r1, #12]
 800b876:	429a      	cmp	r2, r3
 800b878:	d809      	bhi.n	800b88e <__init_ram_areas+0x42>
      p++;
    }
    rap++;
  }
  while (rap < &ram_areas[CRT1_AREAS_NUMBER]);
 800b87a:	3801      	subs	r0, #1
    rap++;
 800b87c:	f101 0110 	add.w	r1, r1, #16
  while (rap < &ram_areas[CRT1_AREAS_NUMBER]);
 800b880:	d1e8      	bne.n	800b854 <__init_ram_areas+0x8>
#endif
}
 800b882:	bdf0      	pop	{r4, r5, r6, r7, pc}
      *p = *tp;
 800b884:	f852 7f04 	ldr.w	r7, [r2, #4]!
 800b888:	f845 7b04 	str.w	r7, [r5], #4
      tp++;
 800b88c:	e7e7      	b.n	800b85e <__init_ram_areas+0x12>
      *p = 0;
 800b88e:	f843 6b04 	str.w	r6, [r3], #4
      p++;
 800b892:	e7f0      	b.n	800b876 <__init_ram_areas+0x2a>
 800b894:	0800c940 	.word	0x0800c940

0800b898 <__default_exit>:
  while (true) {
 800b898:	e7fe      	b.n	800b898 <__default_exit>

0800b89a <__late_init>:
 800b89a:	4770      	bx	lr

0800b89c <__core_init>:
}
 800b89c:	4770      	bx	lr
